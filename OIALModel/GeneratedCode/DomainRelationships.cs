#region Common Public License Copyright Notice
/**************************************************************************\
* Neumont Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship OIALModelHasORMModel
	/// Description for Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7b04b2c6-4dfe-45e7-a7df-bea7abf36e77")]
	public partial class OIALModelHasORMModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OIALModelHasORMModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7b04b2c6, 0x4dfe, 0x45e7, 0xa7, 0xdf, 0xbe, 0xa7, 0xab, 0xf3, 0x6e, 0x77);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OIALModelHasORMModel link in the same Partition as the given OIALModel
		/// </summary>
		/// <param name="source">OIALModel to use as the source of the relationship.</param>
		/// <param name="target">ORMModel to use as the target of the relationship.</param>
		public OIALModelHasORMModel(OIALModel source, global::Neumont.Tools.ORM.ObjectModel.ORMModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OIALModelHasORMModel.OIALModelDomainRoleId, source), new DslModeling::RoleAssignment(OIALModelHasORMModel.ORMModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OIALModelHasORMModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OIALModelHasORMModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OIALModelHasORMModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OIALModelHasORMModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region OIALModel domain role code
		
		/// <summary>
		/// OIALModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid OIALModelDomainRoleId = new global::System.Guid(0x9069d6bd, 0x0771, 0x463a, 0xb9, 0xcb, 0x2c, 0x40, 0x37, 0x2c, 0x53, 0xd7);
		
		/// <summary>
		/// DomainRole OIALModel
		/// Description for Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.OIALModel
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel/OIALModel.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel/OIALModel.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ORMModel", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel/OIALModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9069d6bd-0771-463a-b9cb-2c40372c53d7")]
		public virtual OIALModel OIALModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (OIALModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, OIALModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OIALModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OIALModel of a ORMModel
		/// <summary>
		/// Gets OIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static OIALModel GetOIALModel(global::Neumont.Tools.ORM.ObjectModel.ORMModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ORMModelDomainRoleId) as OIALModel;
		}
		
		/// <summary>
		/// Sets OIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOIALModel(global::Neumont.Tools.ORM.ObjectModel.ORMModel element, OIALModel newOIALModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ORMModelDomainRoleId, newOIALModel);
		}
		#endregion
		#region ORMModel domain role code
		
		/// <summary>
		/// ORMModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ORMModelDomainRoleId = new global::System.Guid(0xce948d50, 0xa437, 0x4172, 0xb1, 0x6c, 0x74, 0xeb, 0x8e, 0x59, 0xe9, 0xb5);
		
		/// <summary>
		/// DomainRole ORMModel
		/// Description for Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.ORMModel
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel/ORMModel.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel/ORMModel.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "OIALModel", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel/ORMModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ce948d50-a437-4172-b16c-74eb8e59e9b5")]
		public virtual global::Neumont.Tools.ORM.ObjectModel.ORMModel ORMModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.ORM.ObjectModel.ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ORMModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ORMModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ORMModel of a OIALModel
		/// <summary>
		/// Gets ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ORMModel GetORMModel(OIALModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OIALModelDomainRoleId) as global::Neumont.Tools.ORM.ObjectModel.ORMModel;
		}
		
		/// <summary>
		/// Sets ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetORMModel(OIALModel element, global::Neumont.Tools.ORM.ObjectModel.ORMModel newORMModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OIALModelDomainRoleId, newORMModel);
		}
		#endregion
		#region OIALModel link accessor
		/// <summary>
		/// Get the OIALModelHasORMModel link to a OIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel GetLinkToORMModel (global::Neumont.Tools.ORM.OIALModel.OIALModel oIALModelInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel>(oIALModelInstance, global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.OIALModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of OIALModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ORMModel link accessor
		/// <summary>
		/// Get the OIALModelHasORMModel link to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel GetLinkToOIALModel (global::Neumont.Tools.ORM.ObjectModel.ORMModel oRMModelInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel>(oRMModelInstance, global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.ORMModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ORMModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OIALModelHasORMModel instance accessors
		
		/// <summary>
		/// Get any OIALModelHasORMModel links between a given OIALModel and a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel> GetLinks( global::Neumont.Tools.ORM.OIALModel.OIALModel source, global::Neumont.Tools.ORM.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel>(source, global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.OIALModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one OIALModelHasORMModel link between a given OIALModeland a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel GetLink( global::Neumont.Tools.ORM.OIALModel.OIALModel source, global::Neumont.Tools.ORM.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel>(source, global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.OIALModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship OIALModelHasConceptType
	/// Description for Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d82d29a8-a4ee-4650-aa33-0aa10dbb5352")]
	public partial class OIALModelHasConceptType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OIALModelHasConceptType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd82d29a8, 0xa4ee, 0x4650, 0xaa, 0x33, 0x0a, 0xa1, 0x0d, 0xbb, 0x53, 0x52);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OIALModelHasConceptType link in the same Partition as the given OIALModel
		/// </summary>
		/// <param name="source">OIALModel to use as the source of the relationship.</param>
		/// <param name="target">ConceptType to use as the target of the relationship.</param>
		public OIALModelHasConceptType(OIALModel source, ConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OIALModelHasConceptType.ModelDomainRoleId, source), new DslModeling::RoleAssignment(OIALModelHasConceptType.ConceptTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OIALModelHasConceptType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OIALModelHasConceptType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OIALModelHasConceptType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OIALModelHasConceptType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x362a25d7, 0xb320, 0x47ed, 0xbc, 0x01, 0xfe, 0x7b, 0x2b, 0xb7, 0xba, 0x83);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType/Model.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType/Model.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConceptTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("362a25d7-b320-47ed-bc01-fe7b2bb7ba83")]
		public virtual OIALModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (OIALModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ConceptType
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static OIALModel GetModel(ConceptType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConceptTypeDomainRoleId) as OIALModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ConceptType element, OIALModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConceptTypeDomainRoleId, newModel);
		}
		#endregion
		#region ConceptType domain role code
		
		/// <summary>
		/// ConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeDomainRoleId = new global::System.Guid(0xd2b0dfd2, 0xea25, 0x4cbb, 0x98, 0x84, 0x8a, 0xe4, 0xc6, 0xfc, 0x74, 0x10);
		
		/// <summary>
		/// DomainRole ConceptType
		/// Description for Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType/ConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType/ConceptType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType/ConceptType.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d2b0dfd2-ea25-4cbb-9884-8ae4c6fc7410")]
		public virtual ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptTypeCollection of a OIALModel
		/// <summary>
		/// Gets a list of ConceptTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptType> GetConceptTypeCollection(OIALModel element)
		{
			return new DslModeling::LinkedElementCollection<ConceptType>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of OIALModelHasConceptType links to a OIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType> GetLinksToConceptTypeCollection ( global::Neumont.Tools.ORM.OIALModel.OIALModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType>(modelInstance, global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ModelDomainRoleId);
		}
		#endregion
		#region ConceptType link accessor
		/// <summary>
		/// Get the OIALModelHasConceptType link to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType GetLinkToModel (global::Neumont.Tools.ORM.OIALModel.ConceptType conceptTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType>(conceptTypeInstance, global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ConceptTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConceptType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OIALModelHasConceptType instance accessors
		
		/// <summary>
		/// Get any OIALModelHasConceptType links between a given OIALModel and a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType> GetLinks( global::Neumont.Tools.ORM.OIALModel.OIALModel source, global::Neumont.Tools.ORM.OIALModel.ConceptType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType>(source, global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one OIALModelHasConceptType link between a given OIALModeland a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType GetLink( global::Neumont.Tools.ORM.OIALModel.OIALModel source, global::Neumont.Tools.ORM.OIALModel.ConceptType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType>(source, global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship ConceptTypeHasChild
	/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("7acc3b69-dc50-4e97-897f-a25c4dd39e48")]
	public abstract partial class ConceptTypeHasChild : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeHasChild domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7acc3b69, 0xdc50, 0x4e97, 0x89, 0x7f, 0xa2, 0x5c, 0x4d, 0xd3, 0x9e, 0x48);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected ConceptTypeHasChild(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0x186c90d1, 0x9393, 0x4093, 0xab, 0x9f, 0x4a, 0x8b, 0x97, 0x9d, 0x32, 0xed);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild/Parent.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild/Parent.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild/Parent.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("186c90d1-9393-4093-ab9f-4a8b979d32ed")]
		public abstract ConceptType Parent
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Parent of a ParentableType
		/// <summary>
		/// Gets a list of Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ConceptType> GetParent(ParentableType element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ConceptType>(element, ChildDomainRoleId);
		}
		#endregion
		#region Child domain role code
		
		/// <summary>
		/// Child domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildDomainRoleId = new global::System.Guid(0x7be85312, 0x15f4, 0x447b, 0xa5, 0x3c, 0xbf, 0xbb, 0xa2, 0xed, 0x03, 0xba);
		
		/// <summary>
		/// DomainRole Child
		/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.Child
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild/Child.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild/Child.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild/Child.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7be85312-15f4-447b-a53c-bfbba2ed03ba")]
		public abstract ParentableType Child
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ChildCollection of a ConceptType
		/// <summary>
		/// Gets a list of ChildCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ParentableType> GetChildCollection(ConceptType element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ParentableType>(element, ParentDomainRoleId);
		}
		#endregion
		#region Mandatory domain property code
		
		/// <summary>
		/// Mandatory domain property Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryDomainPropertyId = new global::System.Guid(0x15e5a8f5, 0xbdb7, 0x44db, 0x80, 0xe0, 0xf5, 0xd4, 0x58, 0x72, 0xb8, 0xf6);
		
		/// <summary>
		/// Storage for Mandatory
		/// </summary>
		private MandatoryConstraintModality mandatoryPropertyStorage = Neumont.Tools.ORM.OIALModel.MandatoryConstraintModality.NotMandatory;
		
		/// <summary>
		/// Gets or sets the value of Mandatory domain property.
		/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.Mandatory
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild/Mandatory.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild/Mandatory.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Neumont.Tools.ORM.OIALModel.MandatoryConstraintModality.NotMandatory)]
		[DslModeling::DomainObjectId("15e5a8f5-bdb7-44db-80e0-f5d45872b8f6")]
		public MandatoryConstraintModality Mandatory
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return mandatoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MandatoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConceptTypeHasChild.Mandatory domain property.
		/// </summary>
		internal sealed partial class MandatoryPropertyHandler : DslModeling::DomainPropertyValueHandler<ConceptTypeHasChild, MandatoryConstraintModality>
		{
			private MandatoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConceptTypeHasChild.Mandatory domain property value handler.
			/// </summary>
			public static readonly MandatoryPropertyHandler Instance = new MandatoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConceptTypeHasChild.Mandatory domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MandatoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed MandatoryConstraintModality GetValue(ConceptTypeHasChild element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.mandatoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConceptTypeHasChild element, MandatoryConstraintModality newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				MandatoryConstraintModality oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.mandatoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region PathRoleCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of PathRoleCollection.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.ConceptTypeHasChild
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<global::Neumont.Tools.ORM.ObjectModel.RoleBase> PathRoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<global::Neumont.Tools.ORM.ObjectModel.RoleBase>(this, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.ConceptTypeHasChildDomainRoleId);
			}
		}
		#endregion
		#region SingleChildConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of SingleChildConstraintCollection.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.ConceptTypeHasChild
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SingleChildConstraint> SingleChildConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<SingleChildConstraint>(this, global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.ConceptTypeHasChildDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of ConceptTypeHasChild links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild> GetLinksToChildCollection ( global::Neumont.Tools.ORM.OIALModel.ConceptType parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild>(parentInstance, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.ParentDomainRoleId);
		}
		#endregion
		#region Child link accessor
		/// <summary>
		/// Get the list of ConceptTypeHasChild links to a ParentableType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild> GetLinksToParent ( global::Neumont.Tools.ORM.OIALModel.ParentableType childInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild>(childInstance, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.ChildDomainRoleId);
		}
		#endregion
		#region ConceptTypeHasChild instance accessors
		
		/// <summary>
		/// Get any ConceptTypeHasChild links between a given ConceptType and a ParentableType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild> GetLinks( global::Neumont.Tools.ORM.OIALModel.ConceptType source, global::Neumont.Tools.ORM.OIALModel.ParentableType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild>(source, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.ParentDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild link in links )
			{
				if ( target.Equals(link.Child) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship ConceptTypeAbsorbedConceptType
	/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("91a27060-1738-419b-9b52-afd3d924e1ca")]
	public partial class ConceptTypeAbsorbedConceptType : ConceptTypeHasChild
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeAbsorbedConceptType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x91a27060, 0x1738, 0x419b, 0x9b, 0x52, 0xaf, 0xd3, 0xd9, 0x24, 0xe1, 0xca);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptTypeAbsorbedConceptType link in the same Partition as the given ConceptType
		/// </summary>
		/// <param name="source">ConceptType to use as the source of the relationship.</param>
		/// <param name="target">ConceptType to use as the target of the relationship.</param>
		public ConceptTypeAbsorbedConceptType(ConceptType source, ConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptTypeAbsorbedConceptType.AbsorbingConceptTypeDomainRoleId, source), new DslModeling::RoleAssignment(ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeAbsorbedConceptType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeAbsorbedConceptType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeAbsorbedConceptType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeAbsorbedConceptType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AbsorbingConceptType domain role code
		
		/// <summary>
		/// AbsorbingConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbsorbingConceptTypeDomainRoleId = new global::System.Guid(0x192ef6b2, 0x48a9, 0x4222, 0x9d, 0x7e, 0x32, 0x1b, 0x2f, 0x44, 0x6c, 0x06);
		
		/// <summary>
		/// DomainRole AbsorbingConceptType
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType/AbsorbingConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType/AbsorbingConceptType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AbsorbedConceptTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType/AbsorbingConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("192ef6b2-48a9-4222-9d7e-321b2f446c06")]
		public virtual ConceptType AbsorbingConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbsorbingConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbsorbingConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AbsorbingConceptType of a ConceptType
		/// <summary>
		/// Gets AbsorbingConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConceptType GetAbsorbingConceptType(ConceptType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AbsorbedConceptTypeDomainRoleId) as ConceptType;
		}
		
		/// <summary>
		/// Sets AbsorbingConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAbsorbingConceptType(ConceptType element, ConceptType newAbsorbingConceptType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AbsorbedConceptTypeDomainRoleId, newAbsorbingConceptType);
		}
		#endregion
		#region Parent domain role override
		
		/// <summary>
		/// Gets the element playing AbsorbingConceptType domain role.
		/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.Parent
		/// </summary>
		public override ConceptType Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.AbsorbingConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.AbsorbingConceptType = value;
			}
		}
		
		#endregion
		#region AbsorbedConceptType domain role code
		
		/// <summary>
		/// AbsorbedConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbsorbedConceptTypeDomainRoleId = new global::System.Guid(0x1b266d6c, 0x99c0, 0x466b, 0x8f, 0x34, 0x8f, 0xfe, 0xef, 0x56, 0xdd, 0xf7);
		
		/// <summary>
		/// DomainRole AbsorbedConceptType
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType/AbsorbedConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType/AbsorbedConceptType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AbsorbingConceptType", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType/AbsorbedConceptType.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1b266d6c-99c0-466b-8f34-8ffeef56ddf7")]
		public virtual ConceptType AbsorbedConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbsorbedConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbsorbedConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AbsorbedConceptTypeCollection of a ConceptType
		/// <summary>
		/// Gets a list of AbsorbedConceptTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptType> GetAbsorbedConceptTypeCollection(ConceptType element)
		{
			return new DslModeling::LinkedElementCollection<ConceptType>(element, AbsorbingConceptTypeDomainRoleId);
		}
		#endregion
		#region Child domain role override
		
		/// <summary>
		/// Gets the element playing AbsorbedConceptType domain role.
		/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.Child
		/// </summary>
		public override ParentableType Child
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.AbsorbedConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.AbsorbedConceptType = (ConceptType)value;
			}
		}
		
		#endregion
		#region AbsorbingConceptType link accessor
		/// <summary>
		/// Get the list of ConceptTypeAbsorbedConceptType links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType> GetLinksToAbsorbedConceptTypeCollection ( global::Neumont.Tools.ORM.OIALModel.ConceptType absorbingConceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType>(absorbingConceptTypeInstance, global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptTypeDomainRoleId);
		}
		#endregion
		#region AbsorbedConceptType link accessor
		/// <summary>
		/// Get the ConceptTypeAbsorbedConceptType link to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType GetLinkToAbsorbingConceptType (global::Neumont.Tools.ORM.OIALModel.ConceptType absorbedConceptTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType>(absorbedConceptTypeInstance, global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AbsorbedConceptType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptTypeAbsorbedConceptType instance accessors
		
		/// <summary>
		/// Get any ConceptTypeAbsorbedConceptType links between a given ConceptType and a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType> GetLinks( global::Neumont.Tools.ORM.OIALModel.ConceptType source, global::Neumont.Tools.ORM.OIALModel.ConceptType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType>(source, global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType link in links )
			{
				if ( target.Equals(link.AbsorbedConceptType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConceptTypeAbsorbedConceptType link between a given ConceptTypeand a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType GetLink( global::Neumont.Tools.ORM.OIALModel.ConceptType source, global::Neumont.Tools.ORM.OIALModel.ConceptType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType>(source, global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType link in links )
			{
				if ( target.Equals(link.AbsorbedConceptType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship ConceptTypeHasInformationType
	/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("afd486da-57a4-4a81-865a-cc563f86f733")]
	public partial class ConceptTypeHasInformationType : ConceptTypeHasChild
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeHasInformationType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xafd486da, 0x57a4, 0x4a81, 0x86, 0x5a, 0xcc, 0x56, 0x3f, 0x86, 0xf7, 0x33);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptTypeHasInformationType link in the same Partition as the given ConceptType
		/// </summary>
		/// <param name="source">ConceptType to use as the source of the relationship.</param>
		/// <param name="target">InformationType to use as the target of the relationship.</param>
		public ConceptTypeHasInformationType(ConceptType source, InformationType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptTypeHasInformationType.ConceptTypeDomainRoleId, source), new DslModeling::RoleAssignment(ConceptTypeHasInformationType.InformationTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeHasInformationType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeHasInformationType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeHasInformationType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeHasInformationType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConceptType domain role code
		
		/// <summary>
		/// ConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeDomainRoleId = new global::System.Guid(0xfe66ef7b, 0xd877, 0x4633, 0xae, 0x3c, 0x50, 0x1b, 0x68, 0x2f, 0xab, 0xdb);
		
		/// <summary>
		/// DomainRole ConceptType
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.ConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType/ConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType/ConceptType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InformationTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType/ConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fe66ef7b-d877-4633-ae3c-501b682fabdb")]
		public virtual ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptType of a InformationType
		/// <summary>
		/// Gets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConceptType GetConceptType(InformationType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InformationTypeDomainRoleId) as ConceptType;
		}
		
		/// <summary>
		/// Sets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConceptType(InformationType element, ConceptType newConceptType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InformationTypeDomainRoleId, newConceptType);
		}
		#endregion
		#region Parent domain role override
		
		/// <summary>
		/// Gets the element playing ConceptType domain role.
		/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.Parent
		/// </summary>
		public override ConceptType Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ConceptType = value;
			}
		}
		
		#endregion
		#region InformationType domain role code
		
		/// <summary>
		/// InformationType domain role Id.
		/// </summary>
		public static readonly global::System.Guid InformationTypeDomainRoleId = new global::System.Guid(0x53308cb9, 0x6672, 0x4c19, 0xa5, 0xe9, 0x6f, 0x07, 0xbc, 0x44, 0x9c, 0x2f);
		
		/// <summary>
		/// DomainRole InformationType
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.InformationType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType/InformationType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType/InformationType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConceptType", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType/InformationType.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("53308cb9-6672-4c19-a5e9-6f07bc449c2f")]
		public virtual InformationType InformationType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InformationType)DslModeling::DomainRoleInfo.GetRolePlayer(this, InformationTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InformationTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InformationTypeCollection of a ConceptType
		/// <summary>
		/// Gets a list of InformationTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InformationType> GetInformationTypeCollection(ConceptType element)
		{
			return new DslModeling::LinkedElementCollection<InformationType>(element, ConceptTypeDomainRoleId);
		}
		#endregion
		#region Child domain role override
		
		/// <summary>
		/// Gets the element playing InformationType domain role.
		/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.Child
		/// </summary>
		public override ParentableType Child
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.InformationType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.InformationType = (InformationType)value;
			}
		}
		
		#endregion
		#region ConceptType link accessor
		/// <summary>
		/// Get the list of ConceptTypeHasInformationType links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType> GetLinksToInformationTypeCollection ( global::Neumont.Tools.ORM.OIALModel.ConceptType conceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType>(conceptTypeInstance, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.ConceptTypeDomainRoleId);
		}
		#endregion
		#region InformationType link accessor
		/// <summary>
		/// Get the ConceptTypeHasInformationType link to a InformationType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType GetLinkToConceptType (global::Neumont.Tools.ORM.OIALModel.InformationType informationTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType>(informationTypeInstance, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.InformationTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InformationType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptTypeHasInformationType instance accessors
		
		/// <summary>
		/// Get any ConceptTypeHasInformationType links between a given ConceptType and a InformationType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType> GetLinks( global::Neumont.Tools.ORM.OIALModel.ConceptType source, global::Neumont.Tools.ORM.OIALModel.InformationType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType>(source, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.ConceptTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType link in links )
			{
				if ( target.Equals(link.InformationType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConceptTypeHasInformationType link between a given ConceptTypeand a InformationType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType GetLink( global::Neumont.Tools.ORM.OIALModel.ConceptType source, global::Neumont.Tools.ORM.OIALModel.InformationType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType>(source, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.ConceptTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType link in links )
			{
				if ( target.Equals(link.InformationType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship OIALHasInformationTypeFormat
	/// Description for Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6bca5356-4932-4490-bc12-ed881be0c079")]
	public partial class OIALHasInformationTypeFormat : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OIALHasInformationTypeFormat domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6bca5356, 0x4932, 0x4490, 0xbc, 0x12, 0xed, 0x88, 0x1b, 0xe0, 0xc0, 0x79);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OIALHasInformationTypeFormat link in the same Partition as the given OIALModel
		/// </summary>
		/// <param name="source">OIALModel to use as the source of the relationship.</param>
		/// <param name="target">InformationTypeFormat to use as the target of the relationship.</param>
		public OIALHasInformationTypeFormat(OIALModel source, InformationTypeFormat target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OIALHasInformationTypeFormat.ModelDomainRoleId, source), new DslModeling::RoleAssignment(OIALHasInformationTypeFormat.InformationTypeFormatDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OIALHasInformationTypeFormat(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OIALHasInformationTypeFormat(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OIALHasInformationTypeFormat(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OIALHasInformationTypeFormat(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x1d539d42, 0xe9bb, 0x41ed, 0xa3, 0x88, 0x63, 0xdf, 0xcd, 0x3a, 0x35, 0x27);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat/Model.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat/Model.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InformationTypeFormatCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1d539d42-e9bb-41ed-a388-63dfcd3a3527")]
		public virtual OIALModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (OIALModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a InformationTypeFormat
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static OIALModel GetModel(InformationTypeFormat element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InformationTypeFormatDomainRoleId) as OIALModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(InformationTypeFormat element, OIALModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InformationTypeFormatDomainRoleId, newModel);
		}
		#endregion
		#region InformationTypeFormat domain role code
		
		/// <summary>
		/// InformationTypeFormat domain role Id.
		/// </summary>
		public static readonly global::System.Guid InformationTypeFormatDomainRoleId = new global::System.Guid(0x3735feb2, 0xcd83, 0x4a71, 0xb4, 0xf1, 0x87, 0x12, 0x66, 0x97, 0x6b, 0xf2);
		
		/// <summary>
		/// DomainRole InformationTypeFormat
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.InformationTypeFormat
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat/InformationTypeFormat.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat/InformationTypeFormat.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat/InformationTypeFormat.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3735feb2-cd83-4a71-b4f1-871266976bf2")]
		public virtual InformationTypeFormat InformationTypeFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InformationTypeFormat)DslModeling::DomainRoleInfo.GetRolePlayer(this, InformationTypeFormatDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InformationTypeFormatDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InformationTypeFormatCollection of a OIALModel
		/// <summary>
		/// Gets a list of InformationTypeFormatCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InformationTypeFormat> GetInformationTypeFormatCollection(OIALModel element)
		{
			return new DslModeling::LinkedElementCollection<InformationTypeFormat>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of OIALHasInformationTypeFormat links to a OIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat> GetLinksToInformationTypeFormatCollection ( global::Neumont.Tools.ORM.OIALModel.OIALModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat>(modelInstance, global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.ModelDomainRoleId);
		}
		#endregion
		#region InformationTypeFormat link accessor
		/// <summary>
		/// Get the OIALHasInformationTypeFormat link to a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat GetLinkToModel (global::Neumont.Tools.ORM.OIALModel.InformationTypeFormat informationTypeFormatInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat>(informationTypeFormatInstance, global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.InformationTypeFormatDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InformationTypeFormat not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OIALHasInformationTypeFormat instance accessors
		
		/// <summary>
		/// Get any OIALHasInformationTypeFormat links between a given OIALModel and a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat> GetLinks( global::Neumont.Tools.ORM.OIALModel.OIALModel source, global::Neumont.Tools.ORM.OIALModel.InformationTypeFormat target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat>(source, global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one OIALHasInformationTypeFormat link between a given OIALModeland a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat GetLink( global::Neumont.Tools.ORM.OIALModel.OIALModel source, global::Neumont.Tools.ORM.OIALModel.InformationTypeFormat target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat>(source, global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship ConceptTypeRef
	/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeRef
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeRef.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeRef.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("8ee4ca1c-f47e-49e8-b732-c33da9e56fc7")]
	public partial class ConceptTypeRef : ConceptTypeHasChild
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeRef domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8ee4ca1c, 0xf47e, 0x49e8, 0xb7, 0x32, 0xc3, 0x3d, 0xa9, 0xe5, 0x6f, 0xc7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptTypeRef link in the same Partition as the given ConceptType
		/// </summary>
		/// <param name="source">ConceptType to use as the source of the relationship.</param>
		/// <param name="target">ConceptType to use as the target of the relationship.</param>
		public ConceptTypeRef(ConceptType source, ConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptTypeRef.ReferencingConceptTypeDomainRoleId, source), new DslModeling::RoleAssignment(ConceptTypeRef.ReferencedConceptTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeRef(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeRef(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeRef(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeRef(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ReferencingConceptType domain role code
		
		/// <summary>
		/// ReferencingConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferencingConceptTypeDomainRoleId = new global::System.Guid(0x6a7bf5fe, 0x205a, 0x4114, 0xa6, 0x9b, 0xf6, 0x67, 0x64, 0xbe, 0xf6, 0xe9);
		
		/// <summary>
		/// DomainRole ReferencingConceptType
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ReferencingConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeRef/ReferencingConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeRef/ReferencingConceptType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferencedConceptTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ConceptTypeRef/ReferencingConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6a7bf5fe-205a-4114-a69b-f66764bef6e9")]
		public virtual ConceptType ReferencingConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferencingConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferencingConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferencingConceptType of a ConceptType
		/// <summary>
		/// Gets a list of ReferencingConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptType> GetReferencingConceptType(ConceptType element)
		{
			return new DslModeling::LinkedElementCollection<ConceptType>(element, ReferencedConceptTypeDomainRoleId);
		}
		#endregion
		#region Parent domain role override
		
		/// <summary>
		/// Gets the element playing ReferencingConceptType domain role.
		/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.Parent
		/// </summary>
		public override ConceptType Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ReferencingConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ReferencingConceptType = value;
			}
		}
		
		#endregion
		#region ReferencedConceptType domain role code
		
		/// <summary>
		/// ReferencedConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferencedConceptTypeDomainRoleId = new global::System.Guid(0xfe87c3db, 0xa84d, 0x414f, 0xbd, 0x9f, 0xe2, 0xe4, 0x5a, 0x25, 0xaa, 0xba);
		
		/// <summary>
		/// DomainRole ReferencedConceptType
		/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ReferencedConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeRef/ReferencedConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeRef/ReferencedConceptType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferencingConceptType", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ConceptTypeRef/ReferencedConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fe87c3db-a84d-414f-bd9f-e2e45a25aaba")]
		public virtual ConceptType ReferencedConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferencedConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferencedConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferencedConceptTypeCollection of a ConceptType
		/// <summary>
		/// Gets a list of ReferencedConceptTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptType> GetReferencedConceptTypeCollection(ConceptType element)
		{
			return new DslModeling::LinkedElementCollection<ConceptType>(element, ReferencingConceptTypeDomainRoleId);
		}
		#endregion
		#region Child domain role override
		
		/// <summary>
		/// Gets the element playing ReferencedConceptType domain role.
		/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.Child
		/// </summary>
		public override ParentableType Child
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ReferencedConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ReferencedConceptType = (ConceptType)value;
			}
		}
		
		#endregion
		#region OppositeName domain property code
		
		/// <summary>
		/// OppositeName domain property Id.
		/// </summary>
		public static readonly global::System.Guid OppositeNameDomainPropertyId = new global::System.Guid(0xed2a412d, 0x8d2b, 0x4819, 0x94, 0xeb, 0x8f, 0x8a, 0xa6, 0x74, 0x56, 0x74);
		
		/// <summary>
		/// Storage for OppositeName
		/// </summary>
		private global::System.String oppositeNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of OppositeName domain property.
		/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeRef.OppositeName
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeRef/OppositeName.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeRef/OppositeName.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ed2a412d-8d2b-4819-94eb-8f8aa6745674")]
		public global::System.String OppositeName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return oppositeNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OppositeNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConceptTypeRef.OppositeName domain property.
		/// </summary>
		internal sealed partial class OppositeNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ConceptTypeRef, global::System.String>
		{
			private OppositeNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConceptTypeRef.OppositeName domain property value handler.
			/// </summary>
			public static readonly OppositeNamePropertyHandler Instance = new OppositeNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConceptTypeRef.OppositeName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OppositeNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConceptTypeRef element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.oppositeNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConceptTypeRef element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.oppositeNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReferencingConceptType link accessor
		/// <summary>
		/// Get the list of ConceptTypeRef links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ConceptTypeRef> GetLinksToReferencedConceptTypeCollection ( global::Neumont.Tools.ORM.OIALModel.ConceptType referencingConceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeRef>(referencingConceptTypeInstance, global::Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ReferencingConceptTypeDomainRoleId);
		}
		#endregion
		#region ReferencedConceptType link accessor
		/// <summary>
		/// Get the list of ConceptTypeRef links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ConceptTypeRef> GetLinksToReferencingConceptType ( global::Neumont.Tools.ORM.OIALModel.ConceptType referencedConceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeRef>(referencedConceptTypeInstance, global::Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ReferencedConceptTypeDomainRoleId);
		}
		#endregion
		#region ConceptTypeRef instance accessors
		
		/// <summary>
		/// Get any ConceptTypeRef links between a given ConceptType and a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ConceptTypeRef> GetLinks( global::Neumont.Tools.ORM.OIALModel.ConceptType source, global::Neumont.Tools.ORM.OIALModel.ConceptType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ConceptTypeRef> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ConceptTypeRef>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ConceptTypeRef> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeRef>(source, global::Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ReferencingConceptTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.ConceptTypeRef link in links )
			{
				if ( target.Equals(link.ReferencedConceptType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship InformationTypeHasInformationTypeFormat
	/// Description for
	/// Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d70b7396-f7cc-40a2-a062-de8a6c864b83")]
	public partial class InformationTypeHasInformationTypeFormat : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InformationTypeHasInformationTypeFormat domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd70b7396, 0xf7cc, 0x40a2, 0xa0, 0x62, 0xde, 0x8a, 0x6c, 0x86, 0x4b, 0x83);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InformationTypeHasInformationTypeFormat link in the same Partition as the given InformationType
		/// </summary>
		/// <param name="source">InformationType to use as the source of the relationship.</param>
		/// <param name="target">InformationTypeFormat to use as the target of the relationship.</param>
		public InformationTypeHasInformationTypeFormat(InformationType source, InformationTypeFormat target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InformationTypeHasInformationTypeFormat.InformationTypeDomainRoleId, source), new DslModeling::RoleAssignment(InformationTypeHasInformationTypeFormat.InformationTypeFormatDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InformationTypeHasInformationTypeFormat(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InformationTypeHasInformationTypeFormat(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InformationTypeHasInformationTypeFormat(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InformationTypeHasInformationTypeFormat(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InformationType domain role code
		
		/// <summary>
		/// InformationType domain role Id.
		/// </summary>
		public static readonly global::System.Guid InformationTypeDomainRoleId = new global::System.Guid(0x07fbdc19, 0xa33c, 0x4377, 0xbd, 0x14, 0x71, 0x05, 0xa6, 0x71, 0xfd, 0x7e);
		
		/// <summary>
		/// DomainRole InformationType
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat/InformationType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat/InformationType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InformationTypeFormat", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat/InformationType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("07fbdc19-a33c-4377-bd14-7105a671fd7e")]
		public virtual InformationType InformationType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InformationType)DslModeling::DomainRoleInfo.GetRolePlayer(this, InformationTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InformationTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InformationType of a InformationTypeFormat
		/// <summary>
		/// Gets a list of InformationType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InformationType> GetInformationType(InformationTypeFormat element)
		{
			return new DslModeling::LinkedElementCollection<InformationType>(element, InformationTypeFormatDomainRoleId);
		}
		#endregion
		#region InformationTypeFormat domain role code
		
		/// <summary>
		/// InformationTypeFormat domain role Id.
		/// </summary>
		public static readonly global::System.Guid InformationTypeFormatDomainRoleId = new global::System.Guid(0xea0795a4, 0x6811, 0x421d, 0x95, 0x9f, 0xd0, 0x9f, 0xf0, 0x82, 0xb0, 0x1a);
		
		/// <summary>
		/// DomainRole InformationTypeFormat
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeFormat
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat/InformationTypeFormat.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat/InformationTypeFormat.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InformationType", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat/InformationTypeFormat.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ea0795a4-6811-421d-959f-d09ff082b01a")]
		public virtual InformationTypeFormat InformationTypeFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InformationTypeFormat)DslModeling::DomainRoleInfo.GetRolePlayer(this, InformationTypeFormatDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InformationTypeFormatDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InformationTypeFormat of a InformationType
		/// <summary>
		/// Gets InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InformationTypeFormat GetInformationTypeFormat(InformationType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InformationTypeDomainRoleId) as InformationTypeFormat;
		}
		
		/// <summary>
		/// Sets InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInformationTypeFormat(InformationType element, InformationTypeFormat newInformationTypeFormat)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InformationTypeDomainRoleId, newInformationTypeFormat);
		}
		#endregion
		#region InformationType link accessor
		/// <summary>
		/// Get the InformationTypeHasInformationTypeFormat link to a InformationType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat GetLinkToInformationTypeFormat (global::Neumont.Tools.ORM.OIALModel.InformationType informationTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat>(informationTypeInstance, global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InformationType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InformationTypeFormat link accessor
		/// <summary>
		/// Get the list of InformationTypeHasInformationTypeFormat links to a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat> GetLinksToInformationType ( global::Neumont.Tools.ORM.OIALModel.InformationTypeFormat informationTypeFormatInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat>(informationTypeFormatInstance, global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeFormatDomainRoleId);
		}
		#endregion
		#region InformationTypeHasInformationTypeFormat instance accessors
		
		/// <summary>
		/// Get any InformationTypeHasInformationTypeFormat links between a given InformationType and a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat> GetLinks( global::Neumont.Tools.ORM.OIALModel.InformationType source, global::Neumont.Tools.ORM.OIALModel.InformationTypeFormat target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat>(source, global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InformationTypeHasInformationTypeFormat link between a given InformationTypeand a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat GetLink( global::Neumont.Tools.ORM.OIALModel.InformationType source, global::Neumont.Tools.ORM.OIALModel.InformationTypeFormat target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat>(source, global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship InformationTypeFormatHasObjectType
	/// Description for Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("837fb0b5-12b6-4432-9785-dda720d469d6")]
	public partial class InformationTypeFormatHasObjectType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InformationTypeFormatHasObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x837fb0b5, 0x12b6, 0x4432, 0x97, 0x85, 0xdd, 0xa7, 0x20, 0xd4, 0x69, 0xd6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InformationTypeFormatHasObjectType link in the same Partition as the given InformationTypeFormat
		/// </summary>
		/// <param name="source">InformationTypeFormat to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public InformationTypeFormatHasObjectType(InformationTypeFormat source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InformationTypeFormatHasObjectType.InformationTypeFormatDomainRoleId, source), new DslModeling::RoleAssignment(InformationTypeFormatHasObjectType.ValueTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InformationTypeFormatHasObjectType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InformationTypeFormatHasObjectType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InformationTypeFormatHasObjectType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InformationTypeFormatHasObjectType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InformationTypeFormat domain role code
		
		/// <summary>
		/// InformationTypeFormat domain role Id.
		/// </summary>
		public static readonly global::System.Guid InformationTypeFormatDomainRoleId = new global::System.Guid(0x5ed10e60, 0xbbd1, 0x407a, 0xb8, 0x45, 0xcc, 0x25, 0x21, 0x7c, 0x8d, 0xc4);
		
		/// <summary>
		/// DomainRole InformationTypeFormat
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.InformationTypeFormat
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType/InformationTypeFormat.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType/InformationTypeFormat.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueType", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType/InformationTypeFormat.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5ed10e60-bbd1-407a-b845-cc25217c8dc4")]
		public virtual InformationTypeFormat InformationTypeFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InformationTypeFormat)DslModeling::DomainRoleInfo.GetRolePlayer(this, InformationTypeFormatDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InformationTypeFormatDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InformationTypeFormat of a ObjectType
		/// <summary>
		/// Gets InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InformationTypeFormat GetInformationTypeFormat(global::Neumont.Tools.ORM.ObjectModel.ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueTypeDomainRoleId) as InformationTypeFormat;
		}
		
		/// <summary>
		/// Sets InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInformationTypeFormat(global::Neumont.Tools.ORM.ObjectModel.ObjectType element, InformationTypeFormat newInformationTypeFormat)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueTypeDomainRoleId, newInformationTypeFormat);
		}
		#endregion
		#region ValueType domain role code
		
		/// <summary>
		/// ValueType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeDomainRoleId = new global::System.Guid(0x4c90d645, 0x49ca, 0x40b7, 0x97, 0x1e, 0xbb, 0x17, 0xe2, 0xcf, 0x79, 0xa1);
		
		/// <summary>
		/// DomainRole ValueType
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.ValueType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType/ValueType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType/ValueType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InformationTypeFormat", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType/ValueType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4c90d645-49ca-40b7-971e-bb17e2cf79a1")]
		public virtual global::Neumont.Tools.ORM.ObjectModel.ObjectType ValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.ORM.ObjectModel.ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueType of a InformationTypeFormat
		/// <summary>
		/// Gets ValueType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectType GetValueType(InformationTypeFormat element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InformationTypeFormatDomainRoleId) as global::Neumont.Tools.ORM.ObjectModel.ObjectType;
		}
		
		/// <summary>
		/// Sets ValueType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueType(InformationTypeFormat element, global::Neumont.Tools.ORM.ObjectModel.ObjectType newValueType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InformationTypeFormatDomainRoleId, newValueType);
		}
		#endregion
		#region InformationTypeFormat link accessor
		/// <summary>
		/// Get the InformationTypeFormatHasObjectType link to a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType GetLinkToValueType (global::Neumont.Tools.ORM.OIALModel.InformationTypeFormat informationTypeFormatInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType>(informationTypeFormatInstance, global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InformationTypeFormat not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueType link accessor
		/// <summary>
		/// Get the InformationTypeFormatHasObjectType link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType GetLinkToInformationTypeFormat (global::Neumont.Tools.ORM.ObjectModel.ObjectType valueTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType>(valueTypeInstance, global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.ValueTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InformationTypeFormatHasObjectType instance accessors
		
		/// <summary>
		/// Get any InformationTypeFormatHasObjectType links between a given InformationTypeFormat and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType> GetLinks( global::Neumont.Tools.ORM.OIALModel.InformationTypeFormat source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType>(source, global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType link in links )
			{
				if ( target.Equals(link.ValueType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InformationTypeFormatHasObjectType link between a given InformationTypeFormatand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType GetLink( global::Neumont.Tools.ORM.OIALModel.InformationTypeFormat source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType>(source, global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType link in links )
			{
				if ( target.Equals(link.ValueType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship ConceptTypeHasObjectType
	/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("473534d7-3779-49e7-ab65-4bcef9932b06")]
	public partial class ConceptTypeHasObjectType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeHasObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x473534d7, 0x3779, 0x49e7, 0xab, 0x65, 0x4b, 0xce, 0xf9, 0x93, 0x2b, 0x06);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptTypeHasObjectType link in the same Partition as the given ConceptType
		/// </summary>
		/// <param name="source">ConceptType to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public ConceptTypeHasObjectType(ConceptType source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptTypeHasObjectType.ConceptTypeDomainRoleId, source), new DslModeling::RoleAssignment(ConceptTypeHasObjectType.ObjectTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeHasObjectType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeHasObjectType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeHasObjectType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeHasObjectType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConceptType domain role code
		
		/// <summary>
		/// ConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeDomainRoleId = new global::System.Guid(0x03b7885f, 0x475c, 0x499a, 0xaf, 0xc1, 0x19, 0x5d, 0x9c, 0xa5, 0xfa, 0x7f);
		
		/// <summary>
		/// DomainRole ConceptType
		/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType/ConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType/ConceptType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectType", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType/ConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("03b7885f-475c-499a-afc1-195d9ca5fa7f")]
		public virtual ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptType of a ObjectType
		/// <summary>
		/// Gets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConceptType GetConceptType(global::Neumont.Tools.ORM.ObjectModel.ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as ConceptType;
		}
		
		/// <summary>
		/// Sets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConceptType(global::Neumont.Tools.ORM.ObjectModel.ObjectType element, ConceptType newConceptType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newConceptType);
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0xa2ee78aa, 0xc18a, 0x417f, 0xbb, 0x1d, 0x33, 0x5c, 0x9d, 0xf8, 0xdd, 0x0c);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType/ObjectType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType/ObjectType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConceptType", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a2ee78aa-c18a-417f-bb1d-335c9df8dd0c")]
		public virtual global::Neumont.Tools.ORM.ObjectModel.ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.ORM.ObjectModel.ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectType of a ConceptType
		/// <summary>
		/// Gets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectType GetObjectType(ConceptType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConceptTypeDomainRoleId) as global::Neumont.Tools.ORM.ObjectModel.ObjectType;
		}
		
		/// <summary>
		/// Sets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectType(ConceptType element, global::Neumont.Tools.ORM.ObjectModel.ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConceptTypeDomainRoleId, newObjectType);
		}
		#endregion
		#region ConceptType link accessor
		/// <summary>
		/// Get the ConceptTypeHasObjectType link to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType GetLinkToObjectType (global::Neumont.Tools.ORM.OIALModel.ConceptType conceptTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType>(conceptTypeInstance, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ConceptTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConceptType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ConceptTypeHasObjectType link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType GetLinkToConceptType (global::Neumont.Tools.ORM.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType>(objectTypeInstance, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptTypeHasObjectType instance accessors
		
		/// <summary>
		/// Get any ConceptTypeHasObjectType links between a given ConceptType and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType> GetLinks( global::Neumont.Tools.ORM.OIALModel.ConceptType source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType>(source, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ConceptTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConceptTypeHasObjectType link between a given ConceptTypeand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType GetLink( global::Neumont.Tools.ORM.OIALModel.ConceptType source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType>(source, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ConceptTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship ChildSequenceConstraintHasChildSequence
	/// Description for
	/// Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("30e43083-7c59-40f9-8834-7f318df81802")]
	public abstract partial class ChildSequenceConstraintHasChildSequence : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ChildSequenceConstraintHasChildSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x30e43083, 0x7c59, 0x40f9, 0x88, 0x34, 0x7f, 0x31, 0x8d, 0xf8, 0x18, 0x02);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected ChildSequenceConstraintHasChildSequence(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ChildSequenceConstraint domain role code
		
		/// <summary>
		/// ChildSequenceConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildSequenceConstraintDomainRoleId = new global::System.Guid(0x84f895ef, 0x5cda, 0x4716, 0xa7, 0x38, 0xa1, 0xf5, 0x0a, 0x40, 0x09, 0x8f);
		
		/// <summary>
		/// DomainRole ChildSequenceConstraint
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence/ChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence/ChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildSequence", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence/ChildSequenceConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("84f895ef-5cda-4716-a738-a1f50a40098f")]
		public abstract ChildSequenceConstraint ChildSequenceConstraint
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ChildSequenceConstraint of a ChildSequence
		/// <summary>
		/// Gets ChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ChildSequenceConstraint GetChildSequenceConstraint(ChildSequence element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ChildSequenceDomainRoleId) as ChildSequenceConstraint;
		}
		
		/// <summary>
		/// Sets ChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetChildSequenceConstraint(ChildSequence element, ChildSequenceConstraint newChildSequenceConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ChildSequenceDomainRoleId, newChildSequenceConstraint);
		}
		#endregion
		#region ChildSequence domain role code
		
		/// <summary>
		/// ChildSequence domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildSequenceDomainRoleId = new global::System.Guid(0x7bcc2a75, 0xdb60, 0x4399, 0x94, 0x67, 0xfa, 0xed, 0x6a, 0xed, 0xed, 0x82);
		
		/// <summary>
		/// DomainRole ChildSequence
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence.ChildSequence
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence/ChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence/ChildSequence.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ChildSequenceConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence/ChildSequence.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7bcc2a75-db60-4399-9467-faed6aeded82")]
		public abstract ChildSequence ChildSequence
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ChildSequence of a ChildSequenceConstraint
		/// <summary>
		/// Gets a list of ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ChildSequence> GetChildSequence(ChildSequenceConstraint element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ChildSequence>(element, ChildSequenceConstraintDomainRoleId);
		}
		#endregion
		#region ChildSequenceConstraint link accessor
		/// <summary>
		/// Get the list of ChildSequenceConstraintHasChildSequence links to a ChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence> GetLinksToChildSequence ( global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint childSequenceConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence>(childSequenceConstraintInstance, global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceConstraintDomainRoleId);
		}
		#endregion
		#region ChildSequence link accessor
		/// <summary>
		/// Get the ChildSequenceConstraintHasChildSequence link to a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence GetLinkToChildSequenceConstraint (global::Neumont.Tools.ORM.OIALModel.ChildSequence childSequenceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence>(childSequenceInstance, global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ChildSequence not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ChildSequenceConstraintHasChildSequence instance accessors
		
		/// <summary>
		/// Get any ChildSequenceConstraintHasChildSequence links between a given ChildSequenceConstraint and a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence> GetLinks( global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint source, global::Neumont.Tools.ORM.OIALModel.ChildSequence target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence>(source, global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence link in links )
			{
				if ( target.Equals(link.ChildSequence) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ChildSequenceConstraintHasChildSequence link between a given ChildSequenceConstraintand a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence GetLink( global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint source, global::Neumont.Tools.ORM.OIALModel.ChildSequence target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence>(source, global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence link in links )
			{
				if ( target.Equals(link.ChildSequence) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship SingleChildSequenceConstraintHasMinTwoChildrenChildSequence
	/// Description for
	/// Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("10e35e6d-e220-4003-a44e-8011676ed75c")]
	public partial class SingleChildSequenceConstraintHasMinTwoChildrenChildSequence : ChildSequenceConstraintHasChildSequence
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SingleChildSequenceConstraintHasMinTwoChildrenChildSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x10e35e6d, 0xe220, 0x4003, 0xa4, 0x4e, 0x80, 0x11, 0x67, 0x6e, 0xd7, 0x5c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SingleChildSequenceConstraintHasMinTwoChildrenChildSequence link in the same Partition as the given SingleChildSequenceConstraint
		/// </summary>
		/// <param name="source">SingleChildSequenceConstraint to use as the source of the relationship.</param>
		/// <param name="target">MinTwoChildrenChildSequence to use as the target of the relationship.</param>
		public SingleChildSequenceConstraintHasMinTwoChildrenChildSequence(SingleChildSequenceConstraint source, MinTwoChildrenChildSequence target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.ChildSequenceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SingleChildSequenceConstraintHasMinTwoChildrenChildSequence(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SingleChildSequenceConstraintHasMinTwoChildrenChildSequence(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SingleChildSequenceConstraintHasMinTwoChildrenChildSequence(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SingleChildSequenceConstraintHasMinTwoChildrenChildSequence(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SingleChildSequenceConstraint domain role code
		
		/// <summary>
		/// SingleChildSequenceConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SingleChildSequenceConstraintDomainRoleId = new global::System.Guid(0xb057d4e8, 0x4342, 0x43c5, 0xac, 0x8d, 0x87, 0x04, 0x3d, 0xb5, 0xb0, 0xf4);
		
		/// <summary>
		/// DomainRole SingleChildSequenceConstraint
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence/SingleChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence/SingleChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildSequence", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence/SingleChildSequenceConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b057d4e8-4342-43c5-ac8d-87043db5b0f4")]
		public virtual SingleChildSequenceConstraint SingleChildSequenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SingleChildSequenceConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SingleChildSequenceConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SingleChildSequenceConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SingleChildSequenceConstraint of a MinTwoChildrenChildSequence
		/// <summary>
		/// Gets SingleChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SingleChildSequenceConstraint GetSingleChildSequenceConstraint(MinTwoChildrenChildSequence element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ChildSequenceDomainRoleId) as SingleChildSequenceConstraint;
		}
		
		/// <summary>
		/// Sets SingleChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSingleChildSequenceConstraint(MinTwoChildrenChildSequence element, SingleChildSequenceConstraint newSingleChildSequenceConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ChildSequenceDomainRoleId, newSingleChildSequenceConstraint);
		}
		#endregion
		#region ChildSequenceConstraint domain role override
		
		/// <summary>
		/// Gets the element playing SingleChildSequenceConstraint domain role.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceConstraint
		/// </summary>
		public override ChildSequenceConstraint ChildSequenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SingleChildSequenceConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SingleChildSequenceConstraint = (SingleChildSequenceConstraint)value;
			}
		}
		
		#endregion
		#region ChildSequence domain role code
		
		/// <summary>
		/// ChildSequence domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ChildSequenceDomainRoleId = new global::System.Guid(0x381d7c86, 0x173e, 0x4db6, 0x91, 0x9c, 0xac, 0x2a, 0x03, 0xd2, 0x8f, 0x7b);
		
		/// <summary>
		/// DomainRole ChildSequence
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.ChildSequence
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence/ChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence/ChildSequence.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, RolePlayer = typeof(MinTwoChildrenChildSequence), PropertyName = "SingleChildSequenceConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence/ChildSequence.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("381d7c86-173e-4db6-919c-ac2a03d28f7b")]
		public override ChildSequence ChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ChildSequence)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildSequenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildSequenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildSequence of a SingleChildSequenceConstraint
		/// <summary>
		/// Gets ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MinTwoChildrenChildSequence GetChildSequence(SingleChildSequenceConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SingleChildSequenceConstraintDomainRoleId) as MinTwoChildrenChildSequence;
		}
		
		/// <summary>
		/// Sets ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetChildSequence(SingleChildSequenceConstraint element, MinTwoChildrenChildSequence newChildSequence)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SingleChildSequenceConstraintDomainRoleId, newChildSequence);
		}
		#endregion
		#region SingleChildSequenceConstraint link accessor
		/// <summary>
		/// Get the SingleChildSequenceConstraintHasMinTwoChildrenChildSequence link to a SingleChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence GetLinkToChildSequence (global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraint singleChildSequenceConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence>(singleChildSequenceConstraintInstance, global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SingleChildSequenceConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ChildSequence link accessor
		/// <summary>
		/// Get the SingleChildSequenceConstraintHasMinTwoChildrenChildSequence link to a MinTwoChildrenChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence GetLinkToSingleChildSequenceConstraint (global::Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequence childSequenceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence>(childSequenceInstance, global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.ChildSequenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ChildSequence not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SingleChildSequenceConstraintHasMinTwoChildrenChildSequence instance accessors
		
		/// <summary>
		/// Get any SingleChildSequenceConstraintHasMinTwoChildrenChildSequence links between a given SingleChildSequenceConstraint and a MinTwoChildrenChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence> GetLinks( global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraint source, global::Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequence target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence>(source, global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence link in links )
			{
				if ( target.Equals(link.ChildSequence) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SingleChildSequenceConstraintHasMinTwoChildrenChildSequence link between a given SingleChildSequenceConstraintand a MinTwoChildrenChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence GetLink( global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraint source, global::Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequence target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence>(source, global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence link in links )
			{
				if ( target.Equals(link.ChildSequence) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship SubsetConstraintHasSubChildSequence
	/// Description for Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c18aa773-3480-49ea-a15a-74bf18486518")]
	public partial class SubsetConstraintHasSubChildSequence : ChildSequenceConstraintHasChildSequence
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubsetConstraintHasSubChildSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc18aa773, 0x3480, 0x49ea, 0xa1, 0x5a, 0x74, 0xbf, 0x18, 0x48, 0x65, 0x18);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubsetConstraintHasSubChildSequence link in the same Partition as the given SubsetConstraint
		/// </summary>
		/// <param name="source">SubsetConstraint to use as the source of the relationship.</param>
		/// <param name="target">ChildSequence to use as the target of the relationship.</param>
		public SubsetConstraintHasSubChildSequence(SubsetConstraint source, ChildSequence target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubsetConstraintHasSubChildSequence.SubsetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SubsetConstraintHasSubChildSequence.SubChildSequenceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubsetConstraintHasSubChildSequence(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubsetConstraintHasSubChildSequence(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubsetConstraintHasSubChildSequence(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubsetConstraintHasSubChildSequence(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SubsetConstraint domain role code
		
		/// <summary>
		/// SubsetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubsetConstraintDomainRoleId = new global::System.Guid(0x6f57a29d, 0xb3d9, 0x4afd, 0x96, 0xf3, 0xcf, 0xf4, 0xda, 0x83, 0x30, 0xd4);
		
		/// <summary>
		/// DomainRole SubsetConstraint
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence/SubsetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence/SubsetConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SubChildSequence", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence/SubsetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6f57a29d-b3d9-4afd-96f3-cff4da8330d4")]
		public virtual SubsetConstraint SubsetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubsetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubsetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubsetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubsetConstraint of a ChildSequence
		/// <summary>
		/// Gets SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SubsetConstraint GetSubsetConstraint(ChildSequence element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubChildSequenceDomainRoleId) as SubsetConstraint;
		}
		
		/// <summary>
		/// Sets SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubsetConstraint(ChildSequence element, SubsetConstraint newSubsetConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubChildSequenceDomainRoleId, newSubsetConstraint);
		}
		#endregion
		#region ChildSequenceConstraint domain role override
		
		/// <summary>
		/// Gets the element playing SubsetConstraint domain role.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceConstraint
		/// </summary>
		public override ChildSequenceConstraint ChildSequenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SubsetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SubsetConstraint = (SubsetConstraint)value;
			}
		}
		
		#endregion
		#region SubChildSequence domain role code
		
		/// <summary>
		/// SubChildSequence domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubChildSequenceDomainRoleId = new global::System.Guid(0x9a40cff0, 0x272e, 0x4441, 0xb2, 0xfd, 0x4c, 0x2c, 0xb2, 0xc8, 0xee, 0xf4);
		
		/// <summary>
		/// DomainRole SubChildSequence
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubChildSequence
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence/SubChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence/SubChildSequence.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SubsetConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence/SubChildSequence.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9a40cff0-272e-4441-b2fd-4c2cb2c8eef4")]
		public virtual ChildSequence SubChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ChildSequence)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubChildSequenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubChildSequenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubChildSequence of a SubsetConstraint
		/// <summary>
		/// Gets SubChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ChildSequence GetSubChildSequence(SubsetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubsetConstraintDomainRoleId) as ChildSequence;
		}
		
		/// <summary>
		/// Sets SubChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubChildSequence(SubsetConstraint element, ChildSequence newSubChildSequence)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubsetConstraintDomainRoleId, newSubChildSequence);
		}
		#endregion
		#region ChildSequence domain role override
		
		/// <summary>
		/// Gets the element playing SubChildSequence domain role.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence.ChildSequence
		/// </summary>
		public override ChildSequence ChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SubChildSequence;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SubChildSequence = value;
			}
		}
		
		#endregion
		#region SubsetConstraint link accessor
		/// <summary>
		/// Get the SubsetConstraintHasSubChildSequence link to a SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence GetLinkToSubChildSequence (global::Neumont.Tools.ORM.OIALModel.SubsetConstraint subsetConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence>(subsetConstraintInstance, global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SubsetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubChildSequence link accessor
		/// <summary>
		/// Get the SubsetConstraintHasSubChildSequence link to a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence GetLinkToSubsetConstraint (global::Neumont.Tools.ORM.OIALModel.ChildSequence subChildSequenceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence>(subChildSequenceInstance, global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubChildSequenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SubChildSequence not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubsetConstraintHasSubChildSequence instance accessors
		
		/// <summary>
		/// Get any SubsetConstraintHasSubChildSequence links between a given SubsetConstraint and a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence> GetLinks( global::Neumont.Tools.ORM.OIALModel.SubsetConstraint source, global::Neumont.Tools.ORM.OIALModel.ChildSequence target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence>(source, global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence link in links )
			{
				if ( target.Equals(link.SubChildSequence) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubsetConstraintHasSubChildSequence link between a given SubsetConstraintand a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence GetLink( global::Neumont.Tools.ORM.OIALModel.SubsetConstraint source, global::Neumont.Tools.ORM.OIALModel.ChildSequence target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence>(source, global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence link in links )
			{
				if ( target.Equals(link.SubChildSequence) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship SubsetConstraintHasSuperChildSequence
	/// Description for
	/// Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d5e1f509-4802-4feb-96f8-652da6ffc9c5")]
	public partial class SubsetConstraintHasSuperChildSequence : ChildSequenceConstraintHasChildSequence
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubsetConstraintHasSuperChildSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd5e1f509, 0x4802, 0x4feb, 0x96, 0xf8, 0x65, 0x2d, 0xa6, 0xff, 0xc9, 0xc5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubsetConstraintHasSuperChildSequence link in the same Partition as the given SubsetConstraint
		/// </summary>
		/// <param name="source">SubsetConstraint to use as the source of the relationship.</param>
		/// <param name="target">ChildSequence to use as the target of the relationship.</param>
		public SubsetConstraintHasSuperChildSequence(SubsetConstraint source, ChildSequence target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubsetConstraintHasSuperChildSequence.SubsetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SubsetConstraintHasSuperChildSequence.SuperChildSequenceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubsetConstraintHasSuperChildSequence(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubsetConstraintHasSuperChildSequence(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubsetConstraintHasSuperChildSequence(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubsetConstraintHasSuperChildSequence(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SubsetConstraint domain role code
		
		/// <summary>
		/// SubsetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubsetConstraintDomainRoleId = new global::System.Guid(0xdb67f0ed, 0xaab6, 0x401f, 0xa0, 0x5f, 0x1f, 0x67, 0x43, 0xcf, 0x13, 0x73);
		
		/// <summary>
		/// DomainRole SubsetConstraint
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence/SubsetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence/SubsetConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SuperChildSequence", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence/SubsetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("db67f0ed-aab6-401f-a05f-1f6743cf1373")]
		public virtual SubsetConstraint SubsetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubsetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubsetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubsetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubsetConstraint of a ChildSequence
		/// <summary>
		/// Gets SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SubsetConstraint GetSubsetConstraint(ChildSequence element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SuperChildSequenceDomainRoleId) as SubsetConstraint;
		}
		
		/// <summary>
		/// Sets SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubsetConstraint(ChildSequence element, SubsetConstraint newSubsetConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SuperChildSequenceDomainRoleId, newSubsetConstraint);
		}
		#endregion
		#region ChildSequenceConstraint domain role override
		
		/// <summary>
		/// Gets the element playing SubsetConstraint domain role.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceConstraint
		/// </summary>
		public override ChildSequenceConstraint ChildSequenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SubsetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SubsetConstraint = (SubsetConstraint)value;
			}
		}
		
		#endregion
		#region SuperChildSequence domain role code
		
		/// <summary>
		/// SuperChildSequence domain role Id.
		/// </summary>
		public static readonly global::System.Guid SuperChildSequenceDomainRoleId = new global::System.Guid(0x96a9c720, 0xc183, 0x4073, 0x87, 0x59, 0x40, 0x41, 0xd8, 0x52, 0x4d, 0xe7);
		
		/// <summary>
		/// DomainRole SuperChildSequence
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SuperChildSequence
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence/SuperChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence/SuperChildSequence.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SubsetConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence/SuperChildSequence.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("96a9c720-c183-4073-8759-4041d8524de7")]
		public virtual ChildSequence SuperChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ChildSequence)DslModeling::DomainRoleInfo.GetRolePlayer(this, SuperChildSequenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SuperChildSequenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SuperChildSequence of a SubsetConstraint
		/// <summary>
		/// Gets SuperChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ChildSequence GetSuperChildSequence(SubsetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubsetConstraintDomainRoleId) as ChildSequence;
		}
		
		/// <summary>
		/// Sets SuperChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSuperChildSequence(SubsetConstraint element, ChildSequence newSuperChildSequence)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubsetConstraintDomainRoleId, newSuperChildSequence);
		}
		#endregion
		#region ChildSequence domain role override
		
		/// <summary>
		/// Gets the element playing SuperChildSequence domain role.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence.ChildSequence
		/// </summary>
		public override ChildSequence ChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SuperChildSequence;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SuperChildSequence = value;
			}
		}
		
		#endregion
		#region SubsetConstraint link accessor
		/// <summary>
		/// Get the SubsetConstraintHasSuperChildSequence link to a SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence GetLinkToSuperChildSequence (global::Neumont.Tools.ORM.OIALModel.SubsetConstraint subsetConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence>(subsetConstraintInstance, global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SubsetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SuperChildSequence link accessor
		/// <summary>
		/// Get the SubsetConstraintHasSuperChildSequence link to a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence GetLinkToSubsetConstraint (global::Neumont.Tools.ORM.OIALModel.ChildSequence superChildSequenceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence>(superChildSequenceInstance, global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SuperChildSequenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SuperChildSequence not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubsetConstraintHasSuperChildSequence instance accessors
		
		/// <summary>
		/// Get any SubsetConstraintHasSuperChildSequence links between a given SubsetConstraint and a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence> GetLinks( global::Neumont.Tools.ORM.OIALModel.SubsetConstraint source, global::Neumont.Tools.ORM.OIALModel.ChildSequence target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence>(source, global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence link in links )
			{
				if ( target.Equals(link.SuperChildSequence) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubsetConstraintHasSuperChildSequence link between a given SubsetConstraintand a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence GetLink( global::Neumont.Tools.ORM.OIALModel.SubsetConstraint source, global::Neumont.Tools.ORM.OIALModel.ChildSequence target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence>(source, global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence link in links )
			{
				if ( target.Equals(link.SuperChildSequence) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship TwoOrMoreChildSequenceConstraintHasChildSequence
	/// Description for
	/// Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("34a603f3-4002-410c-8806-d11769ca536b")]
	public partial class TwoOrMoreChildSequenceConstraintHasChildSequence : ChildSequenceConstraintHasChildSequence
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TwoOrMoreChildSequenceConstraintHasChildSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x34a603f3, 0x4002, 0x410c, 0x88, 0x06, 0xd1, 0x17, 0x69, 0xca, 0x53, 0x6b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TwoOrMoreChildSequenceConstraintHasChildSequence link in the same Partition as the given TwoOrMoreChildSequenceConstraint
		/// </summary>
		/// <param name="source">TwoOrMoreChildSequenceConstraint to use as the source of the relationship.</param>
		/// <param name="target">ChildSequence to use as the target of the relationship.</param>
		public TwoOrMoreChildSequenceConstraintHasChildSequence(TwoOrMoreChildSequenceConstraint source, ChildSequence target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraintDomainRoleId, source), new DslModeling::RoleAssignment(TwoOrMoreChildSequenceConstraintHasChildSequence.ChildSequenceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TwoOrMoreChildSequenceConstraintHasChildSequence(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TwoOrMoreChildSequenceConstraintHasChildSequence(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TwoOrMoreChildSequenceConstraintHasChildSequence(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TwoOrMoreChildSequenceConstraintHasChildSequence(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TwoOrMoreChildSequenceConstraint domain role code
		
		/// <summary>
		/// TwoOrMoreChildSequenceConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid TwoOrMoreChildSequenceConstraintDomainRoleId = new global::System.Guid(0xcd1d2bfd, 0x3ecb, 0x45cc, 0x95, 0x39, 0x4c, 0x85, 0xbe, 0x09, 0xad, 0x63);
		
		/// <summary>
		/// DomainRole TwoOrMoreChildSequenceConstraint
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence/TwoOrMoreChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence/TwoOrMoreChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildSequence", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence/TwoOrMoreChildSequenceConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("cd1d2bfd-3ecb-45cc-9539-4c85be09ad63")]
		public virtual TwoOrMoreChildSequenceConstraint TwoOrMoreChildSequenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TwoOrMoreChildSequenceConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, TwoOrMoreChildSequenceConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TwoOrMoreChildSequenceConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TwoOrMoreChildSequenceConstraint of a ChildSequence
		/// <summary>
		/// Gets TwoOrMoreChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TwoOrMoreChildSequenceConstraint GetTwoOrMoreChildSequenceConstraint(ChildSequence element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ChildSequenceDomainRoleId) as TwoOrMoreChildSequenceConstraint;
		}
		
		/// <summary>
		/// Sets TwoOrMoreChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTwoOrMoreChildSequenceConstraint(ChildSequence element, TwoOrMoreChildSequenceConstraint newTwoOrMoreChildSequenceConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ChildSequenceDomainRoleId, newTwoOrMoreChildSequenceConstraint);
		}
		#endregion
		#region ChildSequenceConstraint domain role override
		
		/// <summary>
		/// Gets the element playing TwoOrMoreChildSequenceConstraint domain role.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceConstraint
		/// </summary>
		public override ChildSequenceConstraint ChildSequenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.TwoOrMoreChildSequenceConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.TwoOrMoreChildSequenceConstraint = (TwoOrMoreChildSequenceConstraint)value;
			}
		}
		
		#endregion
		#region ChildSequence domain role code
		
		/// <summary>
		/// ChildSequence domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ChildSequenceDomainRoleId = new global::System.Guid(0x2340754c, 0x5b5b, 0x4948, 0xbb, 0x37, 0x7d, 0xdd, 0x48, 0x44, 0xa0, 0xaf);
		
		/// <summary>
		/// DomainRole ChildSequence
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.ChildSequence
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence/ChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence/ChildSequence.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TwoOrMoreChildSequenceConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence/ChildSequence.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2340754c-5b5b-4948-bb37-7ddd4844a0af")]
		public override ChildSequence ChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ChildSequence)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildSequenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildSequenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildSequence of a TwoOrMoreChildSequenceConstraint
		/// <summary>
		/// Gets a list of ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ChildSequence> GetChildSequence(TwoOrMoreChildSequenceConstraint element)
		{
			return new DslModeling::LinkedElementCollection<ChildSequence>(element, TwoOrMoreChildSequenceConstraintDomainRoleId);
		}
		#endregion
		#region TwoOrMoreChildSequenceConstraint link accessor
		/// <summary>
		/// Get the list of TwoOrMoreChildSequenceConstraintHasChildSequence links to a TwoOrMoreChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence> GetLinksToChildSequence ( global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraint twoOrMoreChildSequenceConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence>(twoOrMoreChildSequenceConstraintInstance, global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraintDomainRoleId);
		}
		#endregion
		#region ChildSequence link accessor
		/// <summary>
		/// Get the TwoOrMoreChildSequenceConstraintHasChildSequence link to a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence GetLinkToTwoOrMoreChildSequenceConstraint (global::Neumont.Tools.ORM.OIALModel.ChildSequence childSequenceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence>(childSequenceInstance, global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.ChildSequenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ChildSequence not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TwoOrMoreChildSequenceConstraintHasChildSequence instance accessors
		
		/// <summary>
		/// Get any TwoOrMoreChildSequenceConstraintHasChildSequence links between a given TwoOrMoreChildSequenceConstraint and a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence> GetLinks( global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraint source, global::Neumont.Tools.ORM.OIALModel.ChildSequence target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence>(source, global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence link in links )
			{
				if ( target.Equals(link.ChildSequence) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TwoOrMoreChildSequenceConstraintHasChildSequence link between a given TwoOrMoreChildSequenceConstraintand a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence GetLink( global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraint source, global::Neumont.Tools.ORM.OIALModel.ChildSequence target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence>(source, global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence link in links )
			{
				if ( target.Equals(link.ChildSequence) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship ChildHasSingleChildConstraint
	/// Description for Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("bbee96d9-9348-4c65-a668-939844a87e95")]
	public partial class ChildHasSingleChildConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ChildHasSingleChildConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbbee96d9, 0x9348, 0x4c65, 0xa6, 0x68, 0x93, 0x98, 0x44, 0xa8, 0x7e, 0x95);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ChildHasSingleChildConstraint link in the same Partition as the given ConceptTypeHasChild
		/// </summary>
		/// <param name="source">ConceptTypeHasChild to use as the source of the relationship.</param>
		/// <param name="target">SingleChildConstraint to use as the target of the relationship.</param>
		public ChildHasSingleChildConstraint(ConceptTypeHasChild source, SingleChildConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ChildHasSingleChildConstraint.ConceptTypeHasChildDomainRoleId, source), new DslModeling::RoleAssignment(ChildHasSingleChildConstraint.SingleChildConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ChildHasSingleChildConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ChildHasSingleChildConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ChildHasSingleChildConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ChildHasSingleChildConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConceptTypeHasChild domain role code
		
		/// <summary>
		/// ConceptTypeHasChild domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeHasChildDomainRoleId = new global::System.Guid(0x7c128be8, 0x6c19, 0x427e, 0x95, 0xc6, 0x05, 0x17, 0xe7, 0xa3, 0xf4, 0x39);
		
		/// <summary>
		/// DomainRole ConceptTypeHasChild
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.ConceptTypeHasChild
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint/ConceptTypeHasChild.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint/ConceptTypeHasChild.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SingleChildConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint/ConceptTypeHasChild.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7c128be8-6c19-427e-95c6-0517e7a3f439")]
		public virtual ConceptTypeHasChild ConceptTypeHasChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptTypeHasChild)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeHasChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeHasChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptTypeHasChild of a SingleChildConstraint
		/// <summary>
		/// Gets ConceptTypeHasChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConceptTypeHasChild GetConceptTypeHasChild(SingleChildConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SingleChildConstraintDomainRoleId) as ConceptTypeHasChild;
		}
		
		/// <summary>
		/// Sets ConceptTypeHasChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConceptTypeHasChild(SingleChildConstraint element, ConceptTypeHasChild newConceptTypeHasChild)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SingleChildConstraintDomainRoleId, newConceptTypeHasChild);
		}
		#endregion
		#region SingleChildConstraint domain role code
		
		/// <summary>
		/// SingleChildConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SingleChildConstraintDomainRoleId = new global::System.Guid(0x708fdfd0, 0x1921, 0x464c, 0xab, 0xb0, 0xd3, 0xa9, 0x5f, 0x3d, 0x0b, 0xd7);
		
		/// <summary>
		/// DomainRole SingleChildConstraint
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.SingleChildConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint/SingleChildConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint/SingleChildConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConceptTypeHasChild", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint/SingleChildConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("708fdfd0-1921-464c-abb0-d3a95f3d0bd7")]
		public virtual SingleChildConstraint SingleChildConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SingleChildConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SingleChildConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SingleChildConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SingleChildConstraintCollection of a ConceptTypeHasChild
		/// <summary>
		/// Gets a list of SingleChildConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SingleChildConstraint> GetSingleChildConstraintCollection(ConceptTypeHasChild element)
		{
			return new DslModeling::LinkedElementCollection<SingleChildConstraint>(element, ConceptTypeHasChildDomainRoleId);
		}
		#endregion
		#region ConceptTypeHasChild link accessor
		/// <summary>
		/// Get the list of ChildHasSingleChildConstraint links to a ConceptTypeHasChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint> GetLinksToSingleChildConstraintCollection ( global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild conceptTypeHasChildInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint>(conceptTypeHasChildInstance, global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.ConceptTypeHasChildDomainRoleId);
		}
		#endregion
		#region SingleChildConstraint link accessor
		/// <summary>
		/// Get the ChildHasSingleChildConstraint link to a SingleChildConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint GetLinkToConceptTypeHasChild (global::Neumont.Tools.ORM.OIALModel.SingleChildConstraint singleChildConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint>(singleChildConstraintInstance, global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.SingleChildConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SingleChildConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ChildHasSingleChildConstraint instance accessors
		
		/// <summary>
		/// Get any ChildHasSingleChildConstraint links between a given ConceptTypeHasChild and a SingleChildConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint> GetLinks( global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild source, global::Neumont.Tools.ORM.OIALModel.SingleChildConstraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint>(source, global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.ConceptTypeHasChildDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint link in links )
			{
				if ( target.Equals(link.SingleChildConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ChildHasSingleChildConstraint link between a given ConceptTypeHasChildand a SingleChildConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint GetLink( global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild source, global::Neumont.Tools.ORM.OIALModel.SingleChildConstraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint>(source, global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.ConceptTypeHasChildDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint link in links )
			{
				if ( target.Equals(link.SingleChildConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship OIALModelHasChildSequenceConstraint
	/// Description for Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c0386a3e-c683-4583-be34-2fd7a6977cfd")]
	public partial class OIALModelHasChildSequenceConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OIALModelHasChildSequenceConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc0386a3e, 0xc683, 0x4583, 0xbe, 0x34, 0x2f, 0xd7, 0xa6, 0x97, 0x7c, 0xfd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OIALModelHasChildSequenceConstraint link in the same Partition as the given OIALModel
		/// </summary>
		/// <param name="source">OIALModel to use as the source of the relationship.</param>
		/// <param name="target">ChildSequenceConstraint to use as the target of the relationship.</param>
		public OIALModelHasChildSequenceConstraint(OIALModel source, ChildSequenceConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OIALModelHasChildSequenceConstraint.OIALModelDomainRoleId, source), new DslModeling::RoleAssignment(OIALModelHasChildSequenceConstraint.ChildSequenceConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OIALModelHasChildSequenceConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OIALModelHasChildSequenceConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OIALModelHasChildSequenceConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OIALModelHasChildSequenceConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region OIALModel domain role code
		
		/// <summary>
		/// OIALModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid OIALModelDomainRoleId = new global::System.Guid(0x50dbc977, 0x4080, 0x4472, 0x93, 0x94, 0xe1, 0xa0, 0x67, 0x1b, 0x0d, 0xc8);
		
		/// <summary>
		/// DomainRole OIALModel
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.OIALModel
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint/OIALModel.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint/OIALModel.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildSequenceConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint/OIALModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("50dbc977-4080-4472-9394-e1a0671b0dc8")]
		public virtual OIALModel OIALModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (OIALModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, OIALModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OIALModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OIALModel of a ChildSequenceConstraint
		/// <summary>
		/// Gets OIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static OIALModel GetOIALModel(ChildSequenceConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ChildSequenceConstraintDomainRoleId) as OIALModel;
		}
		
		/// <summary>
		/// Sets OIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOIALModel(ChildSequenceConstraint element, OIALModel newOIALModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ChildSequenceConstraintDomainRoleId, newOIALModel);
		}
		#endregion
		#region ChildSequenceConstraint domain role code
		
		/// <summary>
		/// ChildSequenceConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildSequenceConstraintDomainRoleId = new global::System.Guid(0x978b29cc, 0x3e94, 0x464e, 0xa4, 0x1c, 0x7b, 0xb3, 0xaa, 0x39, 0xf6, 0x45);
		
		/// <summary>
		/// DomainRole ChildSequenceConstraint
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint/ChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint/ChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "OIALModel", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint/ChildSequenceConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("978b29cc-3e94-464e-a41c-7bb3aa39f645")]
		public virtual ChildSequenceConstraint ChildSequenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ChildSequenceConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildSequenceConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildSequenceConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildSequenceConstraintCollection of a OIALModel
		/// <summary>
		/// Gets a list of ChildSequenceConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ChildSequenceConstraint> GetChildSequenceConstraintCollection(OIALModel element)
		{
			return new DslModeling::LinkedElementCollection<ChildSequenceConstraint>(element, OIALModelDomainRoleId);
		}
		#endregion
		#region OIALModel link accessor
		/// <summary>
		/// Get the list of OIALModelHasChildSequenceConstraint links to a OIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint> GetLinksToChildSequenceConstraintCollection ( global::Neumont.Tools.ORM.OIALModel.OIALModel oIALModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint>(oIALModelInstance, global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.OIALModelDomainRoleId);
		}
		#endregion
		#region ChildSequenceConstraint link accessor
		/// <summary>
		/// Get the OIALModelHasChildSequenceConstraint link to a ChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint GetLinkToOIALModel (global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint childSequenceConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint>(childSequenceConstraintInstance, global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ChildSequenceConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OIALModelHasChildSequenceConstraint instance accessors
		
		/// <summary>
		/// Get any OIALModelHasChildSequenceConstraint links between a given OIALModel and a ChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint> GetLinks( global::Neumont.Tools.ORM.OIALModel.OIALModel source, global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint>(source, global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.OIALModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint link in links )
			{
				if ( target.Equals(link.ChildSequenceConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one OIALModelHasChildSequenceConstraint link between a given OIALModeland a ChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint GetLink( global::Neumont.Tools.ORM.OIALModel.OIALModel source, global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint>(source, global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.OIALModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint link in links )
			{
				if ( target.Equals(link.ChildSequenceConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship ConceptTypeHasChildHasPathRole
	/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a32d0a06-1a64-4d53-8da7-b42bc9cf1e11")]
	public partial class ConceptTypeHasChildHasPathRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeHasChildHasPathRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa32d0a06, 0x1a64, 0x4d53, 0x8d, 0xa7, 0xb4, 0x2b, 0xc9, 0xcf, 0x1e, 0x11);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptTypeHasChildHasPathRole link in the same Partition as the given ConceptTypeHasChild
		/// </summary>
		/// <param name="source">ConceptTypeHasChild to use as the source of the relationship.</param>
		/// <param name="target">RoleBase to use as the target of the relationship.</param>
		public ConceptTypeHasChildHasPathRole(ConceptTypeHasChild source, global::Neumont.Tools.ORM.ObjectModel.RoleBase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptTypeHasChildHasPathRole.ConceptTypeHasChildDomainRoleId, source), new DslModeling::RoleAssignment(ConceptTypeHasChildHasPathRole.PathRoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeHasChildHasPathRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeHasChildHasPathRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeHasChildHasPathRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeHasChildHasPathRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConceptTypeHasChild domain role code
		
		/// <summary>
		/// ConceptTypeHasChild domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeHasChildDomainRoleId = new global::System.Guid(0x888d5c3c, 0x4a27, 0x4fd9, 0x87, 0xd4, 0x85, 0xeb, 0x33, 0xcc, 0xe9, 0x0c);
		
		/// <summary>
		/// DomainRole ConceptTypeHasChild
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.ConceptTypeHasChild
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole/ConceptTypeHasChild.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole/ConceptTypeHasChild.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PathRoleCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole/ConceptTypeHasChild.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("888d5c3c-4a27-4fd9-87d4-85eb33cce90c")]
		public virtual ConceptTypeHasChild ConceptTypeHasChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptTypeHasChild)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeHasChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeHasChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptTypeHasChild of a RoleBase
		/// <summary>
		/// Gets a list of ConceptTypeHasChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptTypeHasChild> GetConceptTypeHasChild(global::Neumont.Tools.ORM.ObjectModel.RoleBase element)
		{
			return new DslModeling::LinkedElementCollection<ConceptTypeHasChild>(element, PathRoleDomainRoleId);
		}
		#endregion
		#region PathRole domain role code
		
		/// <summary>
		/// PathRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathRoleDomainRoleId = new global::System.Guid(0x8e2cfdb8, 0xf6d4, 0x44e2, 0xae, 0x9c, 0xbb, 0x72, 0xe5, 0x05, 0x28, 0x09);
		
		/// <summary>
		/// DomainRole PathRole
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.PathRole
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole/PathRole.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole/PathRole.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConceptTypeHasChild", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole/PathRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8e2cfdb8-f6d4-44e2-ae9c-bb72e5052809")]
		public virtual global::Neumont.Tools.ORM.ObjectModel.RoleBase PathRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.ORM.ObjectModel.RoleBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PathRoleCollection of a ConceptTypeHasChild
		/// <summary>
		/// Gets a list of PathRoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::Neumont.Tools.ORM.ObjectModel.RoleBase> GetPathRoleCollection(ConceptTypeHasChild element)
		{
			return new DslModeling::LinkedElementCollection<global::Neumont.Tools.ORM.ObjectModel.RoleBase>(element, ConceptTypeHasChildDomainRoleId);
		}
		#endregion
		#region ConceptTypeHasChild link accessor
		/// <summary>
		/// Get the list of ConceptTypeHasChildHasPathRole links to a ConceptTypeHasChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole> GetLinksToPathRoleCollection ( global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild conceptTypeHasChildInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole>(conceptTypeHasChildInstance, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.ConceptTypeHasChildDomainRoleId);
		}
		#endregion
		#region PathRole link accessor
		/// <summary>
		/// Get the list of ConceptTypeHasChildHasPathRole links to a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole> GetLinksToConceptTypeHasChild ( global::Neumont.Tools.ORM.ObjectModel.RoleBase pathRoleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole>(pathRoleInstance, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.PathRoleDomainRoleId);
		}
		#endregion
		#region ConceptTypeHasChildHasPathRole instance accessors
		
		/// <summary>
		/// Get any ConceptTypeHasChildHasPathRole links between a given ConceptTypeHasChild and a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole> GetLinks( global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild source, global::Neumont.Tools.ORM.ObjectModel.RoleBase target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole>(source, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.ConceptTypeHasChildDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole link in links )
			{
				if ( target.Equals(link.PathRole) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConceptTypeHasChildHasPathRole link between a given ConceptTypeHasChildand a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole GetLink( global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild source, global::Neumont.Tools.ORM.ObjectModel.RoleBase target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole>(source, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.ConceptTypeHasChildDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole link in links )
			{
				if ( target.Equals(link.PathRole) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainRelationship ChildSequenceHasConceptTypeHasChild
	/// Description for Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("37b530d4-8951-4dc7-b77a-cb6045eef9d3")]
	public partial class ChildSequenceHasConceptTypeHasChild : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ChildSequenceHasConceptTypeHasChild domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x37b530d4, 0x8951, 0x4dc7, 0xb7, 0x7a, 0xcb, 0x60, 0x45, 0xee, 0xf9, 0xd3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ChildSequenceHasConceptTypeHasChild link in the same Partition as the given ChildSequence
		/// </summary>
		/// <param name="source">ChildSequence to use as the source of the relationship.</param>
		/// <param name="target">ConceptTypeHasChild to use as the target of the relationship.</param>
		public ChildSequenceHasConceptTypeHasChild(ChildSequence source, ConceptTypeHasChild target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ChildSequenceHasConceptTypeHasChild.ChildSequenceDomainRoleId, source), new DslModeling::RoleAssignment(ChildSequenceHasConceptTypeHasChild.ConceptTypeHasChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ChildSequenceHasConceptTypeHasChild(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ChildSequenceHasConceptTypeHasChild(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ChildSequenceHasConceptTypeHasChild(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ChildSequenceHasConceptTypeHasChild(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ChildSequence domain role code
		
		/// <summary>
		/// ChildSequence domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildSequenceDomainRoleId = new global::System.Guid(0x5b867d80, 0x06c5, 0x4b15, 0x81, 0x07, 0x0a, 0xa2, 0x97, 0x25, 0x4a, 0x1b);
		
		/// <summary>
		/// DomainRole ChildSequence
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ChildSequence
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild/ChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild/ChildSequence.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConceptTypeHasChildCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild/ChildSequence.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("5b867d80-06c5-4b15-8107-0aa297254a1b")]
		public virtual ChildSequence ChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ChildSequence)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildSequenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildSequenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildSequenceCollection of a ConceptTypeHasChild
		/// <summary>
		/// Gets a list of ChildSequenceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ChildSequence> GetChildSequenceCollection(ConceptTypeHasChild element)
		{
			return new DslModeling::LinkedElementCollection<ChildSequence>(element, ConceptTypeHasChildDomainRoleId);
		}
		#endregion
		#region ConceptTypeHasChild domain role code
		
		/// <summary>
		/// ConceptTypeHasChild domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeHasChildDomainRoleId = new global::System.Guid(0x8b792457, 0x1a77, 0x4965, 0xa7, 0xb7, 0x49, 0x60, 0x07, 0xc1, 0xc3, 0x43);
		
		/// <summary>
		/// DomainRole ConceptTypeHasChild
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ConceptTypeHasChild
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild/ConceptTypeHasChild.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild/ConceptTypeHasChild.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ChildSequenceCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild/ConceptTypeHasChild.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8b792457-1a77-4965-a7b7-496007c1c343")]
		public virtual ConceptTypeHasChild ConceptTypeHasChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptTypeHasChild)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeHasChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeHasChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptTypeHasChildCollection of a ChildSequence
		/// <summary>
		/// Gets a list of ConceptTypeHasChildCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptTypeHasChild> GetConceptTypeHasChildCollection(ChildSequence element)
		{
			return new DslModeling::LinkedElementCollection<ConceptTypeHasChild>(element, ChildSequenceDomainRoleId);
		}
		#endregion
		#region ChildSequence link accessor
		/// <summary>
		/// Get the list of ChildSequenceHasConceptTypeHasChild links to a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild> GetLinksToConceptTypeHasChildCollection ( global::Neumont.Tools.ORM.OIALModel.ChildSequence childSequenceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild>(childSequenceInstance, global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ChildSequenceDomainRoleId);
		}
		#endregion
		#region ConceptTypeHasChild link accessor
		/// <summary>
		/// Get the list of ChildSequenceHasConceptTypeHasChild links to a ConceptTypeHasChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild> GetLinksToChildSequenceCollection ( global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild conceptTypeHasChildInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild>(conceptTypeHasChildInstance, global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ConceptTypeHasChildDomainRoleId);
		}
		#endregion
		#region ChildSequenceHasConceptTypeHasChild instance accessors
		
		/// <summary>
		/// Get any ChildSequenceHasConceptTypeHasChild links between a given ChildSequence and a ConceptTypeHasChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild> GetLinks( global::Neumont.Tools.ORM.OIALModel.ChildSequence source, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild>(source, global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ChildSequenceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild link in links )
			{
				if ( target.Equals(link.ConceptTypeHasChild) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ChildSequenceHasConceptTypeHasChild link between a given ChildSequenceand a ConceptTypeHasChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild GetLink( global::Neumont.Tools.ORM.OIALModel.ChildSequence source, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild>(source, global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ChildSequenceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild link in links )
			{
				if ( target.Equals(link.ConceptTypeHasChild) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
