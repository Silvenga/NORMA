//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Common Public License Copyright Notice
// /**************************************************************************\
// * Neumont Object-Role Modeling Architect for Visual Studio                 *
// *                                                                          *
// * Copyright © Neumont University. All rights reserved.                     *
// *                                                                          *
// * The use and distribution terms for this software are covered by the      *
// * Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
// * can be found in the file CPL.txt at the root of this distribution.       *
// * By using this software in any fashion, you are agreeing to be bound by   *
// * the terms of this license.                                               *
// *                                                                          *
// * You must not remove this notice, or any other, from this software.       *
// \**************************************************************************/
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.InheritBaseModel("2b131234-7959-458d-834f-2dc0769ce683")]
	[Microsoft.VisualStudio.Modeling.InheritBaseModel("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.OIALMetaModel.MetaModelGuidString, "Neumont.Tools.ORM.OIALModel.OIALMetaModel")]
	public  partial class OIALMetaModel : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region OIALMetaModel's Generated MetaClass Code
		/// <summary>
		/// MetaModel Guid String
		/// </summary>
		public const System.String MetaModelGuidString = "a03139c7-2681-4787-a82a-1cc2104c6f9b";
		/// <summary>
		/// MetaModel Guid
		/// </summary>
		public static readonly System.Guid MetaModelGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.OIALMetaModel.MetaModelGuidString);
		/// <summary>
		/// Default Constructor called by the IMS -- do not call directly
		/// </summary>
		public OIALMetaModel() : base()
		{
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALMetaModel(Microsoft.VisualStudio.Modeling.Store store) : base(store.DefaultPartition, Neumont.Tools.ORM.OIALModel.OIALMetaModel.MetaModelGuid)
		{
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALMetaModel(Microsoft.VisualStudio.Modeling.Partition partition) : base(partition, Neumont.Tools.ORM.OIALModel.OIALMetaModel.MetaModelGuid)
		{
		}
		#endregion

	}
	#region OIALMetaModel's ResourceManager Code
	public  partial class OIALMetaModel
	{
		private static System.Resources.ResourceManager resourceManager = null;
		/// <summary>
		/// The base name of this models resources.
		/// </summary>
		public const string ResourceBaseName = "Neumont.Tools.ORM.OIALModel.OIALMetaModel";
		/// <summary>
		/// Returns the SubStore's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override System.Resources.ResourceManager ResourceManager
		{
			get
			{
				return Neumont.Tools.ORM.OIALModel.OIALMetaModel.SingletonResourceManager;
			}
		}
		/// <summary>
		/// A internal object used for synchronization.
		/// </summary>
		private static object internalSyncObject;
		/// <summary>
		/// Gets the internal object used for synchronization.
		/// </summary>
		private static object InternalSyncObject 
		{
			get 
			{
				if (internalSyncObject == null) 
				{
					object o = new object();
					System.Threading.Interlocked.CompareExchange(ref internalSyncObject, o, null);
				}
				return internalSyncObject;
			}
		}
		/// <summary>
		/// Gets the Singleton ResourceManager for this SubStore
		/// </summary>
		public static System.Resources.ResourceManager SingletonResourceManager
		{
			get
			{
				if (Neumont.Tools.ORM.OIALModel.OIALMetaModel.resourceManager == null)
				{
					lock (Neumont.Tools.ORM.OIALModel.OIALMetaModel.InternalSyncObject)
					{
						if (Neumont.Tools.ORM.OIALModel.OIALMetaModel.resourceManager == null)
						{
							Neumont.Tools.ORM.OIALModel.OIALMetaModel.resourceManager = new System.Resources.ResourceManager(ResourceBaseName, typeof(Neumont.Tools.ORM.OIALModel.OIALMetaModel).Assembly);
						}
					}
				}
				return Neumont.Tools.ORM.OIALModel.OIALMetaModel.resourceManager;
			}
		}
	}
	#endregion
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	public sealed class OIALModelCopyClosure : Microsoft.VisualStudio.Modeling.IElementVisitorFilter
	{
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> metaRolesMember;
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALModelCopyClosure()
		{
			#region Initialize MetaData Table
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">MetaRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="metaRelationshipInfo">MetaRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public  Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleInfo, Microsoft.VisualStudio.Modeling.MetaRelationshipInfo metaRelationshipInfo, Microsoft.VisualStudio.Modeling.ElementLink targetRelationship)
		{
			return this.MetaRoles.ContainsKey(sourceRoleInfo.Id) ? Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes : Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetRoleInfo">MetaRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public  Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.ElementLink elementLink, Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleInfo, Microsoft.VisualStudio.Modeling.ModelElement targetRolePlayer)
		{
			foreach (Microsoft.VisualStudio.Modeling.MetaRoleInfo metaRoleInfo in elementLink.MetaRelationship.MetaRoles)
			{
				if (metaRoleInfo != targetRoleInfo && this.MetaRoles.ContainsKey(metaRoleInfo.Id))
				{
					return Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes;
				}
			}
			return Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> MetaRoles
		{
			get
			{
				if (this.metaRolesMember == null)
				{
					this.metaRolesMember = new System.Collections.Generic.Dictionary<System.Guid, System.Guid>();
				}
				return this.metaRolesMember;
			}
		}

	}
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	public sealed class OIALModelRemoveClosure : Microsoft.VisualStudio.Modeling.IElementVisitorFilter
	{
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> metaRolesMember;
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALModelRemoveClosure()
		{
			#region Initialize MetaData Table
			MetaRoles.Add(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.OIALModelMetaRoleGuid, Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.OIALModelMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ConceptTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ConceptTypeCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.InformationTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.InformationTypeCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.InformationTypeFormatCollectionMetaRoleGuid, Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.InformationTypeFormatCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeMetaRoleGuid, Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatMetaRoleGuid, Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ConceptTypeMetaRoleGuid, Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ConceptTypeMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.ChildSequenceMetaRoleGuid, Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.ChildSequenceMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubChildSequenceMetaRoleGuid, Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubChildSequenceMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SuperChildSequenceMetaRoleGuid, Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SuperChildSequenceMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.ChildSequenceMetaRoleGuid, Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.ChildSequenceMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.SingleChildConstraintCollectionMetaRoleGuid, Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.SingleChildConstraintCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintCollectionMetaRoleGuid, Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.ConceptTypeHasChildMetaRoleGuid, Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.ConceptTypeHasChildMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ChildSequenceCollectionMetaRoleGuid, Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ChildSequenceCollectionMetaRoleGuid);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">MetaRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="metaRelationshipInfo">MetaRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public  Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleInfo, Microsoft.VisualStudio.Modeling.MetaRelationshipInfo metaRelationshipInfo, Microsoft.VisualStudio.Modeling.ElementLink targetRelationship)
		{
			return Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetRoleInfo">MetaRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public  Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.ElementLink elementLink, Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleInfo, Microsoft.VisualStudio.Modeling.ModelElement targetRolePlayer)
		{
			return this.MetaRoles.ContainsKey(targetRoleInfo.Id) ? Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes : Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> MetaRoles
		{
			get
			{
				if (this.metaRolesMember == null)
				{
					this.metaRolesMember = new System.Collections.Generic.Dictionary<System.Guid, System.Guid>();
				}
				return this.metaRolesMember;
			}
		}

	}
	#region OIALMetaModel's Generated Closure Code
	public  partial class OIALMetaModel
	{
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.IElementVisitorFilter copyClosureMember;
		/// <summary>
		/// RemoveClosure cache
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.IElementVisitorFilter removeClosureMember;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override Microsoft.VisualStudio.Modeling.IElementVisitorFilter GetClosureFilter(Microsoft.VisualStudio.Modeling.ClosureType type, System.Collections.ICollection rootElements)
		{
			switch (type)
			{
				case Microsoft.VisualStudio.Modeling.ClosureType.CopyClosure:
					return OIALMetaModel.CopyClosure;
				case Microsoft.VisualStudio.Modeling.ClosureType.RemoveClosure:
					return OIALMetaModel.RemoveClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.IElementVisitorFilter CopyClosure
		{
			get
			{
				if (OIALMetaModel.copyClosureMember == null)
				{
					OIALMetaModel.copyClosureMember = new OIALModelCopyClosure();
				}
				return OIALMetaModel.copyClosureMember;
			}
		}
		/// <summary>
		/// RemoveClosure cache
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.IElementVisitorFilter RemoveClosure
		{
			get
			{
				if (OIALMetaModel.removeClosureMember == null)
				{
					OIALMetaModel.removeClosureMember = new OIALModelRemoveClosure();
				}
				return OIALMetaModel.removeClosureMember;
			}
		}
	}
	#endregion
	/// <summary>
	/// 
	/// </summary>
	public  partial class OIALMetaModel : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region OIALMetaModel's AllGeneratedMetaModelTypes Code
		/// <summary>
		/// Virtual method that returns a collection of all types for metamodel 
		/// </summary>
		protected sealed override System.Type[] AllGeneratedMetaModelTypes()
		{
			System.Type[] typeArray = new System.Type[]
			{
				typeof(Neumont.Tools.ORM.OIALModel.OIALMetaModel),
				typeof(Neumont.Tools.ORM.OIALModel.OIALModel),
				typeof(Neumont.Tools.ORM.OIALModel.OIALModelElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.ConceptType),
				typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.InformationType),
				typeof(Neumont.Tools.ORM.OIALModel.InformationTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat),
				typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormatElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.ChildSequence),
				typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequence),
				typeof(Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequenceElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.Constraint),
				typeof(Neumont.Tools.ORM.OIALModel.SingleChildConstraint),
				typeof(Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint),
				typeof(Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.SingleChildFrequencyConstraint),
				typeof(Neumont.Tools.ORM.OIALModel.SingleChildFrequencyConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.ValueConstraint),
				typeof(Neumont.Tools.ORM.OIALModel.ValueConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint),
				typeof(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraint),
				typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceFrequencyConstraint),
				typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceFrequencyConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.RingConstraint),
				typeof(Neumont.Tools.ORM.OIALModel.RingConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.DisjunctiveMandatoryConstraint),
				typeof(Neumont.Tools.ORM.OIALModel.DisjunctiveMandatoryConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint),
				typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.MultiChildSequenceConstraint),
				typeof(Neumont.Tools.ORM.OIALModel.SubsetConstraint),
				typeof(Neumont.Tools.ORM.OIALModel.SubsetConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraint),
				typeof(Neumont.Tools.ORM.OIALModel.ExclusionConstraint),
				typeof(Neumont.Tools.ORM.OIALModel.ExclusionConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.EqualityConstraint),
				typeof(Neumont.Tools.ORM.OIALModel.EqualityConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel),
				typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModelElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType),
				typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild),
				typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType),
				typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType),
				typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeRef),
				typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeRefElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat),
				typeof(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormatElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat),
				typeof(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormatElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType),
				typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType),
				typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence),
				typeof(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence),
				typeof(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequenceElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence),
				typeof(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequenceElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence),
				typeof(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequenceElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence),
				typeof(Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequenceElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint),
				typeof(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint),
				typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole),
				typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRoleElementFactoryCreator),
				typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild),
				typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChildElementFactoryCreator),

			};
			return typeArray;
		}
		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public  partial class OIALMetaModel : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region OIALMetaModel's GeneratedReflectedMetaAttributes Code
		/// <summary>
		/// Virtual method that returns a collection of all fields for all types in metamodel OIALMetaModel
		/// </summary>
		protected sealed override Microsoft.VisualStudio.Modeling.MetaFieldInfo[] GeneratedReflectedMetaAttributes()
		{
			Microsoft.VisualStudio.Modeling.MetaFieldInfo[] typeArray = new Microsoft.VisualStudio.Modeling.MetaFieldInfo[]
			{
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.OIALModel.Constraint), "Modality", Neumont.Tools.ORM.OIALModel.Constraint.ModalityMetaAttributeGuid, typeof(Neumont.Tools.ORM.OIALModel.Constraint.ConstraintModalityFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint), "IsPreferred", Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint.IsPreferredMetaAttributeGuid, typeof(Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint.SingleChildUniquenessConstraintIsPreferredFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint), "IsPreferred", Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint.IsPreferredMetaAttributeGuid, typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint.ChildSequenceUniquenessConstraintIsPreferredFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild), "Mandatory", Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.MandatoryMetaAttributeGuid, typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.ConceptTypeHasChildMandatoryFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeRef), "OppositeName", Neumont.Tools.ORM.OIALModel.ConceptTypeRef.OppositeNameMetaAttributeGuid, typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ConceptTypeRefOppositeNameFieldHandler)),

			};
			return typeArray;
		}
		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public  partial class OIALMetaModel : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region OIALMetaModel's GeneratedReflectedMetaRoleAttributes Code
		/// <summary>
		/// Virtual method that returns a collection of all fields for all types in metamodel OIALMetaModel
		/// </summary>
		protected sealed override Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[] GeneratedReflectedMetaRoles()
		{
			Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[] typeArray = new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[]
			{
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel), "ORMModel", Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.ORMModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel), "OIALModel", Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.OIALModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType), "ConceptTypeCollection", Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ConceptTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType), "Model", Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType), "AbsorbedConceptTypeCollection", Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType), "AbsorbingConceptType", Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType), "InformationTypeCollection", Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.InformationTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType), "ConceptType", Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.ConceptTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeRef), "ReferencedConceptTypeCollection", Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ReferencedConceptTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeRef), "ReferencingConceptType", Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ReferencingConceptTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat), "InformationTypeFormatCollection", Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.InformationTypeFormatCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat), "Model", Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat), "InformationTypeFormat", Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeFormatMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat), "InformationType", Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType), "ValueType", Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.ValueTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType), "InformationTypeFormat", Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType), "ObjectType", Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ObjectTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType), "ConceptType", Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ConceptTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence), "ChildSequence", Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.ChildSequenceMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence), "SingleChildSequenceConstraint", Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence), "SubChildSequence", Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubChildSequenceMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence), "SubsetConstraint", Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence), "SuperChildSequence", Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SuperChildSequenceMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence), "SubsetConstraint", Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence), "ChildSequence", Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.ChildSequenceMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence), "TwoOrMoreChildSequenceConstraint", Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint), "SingleChildConstraintCollection", Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.SingleChildConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint), "ConceptTypeHasChild", Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.ConceptTypeHasChildMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint), "ChildSequenceConstraintCollection", Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint), "OIALModel", Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.OIALModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole), "PathRoleCollection", Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.PathRoleCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole), "ConceptTypeHasChild", Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.ConceptTypeHasChildMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild), "ConceptTypeHasChildCollection", Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ConceptTypeHasChildCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild), "ChildSequenceCollection", Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ChildSequenceCollectionMetaRoleGuid),

			};
			return typeArray;
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.OIALModel.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.OIALModel")]
	public  partial class OIALModel : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region OIALModel's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "389feefc-760c-45fa-bf8a-92985850b4b8";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.OIALModel.MetaClassGuidString);
		#endregion

		#region ORMModel's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ORMModel ORMModel
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.OIALModelMetaRoleGuid, Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.ORMModelMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ORMModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.OIALModelMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.ORMModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ORMModel counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ORMModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.ORMModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.OIALModelMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel), newRoles);
				}
			}
		}
		#endregion
		#region ConceptTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.ConceptTypeMoveableCollection ConceptTypeCollection
		{
			get { return new Neumont.Tools.ORM.OIALModel.ConceptTypeMoveableCollection(this, Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ModelMetaRoleGuid, Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ConceptTypeCollectionMetaRoleGuid); }
		}
		#endregion
		#region InformationTypeFormatCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.InformationTypeFormatMoveableCollection InformationTypeFormatCollection
		{
			get { return new Neumont.Tools.ORM.OIALModel.InformationTypeFormatMoveableCollection(this, Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.ModelMetaRoleGuid, Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.InformationTypeFormatCollectionMetaRoleGuid); }
		}
		#endregion
		#region ChildSequenceConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintMoveableCollection ChildSequenceConstraintCollection
		{
			get { return new Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintMoveableCollection(this, Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.OIALModelMetaRoleGuid, Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region OIALModel's Generated Constructor Code
	public  partial class OIALModel
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALModel(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALModel CreateOIALModel(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateOIALModel(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALModel CreateAndInitializeOIALModel(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeOIALModel(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALModel(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALModel CreateOIALModel(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (OIALModel)partition.ElementFactory.CreateElement(typeof(OIALModel));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALModel CreateAndInitializeOIALModel(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (OIALModel)partition.ElementFactory.CreateElement(typeof(OIALModel), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for OIALModel
	/// <summary>
	/// OIALModel Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.OIALModel))]
	public sealed class OIALModelElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALModelElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.OIALModel( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static OIALModelElementFactoryCreator Instance
		{
			get
			{
				return new OIALModelElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptType.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.ConceptType")]
	public  partial class ConceptType : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region ConceptType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "f9c72d58-d230-4007-892f-473c839ebbd2";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptType.MetaClassGuidString);
		#endregion

		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.OIALModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ConceptTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ModelMetaRoleGuid, false) as Neumont.Tools.ORM.OIALModel.OIALModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ConceptTypeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.OIALModel.OIALModel counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.OIALModel.OIALModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ConceptTypeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType), newRoles);
				}
			}
		}
		#endregion
		#region AbsorbingConceptType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.ConceptType AbsorbingConceptType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptTypeMetaRoleGuid, false) as Neumont.Tools.ORM.OIALModel.ConceptType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.OIALModel.ConceptType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.OIALModel.ConceptType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType), newRoles);
				}
			}
		}
		#endregion
		#region AbsorbedConceptTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.ConceptTypeMoveableCollection AbsorbedConceptTypeCollection
		{
			get { return new Neumont.Tools.ORM.OIALModel.ConceptTypeMoveableCollection(this, Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptTypeMetaRoleGuid, Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeCollectionMetaRoleGuid); }
		}
		#endregion
		#region InformationTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.InformationTypeMoveableCollection InformationTypeCollection
		{
			get { return new Neumont.Tools.ORM.OIALModel.InformationTypeMoveableCollection(this, Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.ConceptTypeMetaRoleGuid, Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.InformationTypeCollectionMetaRoleGuid); }
		}
		#endregion
		#region ReferencedConceptTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.ConceptTypeMoveableCollection ReferencedConceptTypeCollection
		{
			get { return new Neumont.Tools.ORM.OIALModel.ConceptTypeMoveableCollection(this, Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ReferencingConceptTypeMetaRoleGuid, Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ReferencedConceptTypeCollectionMetaRoleGuid); }
		}
		#endregion
		#region ObjectType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ObjectType ObjectType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ConceptTypeMetaRoleGuid, Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ObjectTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ObjectType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ConceptTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ObjectTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ObjectType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ObjectType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ObjectTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ConceptTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for ConceptType
	/// <summary>
	/// Neumont.Tools.ORM.OIALModel.ConceptType Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ConceptTypeMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ConceptTypeMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ConceptType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ConceptType))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ConceptType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ConceptType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ConceptType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ConceptType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ConceptType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ConceptType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ConceptType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ConceptType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ConceptType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ConceptType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ConceptType) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ConceptType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ConceptType) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ConceptType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.OIALModel.ConceptType[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.OIALModel.ConceptType at that index</returns>
		public Neumont.Tools.ORM.OIALModel.ConceptType this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.OIALModel.ConceptType)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ConceptType to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.OIALModel.ConceptType value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ConceptType to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.OIALModel.ConceptType value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ConceptType to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.OIALModel.ConceptType value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ConceptType to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.OIALModel.ConceptType value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ConceptType to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.OIALModel.ConceptType value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.OIALModel.ConceptType rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.OIALModel.ConceptType rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ConceptType's Generated Constructor Code
	public  partial class ConceptType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptType CreateConceptType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateConceptType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptType CreateAndInitializeConceptType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeConceptType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptType CreateConceptType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ConceptType)partition.ElementFactory.CreateElement(typeof(ConceptType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptType CreateAndInitializeConceptType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ConceptType)partition.ElementFactory.CreateElement(typeof(ConceptType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ConceptType
	/// <summary>
	/// ConceptType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.ConceptType))]
	public sealed class ConceptTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.ConceptType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ConceptTypeElementFactoryCreator Instance
		{
			get
			{
				return new ConceptTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.InformationType.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.InformationType")]
	public  partial class InformationType : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region InformationType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "590cb11f-25c9-47fd-bc7e-998ce0a038fa";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.InformationType.MetaClassGuidString);
		#endregion

		#region ConceptType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.ConceptType ConceptType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.InformationTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.ConceptTypeMetaRoleGuid, false) as Neumont.Tools.ORM.OIALModel.ConceptType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.InformationTypeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.ConceptTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.OIALModel.ConceptType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.OIALModel.ConceptType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.ConceptTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.InformationTypeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType), newRoles);
				}
			}
		}
		#endregion
		#region InformationTypeFormat's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.InformationTypeFormat InformationTypeFormat
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeMetaRoleGuid, Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeFormatMetaRoleGuid, false) as Neumont.Tools.ORM.OIALModel.InformationTypeFormat;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeFormatMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.OIALModel.InformationTypeFormat counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.OIALModel.InformationTypeFormat;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeFormatMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for InformationType
	/// <summary>
	/// Neumont.Tools.ORM.OIALModel.InformationType Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class InformationTypeMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public InformationTypeMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.InformationType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.InformationType))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.InformationType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.InformationType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.InformationType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.InformationType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.InformationType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.InformationType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.InformationType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.InformationType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.InformationType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.InformationType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.OIALModel.InformationType) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.InformationType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.OIALModel.InformationType) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.InformationType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.OIALModel.InformationType[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.OIALModel.InformationType at that index</returns>
		public Neumont.Tools.ORM.OIALModel.InformationType this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.OIALModel.InformationType)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.InformationType to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.OIALModel.InformationType value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.InformationType to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.OIALModel.InformationType value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.InformationType to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.OIALModel.InformationType value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.InformationType to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.OIALModel.InformationType value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.InformationType to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.OIALModel.InformationType value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.OIALModel.InformationType rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.OIALModel.InformationType rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region InformationType's Generated Constructor Code
	public  partial class InformationType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public InformationType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InformationType CreateInformationType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateInformationType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InformationType CreateAndInitializeInformationType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeInformationType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public InformationType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InformationType CreateInformationType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (InformationType)partition.ElementFactory.CreateElement(typeof(InformationType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InformationType CreateAndInitializeInformationType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (InformationType)partition.ElementFactory.CreateElement(typeof(InformationType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for InformationType
	/// <summary>
	/// InformationType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.InformationType))]
	public sealed class InformationTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public InformationTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.InformationType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static InformationTypeElementFactoryCreator Instance
		{
			get
			{
				return new InformationTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.InformationTypeFormat.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.InformationTypeFormat")]
	public  partial class InformationTypeFormat : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region InformationTypeFormat's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "9e86633c-51b1-424e-8f47-c8f4ad385543";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.InformationTypeFormat.MetaClassGuidString);
		#endregion

		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.OIALModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.InformationTypeFormatCollectionMetaRoleGuid, Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.ModelMetaRoleGuid, false) as Neumont.Tools.ORM.OIALModel.OIALModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.InformationTypeFormatCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.OIALModel.OIALModel counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.OIALModel.OIALModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.InformationTypeFormatCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat), newRoles);
				}
			}
		}
		#endregion
		#region ValueType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ObjectType ValueType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatMetaRoleGuid, Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.ValueTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ObjectType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.ValueTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ObjectType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ObjectType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.ValueTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for InformationTypeFormat
	/// <summary>
	/// Neumont.Tools.ORM.OIALModel.InformationTypeFormat Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class InformationTypeFormatMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public InformationTypeFormatMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.OIALModel.InformationTypeFormat[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.OIALModel.InformationTypeFormat at that index</returns>
		public Neumont.Tools.ORM.OIALModel.InformationTypeFormat this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.OIALModel.InformationTypeFormat)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.InformationTypeFormat to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.OIALModel.InformationTypeFormat value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.InformationTypeFormat to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.OIALModel.InformationTypeFormat value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.InformationTypeFormat to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.OIALModel.InformationTypeFormat value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.InformationTypeFormat to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.OIALModel.InformationTypeFormat value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.InformationTypeFormat to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.OIALModel.InformationTypeFormat value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.OIALModel.InformationTypeFormat rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.OIALModel.InformationTypeFormat rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region InformationTypeFormat's Generated Constructor Code
	public  partial class InformationTypeFormat
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public InformationTypeFormat(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InformationTypeFormat CreateInformationTypeFormat(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateInformationTypeFormat(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InformationTypeFormat CreateAndInitializeInformationTypeFormat(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeInformationTypeFormat(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public InformationTypeFormat(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InformationTypeFormat CreateInformationTypeFormat(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (InformationTypeFormat)partition.ElementFactory.CreateElement(typeof(InformationTypeFormat));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InformationTypeFormat CreateAndInitializeInformationTypeFormat(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (InformationTypeFormat)partition.ElementFactory.CreateElement(typeof(InformationTypeFormat), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for InformationTypeFormat
	/// <summary>
	/// InformationTypeFormat Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormat))]
	public sealed class InformationTypeFormatElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public InformationTypeFormatElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.InformationTypeFormat( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static InformationTypeFormatElementFactoryCreator Instance
		{
			get
			{
				return new InformationTypeFormatElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ChildSequence.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.ChildSequence")]
	public  partial class ChildSequence : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region ChildSequence's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "f7c7a5f7-c63d-4ce1-b382-6331e8a406ec";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ChildSequence.MetaClassGuidString);
		#endregion

		#region ConceptTypeHasChildCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildMoveableCollection ConceptTypeHasChildCollection
		{
			get { return new Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildMoveableCollection(this, Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ChildSequenceCollectionMetaRoleGuid, Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ConceptTypeHasChildCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region Collection Classes for ChildSequence
	/// <summary>
	/// Neumont.Tools.ORM.OIALModel.ChildSequence Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ChildSequenceMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ChildSequenceMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ChildSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ChildSequence))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ChildSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ChildSequence))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ChildSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ChildSequence))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ChildSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ChildSequence))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ChildSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ChildSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ChildSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ChildSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ChildSequence) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ChildSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ChildSequence) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ChildSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.OIALModel.ChildSequence[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.OIALModel.ChildSequence at that index</returns>
		public Neumont.Tools.ORM.OIALModel.ChildSequence this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.OIALModel.ChildSequence)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ChildSequence to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.OIALModel.ChildSequence value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ChildSequence to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.OIALModel.ChildSequence value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ChildSequence to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.OIALModel.ChildSequence value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ChildSequence to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.OIALModel.ChildSequence value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ChildSequence to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.OIALModel.ChildSequence value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.OIALModel.ChildSequence rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.OIALModel.ChildSequence rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ChildSequence's Generated Constructor Code
	public  partial class ChildSequence
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ChildSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildSequence CreateChildSequence(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateChildSequence(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildSequence CreateAndInitializeChildSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeChildSequence(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ChildSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildSequence CreateChildSequence(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ChildSequence)partition.ElementFactory.CreateElement(typeof(ChildSequence));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildSequence CreateAndInitializeChildSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ChildSequence)partition.ElementFactory.CreateElement(typeof(ChildSequence), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ChildSequence
	/// <summary>
	/// ChildSequence Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.ChildSequence))]
	public sealed class ChildSequenceElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ChildSequenceElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.ChildSequence( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ChildSequenceElementFactoryCreator Instance
		{
			get
			{
				return new ChildSequenceElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequence.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequence")]
	public  partial class MinTwoChildrenChildSequence : Neumont.Tools.ORM.OIALModel.ChildSequence
	{
		#region MinTwoChildrenChildSequence's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "723abdd9-8186-48d1-9695-d6bf3edd72f7";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequence.MetaClassGuidString);
		#endregion

	}
	#region MinTwoChildrenChildSequence's Generated Constructor Code
	public  partial class MinTwoChildrenChildSequence
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MinTwoChildrenChildSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MinTwoChildrenChildSequence CreateMinTwoChildrenChildSequence(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateMinTwoChildrenChildSequence(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MinTwoChildrenChildSequence CreateAndInitializeMinTwoChildrenChildSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeMinTwoChildrenChildSequence(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public MinTwoChildrenChildSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MinTwoChildrenChildSequence CreateMinTwoChildrenChildSequence(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (MinTwoChildrenChildSequence)partition.ElementFactory.CreateElement(typeof(MinTwoChildrenChildSequence));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MinTwoChildrenChildSequence CreateAndInitializeMinTwoChildrenChildSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (MinTwoChildrenChildSequence)partition.ElementFactory.CreateElement(typeof(MinTwoChildrenChildSequence), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for MinTwoChildrenChildSequence
	/// <summary>
	/// MinTwoChildrenChildSequence Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequence))]
	public sealed class MinTwoChildrenChildSequenceElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MinTwoChildrenChildSequenceElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequence( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static MinTwoChildrenChildSequenceElementFactoryCreator Instance
		{
			get
			{
				return new MinTwoChildrenChildSequenceElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.Constraint.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.Constraint")]
	public abstract partial class Constraint : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region Constraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "a8dfd2b6-9f0c-452a-b904-7555f4af10da";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.Constraint.MetaClassGuidString);
		#endregion

		#region Modality's Generated  Field Code
		#region Modality's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ModalityMetaAttributeGuidString = "ce78b861-4894-4b4b-98db-2d9b1e763789";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ModalityMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.Constraint.ModalityMetaAttributeGuidString);
		#endregion

		#region Modality's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ConstraintModalityFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.Constraint.ModalityMetaAttributeGuidString, "Neumont.Tools.ORM.OIALModel.Constraint.Modality")]
		public  Neumont.Tools.ORM.ObjectModel.ConstraintModality Modality
		{
			get
			{
				return constraintModalityFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				constraintModalityFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ConstraintModalityFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Constraint.Modality field
		/// </summary>
		private static ConstraintModalityFieldHandler	constraintModalityFieldHandler	= ConstraintModalityFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Constraint.Modality
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ConstraintModalityFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.OIALModel.Constraint,Neumont.Tools.ORM.ObjectModel.ConstraintModality>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ConstraintModalityFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Constraint.Modality field handler
			/// </summary>
			/// <value>ConstraintModalityFieldHandler</value>
			public static ConstraintModalityFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.OIALModel.Constraint.constraintModalityFieldHandler != null)
					{
						return Neumont.Tools.ORM.OIALModel.Constraint.constraintModalityFieldHandler;
					}
					else
					{
						// The static constructor in Constraint will assign this value to
						// Neumont.Tools.ORM.OIALModel.Constraint.constraintModalityFieldHandler, so just instantiate one and return it
						return new ConstraintModalityFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Constraint.Modality field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.OIALModel.Constraint.ModalityMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
	}
	#region Constraint's Generated Constructor Code
	public abstract partial class Constraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected Constraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.SingleChildConstraint.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.SingleChildConstraint")]
	public abstract partial class SingleChildConstraint : Neumont.Tools.ORM.OIALModel.Constraint
	{
		#region SingleChildConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "495895d3-50ec-4ef1-9792-bb5c2c916cf8";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.SingleChildConstraint.MetaClassGuidString);
		#endregion

		#region ConceptTypeHasChild's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild ConceptTypeHasChild
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.SingleChildConstraintCollectionMetaRoleGuid, Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.ConceptTypeHasChildMetaRoleGuid, false) as Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.SingleChildConstraintCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.ConceptTypeHasChildMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.ConceptTypeHasChildMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.SingleChildConstraintCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for SingleChildConstraint
	/// <summary>
	/// Neumont.Tools.ORM.OIALModel.SingleChildConstraint Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class SingleChildConstraintMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public SingleChildConstraintMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.SingleChildConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.SingleChildConstraint))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.SingleChildConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.SingleChildConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.SingleChildConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.SingleChildConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.SingleChildConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.SingleChildConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.SingleChildConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.SingleChildConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.SingleChildConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.SingleChildConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.OIALModel.SingleChildConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.SingleChildConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.OIALModel.SingleChildConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.SingleChildConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.OIALModel.SingleChildConstraint[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.OIALModel.SingleChildConstraint at that index</returns>
		public Neumont.Tools.ORM.OIALModel.SingleChildConstraint this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.OIALModel.SingleChildConstraint)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.SingleChildConstraint to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.OIALModel.SingleChildConstraint value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.SingleChildConstraint to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.OIALModel.SingleChildConstraint value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.SingleChildConstraint to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.OIALModel.SingleChildConstraint value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.SingleChildConstraint to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.OIALModel.SingleChildConstraint value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.SingleChildConstraint to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.OIALModel.SingleChildConstraint value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.OIALModel.SingleChildConstraint rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.OIALModel.SingleChildConstraint rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region SingleChildConstraint's Generated Constructor Code
	public abstract partial class SingleChildConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected SingleChildConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint")]
	public  partial class SingleChildUniquenessConstraint : Neumont.Tools.ORM.OIALModel.SingleChildConstraint
	{
		#region SingleChildUniquenessConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c83e583d-6765-40b4-b114-e251789ac129";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint.MetaClassGuidString);
		#endregion

		#region IsPreferred's Generated  Field Code
		#region IsPreferred's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsPreferredMetaAttributeGuidString = "8bbf8f22-cb28-4a5c-a768-45c889103a6a";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsPreferredMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint.IsPreferredMetaAttributeGuidString);
		#endregion

		#region IsPreferred's Generated Property Code

		private System.Boolean isPreferredPropertyStorage = false;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(SingleChildUniquenessConstraintIsPreferredFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint.IsPreferredMetaAttributeGuidString, "Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint.IsPreferred")]
		public  System.Boolean IsPreferred
		{
			get
			{
				return isPreferredPropertyStorage;
			}
		
			set
			{
				singleChildUniquenessConstraintIsPreferredFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region SingleChildUniquenessConstraintIsPreferredFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for SingleChildUniquenessConstraint.IsPreferred field
		/// </summary>
		private static SingleChildUniquenessConstraintIsPreferredFieldHandler	singleChildUniquenessConstraintIsPreferredFieldHandler	= SingleChildUniquenessConstraintIsPreferredFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for SingleChildUniquenessConstraint.IsPreferred
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class SingleChildUniquenessConstraintIsPreferredFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private SingleChildUniquenessConstraintIsPreferredFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the SingleChildUniquenessConstraint.IsPreferred field handler
			/// </summary>
			/// <value>SingleChildUniquenessConstraintIsPreferredFieldHandler</value>
			public static SingleChildUniquenessConstraintIsPreferredFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint.singleChildUniquenessConstraintIsPreferredFieldHandler != null)
					{
						return Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint.singleChildUniquenessConstraintIsPreferredFieldHandler;
					}
					else
					{
						// The static constructor in SingleChildUniquenessConstraint will assign this value to
						// Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint.singleChildUniquenessConstraintIsPreferredFieldHandler, so just instantiate one and return it
						return new SingleChildUniquenessConstraintIsPreferredFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the SingleChildUniquenessConstraint.IsPreferred field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint.IsPreferredMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the SingleChildUniquenessConstraint</param>
			protected sealed override System.Boolean GetValue(Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint element)
			{
				return element.isPreferredPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint element, System.Boolean value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Boolean oldValue)
			{
				oldValue = element.isPreferredPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.isPreferredPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
	}
	#region SingleChildUniquenessConstraint's Generated Constructor Code
	public  partial class SingleChildUniquenessConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleChildUniquenessConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleChildUniquenessConstraint CreateSingleChildUniquenessConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateSingleChildUniquenessConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleChildUniquenessConstraint CreateAndInitializeSingleChildUniquenessConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSingleChildUniquenessConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleChildUniquenessConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleChildUniquenessConstraint CreateSingleChildUniquenessConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (SingleChildUniquenessConstraint)partition.ElementFactory.CreateElement(typeof(SingleChildUniquenessConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleChildUniquenessConstraint CreateAndInitializeSingleChildUniquenessConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SingleChildUniquenessConstraint)partition.ElementFactory.CreateElement(typeof(SingleChildUniquenessConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SingleChildUniquenessConstraint
	/// <summary>
	/// SingleChildUniquenessConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint))]
	public sealed class SingleChildUniquenessConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleChildUniquenessConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SingleChildUniquenessConstraintElementFactoryCreator Instance
		{
			get
			{
				return new SingleChildUniquenessConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.SingleChildFrequencyConstraint.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.SingleChildFrequencyConstraint")]
	public  partial class SingleChildFrequencyConstraint : Neumont.Tools.ORM.OIALModel.SingleChildConstraint
	{
		#region SingleChildFrequencyConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "074e74e2-ec3e-439f-8478-0270d1ca1d72";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.SingleChildFrequencyConstraint.MetaClassGuidString);
		#endregion

	}
	#region SingleChildFrequencyConstraint's Generated Constructor Code
	public  partial class SingleChildFrequencyConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleChildFrequencyConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleChildFrequencyConstraint CreateSingleChildFrequencyConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateSingleChildFrequencyConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleChildFrequencyConstraint CreateAndInitializeSingleChildFrequencyConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSingleChildFrequencyConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleChildFrequencyConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleChildFrequencyConstraint CreateSingleChildFrequencyConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (SingleChildFrequencyConstraint)partition.ElementFactory.CreateElement(typeof(SingleChildFrequencyConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleChildFrequencyConstraint CreateAndInitializeSingleChildFrequencyConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SingleChildFrequencyConstraint)partition.ElementFactory.CreateElement(typeof(SingleChildFrequencyConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SingleChildFrequencyConstraint
	/// <summary>
	/// SingleChildFrequencyConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.SingleChildFrequencyConstraint))]
	public sealed class SingleChildFrequencyConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleChildFrequencyConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.SingleChildFrequencyConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SingleChildFrequencyConstraintElementFactoryCreator Instance
		{
			get
			{
				return new SingleChildFrequencyConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ValueConstraint.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.ValueConstraint")]
	public  partial class ValueConstraint : Neumont.Tools.ORM.OIALModel.SingleChildConstraint
	{
		#region ValueConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "30e30f14-c7b6-41b9-aa6f-62d9644b5294";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ValueConstraint.MetaClassGuidString);
		#endregion

	}
	#region ValueConstraint's Generated Constructor Code
	public  partial class ValueConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraint CreateValueConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateValueConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraint CreateAndInitializeValueConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraint CreateValueConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ValueConstraint)partition.ElementFactory.CreateElement(typeof(ValueConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraint CreateAndInitializeValueConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueConstraint)partition.ElementFactory.CreateElement(typeof(ValueConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueConstraint
	/// <summary>
	/// ValueConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.ValueConstraint))]
	public sealed class ValueConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.ValueConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueConstraintElementFactoryCreator Instance
		{
			get
			{
				return new ValueConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint")]
	public abstract partial class ChildSequenceConstraint : Neumont.Tools.ORM.OIALModel.Constraint
	{
		#region ChildSequenceConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "bb0172e2-5f4c-42d5-a724-07f3accc75b6";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint.MetaClassGuidString);
		#endregion

		#region OIALModel's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.OIALModel OIALModel
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintCollectionMetaRoleGuid, Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.OIALModelMetaRoleGuid, false) as Neumont.Tools.ORM.OIALModel.OIALModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.OIALModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.OIALModel.OIALModel counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.OIALModel.OIALModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.OIALModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for ChildSequenceConstraint
	/// <summary>
	/// Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ChildSequenceConstraintMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ChildSequenceConstraintMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint at that index</returns>
		public Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ChildSequenceConstraint's Generated Constructor Code
	public abstract partial class ChildSequenceConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ChildSequenceConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraint.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraint")]
	public abstract partial class SingleChildSequenceConstraint : Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint
	{
		#region SingleChildSequenceConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "1a9e5b48-3b33-4e9f-a6cf-39aa8b5aaf43";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraint.MetaClassGuidString);
		#endregion

		#region ChildSequence's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequence ChildSequence
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintMetaRoleGuid, Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.ChildSequenceMetaRoleGuid, false) as Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequence;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.ChildSequenceMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequence counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequence;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.ChildSequenceMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence), newRoles);
				}
			}
		}
		#endregion
	}
	#region SingleChildSequenceConstraint's Generated Constructor Code
	public abstract partial class SingleChildSequenceConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected SingleChildSequenceConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ChildSequenceFrequencyConstraint.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.ChildSequenceFrequencyConstraint")]
	public  partial class ChildSequenceFrequencyConstraint : Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraint
	{
		#region ChildSequenceFrequencyConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "6539a0f1-283a-48a6-951e-7dfa5e635578";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ChildSequenceFrequencyConstraint.MetaClassGuidString);
		#endregion

	}
	#region ChildSequenceFrequencyConstraint's Generated Constructor Code
	public  partial class ChildSequenceFrequencyConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ChildSequenceFrequencyConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildSequenceFrequencyConstraint CreateChildSequenceFrequencyConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateChildSequenceFrequencyConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildSequenceFrequencyConstraint CreateAndInitializeChildSequenceFrequencyConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeChildSequenceFrequencyConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ChildSequenceFrequencyConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildSequenceFrequencyConstraint CreateChildSequenceFrequencyConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ChildSequenceFrequencyConstraint)partition.ElementFactory.CreateElement(typeof(ChildSequenceFrequencyConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildSequenceFrequencyConstraint CreateAndInitializeChildSequenceFrequencyConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ChildSequenceFrequencyConstraint)partition.ElementFactory.CreateElement(typeof(ChildSequenceFrequencyConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ChildSequenceFrequencyConstraint
	/// <summary>
	/// ChildSequenceFrequencyConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceFrequencyConstraint))]
	public sealed class ChildSequenceFrequencyConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ChildSequenceFrequencyConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.ChildSequenceFrequencyConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ChildSequenceFrequencyConstraintElementFactoryCreator Instance
		{
			get
			{
				return new ChildSequenceFrequencyConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.RingConstraint.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.RingConstraint")]
	public  partial class RingConstraint : Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraint
	{
		#region RingConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "16588be2-1d34-4524-8043-0b02a8b6829a";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.RingConstraint.MetaClassGuidString);
		#endregion

	}
	#region RingConstraint's Generated Constructor Code
	public  partial class RingConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraint CreateRingConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateRingConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraint CreateAndInitializeRingConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRingConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraint CreateRingConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (RingConstraint)partition.ElementFactory.CreateElement(typeof(RingConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraint CreateAndInitializeRingConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RingConstraint)partition.ElementFactory.CreateElement(typeof(RingConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RingConstraint
	/// <summary>
	/// RingConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.RingConstraint))]
	public sealed class RingConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.RingConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RingConstraintElementFactoryCreator Instance
		{
			get
			{
				return new RingConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.DisjunctiveMandatoryConstraint.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.DisjunctiveMandatoryConstraint")]
	public  partial class DisjunctiveMandatoryConstraint : Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraint
	{
		#region DisjunctiveMandatoryConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "a36e529b-736e-49ca-adbd-f1a536d95bd1";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.DisjunctiveMandatoryConstraint.MetaClassGuidString);
		#endregion

	}
	#region DisjunctiveMandatoryConstraint's Generated Constructor Code
	public  partial class DisjunctiveMandatoryConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DisjunctiveMandatoryConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DisjunctiveMandatoryConstraint CreateDisjunctiveMandatoryConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateDisjunctiveMandatoryConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DisjunctiveMandatoryConstraint CreateAndInitializeDisjunctiveMandatoryConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeDisjunctiveMandatoryConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public DisjunctiveMandatoryConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DisjunctiveMandatoryConstraint CreateDisjunctiveMandatoryConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (DisjunctiveMandatoryConstraint)partition.ElementFactory.CreateElement(typeof(DisjunctiveMandatoryConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DisjunctiveMandatoryConstraint CreateAndInitializeDisjunctiveMandatoryConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (DisjunctiveMandatoryConstraint)partition.ElementFactory.CreateElement(typeof(DisjunctiveMandatoryConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for DisjunctiveMandatoryConstraint
	/// <summary>
	/// DisjunctiveMandatoryConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.DisjunctiveMandatoryConstraint))]
	public sealed class DisjunctiveMandatoryConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DisjunctiveMandatoryConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.DisjunctiveMandatoryConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static DisjunctiveMandatoryConstraintElementFactoryCreator Instance
		{
			get
			{
				return new DisjunctiveMandatoryConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint")]
	public  partial class ChildSequenceUniquenessConstraint : Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraint
	{
		#region ChildSequenceUniquenessConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "ff408869-5bb6-46e0-9ed3-e6c1785b7a4c";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint.MetaClassGuidString);
		#endregion

		#region IsPreferred's Generated  Field Code
		#region IsPreferred's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsPreferredMetaAttributeGuidString = "4ed849fb-72b8-46ba-988f-7d1a920c7583";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsPreferredMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint.IsPreferredMetaAttributeGuidString);
		#endregion

		#region IsPreferred's Generated Property Code

		private System.Boolean isPreferredPropertyStorage = false;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ChildSequenceUniquenessConstraintIsPreferredFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint.IsPreferredMetaAttributeGuidString, "Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint.IsPreferred")]
		public  System.Boolean IsPreferred
		{
			get
			{
				return isPreferredPropertyStorage;
			}
		
			set
			{
				childSequenceUniquenessConstraintIsPreferredFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ChildSequenceUniquenessConstraintIsPreferredFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ChildSequenceUniquenessConstraint.IsPreferred field
		/// </summary>
		private static ChildSequenceUniquenessConstraintIsPreferredFieldHandler	childSequenceUniquenessConstraintIsPreferredFieldHandler	= ChildSequenceUniquenessConstraintIsPreferredFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ChildSequenceUniquenessConstraint.IsPreferred
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ChildSequenceUniquenessConstraintIsPreferredFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ChildSequenceUniquenessConstraintIsPreferredFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ChildSequenceUniquenessConstraint.IsPreferred field handler
			/// </summary>
			/// <value>ChildSequenceUniquenessConstraintIsPreferredFieldHandler</value>
			public static ChildSequenceUniquenessConstraintIsPreferredFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint.childSequenceUniquenessConstraintIsPreferredFieldHandler != null)
					{
						return Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint.childSequenceUniquenessConstraintIsPreferredFieldHandler;
					}
					else
					{
						// The static constructor in ChildSequenceUniquenessConstraint will assign this value to
						// Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint.childSequenceUniquenessConstraintIsPreferredFieldHandler, so just instantiate one and return it
						return new ChildSequenceUniquenessConstraintIsPreferredFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ChildSequenceUniquenessConstraint.IsPreferred field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint.IsPreferredMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ChildSequenceUniquenessConstraint</param>
			protected sealed override System.Boolean GetValue(Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint element)
			{
				return element.isPreferredPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint element, System.Boolean value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Boolean oldValue)
			{
				oldValue = element.isPreferredPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.isPreferredPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
	}
	#region ChildSequenceUniquenessConstraint's Generated Constructor Code
	public  partial class ChildSequenceUniquenessConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ChildSequenceUniquenessConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildSequenceUniquenessConstraint CreateChildSequenceUniquenessConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateChildSequenceUniquenessConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildSequenceUniquenessConstraint CreateAndInitializeChildSequenceUniquenessConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeChildSequenceUniquenessConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ChildSequenceUniquenessConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildSequenceUniquenessConstraint CreateChildSequenceUniquenessConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ChildSequenceUniquenessConstraint)partition.ElementFactory.CreateElement(typeof(ChildSequenceUniquenessConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildSequenceUniquenessConstraint CreateAndInitializeChildSequenceUniquenessConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ChildSequenceUniquenessConstraint)partition.ElementFactory.CreateElement(typeof(ChildSequenceUniquenessConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ChildSequenceUniquenessConstraint
	/// <summary>
	/// ChildSequenceUniquenessConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint))]
	public sealed class ChildSequenceUniquenessConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ChildSequenceUniquenessConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ChildSequenceUniquenessConstraintElementFactoryCreator Instance
		{
			get
			{
				return new ChildSequenceUniquenessConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.MultiChildSequenceConstraint.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.MultiChildSequenceConstraint")]
	public abstract partial class MultiChildSequenceConstraint : Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint
	{
		#region MultiChildSequenceConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "814b2d92-8191-4e4e-aeb5-fb3c55feb50e";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.MultiChildSequenceConstraint.MetaClassGuidString);
		#endregion

	}
	#region MultiChildSequenceConstraint's Generated Constructor Code
	public abstract partial class MultiChildSequenceConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected MultiChildSequenceConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.SubsetConstraint.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.SubsetConstraint")]
	public  partial class SubsetConstraint : Neumont.Tools.ORM.OIALModel.MultiChildSequenceConstraint
	{
		#region SubsetConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "bb983141-fef0-437c-9b4a-c5a29d6469db";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.SubsetConstraint.MetaClassGuidString);
		#endregion

		#region SubChildSequence's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.ChildSequence SubChildSequence
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraintMetaRoleGuid, Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubChildSequenceMetaRoleGuid, false) as Neumont.Tools.ORM.OIALModel.ChildSequence;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubChildSequenceMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.OIALModel.ChildSequence counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.OIALModel.ChildSequence;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubChildSequenceMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence), newRoles);
				}
			}
		}
		#endregion
		#region SuperChildSequence's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.ChildSequence SuperChildSequence
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraintMetaRoleGuid, Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SuperChildSequenceMetaRoleGuid, false) as Neumont.Tools.ORM.OIALModel.ChildSequence;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SuperChildSequenceMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.OIALModel.ChildSequence counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.OIALModel.ChildSequence;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SuperChildSequenceMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence), newRoles);
				}
			}
		}
		#endregion
	}
	#region SubsetConstraint's Generated Constructor Code
	public  partial class SubsetConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubsetConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraint CreateSubsetConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateSubsetConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraint CreateAndInitializeSubsetConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSubsetConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SubsetConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraint CreateSubsetConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (SubsetConstraint)partition.ElementFactory.CreateElement(typeof(SubsetConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraint CreateAndInitializeSubsetConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SubsetConstraint)partition.ElementFactory.CreateElement(typeof(SubsetConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SubsetConstraint
	/// <summary>
	/// SubsetConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.SubsetConstraint))]
	public sealed class SubsetConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubsetConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.SubsetConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SubsetConstraintElementFactoryCreator Instance
		{
			get
			{
				return new SubsetConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraint.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraint")]
	public abstract partial class TwoOrMoreChildSequenceConstraint : Neumont.Tools.ORM.OIALModel.MultiChildSequenceConstraint
	{
		#region TwoOrMoreChildSequenceConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "b00f2925-34b5-468e-ab94-4613dea597e2";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraint.MetaClassGuidString);
		#endregion

		#region ChildSequence's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.ChildSequenceMoveableCollection ChildSequence
		{
			get { return new Neumont.Tools.ORM.OIALModel.ChildSequenceMoveableCollection(this, Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraintMetaRoleGuid, Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.ChildSequenceMetaRoleGuid); }
		}
		#endregion
	}
	#region TwoOrMoreChildSequenceConstraint's Generated Constructor Code
	public abstract partial class TwoOrMoreChildSequenceConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected TwoOrMoreChildSequenceConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ExclusionConstraint.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.ExclusionConstraint")]
	public  partial class ExclusionConstraint : Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraint
	{
		#region ExclusionConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "2101336b-c311-4265-ad8f-d13e92d5ef5d";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ExclusionConstraint.MetaClassGuidString);
		#endregion

	}
	#region ExclusionConstraint's Generated Constructor Code
	public  partial class ExclusionConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExclusionConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExclusionConstraint CreateExclusionConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateExclusionConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExclusionConstraint CreateAndInitializeExclusionConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeExclusionConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ExclusionConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExclusionConstraint CreateExclusionConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ExclusionConstraint)partition.ElementFactory.CreateElement(typeof(ExclusionConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExclusionConstraint CreateAndInitializeExclusionConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ExclusionConstraint)partition.ElementFactory.CreateElement(typeof(ExclusionConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ExclusionConstraint
	/// <summary>
	/// ExclusionConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.ExclusionConstraint))]
	public sealed class ExclusionConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExclusionConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.ExclusionConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ExclusionConstraintElementFactoryCreator Instance
		{
			get
			{
				return new ExclusionConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.EqualityConstraint.MetaClassGuidString, "Neumont.Tools.ORM.OIALModel.EqualityConstraint")]
	public  partial class EqualityConstraint : Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraint
	{
		#region EqualityConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "eb3f3403-18dd-4b0b-9eb4-3c8d099434a1";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.EqualityConstraint.MetaClassGuidString);
		#endregion

	}
	#region EqualityConstraint's Generated Constructor Code
	public  partial class EqualityConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EqualityConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityConstraint CreateEqualityConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateEqualityConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityConstraint CreateAndInitializeEqualityConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeEqualityConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public EqualityConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityConstraint CreateEqualityConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (EqualityConstraint)partition.ElementFactory.CreateElement(typeof(EqualityConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityConstraint CreateAndInitializeEqualityConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (EqualityConstraint)partition.ElementFactory.CreateElement(typeof(EqualityConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for EqualityConstraint
	/// <summary>
	/// EqualityConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.EqualityConstraint))]
	public sealed class EqualityConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EqualityConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.EqualityConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static EqualityConstraintElementFactoryCreator Instance
		{
			get
			{
				return new EqualityConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel")]
	public  partial class OIALModelHasORMModel : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region OIALModelHasORMModel's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "ab35c724-db52-437d-a6f8-c0b37ac29dbe";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = OIALModelHasORMModel.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = OIALModelHasORMModel.MetaClassGuid;
		#endregion

		#region ORMModel's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ORMModelMetaRoleGuidString = "2a1a6a7b-0bb1-4a95-9abe-c25f099dbccc";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ORMModelMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.ORMModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.ORMModelMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.ORMModel")]
		public  Neumont.Tools.ORM.ObjectModel.ORMModel ORMModel
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ORMModel)this.GetRolePlayer(ORMModelMetaRoleGuid); }
			set { this.SetRolePlayer(ORMModelMetaRoleGuid, value); }
		}
		
		#endregion
		#region OIALModel's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String OIALModelMetaRoleGuidString = "f7ff78e9-e32b-433f-a2a7-5e6a742ff554";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid OIALModelMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.OIALModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.OIALModelMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.OIALModel")]
		public  Neumont.Tools.ORM.OIALModel.OIALModel OIALModel
		{
			get { return (Neumont.Tools.ORM.OIALModel.OIALModel)this.GetRolePlayer(OIALModelMetaRoleGuid); }
			set { this.SetRolePlayer(OIALModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region OIALModelHasORMModel's Generated Constructor Code
	public  partial class OIALModelHasORMModel
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALModelHasORMModel(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALModelHasORMModel CreateOIALModelHasORMModel(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateOIALModelHasORMModel(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALModelHasORMModel CreateAndInitializeOIALModelHasORMModel(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeOIALModelHasORMModel(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALModelHasORMModel(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALModelHasORMModel CreateOIALModelHasORMModel(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (OIALModelHasORMModel)partition.ElementFactory.CreateElementLink(typeof(OIALModelHasORMModel), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALModelHasORMModel CreateAndInitializeOIALModelHasORMModel(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (OIALModelHasORMModel)partition.ElementFactory.CreateElementLink(typeof(OIALModelHasORMModel), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for OIALModelHasORMModel
	/// <summary>
	/// OIALModelHasORMModel Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel))]
	public sealed class OIALModelHasORMModelElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALModelHasORMModelElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static OIALModelHasORMModelElementFactoryCreator Instance
		{
			get
			{
				return new OIALModelHasORMModelElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType")]
	public  partial class OIALModelHasConceptType : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region OIALModelHasConceptType's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "8c928a33-6444-43e0-95e2-01c78a1dcd9b";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = OIALModelHasConceptType.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = OIALModelHasConceptType.MetaClassGuid;
		#endregion

		#region ConceptTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ConceptTypeCollectionMetaRoleGuidString = "18fd346f-88ca-4bce-89af-379839498da0";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ConceptTypeCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ConceptTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ConceptTypeCollectionMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ConceptTypeCollection")]
		public  Neumont.Tools.ORM.OIALModel.ConceptType ConceptTypeCollection
		{
			get { return (Neumont.Tools.ORM.OIALModel.ConceptType)this.GetRolePlayer(ConceptTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ConceptTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "5d75360f-e3e9-4219-af9c-4e9ee22a92d4";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ModelMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.Model")]
		public  Neumont.Tools.ORM.OIALModel.OIALModel Model
		{
			get { return (Neumont.Tools.ORM.OIALModel.OIALModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region OIALModelHasConceptType's Generated Constructor Code
	public  partial class OIALModelHasConceptType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALModelHasConceptType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALModelHasConceptType CreateOIALModelHasConceptType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateOIALModelHasConceptType(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALModelHasConceptType CreateAndInitializeOIALModelHasConceptType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeOIALModelHasConceptType(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALModelHasConceptType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALModelHasConceptType CreateOIALModelHasConceptType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (OIALModelHasConceptType)partition.ElementFactory.CreateElementLink(typeof(OIALModelHasConceptType), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALModelHasConceptType CreateAndInitializeOIALModelHasConceptType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (OIALModelHasConceptType)partition.ElementFactory.CreateElementLink(typeof(OIALModelHasConceptType), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for OIALModelHasConceptType
	/// <summary>
	/// OIALModelHasConceptType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType))]
	public sealed class OIALModelHasConceptTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALModelHasConceptTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static OIALModelHasConceptTypeElementFactoryCreator Instance
		{
			get
			{
				return new OIALModelHasConceptTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild")]
	public abstract partial class ConceptTypeHasChild : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ConceptTypeHasChild's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "04e7fdd1-0150-491f-bceb-a41601969b6d";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ConceptTypeHasChild.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ConceptTypeHasChild.MetaClassGuid;
		#endregion

		#region Mandatory's Generated  Field Code
		#region Mandatory's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MandatoryMetaAttributeGuidString = "94151c05-fc16-4ebb-aeda-76f18ef286d3";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MandatoryMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.MandatoryMetaAttributeGuidString);
		#endregion

		#region Mandatory's Generated Property Code

		private Neumont.Tools.ORM.OIALModel.MandatoryConstraintModality mandatoryPropertyStorage = Neumont.Tools.ORM.OIALModel.MandatoryConstraintModality.NotMandatory;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(Neumont.Tools.ORM.OIALModel.MandatoryConstraintModality),DefaultEnumerationValueName="NotMandatory")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(AllowNulls=true, FieldHandlerType=typeof(ConceptTypeHasChildMandatoryFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.MandatoryMetaAttributeGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.Mandatory")]
		public  Neumont.Tools.ORM.OIALModel.MandatoryConstraintModality Mandatory
		{
			get
			{
				return mandatoryPropertyStorage;
			}
		
			set
			{
				conceptTypeHasChildMandatoryFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ConceptTypeHasChildMandatoryFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ConceptTypeHasChild.Mandatory field
		/// </summary>
		private static ConceptTypeHasChildMandatoryFieldHandler	conceptTypeHasChildMandatoryFieldHandler	= ConceptTypeHasChildMandatoryFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ConceptTypeHasChild.Mandatory
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ConceptTypeHasChildMandatoryFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild,Neumont.Tools.ORM.OIALModel.MandatoryConstraintModality>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ConceptTypeHasChildMandatoryFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ConceptTypeHasChild.Mandatory field handler
			/// </summary>
			/// <value>ConceptTypeHasChildMandatoryFieldHandler</value>
			public static ConceptTypeHasChildMandatoryFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.conceptTypeHasChildMandatoryFieldHandler != null)
					{
						return Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.conceptTypeHasChildMandatoryFieldHandler;
					}
					else
					{
						// The static constructor in ConceptTypeHasChild will assign this value to
						// Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.conceptTypeHasChildMandatoryFieldHandler, so just instantiate one and return it
						return new ConceptTypeHasChildMandatoryFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ConceptTypeHasChild.Mandatory field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild.MandatoryMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ConceptTypeHasChild</param>
			protected sealed override Neumont.Tools.ORM.OIALModel.MandatoryConstraintModality GetValue(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild element)
			{
				return element.mandatoryPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild element, Neumont.Tools.ORM.OIALModel.MandatoryConstraintModality value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref Neumont.Tools.ORM.OIALModel.MandatoryConstraintModality oldValue)
			{
				oldValue = element.mandatoryPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.mandatoryPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region SingleChildConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.OIALModel.SingleChildConstraintMoveableCollection SingleChildConstraintCollection
		{
			get { return new Neumont.Tools.ORM.OIALModel.SingleChildConstraintMoveableCollection(this, Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.ConceptTypeHasChildMetaRoleGuid, Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.SingleChildConstraintCollectionMetaRoleGuid); }
		}
		#endregion
		#region PathRoleCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.RoleBaseMoveableCollection PathRoleCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.RoleBaseMoveableCollection(this, Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.ConceptTypeHasChildMetaRoleGuid, Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.PathRoleCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region Collection Classes for ConceptTypeHasChild
	/// <summary>
	/// Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ConceptTypeHasChildMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ConceptTypeHasChildMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild at that index</returns>
		public Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ConceptTypeHasChild's Generated Constructor Code
	public abstract partial class ConceptTypeHasChild
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ConceptTypeHasChild(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType")]
	public  partial class ConceptTypeAbsorbedConceptType : Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild
	{
		#region ConceptTypeAbsorbedConceptType's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "b33686c9-1c71-41c7-9921-ce96df92563c";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ConceptTypeAbsorbedConceptType.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ConceptTypeAbsorbedConceptType.MetaClassGuid;
		#endregion

		#region AbsorbedConceptTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String AbsorbedConceptTypeCollectionMetaRoleGuidString = "279c5b6b-f6b9-4285-882c-df6786738f77";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid AbsorbedConceptTypeCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeCollectionMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeCollection")]
		public  Neumont.Tools.ORM.OIALModel.ConceptType AbsorbedConceptTypeCollection
		{
			get { return (Neumont.Tools.ORM.OIALModel.ConceptType)this.GetRolePlayer(AbsorbedConceptTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(AbsorbedConceptTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region AbsorbingConceptType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String AbsorbingConceptTypeMetaRoleGuidString = "de1cac45-5221-4718-a1aa-cb69c2e02034";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid AbsorbingConceptTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptTypeMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptType")]
		public  Neumont.Tools.ORM.OIALModel.ConceptType AbsorbingConceptType
		{
			get { return (Neumont.Tools.ORM.OIALModel.ConceptType)this.GetRolePlayer(AbsorbingConceptTypeMetaRoleGuid); }
			set { this.SetRolePlayer(AbsorbingConceptTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ConceptTypeAbsorbedConceptType's Generated Constructor Code
	public  partial class ConceptTypeAbsorbedConceptType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptTypeAbsorbedConceptType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeAbsorbedConceptType CreateConceptTypeAbsorbedConceptType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateConceptTypeAbsorbedConceptType(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeAbsorbedConceptType CreateAndInitializeConceptTypeAbsorbedConceptType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeConceptTypeAbsorbedConceptType(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptTypeAbsorbedConceptType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeAbsorbedConceptType CreateConceptTypeAbsorbedConceptType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ConceptTypeAbsorbedConceptType)partition.ElementFactory.CreateElementLink(typeof(ConceptTypeAbsorbedConceptType), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeAbsorbedConceptType CreateAndInitializeConceptTypeAbsorbedConceptType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ConceptTypeAbsorbedConceptType)partition.ElementFactory.CreateElementLink(typeof(ConceptTypeAbsorbedConceptType), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ConceptTypeAbsorbedConceptType
	/// <summary>
	/// ConceptTypeAbsorbedConceptType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType))]
	public sealed class ConceptTypeAbsorbedConceptTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptTypeAbsorbedConceptTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ConceptTypeAbsorbedConceptTypeElementFactoryCreator Instance
		{
			get
			{
				return new ConceptTypeAbsorbedConceptTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType")]
	public  partial class ConceptTypeHasInformationType : Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild
	{
		#region ConceptTypeHasInformationType's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "898db1bc-9b03-4c17-91c9-9633203b92d0";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ConceptTypeHasInformationType.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ConceptTypeHasInformationType.MetaClassGuid;
		#endregion

		#region InformationTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String InformationTypeCollectionMetaRoleGuidString = "93b611d8-6131-41ff-8964-136e0a14b42c";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid InformationTypeCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.InformationTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.InformationTypeCollectionMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.InformationTypeCollection")]
		public  Neumont.Tools.ORM.OIALModel.InformationType InformationTypeCollection
		{
			get { return (Neumont.Tools.ORM.OIALModel.InformationType)this.GetRolePlayer(InformationTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(InformationTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ConceptType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ConceptTypeMetaRoleGuidString = "744fbe33-904a-412c-9c8c-371b8f71ea01";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ConceptTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.ConceptTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.ConceptTypeMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.ConceptType")]
		public  Neumont.Tools.ORM.OIALModel.ConceptType ConceptType
		{
			get { return (Neumont.Tools.ORM.OIALModel.ConceptType)this.GetRolePlayer(ConceptTypeMetaRoleGuid); }
			set { this.SetRolePlayer(ConceptTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ConceptTypeHasInformationType's Generated Constructor Code
	public  partial class ConceptTypeHasInformationType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptTypeHasInformationType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeHasInformationType CreateConceptTypeHasInformationType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateConceptTypeHasInformationType(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeHasInformationType CreateAndInitializeConceptTypeHasInformationType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeConceptTypeHasInformationType(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptTypeHasInformationType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeHasInformationType CreateConceptTypeHasInformationType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ConceptTypeHasInformationType)partition.ElementFactory.CreateElementLink(typeof(ConceptTypeHasInformationType), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeHasInformationType CreateAndInitializeConceptTypeHasInformationType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ConceptTypeHasInformationType)partition.ElementFactory.CreateElementLink(typeof(ConceptTypeHasInformationType), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ConceptTypeHasInformationType
	/// <summary>
	/// ConceptTypeHasInformationType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType))]
	public sealed class ConceptTypeHasInformationTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptTypeHasInformationTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ConceptTypeHasInformationTypeElementFactoryCreator Instance
		{
			get
			{
				return new ConceptTypeHasInformationTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeRef.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeRef")]
	public  partial class ConceptTypeRef : Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild
	{
		#region ConceptTypeRef's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "851723ba-3612-47b5-a77d-9ac82ccdbdf4";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeRef.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ConceptTypeRef.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ConceptTypeRef.MetaClassGuid;
		#endregion

		#region OppositeName's Generated  Field Code
		#region OppositeName's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String OppositeNameMetaAttributeGuidString = "6f15b7ce-2e17-477f-8d94-68f6b15a8c00";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid OppositeNameMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeRef.OppositeNameMetaAttributeGuidString);
		#endregion

		#region OppositeName's Generated Property Code

		private System.String oppositeNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ConceptTypeRefOppositeNameFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeRef.OppositeNameMetaAttributeGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeRef.OppositeName")]
		public  System.String OppositeName
		{
			get
			{
				return oppositeNamePropertyStorage;
			}
		
			set
			{
				conceptTypeRefOppositeNameFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ConceptTypeRefOppositeNameFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ConceptTypeRef.OppositeName field
		/// </summary>
		private static ConceptTypeRefOppositeNameFieldHandler	conceptTypeRefOppositeNameFieldHandler	= ConceptTypeRefOppositeNameFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ConceptTypeRef.OppositeName
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ConceptTypeRefOppositeNameFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.OIALModel.ConceptTypeRef,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ConceptTypeRefOppositeNameFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ConceptTypeRef.OppositeName field handler
			/// </summary>
			/// <value>ConceptTypeRefOppositeNameFieldHandler</value>
			public static ConceptTypeRefOppositeNameFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.OIALModel.ConceptTypeRef.conceptTypeRefOppositeNameFieldHandler != null)
					{
						return Neumont.Tools.ORM.OIALModel.ConceptTypeRef.conceptTypeRefOppositeNameFieldHandler;
					}
					else
					{
						// The static constructor in ConceptTypeRef will assign this value to
						// Neumont.Tools.ORM.OIALModel.ConceptTypeRef.conceptTypeRefOppositeNameFieldHandler, so just instantiate one and return it
						return new ConceptTypeRefOppositeNameFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ConceptTypeRef.OppositeName field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.OIALModel.ConceptTypeRef.OppositeNameMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ConceptTypeRef</param>
			protected sealed override System.String GetValue(Neumont.Tools.ORM.OIALModel.ConceptTypeRef element)
			{
				return element.oppositeNamePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.OIALModel.ConceptTypeRef element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.oppositeNamePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.oppositeNamePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region ReferencedConceptTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReferencedConceptTypeCollectionMetaRoleGuidString = "9edb69e7-36dd-4a7c-8664-328000819e01";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReferencedConceptTypeCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ReferencedConceptTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ReferencedConceptTypeCollectionMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ReferencedConceptTypeCollection")]
		public  Neumont.Tools.ORM.OIALModel.ConceptType ReferencedConceptTypeCollection
		{
			get { return (Neumont.Tools.ORM.OIALModel.ConceptType)this.GetRolePlayer(ReferencedConceptTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ReferencedConceptTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ReferencingConceptType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReferencingConceptTypeMetaRoleGuidString = "9a11f975-ed0b-454c-9bb6-20a7035a751d";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReferencingConceptTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ReferencingConceptTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ReferencingConceptTypeMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ReferencingConceptType")]
		public  Neumont.Tools.ORM.OIALModel.ConceptType ReferencingConceptType
		{
			get { return (Neumont.Tools.ORM.OIALModel.ConceptType)this.GetRolePlayer(ReferencingConceptTypeMetaRoleGuid); }
			set { this.SetRolePlayer(ReferencingConceptTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ConceptTypeRef's Generated Constructor Code
	public  partial class ConceptTypeRef
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptTypeRef(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeRef CreateConceptTypeRef(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateConceptTypeRef(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeRef CreateAndInitializeConceptTypeRef(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeConceptTypeRef(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptTypeRef(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeRef CreateConceptTypeRef(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ConceptTypeRef)partition.ElementFactory.CreateElementLink(typeof(ConceptTypeRef), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeRef CreateAndInitializeConceptTypeRef(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ConceptTypeRef)partition.ElementFactory.CreateElementLink(typeof(ConceptTypeRef), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ConceptTypeRef
	/// <summary>
	/// ConceptTypeRef Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeRef))]
	public sealed class ConceptTypeRefElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptTypeRefElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.ConceptTypeRef( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ConceptTypeRefElementFactoryCreator Instance
		{
			get
			{
				return new ConceptTypeRefElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat")]
	public  partial class OIALHasInformationTypeFormat : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region OIALHasInformationTypeFormat's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "93c57598-381d-4079-a258-8d321cfec22b";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = OIALHasInformationTypeFormat.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = OIALHasInformationTypeFormat.MetaClassGuid;
		#endregion

		#region InformationTypeFormatCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String InformationTypeFormatCollectionMetaRoleGuidString = "ac01fa2e-22cb-448f-9355-fbe33e68299d";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid InformationTypeFormatCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.InformationTypeFormatCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.InformationTypeFormatCollectionMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.InformationTypeFormatCollection")]
		public  Neumont.Tools.ORM.OIALModel.InformationTypeFormat InformationTypeFormatCollection
		{
			get { return (Neumont.Tools.ORM.OIALModel.InformationTypeFormat)this.GetRolePlayer(InformationTypeFormatCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(InformationTypeFormatCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "cf1fc1f9-683d-4352-9919-7bb95dd1d778";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.ModelMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.Model")]
		public  Neumont.Tools.ORM.OIALModel.OIALModel Model
		{
			get { return (Neumont.Tools.ORM.OIALModel.OIALModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region OIALHasInformationTypeFormat's Generated Constructor Code
	public  partial class OIALHasInformationTypeFormat
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALHasInformationTypeFormat(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALHasInformationTypeFormat CreateOIALHasInformationTypeFormat(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateOIALHasInformationTypeFormat(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALHasInformationTypeFormat CreateAndInitializeOIALHasInformationTypeFormat(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeOIALHasInformationTypeFormat(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALHasInformationTypeFormat(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALHasInformationTypeFormat CreateOIALHasInformationTypeFormat(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (OIALHasInformationTypeFormat)partition.ElementFactory.CreateElementLink(typeof(OIALHasInformationTypeFormat), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALHasInformationTypeFormat CreateAndInitializeOIALHasInformationTypeFormat(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (OIALHasInformationTypeFormat)partition.ElementFactory.CreateElementLink(typeof(OIALHasInformationTypeFormat), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for OIALHasInformationTypeFormat
	/// <summary>
	/// OIALHasInformationTypeFormat Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat))]
	public sealed class OIALHasInformationTypeFormatElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALHasInformationTypeFormatElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static OIALHasInformationTypeFormatElementFactoryCreator Instance
		{
			get
			{
				return new OIALHasInformationTypeFormatElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat")]
	public  partial class InformationTypeHasInformationTypeFormat : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region InformationTypeHasInformationTypeFormat's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "b1119c9a-c227-4f8a-83e9-affb2f2b3908";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = InformationTypeHasInformationTypeFormat.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = InformationTypeHasInformationTypeFormat.MetaClassGuid;
		#endregion

		#region InformationTypeFormat's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String InformationTypeFormatMetaRoleGuidString = "ac01ffff-374c-4ad6-9b05-c1e57bd69178";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid InformationTypeFormatMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeFormatMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeFormatMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeFormat")]
		public  Neumont.Tools.ORM.OIALModel.InformationTypeFormat InformationTypeFormat
		{
			get { return (Neumont.Tools.ORM.OIALModel.InformationTypeFormat)this.GetRolePlayer(InformationTypeFormatMetaRoleGuid); }
			set { this.SetRolePlayer(InformationTypeFormatMetaRoleGuid, value); }
		}
		
		#endregion
		#region InformationType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String InformationTypeMetaRoleGuidString = "010194fb-32e4-4bc7-8a27-4a175a3647f4";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid InformationTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationType")]
		public  Neumont.Tools.ORM.OIALModel.InformationType InformationType
		{
			get { return (Neumont.Tools.ORM.OIALModel.InformationType)this.GetRolePlayer(InformationTypeMetaRoleGuid); }
			set { this.SetRolePlayer(InformationTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region InformationTypeHasInformationTypeFormat's Generated Constructor Code
	public  partial class InformationTypeHasInformationTypeFormat
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public InformationTypeHasInformationTypeFormat(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InformationTypeHasInformationTypeFormat CreateInformationTypeHasInformationTypeFormat(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateInformationTypeHasInformationTypeFormat(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InformationTypeHasInformationTypeFormat CreateAndInitializeInformationTypeHasInformationTypeFormat(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeInformationTypeHasInformationTypeFormat(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public InformationTypeHasInformationTypeFormat(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InformationTypeHasInformationTypeFormat CreateInformationTypeHasInformationTypeFormat(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (InformationTypeHasInformationTypeFormat)partition.ElementFactory.CreateElementLink(typeof(InformationTypeHasInformationTypeFormat), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InformationTypeHasInformationTypeFormat CreateAndInitializeInformationTypeHasInformationTypeFormat(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (InformationTypeHasInformationTypeFormat)partition.ElementFactory.CreateElementLink(typeof(InformationTypeHasInformationTypeFormat), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for InformationTypeHasInformationTypeFormat
	/// <summary>
	/// InformationTypeHasInformationTypeFormat Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat))]
	public sealed class InformationTypeHasInformationTypeFormatElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public InformationTypeHasInformationTypeFormatElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static InformationTypeHasInformationTypeFormatElementFactoryCreator Instance
		{
			get
			{
				return new InformationTypeHasInformationTypeFormatElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType")]
	public  partial class InformationTypeFormatHasObjectType : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region InformationTypeFormatHasObjectType's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "01277aab-8d29-413f-bbbb-f91347626418";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = InformationTypeFormatHasObjectType.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = InformationTypeFormatHasObjectType.MetaClassGuid;
		#endregion

		#region ValueType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueTypeMetaRoleGuidString = "e0923ba9-ef1a-44f0-ad48-725fd54bd28c";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.ValueTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.ValueTypeMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.ValueType")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectType ValueType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(ValueTypeMetaRoleGuid); }
			set { this.SetRolePlayer(ValueTypeMetaRoleGuid, value); }
		}
		
		#endregion
		#region InformationTypeFormat's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String InformationTypeFormatMetaRoleGuidString = "4838e746-4095-4424-950f-19d91509ec65";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid InformationTypeFormatMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.InformationTypeFormat")]
		public  Neumont.Tools.ORM.OIALModel.InformationTypeFormat InformationTypeFormat
		{
			get { return (Neumont.Tools.ORM.OIALModel.InformationTypeFormat)this.GetRolePlayer(InformationTypeFormatMetaRoleGuid); }
			set { this.SetRolePlayer(InformationTypeFormatMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region InformationTypeFormatHasObjectType's Generated Constructor Code
	public  partial class InformationTypeFormatHasObjectType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public InformationTypeFormatHasObjectType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InformationTypeFormatHasObjectType CreateInformationTypeFormatHasObjectType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateInformationTypeFormatHasObjectType(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InformationTypeFormatHasObjectType CreateAndInitializeInformationTypeFormatHasObjectType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeInformationTypeFormatHasObjectType(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public InformationTypeFormatHasObjectType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InformationTypeFormatHasObjectType CreateInformationTypeFormatHasObjectType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (InformationTypeFormatHasObjectType)partition.ElementFactory.CreateElementLink(typeof(InformationTypeFormatHasObjectType), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InformationTypeFormatHasObjectType CreateAndInitializeInformationTypeFormatHasObjectType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (InformationTypeFormatHasObjectType)partition.ElementFactory.CreateElementLink(typeof(InformationTypeFormatHasObjectType), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for InformationTypeFormatHasObjectType
	/// <summary>
	/// InformationTypeFormatHasObjectType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType))]
	public sealed class InformationTypeFormatHasObjectTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public InformationTypeFormatHasObjectTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static InformationTypeFormatHasObjectTypeElementFactoryCreator Instance
		{
			get
			{
				return new InformationTypeFormatHasObjectTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType")]
	public  partial class ConceptTypeHasObjectType : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ConceptTypeHasObjectType's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "50f4bf63-ba31-4ab3-b643-ef85c1f3e353";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ConceptTypeHasObjectType.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ConceptTypeHasObjectType.MetaClassGuid;
		#endregion

		#region ObjectType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ObjectTypeMetaRoleGuidString = "4e48bdec-26fc-483d-abbd-7b77a37fbaeb";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ObjectTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ObjectTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ObjectTypeMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ObjectType")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectType ObjectType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(ObjectTypeMetaRoleGuid); }
			set { this.SetRolePlayer(ObjectTypeMetaRoleGuid, value); }
		}
		
		#endregion
		#region ConceptType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ConceptTypeMetaRoleGuidString = "d9ac8ba3-6e0d-463c-a7c1-a1857cb5b1f4";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ConceptTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ConceptTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ConceptTypeMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ConceptType")]
		public  Neumont.Tools.ORM.OIALModel.ConceptType ConceptType
		{
			get { return (Neumont.Tools.ORM.OIALModel.ConceptType)this.GetRolePlayer(ConceptTypeMetaRoleGuid); }
			set { this.SetRolePlayer(ConceptTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ConceptTypeHasObjectType's Generated Constructor Code
	public  partial class ConceptTypeHasObjectType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptTypeHasObjectType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeHasObjectType CreateConceptTypeHasObjectType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateConceptTypeHasObjectType(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeHasObjectType CreateAndInitializeConceptTypeHasObjectType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeConceptTypeHasObjectType(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptTypeHasObjectType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeHasObjectType CreateConceptTypeHasObjectType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ConceptTypeHasObjectType)partition.ElementFactory.CreateElementLink(typeof(ConceptTypeHasObjectType), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeHasObjectType CreateAndInitializeConceptTypeHasObjectType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ConceptTypeHasObjectType)partition.ElementFactory.CreateElementLink(typeof(ConceptTypeHasObjectType), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ConceptTypeHasObjectType
	/// <summary>
	/// ConceptTypeHasObjectType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType))]
	public sealed class ConceptTypeHasObjectTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptTypeHasObjectTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ConceptTypeHasObjectTypeElementFactoryCreator Instance
		{
			get
			{
				return new ConceptTypeHasObjectTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence")]
	public abstract partial class ChildSequenceConstraintHasChildSequence : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ChildSequenceConstraintHasChildSequence's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "2db9d859-dcfc-4fb7-ab17-dc88348f6b9c";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ChildSequenceConstraintHasChildSequence.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ChildSequenceConstraintHasChildSequence.MetaClassGuid;
		#endregion

	}
	#region ChildSequenceConstraintHasChildSequence's Generated Constructor Code
	public abstract partial class ChildSequenceConstraintHasChildSequence
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ChildSequenceConstraintHasChildSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence")]
	public  partial class SingleChildSequenceConstraintHasMinTwoChildrenChildSequence : Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence
	{
		#region SingleChildSequenceConstraintHasMinTwoChildrenChildSequence's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "592a719c-c1a6-4a03-a6b1-f7aef992a916";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.MetaClassGuid;
		#endregion

		#region ChildSequence's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ChildSequenceMetaRoleGuidString = "db779823-0833-4d0e-a90e-a66eb7b982d8";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ChildSequenceMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.ChildSequenceMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.ChildSequenceMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.ChildSequence")]
		public  Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequence ChildSequence
		{
			get { return (Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequence)this.GetRolePlayer(ChildSequenceMetaRoleGuid); }
			set { this.SetRolePlayer(ChildSequenceMetaRoleGuid, value); }
		}
		
		#endregion
		#region SingleChildSequenceConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SingleChildSequenceConstraintMetaRoleGuidString = "e77a3af3-b0b6-4241-9aea-522f4292797e";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SingleChildSequenceConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraint")]
		public  Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraint SingleChildSequenceConstraint
		{
			get { return (Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraint)this.GetRolePlayer(SingleChildSequenceConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(SingleChildSequenceConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SingleChildSequenceConstraintHasMinTwoChildrenChildSequence's Generated Constructor Code
	public  partial class SingleChildSequenceConstraintHasMinTwoChildrenChildSequence
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleChildSequenceConstraintHasMinTwoChildrenChildSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleChildSequenceConstraintHasMinTwoChildrenChildSequence CreateSingleChildSequenceConstraintHasMinTwoChildrenChildSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSingleChildSequenceConstraintHasMinTwoChildrenChildSequence(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleChildSequenceConstraintHasMinTwoChildrenChildSequence CreateAndInitializeSingleChildSequenceConstraintHasMinTwoChildrenChildSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSingleChildSequenceConstraintHasMinTwoChildrenChildSequence(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleChildSequenceConstraintHasMinTwoChildrenChildSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleChildSequenceConstraintHasMinTwoChildrenChildSequence CreateSingleChildSequenceConstraintHasMinTwoChildrenChildSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SingleChildSequenceConstraintHasMinTwoChildrenChildSequence)partition.ElementFactory.CreateElementLink(typeof(SingleChildSequenceConstraintHasMinTwoChildrenChildSequence), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleChildSequenceConstraintHasMinTwoChildrenChildSequence CreateAndInitializeSingleChildSequenceConstraintHasMinTwoChildrenChildSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SingleChildSequenceConstraintHasMinTwoChildrenChildSequence)partition.ElementFactory.CreateElementLink(typeof(SingleChildSequenceConstraintHasMinTwoChildrenChildSequence), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SingleChildSequenceConstraintHasMinTwoChildrenChildSequence
	/// <summary>
	/// SingleChildSequenceConstraintHasMinTwoChildrenChildSequence Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence))]
	public sealed class SingleChildSequenceConstraintHasMinTwoChildrenChildSequenceElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleChildSequenceConstraintHasMinTwoChildrenChildSequenceElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SingleChildSequenceConstraintHasMinTwoChildrenChildSequenceElementFactoryCreator Instance
		{
			get
			{
				return new SingleChildSequenceConstraintHasMinTwoChildrenChildSequenceElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence")]
	public  partial class SubsetConstraintHasSubChildSequence : Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence
	{
		#region SubsetConstraintHasSubChildSequence's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "a065acf1-4056-4d86-87db-6b90f1775032";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SubsetConstraintHasSubChildSequence.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SubsetConstraintHasSubChildSequence.MetaClassGuid;
		#endregion

		#region SubChildSequence's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SubChildSequenceMetaRoleGuidString = "ff45cf75-21cd-48b7-93aa-ab3d52ff7dbe";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SubChildSequenceMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubChildSequenceMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubChildSequenceMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubChildSequence")]
		public  Neumont.Tools.ORM.OIALModel.ChildSequence SubChildSequence
		{
			get { return (Neumont.Tools.ORM.OIALModel.ChildSequence)this.GetRolePlayer(SubChildSequenceMetaRoleGuid); }
			set { this.SetRolePlayer(SubChildSequenceMetaRoleGuid, value); }
		}
		
		#endregion
		#region SubsetConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SubsetConstraintMetaRoleGuidString = "ec789169-5fdc-47b8-9068-2b1100f8e7df";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SubsetConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraintMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraint")]
		public  Neumont.Tools.ORM.OIALModel.SubsetConstraint SubsetConstraint
		{
			get { return (Neumont.Tools.ORM.OIALModel.SubsetConstraint)this.GetRolePlayer(SubsetConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(SubsetConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SubsetConstraintHasSubChildSequence's Generated Constructor Code
	public  partial class SubsetConstraintHasSubChildSequence
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubsetConstraintHasSubChildSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraintHasSubChildSequence CreateSubsetConstraintHasSubChildSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSubsetConstraintHasSubChildSequence(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraintHasSubChildSequence CreateAndInitializeSubsetConstraintHasSubChildSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSubsetConstraintHasSubChildSequence(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SubsetConstraintHasSubChildSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraintHasSubChildSequence CreateSubsetConstraintHasSubChildSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SubsetConstraintHasSubChildSequence)partition.ElementFactory.CreateElementLink(typeof(SubsetConstraintHasSubChildSequence), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraintHasSubChildSequence CreateAndInitializeSubsetConstraintHasSubChildSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SubsetConstraintHasSubChildSequence)partition.ElementFactory.CreateElementLink(typeof(SubsetConstraintHasSubChildSequence), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SubsetConstraintHasSubChildSequence
	/// <summary>
	/// SubsetConstraintHasSubChildSequence Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence))]
	public sealed class SubsetConstraintHasSubChildSequenceElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubsetConstraintHasSubChildSequenceElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SubsetConstraintHasSubChildSequenceElementFactoryCreator Instance
		{
			get
			{
				return new SubsetConstraintHasSubChildSequenceElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence")]
	public  partial class SubsetConstraintHasSuperChildSequence : Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence
	{
		#region SubsetConstraintHasSuperChildSequence's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "cc806cf1-97db-4e64-8956-d71bdcecef30";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SubsetConstraintHasSuperChildSequence.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SubsetConstraintHasSuperChildSequence.MetaClassGuid;
		#endregion

		#region SuperChildSequence's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SuperChildSequenceMetaRoleGuidString = "06317f62-ae47-42ba-8541-509025b69ac2";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SuperChildSequenceMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SuperChildSequenceMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SuperChildSequenceMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SuperChildSequence")]
		public  Neumont.Tools.ORM.OIALModel.ChildSequence SuperChildSequence
		{
			get { return (Neumont.Tools.ORM.OIALModel.ChildSequence)this.GetRolePlayer(SuperChildSequenceMetaRoleGuid); }
			set { this.SetRolePlayer(SuperChildSequenceMetaRoleGuid, value); }
		}
		
		#endregion
		#region SubsetConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SubsetConstraintMetaRoleGuidString = "ff3edcd8-c3f7-447b-8320-3bb309402d71";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SubsetConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraintMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraint")]
		public  Neumont.Tools.ORM.OIALModel.SubsetConstraint SubsetConstraint
		{
			get { return (Neumont.Tools.ORM.OIALModel.SubsetConstraint)this.GetRolePlayer(SubsetConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(SubsetConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SubsetConstraintHasSuperChildSequence's Generated Constructor Code
	public  partial class SubsetConstraintHasSuperChildSequence
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubsetConstraintHasSuperChildSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraintHasSuperChildSequence CreateSubsetConstraintHasSuperChildSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSubsetConstraintHasSuperChildSequence(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraintHasSuperChildSequence CreateAndInitializeSubsetConstraintHasSuperChildSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSubsetConstraintHasSuperChildSequence(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SubsetConstraintHasSuperChildSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraintHasSuperChildSequence CreateSubsetConstraintHasSuperChildSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SubsetConstraintHasSuperChildSequence)partition.ElementFactory.CreateElementLink(typeof(SubsetConstraintHasSuperChildSequence), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraintHasSuperChildSequence CreateAndInitializeSubsetConstraintHasSuperChildSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SubsetConstraintHasSuperChildSequence)partition.ElementFactory.CreateElementLink(typeof(SubsetConstraintHasSuperChildSequence), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SubsetConstraintHasSuperChildSequence
	/// <summary>
	/// SubsetConstraintHasSuperChildSequence Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence))]
	public sealed class SubsetConstraintHasSuperChildSequenceElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubsetConstraintHasSuperChildSequenceElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SubsetConstraintHasSuperChildSequenceElementFactoryCreator Instance
		{
			get
			{
				return new SubsetConstraintHasSuperChildSequenceElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence")]
	public  partial class TwoOrMoreChildSequenceConstraintHasChildSequence : Neumont.Tools.ORM.OIALModel.ChildSequenceConstraintHasChildSequence
	{
		#region TwoOrMoreChildSequenceConstraintHasChildSequence's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "a9092d13-fddb-4529-a649-adfcc84b3f17";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = TwoOrMoreChildSequenceConstraintHasChildSequence.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = TwoOrMoreChildSequenceConstraintHasChildSequence.MetaClassGuid;
		#endregion

		#region ChildSequence's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ChildSequenceMetaRoleGuidString = "b055e241-d9b6-4b7c-a709-90b17ca0d13a";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ChildSequenceMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.ChildSequenceMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.ChildSequenceMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.ChildSequence")]
		public  Neumont.Tools.ORM.OIALModel.ChildSequence ChildSequence
		{
			get { return (Neumont.Tools.ORM.OIALModel.ChildSequence)this.GetRolePlayer(ChildSequenceMetaRoleGuid); }
			set { this.SetRolePlayer(ChildSequenceMetaRoleGuid, value); }
		}
		
		#endregion
		#region TwoOrMoreChildSequenceConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String TwoOrMoreChildSequenceConstraintMetaRoleGuidString = "43fa77d2-8e48-4177-87bb-b86ec3b952c0";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid TwoOrMoreChildSequenceConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraintMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraint")]
		public  Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraint TwoOrMoreChildSequenceConstraint
		{
			get { return (Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraint)this.GetRolePlayer(TwoOrMoreChildSequenceConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(TwoOrMoreChildSequenceConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region TwoOrMoreChildSequenceConstraintHasChildSequence's Generated Constructor Code
	public  partial class TwoOrMoreChildSequenceConstraintHasChildSequence
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TwoOrMoreChildSequenceConstraintHasChildSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TwoOrMoreChildSequenceConstraintHasChildSequence CreateTwoOrMoreChildSequenceConstraintHasChildSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateTwoOrMoreChildSequenceConstraintHasChildSequence(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TwoOrMoreChildSequenceConstraintHasChildSequence CreateAndInitializeTwoOrMoreChildSequenceConstraintHasChildSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeTwoOrMoreChildSequenceConstraintHasChildSequence(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public TwoOrMoreChildSequenceConstraintHasChildSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TwoOrMoreChildSequenceConstraintHasChildSequence CreateTwoOrMoreChildSequenceConstraintHasChildSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (TwoOrMoreChildSequenceConstraintHasChildSequence)partition.ElementFactory.CreateElementLink(typeof(TwoOrMoreChildSequenceConstraintHasChildSequence), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TwoOrMoreChildSequenceConstraintHasChildSequence CreateAndInitializeTwoOrMoreChildSequenceConstraintHasChildSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (TwoOrMoreChildSequenceConstraintHasChildSequence)partition.ElementFactory.CreateElementLink(typeof(TwoOrMoreChildSequenceConstraintHasChildSequence), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for TwoOrMoreChildSequenceConstraintHasChildSequence
	/// <summary>
	/// TwoOrMoreChildSequenceConstraintHasChildSequence Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence))]
	public sealed class TwoOrMoreChildSequenceConstraintHasChildSequenceElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TwoOrMoreChildSequenceConstraintHasChildSequenceElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static TwoOrMoreChildSequenceConstraintHasChildSequenceElementFactoryCreator Instance
		{
			get
			{
				return new TwoOrMoreChildSequenceConstraintHasChildSequenceElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint")]
	public  partial class ChildHasSingleChildConstraint : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ChildHasSingleChildConstraint's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "5cb9a169-bf5f-4a41-af13-b942ff3a4fc8";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ChildHasSingleChildConstraint.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ChildHasSingleChildConstraint.MetaClassGuid;
		#endregion

		#region SingleChildConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SingleChildConstraintCollectionMetaRoleGuidString = "6d9efd87-77ad-451d-83a0-c8184d69ee99";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SingleChildConstraintCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.SingleChildConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.SingleChildConstraintCollectionMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.SingleChildConstraintCollection")]
		public  Neumont.Tools.ORM.OIALModel.SingleChildConstraint SingleChildConstraintCollection
		{
			get { return (Neumont.Tools.ORM.OIALModel.SingleChildConstraint)this.GetRolePlayer(SingleChildConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(SingleChildConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ConceptTypeHasChild's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ConceptTypeHasChildMetaRoleGuidString = "c338d20a-6460-40a0-bd7a-e4ed554b9148";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ConceptTypeHasChildMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.ConceptTypeHasChildMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.ConceptTypeHasChildMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.ConceptTypeHasChild")]
		public  Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild ConceptTypeHasChild
		{
			get { return (Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild)this.GetRolePlayer(ConceptTypeHasChildMetaRoleGuid); }
			set { this.SetRolePlayer(ConceptTypeHasChildMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ChildHasSingleChildConstraint's Generated Constructor Code
	public  partial class ChildHasSingleChildConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ChildHasSingleChildConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildHasSingleChildConstraint CreateChildHasSingleChildConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateChildHasSingleChildConstraint(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildHasSingleChildConstraint CreateAndInitializeChildHasSingleChildConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeChildHasSingleChildConstraint(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ChildHasSingleChildConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildHasSingleChildConstraint CreateChildHasSingleChildConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ChildHasSingleChildConstraint)partition.ElementFactory.CreateElementLink(typeof(ChildHasSingleChildConstraint), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildHasSingleChildConstraint CreateAndInitializeChildHasSingleChildConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ChildHasSingleChildConstraint)partition.ElementFactory.CreateElementLink(typeof(ChildHasSingleChildConstraint), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ChildHasSingleChildConstraint
	/// <summary>
	/// ChildHasSingleChildConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint))]
	public sealed class ChildHasSingleChildConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ChildHasSingleChildConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ChildHasSingleChildConstraintElementFactoryCreator Instance
		{
			get
			{
				return new ChildHasSingleChildConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint")]
	public  partial class OIALModelHasChildSequenceConstraint : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region OIALModelHasChildSequenceConstraint's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3854e9bb-5418-46b8-a645-efc264274539";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = OIALModelHasChildSequenceConstraint.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = OIALModelHasChildSequenceConstraint.MetaClassGuid;
		#endregion

		#region ChildSequenceConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ChildSequenceConstraintCollectionMetaRoleGuidString = "785f5301-03c7-4d8f-9bf6-4bd269dc1eab";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ChildSequenceConstraintCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintCollectionMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintCollection")]
		public  Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint ChildSequenceConstraintCollection
		{
			get { return (Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint)this.GetRolePlayer(ChildSequenceConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ChildSequenceConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region OIALModel's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String OIALModelMetaRoleGuidString = "0f988269-a0b6-4490-9fdb-3e34a7f046f3";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid OIALModelMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.OIALModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.OIALModelMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.OIALModel")]
		public  Neumont.Tools.ORM.OIALModel.OIALModel OIALModel
		{
			get { return (Neumont.Tools.ORM.OIALModel.OIALModel)this.GetRolePlayer(OIALModelMetaRoleGuid); }
			set { this.SetRolePlayer(OIALModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region OIALModelHasChildSequenceConstraint's Generated Constructor Code
	public  partial class OIALModelHasChildSequenceConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALModelHasChildSequenceConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALModelHasChildSequenceConstraint CreateOIALModelHasChildSequenceConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateOIALModelHasChildSequenceConstraint(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALModelHasChildSequenceConstraint CreateAndInitializeOIALModelHasChildSequenceConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeOIALModelHasChildSequenceConstraint(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALModelHasChildSequenceConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALModelHasChildSequenceConstraint CreateOIALModelHasChildSequenceConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (OIALModelHasChildSequenceConstraint)partition.ElementFactory.CreateElementLink(typeof(OIALModelHasChildSequenceConstraint), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OIALModelHasChildSequenceConstraint CreateAndInitializeOIALModelHasChildSequenceConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (OIALModelHasChildSequenceConstraint)partition.ElementFactory.CreateElementLink(typeof(OIALModelHasChildSequenceConstraint), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for OIALModelHasChildSequenceConstraint
	/// <summary>
	/// OIALModelHasChildSequenceConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint))]
	public sealed class OIALModelHasChildSequenceConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public OIALModelHasChildSequenceConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static OIALModelHasChildSequenceConstraintElementFactoryCreator Instance
		{
			get
			{
				return new OIALModelHasChildSequenceConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole")]
	public  partial class ConceptTypeHasChildHasPathRole : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ConceptTypeHasChildHasPathRole's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "b01d25e8-ef63-4f8c-be8c-eb38ebb1806b";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ConceptTypeHasChildHasPathRole.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ConceptTypeHasChildHasPathRole.MetaClassGuid;
		#endregion

		#region PathRoleCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String PathRoleCollectionMetaRoleGuidString = "e47ef09c-5708-44cd-acc0-57e0ef26e584";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid PathRoleCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.PathRoleCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.PathRoleCollectionMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.PathRoleCollection")]
		public  Neumont.Tools.ORM.ObjectModel.RoleBase PathRoleCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.RoleBase)this.GetRolePlayer(PathRoleCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(PathRoleCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ConceptTypeHasChild's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ConceptTypeHasChildMetaRoleGuidString = "ca4455d9-8ba1-4738-bb28-60edfb12b5bb";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ConceptTypeHasChildMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.ConceptTypeHasChildMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.ConceptTypeHasChildMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole.ConceptTypeHasChild")]
		public  Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild ConceptTypeHasChild
		{
			get { return (Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild)this.GetRolePlayer(ConceptTypeHasChildMetaRoleGuid); }
			set { this.SetRolePlayer(ConceptTypeHasChildMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ConceptTypeHasChildHasPathRole's Generated Constructor Code
	public  partial class ConceptTypeHasChildHasPathRole
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptTypeHasChildHasPathRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeHasChildHasPathRole CreateConceptTypeHasChildHasPathRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateConceptTypeHasChildHasPathRole(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeHasChildHasPathRole CreateAndInitializeConceptTypeHasChildHasPathRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeConceptTypeHasChildHasPathRole(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptTypeHasChildHasPathRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeHasChildHasPathRole CreateConceptTypeHasChildHasPathRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ConceptTypeHasChildHasPathRole)partition.ElementFactory.CreateElementLink(typeof(ConceptTypeHasChildHasPathRole), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConceptTypeHasChildHasPathRole CreateAndInitializeConceptTypeHasChildHasPathRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ConceptTypeHasChildHasPathRole)partition.ElementFactory.CreateElementLink(typeof(ConceptTypeHasChildHasPathRole), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ConceptTypeHasChildHasPathRole
	/// <summary>
	/// ConceptTypeHasChildHasPathRole Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole))]
	public sealed class ConceptTypeHasChildHasPathRoleElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptTypeHasChildHasPathRoleElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.ConceptTypeHasChildHasPathRole( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ConceptTypeHasChildHasPathRoleElementFactoryCreator Instance
		{
			get
			{
				return new ConceptTypeHasChildHasPathRoleElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("a03139c7-2681-4787-a82a-1cc2104c6f9b")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.MetaRelationshipGuidString, "Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild")]
	public  partial class ChildSequenceHasConceptTypeHasChild : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ChildSequenceHasConceptTypeHasChild's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "f492b2bc-c1a2-4466-9e23-5ef15b199c6d";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ChildSequenceHasConceptTypeHasChild.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ChildSequenceHasConceptTypeHasChild.MetaClassGuid;
		#endregion

		#region ConceptTypeHasChildCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ConceptTypeHasChildCollectionMetaRoleGuidString = "cb8bb816-9ce6-4fcd-bce7-0f26f7c65a5e";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ConceptTypeHasChildCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ConceptTypeHasChildCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ConceptTypeHasChildCollectionMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ConceptTypeHasChildCollection")]
		public  Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild ConceptTypeHasChildCollection
		{
			get { return (Neumont.Tools.ORM.OIALModel.ConceptTypeHasChild)this.GetRolePlayer(ConceptTypeHasChildCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ConceptTypeHasChildCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ChildSequenceCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ChildSequenceCollectionMetaRoleGuidString = "71be359d-f609-4512-ac3f-89869f5abd48";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ChildSequenceCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ChildSequenceCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ChildSequenceCollectionMetaRoleGuidString, "Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ChildSequenceCollection")]
		public  Neumont.Tools.ORM.OIALModel.ChildSequence ChildSequenceCollection
		{
			get { return (Neumont.Tools.ORM.OIALModel.ChildSequence)this.GetRolePlayer(ChildSequenceCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ChildSequenceCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ChildSequenceHasConceptTypeHasChild's Generated Constructor Code
	public  partial class ChildSequenceHasConceptTypeHasChild
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ChildSequenceHasConceptTypeHasChild(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildSequenceHasConceptTypeHasChild CreateChildSequenceHasConceptTypeHasChild(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateChildSequenceHasConceptTypeHasChild(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildSequenceHasConceptTypeHasChild CreateAndInitializeChildSequenceHasConceptTypeHasChild(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeChildSequenceHasConceptTypeHasChild(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ChildSequenceHasConceptTypeHasChild(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildSequenceHasConceptTypeHasChild CreateChildSequenceHasConceptTypeHasChild(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ChildSequenceHasConceptTypeHasChild)partition.ElementFactory.CreateElementLink(typeof(ChildSequenceHasConceptTypeHasChild), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ChildSequenceHasConceptTypeHasChild CreateAndInitializeChildSequenceHasConceptTypeHasChild(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ChildSequenceHasConceptTypeHasChild)partition.ElementFactory.CreateElementLink(typeof(ChildSequenceHasConceptTypeHasChild), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ChildSequenceHasConceptTypeHasChild
	/// <summary>
	/// ChildSequenceHasConceptTypeHasChild Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild))]
	public sealed class ChildSequenceHasConceptTypeHasChildElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ChildSequenceHasConceptTypeHasChildElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ChildSequenceHasConceptTypeHasChildElementFactoryCreator Instance
		{
			get
			{
				return new ChildSequenceHasConceptTypeHasChildElementFactoryCreator();
			}
		}
	}
	#endregion

}


