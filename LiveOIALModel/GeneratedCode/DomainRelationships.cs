#region Common Public License Copyright Notice
/**************************************************************************\
* Neumont Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship OIALModelHasORMModel
	/// Description for Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ce29d602-48dd-43f5-b5c3-7e1fe8ffb59f")]
	public partial class OIALModelHasORMModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OIALModelHasORMModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xce29d602, 0x48dd, 0x43f5, 0xb5, 0xc3, 0x7e, 0x1f, 0xe8, 0xff, 0xb5, 0x9f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OIALModelHasORMModel link in the same Partition as the given LiveOIALModel
		/// </summary>
		/// <param name="source">LiveOIALModel to use as the source of the relationship.</param>
		/// <param name="target">ORMModel to use as the target of the relationship.</param>
		public OIALModelHasORMModel(LiveOIALModel source, global::Neumont.Tools.ORM.ObjectModel.ORMModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OIALModelHasORMModel.OIALModelDomainRoleId, source), new DslModeling::RoleAssignment(OIALModelHasORMModel.ORMModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OIALModelHasORMModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OIALModelHasORMModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OIALModelHasORMModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OIALModelHasORMModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region OIALModel domain role code
		
		/// <summary>
		/// OIALModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid OIALModelDomainRoleId = new global::System.Guid(0x528f3575, 0x90c9, 0x4ab1, 0x80, 0x5f, 0xbd, 0x93, 0x85, 0x21, 0x21, 0xdd);
		
		/// <summary>
		/// DomainRole OIALModel
		/// Description for Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel.OIALModel
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel/OIALModel.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel/OIALModel.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ORMModel", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel/OIALModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("528f3575-90c9-4ab1-805f-bd93852121dd")]
		public virtual LiveOIALModel OIALModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LiveOIALModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, OIALModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OIALModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OIALModel of a ORMModel
		/// <summary>
		/// Gets OIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LiveOIALModel GetOIALModel(global::Neumont.Tools.ORM.ObjectModel.ORMModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ORMModelDomainRoleId) as LiveOIALModel;
		}
		
		/// <summary>
		/// Sets OIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOIALModel(global::Neumont.Tools.ORM.ObjectModel.ORMModel element, LiveOIALModel newOIALModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ORMModelDomainRoleId, newOIALModel);
		}
		#endregion
		#region ORMModel domain role code
		
		/// <summary>
		/// ORMModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ORMModelDomainRoleId = new global::System.Guid(0xa81b9158, 0x0571, 0x40f0, 0xbb, 0x07, 0x74, 0x8f, 0x40, 0x76, 0xec, 0x92);
		
		/// <summary>
		/// DomainRole ORMModel
		/// Description for Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel.ORMModel
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel/ORMModel.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel/ORMModel.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "OIALModel", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel/ORMModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a81b9158-0571-40f0-bb07-748f4076ec92")]
		public virtual global::Neumont.Tools.ORM.ObjectModel.ORMModel ORMModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.ORM.ObjectModel.ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ORMModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ORMModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ORMModel of a LiveOIALModel
		/// <summary>
		/// Gets ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ORMModel GetORMModel(LiveOIALModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OIALModelDomainRoleId) as global::Neumont.Tools.ORM.ObjectModel.ORMModel;
		}
		
		/// <summary>
		/// Sets ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetORMModel(LiveOIALModel element, global::Neumont.Tools.ORM.ObjectModel.ORMModel newORMModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OIALModelDomainRoleId, newORMModel);
		}
		#endregion
		#region OIALModel link accessor
		/// <summary>
		/// Get the OIALModelHasORMModel link to a LiveOIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel GetLinkToORMModel (global::Neumont.Tools.ORM.TestOIALModel.LiveOIALModel oIALModelInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel>(oIALModelInstance, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel.OIALModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of OIALModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ORMModel link accessor
		/// <summary>
		/// Get the OIALModelHasORMModel link to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel GetLinkToOIALModel (global::Neumont.Tools.ORM.ObjectModel.ORMModel oRMModelInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel>(oRMModelInstance, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel.ORMModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ORMModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OIALModelHasORMModel instance accessors
		
		/// <summary>
		/// Get any OIALModelHasORMModel links between a given LiveOIALModel and a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.LiveOIALModel source, global::Neumont.Tools.ORM.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel>(source, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel.OIALModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one OIALModelHasORMModel link between a given LiveOIALModeland a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel GetLink( global::Neumont.Tools.ORM.TestOIALModel.LiveOIALModel source, global::Neumont.Tools.ORM.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel>(source, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel.OIALModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship OIALModelHasConceptType
	/// Description for Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("2bad2b26-9947-4946-af72-36388c98e2bd")]
	public partial class OIALModelHasConceptType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OIALModelHasConceptType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2bad2b26, 0x9947, 0x4946, 0xaf, 0x72, 0x36, 0x38, 0x8c, 0x98, 0xe2, 0xbd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OIALModelHasConceptType link in the same Partition as the given LiveOIALModel
		/// </summary>
		/// <param name="source">LiveOIALModel to use as the source of the relationship.</param>
		/// <param name="target">ConceptType to use as the target of the relationship.</param>
		public OIALModelHasConceptType(LiveOIALModel source, ConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OIALModelHasConceptType.ModelDomainRoleId, source), new DslModeling::RoleAssignment(OIALModelHasConceptType.ConceptTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OIALModelHasConceptType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OIALModelHasConceptType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OIALModelHasConceptType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OIALModelHasConceptType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xcef05e31, 0xbdf9, 0x4aa4, 0xab, 0xca, 0x1e, 0x31, 0xd4, 0x8f, 0x58, 0xdb);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType/Model.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType/Model.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConceptTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cef05e31-bdf9-4aa4-abca-1e31d48f58db")]
		public virtual LiveOIALModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LiveOIALModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ConceptType
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LiveOIALModel GetModel(ConceptType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConceptTypeDomainRoleId) as LiveOIALModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ConceptType element, LiveOIALModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConceptTypeDomainRoleId, newModel);
		}
		#endregion
		#region ConceptType domain role code
		
		/// <summary>
		/// ConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeDomainRoleId = new global::System.Guid(0xa904fca0, 0xdd58, 0x4c5d, 0x97, 0x25, 0x87, 0x82, 0x70, 0x92, 0x46, 0x98);
		
		/// <summary>
		/// DomainRole ConceptType
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType.ConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType/ConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType/ConceptType.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType/ConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a904fca0-dd58-4c5d-9725-878270924698")]
		public virtual ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptTypeCollection of a LiveOIALModel
		/// <summary>
		/// Gets a list of ConceptTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptType> GetConceptTypeCollection(LiveOIALModel element)
		{
			return new DslModeling::LinkedElementCollection<ConceptType>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of OIALModelHasConceptType links to a LiveOIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType> GetLinksToConceptTypeCollection ( global::Neumont.Tools.ORM.TestOIALModel.LiveOIALModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType>(modelInstance, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType.ModelDomainRoleId);
		}
		#endregion
		#region ConceptType link accessor
		/// <summary>
		/// Get the OIALModelHasConceptType link to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType GetLinkToModel (global::Neumont.Tools.ORM.TestOIALModel.ConceptType conceptTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType>(conceptTypeInstance, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType.ConceptTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConceptType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OIALModelHasConceptType instance accessors
		
		/// <summary>
		/// Get any OIALModelHasConceptType links between a given LiveOIALModel and a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.LiveOIALModel source, global::Neumont.Tools.ORM.TestOIALModel.ConceptType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType>(source, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one OIALModelHasConceptType link between a given LiveOIALModeland a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType GetLink( global::Neumont.Tools.ORM.TestOIALModel.LiveOIALModel source, global::Neumont.Tools.ORM.TestOIALModel.ConceptType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType>(source, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship ConceptTypeChild
	/// Description for Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("0476605b-54f3-4051-8b68-e57480eab0ed")]
	public abstract partial class ConceptTypeChild : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeChild domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0476605b, 0x54f3, 0x4051, 0x8b, 0x68, 0xe5, 0x74, 0x80, 0xea, 0xb0, 0xed);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected ConceptTypeChild(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0x18221bf0, 0xa9bd, 0x4f58, 0xa9, 0x1a, 0x71, 0xd4, 0xc9, 0x15, 0x61, 0xd0);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild/Parent.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild/Parent.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild/Parent.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("18221bf0-a9bd-4f58-a91a-71d4c91561d0")]
		public abstract ConceptType Parent
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Parent of a OIALNamedElement
		/// <summary>
		/// Gets a list of Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ConceptType> GetParent(OIALNamedElement element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ConceptType>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x4fb28ad5, 0xbfb9, 0x45a3, 0xbe, 0x65, 0x58, 0x87, 0xcf, 0x8e, 0x70, 0x26);
		
		/// <summary>
		/// DomainRole Target
		/// Description for Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild/Target.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild/Target.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild/Target.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4fb28ad5-bfb9-45a3-be65-5887cf8e7026")]
		public abstract OIALNamedElement Target
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access TargetCollection of a ConceptType
		/// <summary>
		/// Gets a list of TargetCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<OIALNamedElement> GetTargetCollection(ConceptType element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<OIALNamedElement>(element, ParentDomainRoleId);
		}
		#endregion
		#region Mandatory domain property code
		
		/// <summary>
		/// Mandatory domain property Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryDomainPropertyId = new global::System.Guid(0x2be7593a, 0x1e76, 0x44f6, 0xbc, 0x9f, 0x52, 0x97, 0x09, 0x6b, 0xcf, 0x4e);
		
		/// <summary>
		/// Storage for Mandatory
		/// </summary>
		private MandatoryConstraintModality mandatoryPropertyStorage = Neumont.Tools.ORM.TestOIALModel.MandatoryConstraintModality.NotMandatory;
		
		/// <summary>
		/// Gets or sets the value of Mandatory domain property.
		/// Description for Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild.Mandatory
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild/Mandatory.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild/Mandatory.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Neumont.Tools.ORM.TestOIALModel.MandatoryConstraintModality.NotMandatory)]
		[DslModeling::DomainObjectId("2be7593a-1e76-44f6-bc9f-5297096bcf4e")]
		public MandatoryConstraintModality Mandatory
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return mandatoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MandatoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConceptTypeChild.Mandatory domain property.
		/// </summary>
		internal sealed partial class MandatoryPropertyHandler : DslModeling::DomainPropertyValueHandler<ConceptTypeChild, MandatoryConstraintModality>
		{
			private MandatoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConceptTypeChild.Mandatory domain property value handler.
			/// </summary>
			public static readonly MandatoryPropertyHandler Instance = new MandatoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConceptTypeChild.Mandatory domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MandatoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed MandatoryConstraintModality GetValue(ConceptTypeChild element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.mandatoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConceptTypeChild element, MandatoryConstraintModality newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				MandatoryConstraintModality oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.mandatoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x16cc1655, 0x0665, 0x4d2d, 0xa9, 0xb9, 0xc8, 0xb0, 0xb4, 0x7e, 0x29, 0x14);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild/Name.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild/Name.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("16cc1655-0665-4d2d-a9b9-c8b0b47e2914")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConceptTypeChild.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ConceptTypeChild, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConceptTypeChild.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConceptTypeChild.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConceptTypeChild element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConceptTypeChild element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region SingleChildConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of SingleChildConstraintCollection.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint.ConceptTypeChild
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SingleChildConstraint> SingleChildConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<SingleChildConstraint>(this, global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint.ConceptTypeChildDomainRoleId);
			}
		}
		#endregion
		#region PathRoleCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of PathRoleCollection.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole.ConceptTypeChild
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<global::Neumont.Tools.ORM.ObjectModel.RoleBase> PathRoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<global::Neumont.Tools.ORM.ObjectModel.RoleBase>(this, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole.ConceptTypeChildDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of ConceptTypeChild links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild> GetLinksToTargetCollection ( global::Neumont.Tools.ORM.TestOIALModel.ConceptType parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild>(parentInstance, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild.ParentDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of ConceptTypeChild links to a OIALNamedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild> GetLinksToParent ( global::Neumont.Tools.ORM.TestOIALModel.OIALNamedElement targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild>(targetInstance, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild.TargetDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild instance accessors
		
		/// <summary>
		/// Get any ConceptTypeChild links between a given ConceptType and a OIALNamedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.ConceptType source, global::Neumont.Tools.ORM.TestOIALModel.OIALNamedElement target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild>(source, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild.ParentDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship ConceptTypeAbsorbedConceptType
	/// Description for Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("cd53823e-c08e-4858-b2c8-ef8dfb61a80c")]
	public partial class ConceptTypeAbsorbedConceptType : ConceptTypeChild
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeAbsorbedConceptType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcd53823e, 0xc08e, 0x4858, 0xb2, 0xc8, 0xef, 0x8d, 0xfb, 0x61, 0xa8, 0x0c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptTypeAbsorbedConceptType link in the same Partition as the given ConceptType
		/// </summary>
		/// <param name="source">ConceptType to use as the source of the relationship.</param>
		/// <param name="target">ConceptType to use as the target of the relationship.</param>
		public ConceptTypeAbsorbedConceptType(ConceptType source, ConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptTypeAbsorbedConceptType.AbsorbingConceptTypeDomainRoleId, source), new DslModeling::RoleAssignment(ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeAbsorbedConceptType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeAbsorbedConceptType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeAbsorbedConceptType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeAbsorbedConceptType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AbsorbingConceptType domain role code
		
		/// <summary>
		/// AbsorbingConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbsorbingConceptTypeDomainRoleId = new global::System.Guid(0xbf7f84ba, 0x392d, 0x4f72, 0xa8, 0x9c, 0x34, 0xf0, 0xff, 0x45, 0x88, 0xf1);
		
		/// <summary>
		/// DomainRole AbsorbingConceptType
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType/AbsorbingConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType/AbsorbingConceptType.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AbsorbedConceptTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType/AbsorbingConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bf7f84ba-392d-4f72-a89c-34f0ff4588f1")]
		public virtual ConceptType AbsorbingConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbsorbingConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbsorbingConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AbsorbingConceptType of a ConceptType
		/// <summary>
		/// Gets AbsorbingConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConceptType GetAbsorbingConceptType(ConceptType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AbsorbedConceptTypeDomainRoleId) as ConceptType;
		}
		
		/// <summary>
		/// Sets AbsorbingConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAbsorbingConceptType(ConceptType element, ConceptType newAbsorbingConceptType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AbsorbedConceptTypeDomainRoleId, newAbsorbingConceptType);
		}
		#endregion
		#region Parent domain role override
		
		/// <summary>
		/// Gets the element playing AbsorbingConceptType domain role.
		/// Description for Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild.Parent
		/// </summary>
		public override ConceptType Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.AbsorbingConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.AbsorbingConceptType = value;
			}
		}
		
		#endregion
		#region AbsorbedConceptType domain role code
		
		/// <summary>
		/// AbsorbedConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbsorbedConceptTypeDomainRoleId = new global::System.Guid(0xfbb9efb8, 0x79f5, 0x46ad, 0xb9, 0xf0, 0x2f, 0xaa, 0x40, 0x6a, 0x55, 0x29);
		
		/// <summary>
		/// DomainRole AbsorbedConceptType
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType/AbsorbedConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType/AbsorbedConceptType.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AbsorbingConceptType", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType/AbsorbedConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("fbb9efb8-79f5-46ad-b9f0-2faa406a5529")]
		public virtual ConceptType AbsorbedConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbsorbedConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbsorbedConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AbsorbedConceptTypeCollection of a ConceptType
		/// <summary>
		/// Gets a list of AbsorbedConceptTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptType> GetAbsorbedConceptTypeCollection(ConceptType element)
		{
			return new DslModeling::LinkedElementCollection<ConceptType>(element, AbsorbingConceptTypeDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing AbsorbedConceptType domain role.
		/// Description for Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild.Target
		/// </summary>
		public override OIALNamedElement Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.AbsorbedConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.AbsorbedConceptType = (ConceptType)value;
			}
		}
		
		#endregion
		#region AbsorbingConceptType link accessor
		/// <summary>
		/// Get the list of ConceptTypeAbsorbedConceptType links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType> GetLinksToAbsorbedConceptTypeCollection ( global::Neumont.Tools.ORM.TestOIALModel.ConceptType absorbingConceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType>(absorbingConceptTypeInstance, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptTypeDomainRoleId);
		}
		#endregion
		#region AbsorbedConceptType link accessor
		/// <summary>
		/// Get the ConceptTypeAbsorbedConceptType link to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType GetLinkToAbsorbingConceptType (global::Neumont.Tools.ORM.TestOIALModel.ConceptType absorbedConceptTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType>(absorbedConceptTypeInstance, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AbsorbedConceptType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptTypeAbsorbedConceptType instance accessors
		
		/// <summary>
		/// Get any ConceptTypeAbsorbedConceptType links between a given ConceptType and a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.ConceptType source, global::Neumont.Tools.ORM.TestOIALModel.ConceptType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType>(source, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType link in links )
			{
				if ( target.Equals(link.AbsorbedConceptType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConceptTypeAbsorbedConceptType link between a given ConceptTypeand a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType GetLink( global::Neumont.Tools.ORM.TestOIALModel.ConceptType source, global::Neumont.Tools.ORM.TestOIALModel.ConceptType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType>(source, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType link in links )
			{
				if ( target.Equals(link.AbsorbedConceptType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship InformationType
	/// Description for Neumont.Tools.ORM.TestOIALModel.InformationType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.InformationType.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.InformationType.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("94c404b9-8089-46f1-9b40-6c28a5b18e77")]
	public partial class InformationType : ConceptTypeChild
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InformationType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x94c404b9, 0x8089, 0x46f1, 0x9b, 0x40, 0x6c, 0x28, 0xa5, 0xb1, 0x8e, 0x77);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InformationType link in the same Partition as the given ConceptType
		/// </summary>
		/// <param name="source">ConceptType to use as the source of the relationship.</param>
		/// <param name="target">InformationTypeFormat to use as the target of the relationship.</param>
		public InformationType(ConceptType source, InformationTypeFormat target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InformationType.ConceptTypeDomainRoleId, source), new DslModeling::RoleAssignment(InformationType.InformationTypeFormatDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InformationType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InformationType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InformationType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InformationType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConceptType domain role code
		
		/// <summary>
		/// ConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeDomainRoleId = new global::System.Guid(0x9c2fabe7, 0x3993, 0x4cf4, 0x82, 0x5d, 0xec, 0x05, 0x20, 0x9d, 0xbe, 0x82);
		
		/// <summary>
		/// DomainRole ConceptType
		/// Description for Neumont.Tools.ORM.TestOIALModel.InformationType.ConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.InformationType/ConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.InformationType/ConceptType.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InformationTypeFormatCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.InformationType/ConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9c2fabe7-3993-4cf4-825d-ec05209dbe82")]
		public virtual ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptTypeCollection of a InformationTypeFormat
		/// <summary>
		/// Gets a list of ConceptTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptType> GetConceptTypeCollection(InformationTypeFormat element)
		{
			return new DslModeling::LinkedElementCollection<ConceptType>(element, InformationTypeFormatDomainRoleId);
		}
		#endregion
		#region Parent domain role override
		
		/// <summary>
		/// Gets the element playing ConceptType domain role.
		/// Description for Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild.Parent
		/// </summary>
		public override ConceptType Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ConceptType = value;
			}
		}
		
		#endregion
		#region InformationTypeFormat domain role code
		
		/// <summary>
		/// InformationTypeFormat domain role Id.
		/// </summary>
		public static readonly global::System.Guid InformationTypeFormatDomainRoleId = new global::System.Guid(0xb5a1560b, 0x40ad, 0x4f0d, 0xa7, 0x49, 0x61, 0xe9, 0xa0, 0x0f, 0xcb, 0x87);
		
		/// <summary>
		/// DomainRole InformationTypeFormat
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.InformationType.InformationTypeFormat
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.InformationType/InformationTypeFormat.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.InformationType/InformationTypeFormat.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConceptTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.InformationType/InformationTypeFormat.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b5a1560b-40ad-4f0d-a749-61e9a00fcb87")]
		public virtual InformationTypeFormat InformationTypeFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InformationTypeFormat)DslModeling::DomainRoleInfo.GetRolePlayer(this, InformationTypeFormatDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InformationTypeFormatDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InformationTypeFormatCollection of a ConceptType
		/// <summary>
		/// Gets a list of InformationTypeFormatCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InformationTypeFormat> GetInformationTypeFormatCollection(ConceptType element)
		{
			return new DslModeling::LinkedElementCollection<InformationTypeFormat>(element, ConceptTypeDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing InformationTypeFormat domain role.
		/// Description for Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild.Target
		/// </summary>
		public override OIALNamedElement Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.InformationTypeFormat;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.InformationTypeFormat = (InformationTypeFormat)value;
			}
		}
		
		#endregion
		#region ConceptType link accessor
		/// <summary>
		/// Get the list of InformationType links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.InformationType> GetLinksToInformationTypeFormatCollection ( global::Neumont.Tools.ORM.TestOIALModel.ConceptType conceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.InformationType>(conceptTypeInstance, global::Neumont.Tools.ORM.TestOIALModel.InformationType.ConceptTypeDomainRoleId);
		}
		#endregion
		#region InformationTypeFormat link accessor
		/// <summary>
		/// Get the list of InformationType links to a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.InformationType> GetLinksToConceptTypeCollection ( global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormat informationTypeFormatInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.InformationType>(informationTypeFormatInstance, global::Neumont.Tools.ORM.TestOIALModel.InformationType.InformationTypeFormatDomainRoleId);
		}
		#endregion
		#region InformationType instance accessors
		
		/// <summary>
		/// Get any InformationType links between a given ConceptType and a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.InformationType> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.ConceptType source, global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormat target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.InformationType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.InformationType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.InformationType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.InformationType>(source, global::Neumont.Tools.ORM.TestOIALModel.InformationType.ConceptTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.InformationType link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship OIALHasInformationTypeFormat
	/// Description for Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8ad40e7f-0688-4fa9-8787-4250e211b204")]
	public partial class OIALHasInformationTypeFormat : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OIALHasInformationTypeFormat domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8ad40e7f, 0x0688, 0x4fa9, 0x87, 0x87, 0x42, 0x50, 0xe2, 0x11, 0xb2, 0x04);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OIALHasInformationTypeFormat link in the same Partition as the given LiveOIALModel
		/// </summary>
		/// <param name="source">LiveOIALModel to use as the source of the relationship.</param>
		/// <param name="target">InformationTypeFormat to use as the target of the relationship.</param>
		public OIALHasInformationTypeFormat(LiveOIALModel source, InformationTypeFormat target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OIALHasInformationTypeFormat.ModelDomainRoleId, source), new DslModeling::RoleAssignment(OIALHasInformationTypeFormat.InformationTypeFormatDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OIALHasInformationTypeFormat(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OIALHasInformationTypeFormat(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OIALHasInformationTypeFormat(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OIALHasInformationTypeFormat(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xf9458392, 0x7802, 0x4caf, 0x98, 0x67, 0xf9, 0xc2, 0xe1, 0x7b, 0x11, 0x04);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat/Model.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat/Model.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InformationTypeFormatCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f9458392-7802-4caf-9867-f9c2e17b1104")]
		public virtual LiveOIALModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LiveOIALModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a InformationTypeFormat
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LiveOIALModel GetModel(InformationTypeFormat element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InformationTypeFormatDomainRoleId) as LiveOIALModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(InformationTypeFormat element, LiveOIALModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InformationTypeFormatDomainRoleId, newModel);
		}
		#endregion
		#region InformationTypeFormat domain role code
		
		/// <summary>
		/// InformationTypeFormat domain role Id.
		/// </summary>
		public static readonly global::System.Guid InformationTypeFormatDomainRoleId = new global::System.Guid(0x6d0cf1dc, 0x11d7, 0x402c, 0x9a, 0x51, 0x6c, 0xf9, 0x6e, 0xd2, 0x83, 0x98);
		
		/// <summary>
		/// DomainRole InformationTypeFormat
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat.InformationTypeFormat
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat/InformationTypeFormat.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat/InformationTypeFormat.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat/InformationTypeFormat.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6d0cf1dc-11d7-402c-9a51-6cf96ed28398")]
		public virtual InformationTypeFormat InformationTypeFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InformationTypeFormat)DslModeling::DomainRoleInfo.GetRolePlayer(this, InformationTypeFormatDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InformationTypeFormatDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InformationTypeFormatCollection of a LiveOIALModel
		/// <summary>
		/// Gets a list of InformationTypeFormatCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InformationTypeFormat> GetInformationTypeFormatCollection(LiveOIALModel element)
		{
			return new DslModeling::LinkedElementCollection<InformationTypeFormat>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of OIALHasInformationTypeFormat links to a LiveOIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat> GetLinksToInformationTypeFormatCollection ( global::Neumont.Tools.ORM.TestOIALModel.LiveOIALModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat>(modelInstance, global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat.ModelDomainRoleId);
		}
		#endregion
		#region InformationTypeFormat link accessor
		/// <summary>
		/// Get the OIALHasInformationTypeFormat link to a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat GetLinkToModel (global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormat informationTypeFormatInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat>(informationTypeFormatInstance, global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat.InformationTypeFormatDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InformationTypeFormat not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OIALHasInformationTypeFormat instance accessors
		
		/// <summary>
		/// Get any OIALHasInformationTypeFormat links between a given LiveOIALModel and a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.LiveOIALModel source, global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormat target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat>(source, global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one OIALHasInformationTypeFormat link between a given LiveOIALModeland a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat GetLink( global::Neumont.Tools.ORM.TestOIALModel.LiveOIALModel source, global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormat target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat>(source, global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship ConceptTypeRef
	/// Description for Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("26728038-c906-4187-8ee4-f1cc14897fa0")]
	public partial class ConceptTypeRef : ConceptTypeChild
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeRef domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x26728038, 0xc906, 0x4187, 0x8e, 0xe4, 0xf1, 0xcc, 0x14, 0x89, 0x7f, 0xa0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptTypeRef link in the same Partition as the given ConceptType
		/// </summary>
		/// <param name="source">ConceptType to use as the source of the relationship.</param>
		/// <param name="target">ConceptType to use as the target of the relationship.</param>
		public ConceptTypeRef(ConceptType source, ConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptTypeRef.ReferencingConceptTypeDomainRoleId, source), new DslModeling::RoleAssignment(ConceptTypeRef.ReferencedConceptTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeRef(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeRef(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeRef(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeRef(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ReferencingConceptType domain role code
		
		/// <summary>
		/// ReferencingConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferencingConceptTypeDomainRoleId = new global::System.Guid(0x81b301e1, 0x6b88, 0x4f99, 0x83, 0x5c, 0x58, 0xcc, 0x10, 0x1a, 0x7a, 0x15);
		
		/// <summary>
		/// DomainRole ReferencingConceptType
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef.ReferencingConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef/ReferencingConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef/ReferencingConceptType.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferencedConceptTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef/ReferencingConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("81b301e1-6b88-4f99-835c-58cc101a7a15")]
		public virtual ConceptType ReferencingConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferencingConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferencingConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferencingConceptType of a ConceptType
		/// <summary>
		/// Gets a list of ReferencingConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptType> GetReferencingConceptType(ConceptType element)
		{
			return new DslModeling::LinkedElementCollection<ConceptType>(element, ReferencedConceptTypeDomainRoleId);
		}
		#endregion
		#region Parent domain role override
		
		/// <summary>
		/// Gets the element playing ReferencingConceptType domain role.
		/// Description for Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild.Parent
		/// </summary>
		public override ConceptType Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ReferencingConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ReferencingConceptType = value;
			}
		}
		
		#endregion
		#region ReferencedConceptType domain role code
		
		/// <summary>
		/// ReferencedConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferencedConceptTypeDomainRoleId = new global::System.Guid(0xe3edd051, 0x4e78, 0x43de, 0x95, 0xba, 0x10, 0x20, 0x6f, 0xb8, 0xac, 0x2c);
		
		/// <summary>
		/// DomainRole ReferencedConceptType
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef.ReferencedConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef/ReferencedConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef/ReferencedConceptType.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferencingConceptType", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef/ReferencedConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e3edd051-4e78-43de-95ba-10206fb8ac2c")]
		public virtual ConceptType ReferencedConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferencedConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferencedConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferencedConceptTypeCollection of a ConceptType
		/// <summary>
		/// Gets a list of ReferencedConceptTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptType> GetReferencedConceptTypeCollection(ConceptType element)
		{
			return new DslModeling::LinkedElementCollection<ConceptType>(element, ReferencingConceptTypeDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing ReferencedConceptType domain role.
		/// Description for Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild.Target
		/// </summary>
		public override OIALNamedElement Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ReferencedConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ReferencedConceptType = (ConceptType)value;
			}
		}
		
		#endregion
		#region OppositeName domain property code
		
		/// <summary>
		/// OppositeName domain property Id.
		/// </summary>
		public static readonly global::System.Guid OppositeNameDomainPropertyId = new global::System.Guid(0xe5c68a11, 0x4a68, 0x44df, 0xa8, 0x21, 0x38, 0x3a, 0x99, 0x5a, 0x1a, 0x8e);
		
		/// <summary>
		/// Storage for OppositeName
		/// </summary>
		private global::System.String oppositeNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of OppositeName domain property.
		/// Description for Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef.OppositeName
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef/OppositeName.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef/OppositeName.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e5c68a11-4a68-44df-a821-383a995a1a8e")]
		public global::System.String OppositeName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return oppositeNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OppositeNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConceptTypeRef.OppositeName domain property.
		/// </summary>
		internal sealed partial class OppositeNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ConceptTypeRef, global::System.String>
		{
			private OppositeNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConceptTypeRef.OppositeName domain property value handler.
			/// </summary>
			public static readonly OppositeNamePropertyHandler Instance = new OppositeNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConceptTypeRef.OppositeName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OppositeNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConceptTypeRef element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.oppositeNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConceptTypeRef element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.oppositeNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReferencingConceptType link accessor
		/// <summary>
		/// Get the list of ConceptTypeRef links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef> GetLinksToReferencedConceptTypeCollection ( global::Neumont.Tools.ORM.TestOIALModel.ConceptType referencingConceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef>(referencingConceptTypeInstance, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef.ReferencingConceptTypeDomainRoleId);
		}
		#endregion
		#region ReferencedConceptType link accessor
		/// <summary>
		/// Get the list of ConceptTypeRef links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef> GetLinksToReferencingConceptType ( global::Neumont.Tools.ORM.TestOIALModel.ConceptType referencedConceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef>(referencedConceptTypeInstance, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef.ReferencedConceptTypeDomainRoleId);
		}
		#endregion
		#region ConceptTypeRef instance accessors
		
		/// <summary>
		/// Get any ConceptTypeRef links between a given ConceptType and a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.ConceptType source, global::Neumont.Tools.ORM.TestOIALModel.ConceptType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef>(source, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef.ReferencingConceptTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef link in links )
			{
				if ( target.Equals(link.ReferencedConceptType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship InformationTypeFormatHasObjectType
	/// Description for
	/// Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6256286a-b9a3-45ac-a4dd-6a6c063ae117")]
	public partial class InformationTypeFormatHasObjectType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InformationTypeFormatHasObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6256286a, 0xb9a3, 0x45ac, 0xa4, 0xdd, 0x6a, 0x6c, 0x06, 0x3a, 0xe1, 0x17);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InformationTypeFormatHasObjectType link in the same Partition as the given InformationTypeFormat
		/// </summary>
		/// <param name="source">InformationTypeFormat to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public InformationTypeFormatHasObjectType(InformationTypeFormat source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InformationTypeFormatHasObjectType.InformationTypeFormatDomainRoleId, source), new DslModeling::RoleAssignment(InformationTypeFormatHasObjectType.ValueTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InformationTypeFormatHasObjectType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InformationTypeFormatHasObjectType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InformationTypeFormatHasObjectType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InformationTypeFormatHasObjectType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InformationTypeFormat domain role code
		
		/// <summary>
		/// InformationTypeFormat domain role Id.
		/// </summary>
		public static readonly global::System.Guid InformationTypeFormatDomainRoleId = new global::System.Guid(0xdf9ea42f, 0xa030, 0x42a5, 0xac, 0x14, 0x82, 0x2c, 0x62, 0xac, 0x94, 0x6e);
		
		/// <summary>
		/// DomainRole InformationTypeFormat
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType.InformationTypeFormat
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType/InformationTypeFormat.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType/InformationTypeFormat.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueType", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType/InformationTypeFormat.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("df9ea42f-a030-42a5-ac14-822c62ac946e")]
		public virtual InformationTypeFormat InformationTypeFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InformationTypeFormat)DslModeling::DomainRoleInfo.GetRolePlayer(this, InformationTypeFormatDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InformationTypeFormatDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InformationTypeFormat of a ObjectType
		/// <summary>
		/// Gets InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InformationTypeFormat GetInformationTypeFormat(global::Neumont.Tools.ORM.ObjectModel.ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueTypeDomainRoleId) as InformationTypeFormat;
		}
		
		/// <summary>
		/// Sets InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInformationTypeFormat(global::Neumont.Tools.ORM.ObjectModel.ObjectType element, InformationTypeFormat newInformationTypeFormat)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueTypeDomainRoleId, newInformationTypeFormat);
		}
		#endregion
		#region ValueType domain role code
		
		/// <summary>
		/// ValueType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeDomainRoleId = new global::System.Guid(0xff695482, 0x1cbb, 0x4fb8, 0x87, 0xe1, 0xb6, 0x57, 0x1e, 0x16, 0x78, 0xd2);
		
		/// <summary>
		/// DomainRole ValueType
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType.ValueType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType/ValueType.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType/ValueType.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InformationTypeFormat", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType/ValueType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ff695482-1cbb-4fb8-87e1-b6571e1678d2")]
		public virtual global::Neumont.Tools.ORM.ObjectModel.ObjectType ValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.ORM.ObjectModel.ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueType of a InformationTypeFormat
		/// <summary>
		/// Gets ValueType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectType GetValueType(InformationTypeFormat element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InformationTypeFormatDomainRoleId) as global::Neumont.Tools.ORM.ObjectModel.ObjectType;
		}
		
		/// <summary>
		/// Sets ValueType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueType(InformationTypeFormat element, global::Neumont.Tools.ORM.ObjectModel.ObjectType newValueType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InformationTypeFormatDomainRoleId, newValueType);
		}
		#endregion
		#region InformationTypeFormat link accessor
		/// <summary>
		/// Get the InformationTypeFormatHasObjectType link to a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType GetLinkToValueType (global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormat informationTypeFormatInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType>(informationTypeFormatInstance, global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InformationTypeFormat not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueType link accessor
		/// <summary>
		/// Get the InformationTypeFormatHasObjectType link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType GetLinkToInformationTypeFormat (global::Neumont.Tools.ORM.ObjectModel.ObjectType valueTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType>(valueTypeInstance, global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType.ValueTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InformationTypeFormatHasObjectType instance accessors
		
		/// <summary>
		/// Get any InformationTypeFormatHasObjectType links between a given InformationTypeFormat and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormat source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType>(source, global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType link in links )
			{
				if ( target.Equals(link.ValueType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InformationTypeFormatHasObjectType link between a given InformationTypeFormatand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType GetLink( global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormat source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType>(source, global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType link in links )
			{
				if ( target.Equals(link.ValueType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship ConceptTypeHasObjectType
	/// Description for Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("05367d79-7984-4861-98ca-dfb14d86c9ec")]
	public partial class ConceptTypeHasObjectType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeHasObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x05367d79, 0x7984, 0x4861, 0x98, 0xca, 0xdf, 0xb1, 0x4d, 0x86, 0xc9, 0xec);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptTypeHasObjectType link in the same Partition as the given ConceptType
		/// </summary>
		/// <param name="source">ConceptType to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public ConceptTypeHasObjectType(ConceptType source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptTypeHasObjectType.ConceptTypeDomainRoleId, source), new DslModeling::RoleAssignment(ConceptTypeHasObjectType.ObjectTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeHasObjectType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeHasObjectType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeHasObjectType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeHasObjectType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConceptType domain role code
		
		/// <summary>
		/// ConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeDomainRoleId = new global::System.Guid(0x4238840e, 0xe5a0, 0x4477, 0x8b, 0x04, 0x40, 0x2e, 0x72, 0xdf, 0x43, 0x69);
		
		/// <summary>
		/// DomainRole ConceptType
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType.ConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType/ConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType/ConceptType.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectType", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType/ConceptType.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4238840e-e5a0-4477-8b04-402e72df4369")]
		public virtual ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptType of a ObjectType
		/// <summary>
		/// Gets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConceptType GetConceptType(global::Neumont.Tools.ORM.ObjectModel.ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as ConceptType;
		}
		
		/// <summary>
		/// Sets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConceptType(global::Neumont.Tools.ORM.ObjectModel.ObjectType element, ConceptType newConceptType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newConceptType);
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0x8414a2d9, 0x9845, 0x4588, 0xa9, 0x44, 0xb7, 0xb8, 0xc6, 0x0f, 0xdc, 0xfd);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType/ObjectType.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType/ObjectType.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConceptType", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("8414a2d9-9845-4588-a944-b7b8c60fdcfd")]
		public virtual global::Neumont.Tools.ORM.ObjectModel.ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.ORM.ObjectModel.ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectType of a ConceptType
		/// <summary>
		/// Gets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectType GetObjectType(ConceptType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConceptTypeDomainRoleId) as global::Neumont.Tools.ORM.ObjectModel.ObjectType;
		}
		
		/// <summary>
		/// Sets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectType(ConceptType element, global::Neumont.Tools.ORM.ObjectModel.ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConceptTypeDomainRoleId, newObjectType);
		}
		#endregion
		#region ConceptType link accessor
		/// <summary>
		/// Get the ConceptTypeHasObjectType link to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType GetLinkToObjectType (global::Neumont.Tools.ORM.TestOIALModel.ConceptType conceptTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType>(conceptTypeInstance, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType.ConceptTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConceptType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ConceptTypeHasObjectType link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType GetLinkToConceptType (global::Neumont.Tools.ORM.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType>(objectTypeInstance, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptTypeHasObjectType instance accessors
		
		/// <summary>
		/// Get any ConceptTypeHasObjectType links between a given ConceptType and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.ConceptType source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType>(source, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType.ConceptTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConceptTypeHasObjectType link between a given ConceptTypeand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType GetLink( global::Neumont.Tools.ORM.TestOIALModel.ConceptType source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType>(source, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType.ConceptTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship ChildSequenceConstraintHasChildSequence
	/// Description for
	/// Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7b7ec740-89ba-4278-b8c7-011f49d6a5a6")]
	public abstract partial class ChildSequenceConstraintHasChildSequence : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ChildSequenceConstraintHasChildSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7b7ec740, 0x89ba, 0x4278, 0xb8, 0xc7, 0x01, 0x1f, 0x49, 0xd6, 0xa5, 0xa6);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected ChildSequenceConstraintHasChildSequence(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ChildSequenceConstraint domain role code
		
		/// <summary>
		/// ChildSequenceConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildSequenceConstraintDomainRoleId = new global::System.Guid(0xa5088a66, 0xa31c, 0x4a79, 0xa7, 0xe6, 0x01, 0x14, 0xa9, 0x18, 0x8c, 0x4b);
		
		/// <summary>
		/// DomainRole ChildSequenceConstraint
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence/ChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence/ChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildSequence", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence/ChildSequenceConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("a5088a66-a31c-4a79-a7e6-0114a9188c4b")]
		public abstract ChildSequenceConstraint ChildSequenceConstraint
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ChildSequenceConstraint of a ChildSequence
		/// <summary>
		/// Gets ChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ChildSequenceConstraint GetChildSequenceConstraint(ChildSequence element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ChildSequenceDomainRoleId) as ChildSequenceConstraint;
		}
		
		/// <summary>
		/// Sets ChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetChildSequenceConstraint(ChildSequence element, ChildSequenceConstraint newChildSequenceConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ChildSequenceDomainRoleId, newChildSequenceConstraint);
		}
		#endregion
		#region ChildSequence domain role code
		
		/// <summary>
		/// ChildSequence domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildSequenceDomainRoleId = new global::System.Guid(0x5cff3a81, 0x8ed1, 0x46e3, 0xb3, 0xfe, 0xd8, 0x77, 0x8b, 0xc4, 0xe6, 0x7d);
		
		/// <summary>
		/// DomainRole ChildSequence
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence.ChildSequence
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence/ChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence/ChildSequence.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ChildSequenceConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence/ChildSequence.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5cff3a81-8ed1-46e3-b3fe-d8778bc4e67d")]
		public abstract ChildSequence ChildSequence
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ChildSequence of a ChildSequenceConstraint
		/// <summary>
		/// Gets a list of ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ChildSequence> GetChildSequence(ChildSequenceConstraint element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ChildSequence>(element, ChildSequenceConstraintDomainRoleId);
		}
		#endregion
		#region ChildSequenceConstraint link accessor
		/// <summary>
		/// Get the list of ChildSequenceConstraintHasChildSequence links to a ChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence> GetLinksToChildSequence ( global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraint childSequenceConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence>(childSequenceConstraintInstance, global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceConstraintDomainRoleId);
		}
		#endregion
		#region ChildSequence link accessor
		/// <summary>
		/// Get the ChildSequenceConstraintHasChildSequence link to a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence GetLinkToChildSequenceConstraint (global::Neumont.Tools.ORM.TestOIALModel.ChildSequence childSequenceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence>(childSequenceInstance, global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ChildSequence not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ChildSequenceConstraintHasChildSequence instance accessors
		
		/// <summary>
		/// Get any ChildSequenceConstraintHasChildSequence links between a given ChildSequenceConstraint and a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraint source, global::Neumont.Tools.ORM.TestOIALModel.ChildSequence target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence>(source, global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence link in links )
			{
				if ( target.Equals(link.ChildSequence) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ChildSequenceConstraintHasChildSequence link between a given ChildSequenceConstraintand a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence GetLink( global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraint source, global::Neumont.Tools.ORM.TestOIALModel.ChildSequence target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence>(source, global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence link in links )
			{
				if ( target.Equals(link.ChildSequence) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship SingleChildSequenceConstraintHasMinTwoChildrenChildSequence
	/// Description for
	/// Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("18edcf00-ce25-493d-905e-6b9cc6a55501")]
	public partial class SingleChildSequenceConstraintHasMinTwoChildrenChildSequence : ChildSequenceConstraintHasChildSequence
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SingleChildSequenceConstraintHasMinTwoChildrenChildSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x18edcf00, 0xce25, 0x493d, 0x90, 0x5e, 0x6b, 0x9c, 0xc6, 0xa5, 0x55, 0x01);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SingleChildSequenceConstraintHasMinTwoChildrenChildSequence link in the same Partition as the given SingleChildSequenceConstraint
		/// </summary>
		/// <param name="source">SingleChildSequenceConstraint to use as the source of the relationship.</param>
		/// <param name="target">MinTwoChildrenChildSequence to use as the target of the relationship.</param>
		public SingleChildSequenceConstraintHasMinTwoChildrenChildSequence(SingleChildSequenceConstraint source, MinTwoChildrenChildSequence target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.ChildSequenceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SingleChildSequenceConstraintHasMinTwoChildrenChildSequence(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SingleChildSequenceConstraintHasMinTwoChildrenChildSequence(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SingleChildSequenceConstraintHasMinTwoChildrenChildSequence(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SingleChildSequenceConstraintHasMinTwoChildrenChildSequence(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SingleChildSequenceConstraint domain role code
		
		/// <summary>
		/// SingleChildSequenceConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SingleChildSequenceConstraintDomainRoleId = new global::System.Guid(0x66c387e1, 0x62f1, 0x4e13, 0xa6, 0x83, 0x34, 0x5e, 0xfc, 0x9c, 0x19, 0x86);
		
		/// <summary>
		/// DomainRole SingleChildSequenceConstraint
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence/SingleChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence/SingleChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildSequence", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence/SingleChildSequenceConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("66c387e1-62f1-4e13-a683-345efc9c1986")]
		public virtual SingleChildSequenceConstraint SingleChildSequenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SingleChildSequenceConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SingleChildSequenceConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SingleChildSequenceConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SingleChildSequenceConstraint of a MinTwoChildrenChildSequence
		/// <summary>
		/// Gets SingleChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SingleChildSequenceConstraint GetSingleChildSequenceConstraint(MinTwoChildrenChildSequence element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ChildSequenceDomainRoleId) as SingleChildSequenceConstraint;
		}
		
		/// <summary>
		/// Sets SingleChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSingleChildSequenceConstraint(MinTwoChildrenChildSequence element, SingleChildSequenceConstraint newSingleChildSequenceConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ChildSequenceDomainRoleId, newSingleChildSequenceConstraint);
		}
		#endregion
		#region ChildSequenceConstraint domain role override
		
		/// <summary>
		/// Gets the element playing SingleChildSequenceConstraint domain role.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceConstraint
		/// </summary>
		public override ChildSequenceConstraint ChildSequenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SingleChildSequenceConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SingleChildSequenceConstraint = (SingleChildSequenceConstraint)value;
			}
		}
		
		#endregion
		#region ChildSequence domain role code
		
		/// <summary>
		/// ChildSequence domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ChildSequenceDomainRoleId = new global::System.Guid(0xac96b1ff, 0x286c, 0x4d9b, 0xbc, 0x81, 0x59, 0x37, 0xd2, 0xf0, 0x65, 0x5f);
		
		/// <summary>
		/// DomainRole ChildSequence
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.ChildSequence
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence/ChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence/ChildSequence.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, RolePlayer = typeof(MinTwoChildrenChildSequence), PropertyName = "SingleChildSequenceConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence/ChildSequence.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ac96b1ff-286c-4d9b-bc81-5937d2f0655f")]
		public override ChildSequence ChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ChildSequence)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildSequenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildSequenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildSequence of a SingleChildSequenceConstraint
		/// <summary>
		/// Gets ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MinTwoChildrenChildSequence GetChildSequence(SingleChildSequenceConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SingleChildSequenceConstraintDomainRoleId) as MinTwoChildrenChildSequence;
		}
		
		/// <summary>
		/// Sets ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetChildSequence(SingleChildSequenceConstraint element, MinTwoChildrenChildSequence newChildSequence)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SingleChildSequenceConstraintDomainRoleId, newChildSequence);
		}
		#endregion
		#region SingleChildSequenceConstraint link accessor
		/// <summary>
		/// Get the SingleChildSequenceConstraintHasMinTwoChildrenChildSequence link to a SingleChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence GetLinkToChildSequence (global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraint singleChildSequenceConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence>(singleChildSequenceConstraintInstance, global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SingleChildSequenceConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ChildSequence link accessor
		/// <summary>
		/// Get the SingleChildSequenceConstraintHasMinTwoChildrenChildSequence link to a MinTwoChildrenChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence GetLinkToSingleChildSequenceConstraint (global::Neumont.Tools.ORM.TestOIALModel.MinTwoChildrenChildSequence childSequenceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence>(childSequenceInstance, global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.ChildSequenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ChildSequence not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SingleChildSequenceConstraintHasMinTwoChildrenChildSequence instance accessors
		
		/// <summary>
		/// Get any SingleChildSequenceConstraintHasMinTwoChildrenChildSequence links between a given SingleChildSequenceConstraint and a MinTwoChildrenChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraint source, global::Neumont.Tools.ORM.TestOIALModel.MinTwoChildrenChildSequence target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence>(source, global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence link in links )
			{
				if ( target.Equals(link.ChildSequence) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SingleChildSequenceConstraintHasMinTwoChildrenChildSequence link between a given SingleChildSequenceConstraintand a MinTwoChildrenChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence GetLink( global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraint source, global::Neumont.Tools.ORM.TestOIALModel.MinTwoChildrenChildSequence target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence>(source, global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence link in links )
			{
				if ( target.Equals(link.ChildSequence) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship SubsetConstraintHasSubChildSequence
	/// Description for
	/// Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("057b55a0-c0c6-483c-ba83-048767de1320")]
	public partial class SubsetConstraintHasSubChildSequence : ChildSequenceConstraintHasChildSequence
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubsetConstraintHasSubChildSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x057b55a0, 0xc0c6, 0x483c, 0xba, 0x83, 0x04, 0x87, 0x67, 0xde, 0x13, 0x20);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubsetConstraintHasSubChildSequence link in the same Partition as the given SubsetConstraint
		/// </summary>
		/// <param name="source">SubsetConstraint to use as the source of the relationship.</param>
		/// <param name="target">ChildSequence to use as the target of the relationship.</param>
		public SubsetConstraintHasSubChildSequence(SubsetConstraint source, ChildSequence target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubsetConstraintHasSubChildSequence.SubsetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SubsetConstraintHasSubChildSequence.SubChildSequenceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubsetConstraintHasSubChildSequence(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubsetConstraintHasSubChildSequence(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubsetConstraintHasSubChildSequence(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubsetConstraintHasSubChildSequence(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SubsetConstraint domain role code
		
		/// <summary>
		/// SubsetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubsetConstraintDomainRoleId = new global::System.Guid(0x17280110, 0x2fff, 0x4a35, 0x9e, 0x94, 0x1e, 0xb2, 0x42, 0x99, 0xdc, 0xa4);
		
		/// <summary>
		/// DomainRole SubsetConstraint
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence/SubsetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence/SubsetConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SubChildSequence", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence/SubsetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("17280110-2fff-4a35-9e94-1eb24299dca4")]
		public virtual SubsetConstraint SubsetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubsetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubsetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubsetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubsetConstraint of a ChildSequence
		/// <summary>
		/// Gets SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SubsetConstraint GetSubsetConstraint(ChildSequence element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubChildSequenceDomainRoleId) as SubsetConstraint;
		}
		
		/// <summary>
		/// Sets SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubsetConstraint(ChildSequence element, SubsetConstraint newSubsetConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubChildSequenceDomainRoleId, newSubsetConstraint);
		}
		#endregion
		#region ChildSequenceConstraint domain role override
		
		/// <summary>
		/// Gets the element playing SubsetConstraint domain role.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceConstraint
		/// </summary>
		public override ChildSequenceConstraint ChildSequenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SubsetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SubsetConstraint = (SubsetConstraint)value;
			}
		}
		
		#endregion
		#region SubChildSequence domain role code
		
		/// <summary>
		/// SubChildSequence domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubChildSequenceDomainRoleId = new global::System.Guid(0x5eb18aab, 0x7a85, 0x4b02, 0xa1, 0x68, 0x2d, 0xbe, 0x42, 0x7a, 0x66, 0x6c);
		
		/// <summary>
		/// DomainRole SubChildSequence
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence.SubChildSequence
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence/SubChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence/SubChildSequence.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SubsetConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence/SubChildSequence.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5eb18aab-7a85-4b02-a168-2dbe427a666c")]
		public virtual ChildSequence SubChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ChildSequence)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubChildSequenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubChildSequenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubChildSequence of a SubsetConstraint
		/// <summary>
		/// Gets SubChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ChildSequence GetSubChildSequence(SubsetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubsetConstraintDomainRoleId) as ChildSequence;
		}
		
		/// <summary>
		/// Sets SubChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubChildSequence(SubsetConstraint element, ChildSequence newSubChildSequence)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubsetConstraintDomainRoleId, newSubChildSequence);
		}
		#endregion
		#region ChildSequence domain role override
		
		/// <summary>
		/// Gets the element playing SubChildSequence domain role.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence.ChildSequence
		/// </summary>
		public override ChildSequence ChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SubChildSequence;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SubChildSequence = value;
			}
		}
		
		#endregion
		#region SubsetConstraint link accessor
		/// <summary>
		/// Get the SubsetConstraintHasSubChildSequence link to a SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence GetLinkToSubChildSequence (global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraint subsetConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence>(subsetConstraintInstance, global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SubsetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubChildSequence link accessor
		/// <summary>
		/// Get the SubsetConstraintHasSubChildSequence link to a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence GetLinkToSubsetConstraint (global::Neumont.Tools.ORM.TestOIALModel.ChildSequence subChildSequenceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence>(subChildSequenceInstance, global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence.SubChildSequenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SubChildSequence not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubsetConstraintHasSubChildSequence instance accessors
		
		/// <summary>
		/// Get any SubsetConstraintHasSubChildSequence links between a given SubsetConstraint and a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraint source, global::Neumont.Tools.ORM.TestOIALModel.ChildSequence target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence>(source, global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence link in links )
			{
				if ( target.Equals(link.SubChildSequence) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubsetConstraintHasSubChildSequence link between a given SubsetConstraintand a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence GetLink( global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraint source, global::Neumont.Tools.ORM.TestOIALModel.ChildSequence target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence>(source, global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence link in links )
			{
				if ( target.Equals(link.SubChildSequence) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship SubsetConstraintHasSuperChildSequence
	/// Description for
	/// Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("9ef8cd6d-a013-43ea-a9ee-60515141f071")]
	public partial class SubsetConstraintHasSuperChildSequence : ChildSequenceConstraintHasChildSequence
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubsetConstraintHasSuperChildSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9ef8cd6d, 0xa013, 0x43ea, 0xa9, 0xee, 0x60, 0x51, 0x51, 0x41, 0xf0, 0x71);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubsetConstraintHasSuperChildSequence link in the same Partition as the given SubsetConstraint
		/// </summary>
		/// <param name="source">SubsetConstraint to use as the source of the relationship.</param>
		/// <param name="target">ChildSequence to use as the target of the relationship.</param>
		public SubsetConstraintHasSuperChildSequence(SubsetConstraint source, ChildSequence target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubsetConstraintHasSuperChildSequence.SubsetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SubsetConstraintHasSuperChildSequence.SuperChildSequenceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubsetConstraintHasSuperChildSequence(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubsetConstraintHasSuperChildSequence(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubsetConstraintHasSuperChildSequence(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubsetConstraintHasSuperChildSequence(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SubsetConstraint domain role code
		
		/// <summary>
		/// SubsetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubsetConstraintDomainRoleId = new global::System.Guid(0xea2c4d8c, 0x9ce5, 0x4c2f, 0xb2, 0xab, 0x39, 0x57, 0x43, 0x72, 0x81, 0x54);
		
		/// <summary>
		/// DomainRole SubsetConstraint
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence/SubsetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence/SubsetConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SuperChildSequence", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence/SubsetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ea2c4d8c-9ce5-4c2f-b2ab-395743728154")]
		public virtual SubsetConstraint SubsetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubsetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubsetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubsetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubsetConstraint of a ChildSequence
		/// <summary>
		/// Gets SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SubsetConstraint GetSubsetConstraint(ChildSequence element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SuperChildSequenceDomainRoleId) as SubsetConstraint;
		}
		
		/// <summary>
		/// Sets SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubsetConstraint(ChildSequence element, SubsetConstraint newSubsetConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SuperChildSequenceDomainRoleId, newSubsetConstraint);
		}
		#endregion
		#region ChildSequenceConstraint domain role override
		
		/// <summary>
		/// Gets the element playing SubsetConstraint domain role.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceConstraint
		/// </summary>
		public override ChildSequenceConstraint ChildSequenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SubsetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SubsetConstraint = (SubsetConstraint)value;
			}
		}
		
		#endregion
		#region SuperChildSequence domain role code
		
		/// <summary>
		/// SuperChildSequence domain role Id.
		/// </summary>
		public static readonly global::System.Guid SuperChildSequenceDomainRoleId = new global::System.Guid(0x7d190de2, 0x1f60, 0x4551, 0x9b, 0x97, 0xa3, 0xc0, 0x3d, 0x30, 0xb0, 0x32);
		
		/// <summary>
		/// DomainRole SuperChildSequence
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence.SuperChildSequence
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence/SuperChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence/SuperChildSequence.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SubsetConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence/SuperChildSequence.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7d190de2-1f60-4551-9b97-a3c03d30b032")]
		public virtual ChildSequence SuperChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ChildSequence)DslModeling::DomainRoleInfo.GetRolePlayer(this, SuperChildSequenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SuperChildSequenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SuperChildSequence of a SubsetConstraint
		/// <summary>
		/// Gets SuperChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ChildSequence GetSuperChildSequence(SubsetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubsetConstraintDomainRoleId) as ChildSequence;
		}
		
		/// <summary>
		/// Sets SuperChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSuperChildSequence(SubsetConstraint element, ChildSequence newSuperChildSequence)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubsetConstraintDomainRoleId, newSuperChildSequence);
		}
		#endregion
		#region ChildSequence domain role override
		
		/// <summary>
		/// Gets the element playing SuperChildSequence domain role.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence.ChildSequence
		/// </summary>
		public override ChildSequence ChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SuperChildSequence;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SuperChildSequence = value;
			}
		}
		
		#endregion
		#region SubsetConstraint link accessor
		/// <summary>
		/// Get the SubsetConstraintHasSuperChildSequence link to a SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence GetLinkToSuperChildSequence (global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraint subsetConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence>(subsetConstraintInstance, global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SubsetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SuperChildSequence link accessor
		/// <summary>
		/// Get the SubsetConstraintHasSuperChildSequence link to a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence GetLinkToSubsetConstraint (global::Neumont.Tools.ORM.TestOIALModel.ChildSequence superChildSequenceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence>(superChildSequenceInstance, global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence.SuperChildSequenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SuperChildSequence not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubsetConstraintHasSuperChildSequence instance accessors
		
		/// <summary>
		/// Get any SubsetConstraintHasSuperChildSequence links between a given SubsetConstraint and a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraint source, global::Neumont.Tools.ORM.TestOIALModel.ChildSequence target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence>(source, global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence link in links )
			{
				if ( target.Equals(link.SuperChildSequence) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubsetConstraintHasSuperChildSequence link between a given SubsetConstraintand a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence GetLink( global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraint source, global::Neumont.Tools.ORM.TestOIALModel.ChildSequence target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence>(source, global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence link in links )
			{
				if ( target.Equals(link.SuperChildSequence) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship TwoOrMoreChildSequenceConstraintHasChildSequence
	/// Description for
	/// Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("bff06c7c-8460-436e-a357-d77c86452bd3")]
	public partial class TwoOrMoreChildSequenceConstraintHasChildSequence : ChildSequenceConstraintHasChildSequence
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TwoOrMoreChildSequenceConstraintHasChildSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbff06c7c, 0x8460, 0x436e, 0xa3, 0x57, 0xd7, 0x7c, 0x86, 0x45, 0x2b, 0xd3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TwoOrMoreChildSequenceConstraintHasChildSequence link in the same Partition as the given TwoOrMoreChildSequenceConstraint
		/// </summary>
		/// <param name="source">TwoOrMoreChildSequenceConstraint to use as the source of the relationship.</param>
		/// <param name="target">ChildSequence to use as the target of the relationship.</param>
		public TwoOrMoreChildSequenceConstraintHasChildSequence(TwoOrMoreChildSequenceConstraint source, ChildSequence target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraintDomainRoleId, source), new DslModeling::RoleAssignment(TwoOrMoreChildSequenceConstraintHasChildSequence.ChildSequenceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TwoOrMoreChildSequenceConstraintHasChildSequence(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TwoOrMoreChildSequenceConstraintHasChildSequence(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TwoOrMoreChildSequenceConstraintHasChildSequence(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TwoOrMoreChildSequenceConstraintHasChildSequence(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TwoOrMoreChildSequenceConstraint domain role code
		
		/// <summary>
		/// TwoOrMoreChildSequenceConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid TwoOrMoreChildSequenceConstraintDomainRoleId = new global::System.Guid(0x78ec7624, 0x5480, 0x4cba, 0xa9, 0x3c, 0x89, 0xb6, 0x85, 0x1a, 0xcc, 0x09);
		
		/// <summary>
		/// DomainRole TwoOrMoreChildSequenceConstraint
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence/TwoOrMoreChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence/TwoOrMoreChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildSequence", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence/TwoOrMoreChildSequenceConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("78ec7624-5480-4cba-a93c-89b6851acc09")]
		public virtual TwoOrMoreChildSequenceConstraint TwoOrMoreChildSequenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TwoOrMoreChildSequenceConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, TwoOrMoreChildSequenceConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TwoOrMoreChildSequenceConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TwoOrMoreChildSequenceConstraint of a ChildSequence
		/// <summary>
		/// Gets TwoOrMoreChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TwoOrMoreChildSequenceConstraint GetTwoOrMoreChildSequenceConstraint(ChildSequence element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ChildSequenceDomainRoleId) as TwoOrMoreChildSequenceConstraint;
		}
		
		/// <summary>
		/// Sets TwoOrMoreChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTwoOrMoreChildSequenceConstraint(ChildSequence element, TwoOrMoreChildSequenceConstraint newTwoOrMoreChildSequenceConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ChildSequenceDomainRoleId, newTwoOrMoreChildSequenceConstraint);
		}
		#endregion
		#region ChildSequenceConstraint domain role override
		
		/// <summary>
		/// Gets the element playing TwoOrMoreChildSequenceConstraint domain role.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraintHasChildSequence.ChildSequenceConstraint
		/// </summary>
		public override ChildSequenceConstraint ChildSequenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.TwoOrMoreChildSequenceConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.TwoOrMoreChildSequenceConstraint = (TwoOrMoreChildSequenceConstraint)value;
			}
		}
		
		#endregion
		#region ChildSequence domain role code
		
		/// <summary>
		/// ChildSequence domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ChildSequenceDomainRoleId = new global::System.Guid(0xbedb8959, 0x2fb6, 0x4c0a, 0xa4, 0x45, 0x50, 0x57, 0xad, 0x95, 0x48, 0x5c);
		
		/// <summary>
		/// DomainRole ChildSequence
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.ChildSequence
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence/ChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence/ChildSequence.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TwoOrMoreChildSequenceConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence/ChildSequence.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("bedb8959-2fb6-4c0a-a445-5057ad95485c")]
		public override ChildSequence ChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ChildSequence)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildSequenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildSequenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildSequence of a TwoOrMoreChildSequenceConstraint
		/// <summary>
		/// Gets a list of ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ChildSequence> GetChildSequence(TwoOrMoreChildSequenceConstraint element)
		{
			return new DslModeling::LinkedElementCollection<ChildSequence>(element, TwoOrMoreChildSequenceConstraintDomainRoleId);
		}
		#endregion
		#region TwoOrMoreChildSequenceConstraint link accessor
		/// <summary>
		/// Get the list of TwoOrMoreChildSequenceConstraintHasChildSequence links to a TwoOrMoreChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence> GetLinksToChildSequence ( global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraint twoOrMoreChildSequenceConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence>(twoOrMoreChildSequenceConstraintInstance, global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraintDomainRoleId);
		}
		#endregion
		#region ChildSequence link accessor
		/// <summary>
		/// Get the TwoOrMoreChildSequenceConstraintHasChildSequence link to a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence GetLinkToTwoOrMoreChildSequenceConstraint (global::Neumont.Tools.ORM.TestOIALModel.ChildSequence childSequenceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence>(childSequenceInstance, global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.ChildSequenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ChildSequence not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TwoOrMoreChildSequenceConstraintHasChildSequence instance accessors
		
		/// <summary>
		/// Get any TwoOrMoreChildSequenceConstraintHasChildSequence links between a given TwoOrMoreChildSequenceConstraint and a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraint source, global::Neumont.Tools.ORM.TestOIALModel.ChildSequence target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence>(source, global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence link in links )
			{
				if ( target.Equals(link.ChildSequence) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TwoOrMoreChildSequenceConstraintHasChildSequence link between a given TwoOrMoreChildSequenceConstraintand a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence GetLink( global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraint source, global::Neumont.Tools.ORM.TestOIALModel.ChildSequence target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence>(source, global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence link in links )
			{
				if ( target.Equals(link.ChildSequence) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship ChildHasSingleChildConstraint
	/// Description for Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("22daf21b-05d1-4916-942d-5b01c9493b9d")]
	public partial class ChildHasSingleChildConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ChildHasSingleChildConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x22daf21b, 0x05d1, 0x4916, 0x94, 0x2d, 0x5b, 0x01, 0xc9, 0x49, 0x3b, 0x9d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ChildHasSingleChildConstraint link in the same Partition as the given ConceptTypeChild
		/// </summary>
		/// <param name="source">ConceptTypeChild to use as the source of the relationship.</param>
		/// <param name="target">SingleChildConstraint to use as the target of the relationship.</param>
		public ChildHasSingleChildConstraint(ConceptTypeChild source, SingleChildConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ChildHasSingleChildConstraint.ConceptTypeChildDomainRoleId, source), new DslModeling::RoleAssignment(ChildHasSingleChildConstraint.SingleChildConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ChildHasSingleChildConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ChildHasSingleChildConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ChildHasSingleChildConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ChildHasSingleChildConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConceptTypeChild domain role code
		
		/// <summary>
		/// ConceptTypeChild domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeChildDomainRoleId = new global::System.Guid(0x7e9dde0c, 0x0710, 0x4365, 0x86, 0x8b, 0x86, 0x6b, 0x38, 0x3f, 0x12, 0xff);
		
		/// <summary>
		/// DomainRole ConceptTypeChild
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint.ConceptTypeChild
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint/ConceptTypeChild.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint/ConceptTypeChild.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SingleChildConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint/ConceptTypeChild.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7e9dde0c-0710-4365-868b-866b383f12ff")]
		public virtual ConceptTypeChild ConceptTypeChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptTypeChild)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptTypeChild of a SingleChildConstraint
		/// <summary>
		/// Gets ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConceptTypeChild GetConceptTypeChild(SingleChildConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SingleChildConstraintDomainRoleId) as ConceptTypeChild;
		}
		
		/// <summary>
		/// Sets ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConceptTypeChild(SingleChildConstraint element, ConceptTypeChild newConceptTypeChild)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SingleChildConstraintDomainRoleId, newConceptTypeChild);
		}
		#endregion
		#region SingleChildConstraint domain role code
		
		/// <summary>
		/// SingleChildConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SingleChildConstraintDomainRoleId = new global::System.Guid(0x4eb1bca8, 0x2232, 0x458d, 0x8a, 0x4a, 0x6a, 0x21, 0x32, 0x27, 0x5f, 0xd1);
		
		/// <summary>
		/// DomainRole SingleChildConstraint
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint.SingleChildConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint/SingleChildConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint/SingleChildConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConceptTypeChild", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint/SingleChildConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4eb1bca8-2232-458d-8a4a-6a2132275fd1")]
		public virtual SingleChildConstraint SingleChildConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SingleChildConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SingleChildConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SingleChildConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SingleChildConstraintCollection of a ConceptTypeChild
		/// <summary>
		/// Gets a list of SingleChildConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SingleChildConstraint> GetSingleChildConstraintCollection(ConceptTypeChild element)
		{
			return new DslModeling::LinkedElementCollection<SingleChildConstraint>(element, ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild link accessor
		/// <summary>
		/// Get the list of ChildHasSingleChildConstraint links to a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint> GetLinksToSingleChildConstraintCollection ( global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild conceptTypeChildInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint>(conceptTypeChildInstance, global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint.ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region SingleChildConstraint link accessor
		/// <summary>
		/// Get the ChildHasSingleChildConstraint link to a SingleChildConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint GetLinkToConceptTypeChild (global::Neumont.Tools.ORM.TestOIALModel.SingleChildConstraint singleChildConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint>(singleChildConstraintInstance, global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint.SingleChildConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SingleChildConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ChildHasSingleChildConstraint instance accessors
		
		/// <summary>
		/// Get any ChildHasSingleChildConstraint links between a given ConceptTypeChild and a SingleChildConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild source, global::Neumont.Tools.ORM.TestOIALModel.SingleChildConstraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint>(source, global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint.ConceptTypeChildDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint link in links )
			{
				if ( target.Equals(link.SingleChildConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ChildHasSingleChildConstraint link between a given ConceptTypeChildand a SingleChildConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint GetLink( global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild source, global::Neumont.Tools.ORM.TestOIALModel.SingleChildConstraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint>(source, global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint.ConceptTypeChildDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint link in links )
			{
				if ( target.Equals(link.SingleChildConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship OIALModelHasChildSequenceConstraint
	/// Description for
	/// Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("de228fef-a466-41cf-b905-be34264311f4")]
	public partial class OIALModelHasChildSequenceConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OIALModelHasChildSequenceConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xde228fef, 0xa466, 0x41cf, 0xb9, 0x05, 0xbe, 0x34, 0x26, 0x43, 0x11, 0xf4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OIALModelHasChildSequenceConstraint link in the same Partition as the given LiveOIALModel
		/// </summary>
		/// <param name="source">LiveOIALModel to use as the source of the relationship.</param>
		/// <param name="target">ChildSequenceConstraint to use as the target of the relationship.</param>
		public OIALModelHasChildSequenceConstraint(LiveOIALModel source, ChildSequenceConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OIALModelHasChildSequenceConstraint.OIALModelDomainRoleId, source), new DslModeling::RoleAssignment(OIALModelHasChildSequenceConstraint.ChildSequenceConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OIALModelHasChildSequenceConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OIALModelHasChildSequenceConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OIALModelHasChildSequenceConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OIALModelHasChildSequenceConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region OIALModel domain role code
		
		/// <summary>
		/// OIALModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid OIALModelDomainRoleId = new global::System.Guid(0xbb8a13b9, 0xd197, 0x4dbf, 0xa9, 0x5d, 0x96, 0x20, 0x4c, 0x8f, 0xa6, 0xec);
		
		/// <summary>
		/// DomainRole OIALModel
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint.OIALModel
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint/OIALModel.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint/OIALModel.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildSequenceConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint/OIALModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bb8a13b9-d197-4dbf-a95d-96204c8fa6ec")]
		public virtual LiveOIALModel OIALModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LiveOIALModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, OIALModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OIALModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OIALModel of a ChildSequenceConstraint
		/// <summary>
		/// Gets OIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LiveOIALModel GetOIALModel(ChildSequenceConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ChildSequenceConstraintDomainRoleId) as LiveOIALModel;
		}
		
		/// <summary>
		/// Sets OIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOIALModel(ChildSequenceConstraint element, LiveOIALModel newOIALModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ChildSequenceConstraintDomainRoleId, newOIALModel);
		}
		#endregion
		#region ChildSequenceConstraint domain role code
		
		/// <summary>
		/// ChildSequenceConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildSequenceConstraintDomainRoleId = new global::System.Guid(0xeb00afe6, 0x6958, 0x4f6c, 0xb8, 0xef, 0x87, 0x3a, 0x59, 0xd7, 0x01, 0x06);
		
		/// <summary>
		/// DomainRole ChildSequenceConstraint
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint/ChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint/ChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "OIALModel", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint/ChildSequenceConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("eb00afe6-6958-4f6c-b8ef-873a59d70106")]
		public virtual ChildSequenceConstraint ChildSequenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ChildSequenceConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildSequenceConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildSequenceConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildSequenceConstraintCollection of a LiveOIALModel
		/// <summary>
		/// Gets a list of ChildSequenceConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ChildSequenceConstraint> GetChildSequenceConstraintCollection(LiveOIALModel element)
		{
			return new DslModeling::LinkedElementCollection<ChildSequenceConstraint>(element, OIALModelDomainRoleId);
		}
		#endregion
		#region OIALModel link accessor
		/// <summary>
		/// Get the list of OIALModelHasChildSequenceConstraint links to a LiveOIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint> GetLinksToChildSequenceConstraintCollection ( global::Neumont.Tools.ORM.TestOIALModel.LiveOIALModel oIALModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint>(oIALModelInstance, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint.OIALModelDomainRoleId);
		}
		#endregion
		#region ChildSequenceConstraint link accessor
		/// <summary>
		/// Get the OIALModelHasChildSequenceConstraint link to a ChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint GetLinkToOIALModel (global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraint childSequenceConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint>(childSequenceConstraintInstance, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ChildSequenceConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OIALModelHasChildSequenceConstraint instance accessors
		
		/// <summary>
		/// Get any OIALModelHasChildSequenceConstraint links between a given LiveOIALModel and a ChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.LiveOIALModel source, global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint>(source, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint.OIALModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint link in links )
			{
				if ( target.Equals(link.ChildSequenceConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one OIALModelHasChildSequenceConstraint link between a given LiveOIALModeland a ChildSequenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint GetLink( global::Neumont.Tools.ORM.TestOIALModel.LiveOIALModel source, global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint>(source, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint.OIALModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint link in links )
			{
				if ( target.Equals(link.ChildSequenceConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship ConceptTypeChildHasPathRole
	/// Description for Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c2d63745-176d-48d7-8778-685e0b879f4a")]
	public partial class ConceptTypeChildHasPathRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeChildHasPathRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc2d63745, 0x176d, 0x48d7, 0x87, 0x78, 0x68, 0x5e, 0x0b, 0x87, 0x9f, 0x4a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptTypeChildHasPathRole link in the same Partition as the given ConceptTypeChild
		/// </summary>
		/// <param name="source">ConceptTypeChild to use as the source of the relationship.</param>
		/// <param name="target">RoleBase to use as the target of the relationship.</param>
		public ConceptTypeChildHasPathRole(ConceptTypeChild source, global::Neumont.Tools.ORM.ObjectModel.RoleBase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptTypeChildHasPathRole.ConceptTypeChildDomainRoleId, source), new DslModeling::RoleAssignment(ConceptTypeChildHasPathRole.PathRoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeChildHasPathRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeChildHasPathRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeChildHasPathRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeChildHasPathRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConceptTypeChild domain role code
		
		/// <summary>
		/// ConceptTypeChild domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeChildDomainRoleId = new global::System.Guid(0x05234d98, 0xefe6, 0x4097, 0xb7, 0xb3, 0x45, 0xdf, 0x5c, 0x75, 0xc5, 0x33);
		
		/// <summary>
		/// DomainRole ConceptTypeChild
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole.ConceptTypeChild
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole/ConceptTypeChild.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole/ConceptTypeChild.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PathRoleCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole/ConceptTypeChild.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("05234d98-efe6-4097-b7b3-45df5c75c533")]
		public virtual ConceptTypeChild ConceptTypeChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptTypeChild)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptTypeChild of a RoleBase
		/// <summary>
		/// Gets a list of ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptTypeChild> GetConceptTypeChild(global::Neumont.Tools.ORM.ObjectModel.RoleBase element)
		{
			return new DslModeling::LinkedElementCollection<ConceptTypeChild>(element, PathRoleDomainRoleId);
		}
		#endregion
		#region PathRole domain role code
		
		/// <summary>
		/// PathRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathRoleDomainRoleId = new global::System.Guid(0x4f61716a, 0x2da2, 0x43fb, 0x83, 0xa4, 0x98, 0xc7, 0x1a, 0x1d, 0xca, 0x3f);
		
		/// <summary>
		/// DomainRole PathRole
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole.PathRole
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole/PathRole.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole/PathRole.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConceptTypeChild", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole/PathRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4f61716a-2da2-43fb-83a4-98c71a1dca3f")]
		public virtual global::Neumont.Tools.ORM.ObjectModel.RoleBase PathRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.ORM.ObjectModel.RoleBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PathRoleCollection of a ConceptTypeChild
		/// <summary>
		/// Gets a list of PathRoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::Neumont.Tools.ORM.ObjectModel.RoleBase> GetPathRoleCollection(ConceptTypeChild element)
		{
			return new DslModeling::LinkedElementCollection<global::Neumont.Tools.ORM.ObjectModel.RoleBase>(element, ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild link accessor
		/// <summary>
		/// Get the list of ConceptTypeChildHasPathRole links to a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole> GetLinksToPathRoleCollection ( global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild conceptTypeChildInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole>(conceptTypeChildInstance, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole.ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region PathRole link accessor
		/// <summary>
		/// Get the list of ConceptTypeChildHasPathRole links to a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole> GetLinksToConceptTypeChild ( global::Neumont.Tools.ORM.ObjectModel.RoleBase pathRoleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole>(pathRoleInstance, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole.PathRoleDomainRoleId);
		}
		#endregion
		#region ConceptTypeChildHasPathRole instance accessors
		
		/// <summary>
		/// Get any ConceptTypeChildHasPathRole links between a given ConceptTypeChild and a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild source, global::Neumont.Tools.ORM.ObjectModel.RoleBase target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole>(source, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole.ConceptTypeChildDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole link in links )
			{
				if ( target.Equals(link.PathRole) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConceptTypeChildHasPathRole link between a given ConceptTypeChildand a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole GetLink( global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild source, global::Neumont.Tools.ORM.ObjectModel.RoleBase target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole>(source, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole.ConceptTypeChildDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChildHasPathRole link in links )
			{
				if ( target.Equals(link.PathRole) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainRelationship ChildSequenceHasConceptTypeChild
	/// Description for Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8718dcf7-02b9-4589-8fe0-9946efe74b1e")]
	public partial class ChildSequenceHasConceptTypeChild : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ChildSequenceHasConceptTypeChild domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8718dcf7, 0x02b9, 0x4589, 0x8f, 0xe0, 0x99, 0x46, 0xef, 0xe7, 0x4b, 0x1e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ChildSequenceHasConceptTypeChild link in the same Partition as the given ChildSequence
		/// </summary>
		/// <param name="source">ChildSequence to use as the source of the relationship.</param>
		/// <param name="target">ConceptTypeChild to use as the target of the relationship.</param>
		public ChildSequenceHasConceptTypeChild(ChildSequence source, ConceptTypeChild target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ChildSequenceHasConceptTypeChild.ChildSequenceDomainRoleId, source), new DslModeling::RoleAssignment(ChildSequenceHasConceptTypeChild.ConceptTypeChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ChildSequenceHasConceptTypeChild(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ChildSequenceHasConceptTypeChild(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ChildSequenceHasConceptTypeChild(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ChildSequenceHasConceptTypeChild(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ChildSequence domain role code
		
		/// <summary>
		/// ChildSequence domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildSequenceDomainRoleId = new global::System.Guid(0xdfcad5d0, 0xb350, 0x468f, 0x81, 0x9f, 0x5b, 0xdf, 0xe9, 0xb6, 0x28, 0xdf);
		
		/// <summary>
		/// DomainRole ChildSequence
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild.ChildSequence
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild/ChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild/ChildSequence.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConceptTypeChildCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild/ChildSequence.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("dfcad5d0-b350-468f-819f-5bdfe9b628df")]
		public virtual ChildSequence ChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ChildSequence)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildSequenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildSequenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildSequenceCollection of a ConceptTypeChild
		/// <summary>
		/// Gets a list of ChildSequenceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ChildSequence> GetChildSequenceCollection(ConceptTypeChild element)
		{
			return new DslModeling::LinkedElementCollection<ChildSequence>(element, ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild domain role code
		
		/// <summary>
		/// ConceptTypeChild domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeChildDomainRoleId = new global::System.Guid(0xaf0f09ae, 0x8382, 0x442c, 0x81, 0x1f, 0xc1, 0xb6, 0x20, 0xb2, 0x02, 0x0f);
		
		/// <summary>
		/// DomainRole ConceptTypeChild
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild.ConceptTypeChild
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild/ConceptTypeChild.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild/ConceptTypeChild.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ChildSequenceCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild/ConceptTypeChild.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("af0f09ae-8382-442c-811f-c1b620b2020f")]
		public virtual ConceptTypeChild ConceptTypeChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptTypeChild)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptTypeChildCollection of a ChildSequence
		/// <summary>
		/// Gets a list of ConceptTypeChildCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptTypeChild> GetConceptTypeChildCollection(ChildSequence element)
		{
			return new DslModeling::LinkedElementCollection<ConceptTypeChild>(element, ChildSequenceDomainRoleId);
		}
		#endregion
		#region ChildSequence link accessor
		/// <summary>
		/// Get the list of ChildSequenceHasConceptTypeChild links to a ChildSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild> GetLinksToConceptTypeChildCollection ( global::Neumont.Tools.ORM.TestOIALModel.ChildSequence childSequenceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild>(childSequenceInstance, global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild.ChildSequenceDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild link accessor
		/// <summary>
		/// Get the list of ChildSequenceHasConceptTypeChild links to a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild> GetLinksToChildSequenceCollection ( global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild conceptTypeChildInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild>(conceptTypeChildInstance, global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild.ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region ChildSequenceHasConceptTypeChild instance accessors
		
		/// <summary>
		/// Get any ChildSequenceHasConceptTypeChild links between a given ChildSequence and a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild> GetLinks( global::Neumont.Tools.ORM.TestOIALModel.ChildSequence source, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild>(source, global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild.ChildSequenceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild link in links )
			{
				if ( target.Equals(link.ConceptTypeChild) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ChildSequenceHasConceptTypeChild link between a given ChildSequenceand a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild GetLink( global::Neumont.Tools.ORM.TestOIALModel.ChildSequence source, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeChild target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild>(source, global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild.ChildSequenceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild link in links )
			{
				if ( target.Equals(link.ConceptTypeChild) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
