<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
	<data name="AbsorptionChoiceProperty.TransactionName" xml:space="preserve">
		<value>Set Absorption Choice</value>
		<comment>The format string to use when the assimilation absorption choice property is modified. Shown in the undo dropdown in VS.</comment>
	</data>
	<data name="AbsorptionChoiceProperty.Description" xml:space="preserve">
		<value>Absorption choices for one-to-one FactTypes and Subtype relationships.</value>
		<comment>The description for the AbsorptionChoice property. Displays as a detailed description in the Properties Window.</comment>
	</data>
	<data name="AbsorptionChoiceProperty.DisplayName" xml:space="preserve">
		<value>AbsorptionChoice</value>
		<comment>The display name for the AbsorptionChoice property on a FactType. Displays as the name of a property in the Properties Window.</comment>
	</data>
  <data name="AssimilationAbsorptionChoice.Absorb" xml:space="preserve">
    <value>Absorbed</value>
		<comment>The displayed form of the Absorb enum value</comment>
  </data>
  <data name="AssimilationAbsorptionChoice.Partition" xml:space="preserve">
    <value>Partitioned</value>
		<comment>The displayed form of the Partition enum value</comment>
  </data>
  <data name="AssimilationAbsorptionChoice.Separate" xml:space="preserve">
    <value>Not Absorbed</value>
		<comment>The displayed form of the Separate enum value</comment>
  </data>
  <data name="AssimilationMapping.InvalidPatternForPartitionException" xml:space="preserve">
    <value>Partitioning is not allowed with the current subtyping pattern. Partitioning requires an ExclusiveOr constraint between all subtypes.</value>
    <comment>The exception message used when an attempt is made to partition a pattern that does not support partitioning.</comment>
  </data>
  <data name="AssimilationMapping.InvalidSeparationPatternForAbsorbException" xml:space="preserve">
    <value>Absorption is not possible without additional modifications on direct or indirect supertype relationships.</value>
    <comment>The exception message used when an attempt is made to absorb an assimilation in an incorrect pattern.</comment>
  </data>
  <data name="AssimilationMapping.InvalidPartitionPatternForAbsorbException" xml:space="preserve">
    <value>A partitioned ObjectType cannot be absorbed into another ObjectType.</value>
    <comment>The exception message used when an attempt is made to absorb a partitioned object type.</comment>
  </data>
  <data name="EffectiveReferenceModeNamingChoice.CustomFormat" xml:space="preserve">
    <value>Custom Format</value>
    <comment>The displayed form of the CustomFormat enum value</comment>
  </data>
  <data name="EffectiveReferenceModeNamingChoice.EntityTypeName" xml:space="preserve">
    <value>EntityType Name</value>
    <comment>The displayed form of the EntityTypeName enum value</comment>
  </data>
  <data name="EffectiveReferenceModeNamingChoice.ReferenceModeName" xml:space="preserve">
    <value>ReferenceMode Name</value>
    <comment>The displayed form of the ReferenceModeName enum value</comment>
  </data>
  <data name="EffectiveReferenceModeNamingChoice.ValueTypeName" xml:space="preserve">
    <value>ValueType Name</value>
    <comment>The displayed form of the ValueTypeName enum value</comment>
  </data>
  <data name="MappingCustomizationProperty.Category" xml:space="preserve">
    <value>Relational Mapping</value>
    <comment>The category for relational mapping customizations. Displays as a grouping category in the Properties Window.</comment>
  </data>
  <data name="ObjectTypeAbsorptionChoiceProperty.Description" xml:space="preserve">
    <value>Absorption state for an ObjectType involved in Subtyping and some other one-to-one FactType relationships.</value>
    <comment>The description for the AbsorptionChoice property on an ObjectType. Displays as a detailed description in the Properties Window.</comment>
  </data>
  <data name="ObjectTypeAbsorptionChoiceProperty.DisplayName" xml:space="preserve">
    <value>AbsorptionChoice</value>
    <comment>The display name for the AbsorptionChoice property on an ObjectType. Displays as the name of a property in the Properties Window.</comment>
  </data>
  <data name="ObjectTypeAbsorptionChoice.Absorbed" xml:space="preserve">
    <value>Absorbed (All Paths)</value>
    <comment>The ObjectType is absorbed through all paths.</comment>
  </data>
  <data name="ObjectTypeAbsorptionChoice.CustomAbsorbed" xml:space="preserve">
    <value>Absorbed (Explicit Paths)</value>
    <comment>The ObjectType is absorbed, but not through all paths.</comment>
  </data>
  <data name="ObjectTypeAbsorptionChoice.NotApplicable" xml:space="preserve">
    <value>(Absorbed or Separate Unavailable)</value>
    <comment>The ObjectType has supertypes, does not need be separated.</comment>
  </data>
  <data name="ObjectTypeAbsorptionChoice.Partitioned" xml:space="preserve">
    <value>Partitioned</value>
    <comment>The ObjectType is partitioned.</comment>
  </data>
  <data name="ObjectTypeAbsorptionChoice.PartitionedChild" xml:space="preserve">
    <value>(Partitioned Child)</value>
    <comment>The ObjectType is the subtype of a partitioned parent.</comment>
  </data>
  <data name="ObjectTypeAbsorptionChoice.Separate" xml:space="preserve">
    <value>Separate</value>
    <comment>The ObjectType is fully separated on all paths.</comment>
  </data>
  <data name="ObjectTypeAbsorptionChoice.UnpartitionAbsorb" xml:space="preserve">
    <value>Remove Partition (Try to Absorb Subtypes)</value>
    <comment>Remove the current partition, absorbing subtypes when then are not partitioned.</comment>
  </data>
  <data name="ObjectTypeAbsorptionChoice.UnpartitionSeparate" xml:space="preserve">
    <value>Remove Partition (Separate Subtypes)</value>
    <comment>Remove the current partition, separating all subtypes.</comment>
  </data>
  <data name="ReferenceModeNamingChoice.CustomFormat" xml:space="preserve">
    <value>Custom Format</value>
    <comment>The displayed form of the CustomFormat enum value</comment>
  </data>
  <data name="ReferenceModeNamingChoice.EntityTypeName" xml:space="preserve">
    <value>EntityType Name</value>
    <comment>The displayed form of the EntityTypeName enum value</comment>
  </data>
  <data name="ReferenceModeNamingChoice.ModelDefault" xml:space="preserve">
    <value>Model Default</value>
    <comment>The displayed form of the ReferenceModeName enum value</comment>
  </data>
  <data name="ReferenceModeNamingChoice.ReferenceModeName" xml:space="preserve">
    <value>ReferenceMode Name</value>
    <comment>The displayed form of the ReferenceModeName enum value</comment>
  </data>
  <data name="ReferenceModeNamingChoice.ValueTypeName" xml:space="preserve">
    <value>ValueType Name</value>
    <comment>The displayed form of the ValueTypeName enum value</comment>
  </data>
</root>