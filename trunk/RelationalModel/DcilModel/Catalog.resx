<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="Common Public License Copyright Notice" xml:space="preserve">
		<value>
			Natural Object-Role Modeling Architect for Visual Studio

			Copyright © Neumont University. All rights reserved.
			Copyright © ORM Solutions, LLC. All rights reserved.

			The use and distribution terms for this software are covered by the
			Common Public License 1.0 (http://opensource.org/licenses/cpl) which
			can be found in the file CPL.txt at the root of this distribution.
			By using this software in any fashion, you are agreeing to be bound by
			the terms of this license.

			You must not remove this notice, or any other, from this software.
		</value>
  </metadata>
  <data name="AutomaticColumnOrdering.ByColumnName" xml:space="preserve">
    <value>Column Name Only</value>
  </data>
  <data name="AutomaticColumnOrdering.MandatoryOther" xml:space="preserve">
    <value>Mandatory/Other</value>
  </data>
  <data name="AutomaticColumnOrdering.PrimaryMandatoryOther" xml:space="preserve">
    <value>Primary/Mandatory/Other</value>
  </data>
  <data name="AutomaticColumnOrdering.PrimaryMandatoryUniqueOther" xml:space="preserve">
    <value>Primary/Mandatory/Unique/Other</value>
  </data>
  <data name="AutomaticColumnOrdering.PrimaryOther" xml:space="preserve">
    <value>Primary/Other</value>
  </data>
  <data name="ColumnOrdering.AutoSchemaDefault" xml:space="preserve">
    <value>&lt;Schema Default&gt;</value>
  </data>
  <data name="ColumnOrdering.AutoByColumnName" xml:space="preserve">
    <value>Column Name Only</value>
  </data>
  <data name="ColumnOrdering.AutoMandatoryOther" xml:space="preserve">
    <value>Mandatory/Other</value>
  </data>
  <data name="ColumnOrdering.AutoPrimaryMandatoryOther" xml:space="preserve">
    <value>Primary/Mandatory/Other</value>
  </data>
  <data name="ColumnOrdering.AutoPrimaryMandatoryUniqueOther" xml:space="preserve">
    <value>Primary/Mandatory/Unique/Other</value>
  </data>
  <data name="ColumnOrdering.AutoPrimaryOther" xml:space="preserve">
    <value>Primary/Other</value>
  </data>
  <data name="ColumnOrdering.Custom" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="ColumnReference.DisplayFormatString" xml:space="preserve">
    <value>{0} = {1}</value>
    <comment>The format string used to display a column reference in the ORM Model Browser. {0}=name of the source column, {1}=name of the target column</comment>
  </data>
  <data name="ColumnReorder.TransactionNameFormatString" xml:space="preserve">
    <value>Move Columns in Table '{0}'</value>
    <comment>The format string used to provide a transaction for a column move operation. {0}=name of the parent table</comment>
  </data>
  <data name="PredefinedType.BigInt" xml:space="preserve">
    <value>BIGINT</value>
  </data>
  <data name="PredefinedType.BinaryLargeObject" xml:space="preserve">
    <value>BINARY LARGE OBJECT</value>
  </data>
  <data name="PredefinedType.Boolean" xml:space="preserve">
    <value>BOOLEAN</value>
  </data>
  <data name="PredefinedType.Character" xml:space="preserve">
    <value>CHARACTER</value>
  </data>
  <data name="PredefinedType.CharacterLargeObject" xml:space="preserve">
    <value>CHARACTER LARGE OBJECT</value>
  </data>
  <data name="PredefinedType.CharacterVarying" xml:space="preserve">
    <value>CHARACTER VARYING</value>
  </data>
  <data name="PredefinedType.Decimal" xml:space="preserve">
    <value>DECIMAL</value>
  </data>
  <data name="PredefinedType.DoublePrecision" xml:space="preserve">
    <value>DOUBLE PRECISION</value>
  </data>
  <data name="PredefinedType.Float" xml:space="preserve">
    <value>FLOAT</value>
  </data>
  <data name="PredefinedType.Integer" xml:space="preserve">
    <value>INTEGER</value>
  </data>
  <data name="PredefinedType.Numeric" xml:space="preserve">
    <value>NUMERIC</value>
  </data>
  <data name="PredefinedType.Real" xml:space="preserve">
    <value>REAL</value>
  </data>
  <data name="PredefinedType.SmallInt" xml:space="preserve">
    <value>SMALLINT</value>
  </data>
  <data name="SqlDataAccessIndication.ContainsSql" xml:space="preserve">
    <value>CONSTAINS SQL</value>
  </data>
  <data name="SqlDataAccessIndication.ModifiesSqlData" xml:space="preserve">
    <value>MODIFIES SQL DATA</value>
  </data>
  <data name="SqlDataAccessIndication.NoSql" xml:space="preserve">
    <value>NO SQL</value>
  </data>
  <data name="SqlDataAccessIndication.ReadsSqlData" xml:space="preserve">
    <value>READS SQL DATA</value>
  </data>
  <data name="SurveyReferenceConstraintChildType.TableReference" xml:space="preserve">
    <value>Referenced Table</value>
  </data>
  <data name="SurveyReferenceConstraintChildType.ColumnReference" xml:space="preserve">
    <value>Referenced Columns</value>
  </data>
  <data name="SurveySchemaChildType.Domain" xml:space="preserve">
    <value>Domains</value>
  </data>
  <data name="SurveySchemaChildType.Table" xml:space="preserve">
    <value>Tables</value>
  </data>
  <data name="SurveySchemaType.Schema" xml:space="preserve">
    <value>Relational Schema</value>
  </data>
  <data name="SurveyTableChildType.Column" xml:space="preserve">
    <value>Columns</value>
  </data>
  <data name="SurveyTableChildType.Constraint" xml:space="preserve">
    <value>Constraints</value>
  </data>
  <data name="SurveyTableChildType.ReferenceConstraint" xml:space="preserve">
    <value>Foreign Keys</value>
  </data>
  <data name="SurveyTree.ImageStrip" type="System.Resources.ResXFileRef, System.Windows.Forms" xml:space="preserve">
    <value>Resources/SurveyTree.ImageStrip.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
    <comment>Image strip for SurveyTree</comment>
  </data>
  <data name="SurveyUniquenessConstraintChildType.ColumnReference" xml:space="preserve">
    <value>Referenced Columns</value>
  </data>
  <data name="TriggerActionTime.After" xml:space="preserve">
    <value>AFTER</value>
  </data>
  <data name="TriggerActionTime.Before" xml:space="preserve">
    <value>BEFORE</value>
  </data>
  <data name="TriggerForEach.Row" xml:space="preserve">
    <value>ROW</value>
  </data>
  <data name="TriggerForEach.Statement" xml:space="preserve">
    <value>STATEMENT</value>
  </data>
  <data name="TriggerTarget.NewRow" xml:space="preserve">
    <value>NEW ROW</value>
  </data>
  <data name="TriggerTarget.NewTable" xml:space="preserve">
    <value>NEW TABLE</value>
  </data>
  <data name="TriggerTarget.OldRow" xml:space="preserve">
    <value>OLD ROW</value>
  </data>
  <data name="TriggerTarget.OldTable" xml:space="preserve">
    <value>OLD TABLE</value>
  </data>
</root>
