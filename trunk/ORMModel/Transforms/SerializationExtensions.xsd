<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="XSDtoHTML.xslt"?>
<xs:schema
	id="SerializationExtensions"
	targetNamespace="http://schemas.neumont.edu/ORM/SDK/SerializationExtensions"
	elementFormDefault="qualified"
	attributeFormDefault="unqualified"
	xmlns="http://schemas.neumont.edu/ORM/SDK/SerializationExtensions"
	xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<xs:annotation>
		<xs:appinfo source="Common Public License Copyright Notice">
			Neumont Object-Role Modeling Architect for Visual Studio

			Copyright © Neumont University. All rights reserved.

			The use and distribution terms for this software are covered by the
			Common Public License 1.0 (http://opensource.org/licenses/cpl) which
			can be found in the file CPL.txt at the root of this distribution.
			By using this software in any fashion, you are agreeing to be bound by
			the terms of this license.

			You must not remove this notice, or any other, from this software.
		</xs:appinfo>
	</xs:annotation>

	<xs:simpleType name="ElementWriteStyle">
		<xs:annotation>
			<xs:documentation>How to write and element.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="NotWritten">
				<xs:annotation>
					<xs:documentation>Do not write.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Element">
				<xs:annotation>
					<xs:documentation>Write as an element. [Default]</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PrimaryLinkElement">
				<xs:annotation>
					<xs:documentation>Write as the primary definition for a link. A link that has attributes or serialized links that reference it must have exactly one primary link element.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DoubleTaggedElement">
				<xs:annotation>
					<xs:documentation>Write as a double tagged element.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="AttributeWriteStyle">
		<xs:restriction base="xs:string">
			<xs:enumeration value="NotWritten">
				<xs:annotation>
					<xs:documentation>Do not write.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Attribute">
				<xs:annotation>
					<xs:documentation>Write as an attribute. [Default]</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Element">
				<xs:annotation>
					<xs:documentation>Write as an element.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DoubleTaggedElement">
				<xs:annotation>
					<xs:documentation>Write as a double tagged element.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:attributeGroup name="ElementAttributes">
		<xs:attribute name="Prefix" type="xs:string">
			<xs:annotation>
				<xs:documentation>The new prefix.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Name" type="xs:string">
			<xs:annotation>
				<xs:documentation>The new name.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Namespace" type="xs:string">
			<xs:annotation>
				<xs:documentation>The new namespace.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="WriteStyle" type="ElementWriteStyle"/>
		<xs:attribute name="DoubleTagName" type="xs:string">
			<xs:annotation>
				<xs:documentation>The name of the double tag. [WriteStyle=DoubleTaggedElement]</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="AttributeAttributes">
		<xs:attribute name="Prefix" type="xs:string">
			<xs:annotation>
				<xs:documentation>The new prefix.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Name" type="xs:string">
			<xs:annotation>
				<xs:documentation>The new name.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Namespace" type="xs:string">
			<xs:annotation>
				<xs:documentation>The new namespace.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="WriteCustomStorage" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>true to write attributes that are custom storage.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="WriteStyle" type="AttributeWriteStyle">
			<xs:annotation>
				<xs:documentation>How to write.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="DoubleTagName" type="xs:string">
			<xs:annotation>
				<xs:documentation>The name of the double tag. [WriteStyle=DoubleTaggedElement]</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="LinkAttributes">
		<xs:attribute name="RelationshipName" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The relationship name.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="RoleName" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The role name.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="CreateAsRelationshipName" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The name a relationship derived from the one defining the roles.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="ConditionalName">
		<xs:annotation>
			<xs:documentation>Renames an element based on a PLIX condition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:any namespace="http://schemas.neumont.edu/CodeGeneration/PLiX" processContents="lax" minOccurs="1"  maxOccurs="1"/>
			</xs:sequence>
			<xs:attribute name="Name" type="xs:string" use="required">
				<xs:annotation>
					<xs:documentation>The new name of the element.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="WriteStyle" type="ElementWriteStyle"/>
			<xs:attribute name="DoubleTagName" type="xs:string">
				<xs:annotation>
					<xs:documentation>The name of the double tag. [WriteStyle=DoubleTaggedElement]</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="ConditionalSerialization">
		<xs:annotation>
			<xs:documentation>The body of a PLIX function to determine if an element should be serialized. Must include a PLIX return statement.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:any namespace="http://schemas.neumont.edu/CodeGeneration/PLiX" processContents="lax" minOccurs="1"  maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="CustomSerializedElements">
		<xs:annotation>
			<xs:documentation>The root element.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="Copyright" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Copyright notice.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="xs:string">
								<xs:attribute name="name" type="xs:string" use="required"/>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:choice maxOccurs="unbounded">
					<xs:element name="MetaModel">
						<xs:annotation>
							<xs:documentation>Add model-level custom serialization settings.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:sequence>
								<xs:element name="Namespaces">
									<xs:annotation>
										<xs:documentation>Add namespaces to the XML document.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:sequence>
											<xs:element name="Namespace" minOccurs="1" maxOccurs="unbounded">
												<xs:annotation>
													<xs:documentation>Defines a namespace.</xs:documentation>
												</xs:annotation>
												<xs:complexType>
													<xs:attribute name="Prefix" type="xs:string" use="required">
														<xs:annotation>
															<xs:documentation>The namespace prefix.</xs:documentation>
														</xs:annotation>
													</xs:attribute>
													<xs:attribute name="URI" type="xs:string" use="required">
														<xs:annotation>
															<xs:documentation>The URI of the schema.</xs:documentation>
														</xs:annotation>
													</xs:attribute>
													<xs:attribute name="SchemaFile" type="xs:string">
														<xs:annotation>
															<xs:documentation>A schema file name with no path. The file must be built into the model's assembly as an embedded resource with the same namespace as the metamodel. This is most easily done by placing the schema file in the same directory as the model file, and making the namespace for the model file correspond to the default namespace for the directory (the project default namespace with the directory path appended)</xs:documentation>
														</xs:annotation>
													</xs:attribute>
													<xs:attribute name="DefaultPrefix" type="xs:boolean" default="false">
														<xs:annotation>
															<xs:documentation>The default prefix for all elements in this substore</xs:documentation>
														</xs:annotation>
													</xs:attribute>
												</xs:complexType>
											</xs:element>
										</xs:sequence>
									</xs:complexType>
								</xs:element>
								<xs:element name="RootElements" minOccurs="0">
									<xs:annotation>
										<xs:documentation>Elements that appear as top-level xml nodes inside the ORM2 tag.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:sequence minOccurs="0" maxOccurs="unbounded">
											<xs:element name="RootElement">
												<xs:complexType>
													<xs:attribute name="Class" type="xs:string" use="required">
														<xs:annotation>
															<xs:documentation>The name of a class that corresponds to an xml root element for this meta model</xs:documentation>
														</xs:annotation>
													</xs:attribute>
													<xs:attribute name="Name" type="xs:string" use="optional">
														<xs:annotation>
															<xs:documentation>The tag name representing the class. The value of the Class attribute is assumed if Name is not specified.</xs:documentation>
														</xs:annotation>
													</xs:attribute>
													<xs:attribute name="Prefix" type="xs:string" use="optional">
														<xs:annotation>
															<xs:documentation>A prefix chosen from the list of supported Namespace prefixes. The default prefix is used if Prefix is not specified.</xs:documentation>
														</xs:annotation>
													</xs:attribute>
												</xs:complexType>
											</xs:element>
										</xs:sequence>
									</xs:complexType>
								</xs:element>
								<xs:element name="OmittedMetaElements" minOccurs="0">
									<xs:annotation>
										<xs:documentation>Block elements and links from serializating at the meta level.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:choice minOccurs="0" maxOccurs="unbounded">
											<xs:element name="OmitClass">
												<xs:annotation>
													<xs:documentation>Stop all classes of this type from being serialized in the model.</xs:documentation>
												</xs:annotation>
												<xs:complexType>
													<xs:attribute name="Class" type="xs:string" use="required">
														<xs:annotation>
															<xs:documentation>The class name to block.</xs:documentation>
														</xs:annotation>
													</xs:attribute>
													<xs:attribute name="Namespace" type="xs:string" use="optional">
														<xs:annotation>
															<xs:documentation>An alternate namespace for the class. If this is not specified, the class is assumed to be in the namespace specified by the containing Using element.</xs:documentation>
														</xs:annotation>
													</xs:attribute>
												</xs:complexType>
											</xs:element>
											<xs:element name="OmitRelationship">
												<xs:annotation>
													<xs:documentation>Stop all relationships of this type from being serialized in the model.</xs:documentation>
												</xs:annotation>
												<xs:complexType>
													<xs:attribute name="Class" type="xs:string" use="required">
														<xs:annotation>
															<xs:documentation>The relationship name to block.</xs:documentation>
														</xs:annotation>
													</xs:attribute>
													<xs:attribute name="Namespace" type="xs:string" use="optional">
														<xs:annotation>
															<xs:documentation>An alternate namespace for the relationship. If this is not specified, the relationship is assumed to be in the namespace specified by the containing Using element.</xs:documentation>
														</xs:annotation>
													</xs:attribute>
												</xs:complexType>
											</xs:element>
										</xs:choice>
									</xs:complexType>
								</xs:element>
							</xs:sequence>
							<xs:attribute name="Class" type="xs:string" use="required">
								<xs:annotation>
									<xs:documentation>The class to add the namespaces to.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="DisplayNameResourceId" type="xs:string" use="optional">
								<xs:annotation>
									<xs:documentation>The display name resource id.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="DescriptionResourceId" type="xs:string" use="optional">
								<xs:annotation>
									<xs:documentation>The resource id of the description.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:complexType>
					</xs:element>
					<xs:element name="Element">
						<xs:annotation>
							<xs:documentation>Customizes an element.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:sequence>
								<xs:sequence>
									<xs:element ref="ConditionalSerialization" minOccurs="0"/>
									<xs:element ref="ConditionalName" minOccurs="0" maxOccurs="unbounded"/>
									<xs:element name="Attribute" minOccurs="0" maxOccurs="unbounded">
										<xs:annotation>
											<xs:documentation>Customizes an attribute on the current element.</xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:sequence>
												<xs:element name="Condition" minOccurs="0" maxOccurs="unbounded">
													<xs:annotation>
														<xs:documentation>Use different attribute properties based on a PLIX condition.</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:sequence>
															<xs:any namespace="http://schemas.neumont.edu/CodeGeneration/PLiX" processContents="lax" minOccurs="1"  maxOccurs="1"/>
														</xs:sequence>
														<xs:attributeGroup ref="AttributeAttributes"/>
													</xs:complexType>
												</xs:element>
												<xs:element name="RolePlayed" minOccurs="0" maxOccurs="unbounded">
													<xs:annotation>
														<xs:documentation>Matches the role played.</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:attribute name="ID" type="xs:string" use="required">
															<xs:annotation>
																<xs:documentation>The ID to match.</xs:documentation>
															</xs:annotation>
														</xs:attribute>
														<xs:attributeGroup ref="AttributeAttributes"/>
													</xs:complexType>
												</xs:element>
											</xs:sequence>
											<xs:attribute name="ID" type="xs:string" use="required">
												<xs:annotation>
													<xs:documentation>The ID to match.</xs:documentation>
												</xs:annotation>
											</xs:attribute>
											<xs:attributeGroup ref="AttributeAttributes"/>
										</xs:complexType>
									</xs:element>
								</xs:sequence>
								<xs:choice minOccurs="0" maxOccurs="unbounded">
									<xs:element name="ChildElement">
										<xs:annotation>
											<xs:documentation>Creates a child element.</xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:sequence>
												<xs:element ref="ConditionalName" minOccurs="0" maxOccurs="unbounded"/>
												<xs:element name="Link" minOccurs="1" maxOccurs="unbounded">
													<xs:annotation>
														<xs:documentation>An element of the child element.</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:attributeGroup ref="LinkAttributes"/>
													</xs:complexType>
												</xs:element>
											</xs:sequence>
											<xs:attribute name="SortChildElements" type="xs:boolean" default="false">
												<xs:annotation>
													<xs:documentation>If this is set, order the roles within the child element along with the position of the child element itself. Works with SortChildElements on the parent Element tag, which must be set for this to have any effect.</xs:documentation>
												</xs:annotation>
											</xs:attribute>
											<xs:attribute name="NotSorted" type="xs:boolean" default="false">
												<xs:annotation>
													<xs:documentation>Set to true to ignore this element when Element.SortChildElements is true.</xs:documentation>
												</xs:annotation>
											</xs:attribute>
											<xs:attributeGroup ref="ElementAttributes"/>
										</xs:complexType>
									</xs:element>
									<xs:element name="Link">
										<xs:annotation>
											<xs:documentation>Customizes a link.</xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:sequence>
												<xs:element ref="ConditionalName" minOccurs="0" maxOccurs="unbounded"/>
											</xs:sequence>
											<xs:attribute name="NotSorted" type="xs:boolean" default="false">
												<xs:annotation>
													<xs:documentation>Set to true to ignore this element when Element.SortChildElements is true.</xs:documentation>
												</xs:annotation>
											</xs:attribute>
											<xs:attributeGroup ref="LinkAttributes"/>
											<xs:attributeGroup ref="ElementAttributes"/>
										</xs:complexType>
									</xs:element>
								</xs:choice>
							</xs:sequence>
							<xs:attribute name="Class" type="xs:string" use="required">
								<xs:annotation>
									<xs:documentation>The class to add the element extensions to.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="HasMixedTypedAttributes" type="xs:boolean">
								<xs:annotation>
									<xs:documentation>true to sort the attributes by WriteStyle before writting them.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="SortChildElements" type="xs:boolean" default="false">
								<xs:annotation>
									<xs:documentation>All link and child elements should be explicitly sorted to force them to write out in a fixed order.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attributeGroup ref="ElementAttributes"/>
							<xs:attribute name="Override" type="xs:boolean" default="false">
								<xs:annotation>
									<xs:documentation>Set to true if this element class is derived from another custom serialized element. The assumption is made that the base class' custom serialization implementation is compatible with the current standard generated code.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:complexType>
					</xs:element>
				</xs:choice>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
</xs:schema>
