//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// Copyright (c) Northface University. All Rights Reserved.
// Information Contained Herein is Proprietary and Confidential.
// ------------------------------------------------------------------------------
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.InheritBaseModel("2b131234-7959-458d-834f-2dc0769ce683")]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ORMMetaModel.MetaModelGuidString, "Northface.Tools.ORM.ObjectModel.ORMMetaModel")]
	public  partial class ORMMetaModel : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region ORMMetaModel's Generated MetaClass Code
		/// <summary>
		/// MetaModel Guid String
		/// </summary>
		public const System.String MetaModelGuidString = "83ad9e12-0e90-47cd-8e2f-a79f8d9c7288";
		/// <summary>
		/// MetaModel Guid
		/// </summary>
		public static readonly System.Guid MetaModelGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ORMMetaModel.MetaModelGuidString);
		/// <summary>
		/// Default Constructor called by the IMS -- do not call directly
		/// </summary>
		public ORMMetaModel() : base()
		{
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMMetaModel(Microsoft.VisualStudio.Modeling.Store store) : base(store.DefaultPartition, Northface.Tools.ORM.ObjectModel.ORMMetaModel.MetaModelGuid)
		{
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMMetaModel(Microsoft.VisualStudio.Modeling.Partition partition) : base(partition, Northface.Tools.ORM.ObjectModel.ORMMetaModel.MetaModelGuid)
		{
		}
		#endregion

	}
	#region ORMMetaModel's ResourceManager Code
	public  partial class ORMMetaModel
	{
		private static System.Resources.ResourceManager resourceManager = null;
		/// <summary>
		/// The base name of this models resources.
		/// </summary>
		public const string ResourceBaseName = "Northface.Tools.ORM.ObjectModel.ORMMetaModel";
		/// <summary>
		/// Returns the SubStore's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override System.Resources.ResourceManager ResourceManager
		{
			get
			{
				return Northface.Tools.ORM.ObjectModel.ORMMetaModel.SingletonResourceManager;
			}
		}
		/// <summary>
		/// A internal object used for synchronization.
		/// </summary>
		private static object internalSyncObject;
		/// <summary>
		/// Gets the internal object used for synchronization.
		/// </summary>
		private static object InternalSyncObject 
		{
			get 
			{
				if (internalSyncObject == null) 
				{
					object o = new object();
					System.Threading.Interlocked.CompareExchange(ref internalSyncObject, o, null);
				}
				return internalSyncObject;
			}
		}
		/// <summary>
		/// Gets the Singleton ResourceManager for this SubStore
		/// </summary>
		public static System.Resources.ResourceManager SingletonResourceManager
		{
			get
			{
				if (Northface.Tools.ORM.ObjectModel.ORMMetaModel.resourceManager == null)
				{
					lock (Northface.Tools.ORM.ObjectModel.ORMMetaModel.InternalSyncObject)
					{
						if (Northface.Tools.ORM.ObjectModel.ORMMetaModel.resourceManager == null)
						{
							Northface.Tools.ORM.ObjectModel.ORMMetaModel.resourceManager = new System.Resources.ResourceManager(ResourceBaseName, typeof(Northface.Tools.ORM.ObjectModel.ORMMetaModel).Assembly);
						}
					}
				}
				return Northface.Tools.ORM.ObjectModel.ORMMetaModel.resourceManager;
			}
		}
	}
	#endregion
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	public sealed class ORMMetaModelCopyClosure : Microsoft.VisualStudio.Modeling.IElementVisitorFilter
	{
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> metaRolesMember;
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMMetaModelCopyClosure()
		{
			#region Initialize MetaData Table
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">MetaRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="metaRelationshipInfo">MetaRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public  Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleInfo, Microsoft.VisualStudio.Modeling.MetaRelationshipInfo metaRelationshipInfo, Microsoft.VisualStudio.Modeling.ElementLink targetRelationship)
		{
			return this.MetaRoles.ContainsKey(sourceRoleInfo.Id) ? Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes : Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetRoleInfo">MetaRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public  Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.ElementLink elementLink, Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleInfo, Microsoft.VisualStudio.Modeling.ModelElement targetRolePlayer)
		{
			foreach (Microsoft.VisualStudio.Modeling.MetaRoleInfo metaRoleInfo in elementLink.MetaRelationship.MetaRoles)
			{
				if (metaRoleInfo != targetRoleInfo && this.MetaRoles.ContainsKey(metaRoleInfo.Id))
				{
					return Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes;
				}
			}
			return Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> MetaRoles
		{
			get
			{
				if (this.metaRolesMember == null)
				{
					this.metaRolesMember = new System.Collections.Generic.Dictionary<System.Guid, System.Guid>();
				}
				return this.metaRolesMember;
			}
		}

	}
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	public sealed class ORMMetaModelRemoveClosure : Microsoft.VisualStudio.Modeling.IElementVisitorFilter
	{
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> metaRolesMember;
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMMetaModelRemoveClosure()
		{
			#region Initialize MetaData Table
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.FactTypeDerivation.DerivationRuleMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeDerivation.DerivationRuleMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.ModelHasError.ErrorCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasError.ErrorCollectionMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.SingleColumnExternalConstraintCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.SingleColumnExternalConstraintCollectionMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.MultiColumnExternalConstraintCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.MultiColumnExternalConstraintCollectionMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.InternalConstraintCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.InternalConstraintCollectionMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeCollectionMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid);
			MetaRoles.Add(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">MetaRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="metaRelationshipInfo">MetaRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public  Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleInfo, Microsoft.VisualStudio.Modeling.MetaRelationshipInfo metaRelationshipInfo, Microsoft.VisualStudio.Modeling.ElementLink targetRelationship)
		{
			return Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetRoleInfo">MetaRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public  Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.ElementLink elementLink, Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleInfo, Microsoft.VisualStudio.Modeling.ModelElement targetRolePlayer)
		{
			return this.MetaRoles.ContainsKey(targetRoleInfo.Id) ? Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes : Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> MetaRoles
		{
			get
			{
				if (this.metaRolesMember == null)
				{
					this.metaRolesMember = new System.Collections.Generic.Dictionary<System.Guid, System.Guid>();
				}
				return this.metaRolesMember;
			}
		}

	}
	#region ORMMetaModel's Generated Closure Code
	public  partial class ORMMetaModel
	{
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.IElementVisitorFilter copyClosureMember;
		/// <summary>
		/// RemoveClosure cache
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.IElementVisitorFilter removeClosureMember;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override Microsoft.VisualStudio.Modeling.IElementVisitorFilter GetClosureFilter(Microsoft.VisualStudio.Modeling.ClosureType type, System.Collections.ICollection rootElements)
		{
			switch (type)
			{
				case Microsoft.VisualStudio.Modeling.ClosureType.CopyClosure:
					return ORMMetaModel.CopyClosure;
				case Microsoft.VisualStudio.Modeling.ClosureType.RemoveClosure:
					return ORMMetaModel.RemoveClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.IElementVisitorFilter CopyClosure
		{
			get
			{
				if (ORMMetaModel.copyClosureMember == null)
				{
					ORMMetaModel.copyClosureMember = new ORMMetaModelCopyClosure();
				}
				return ORMMetaModel.copyClosureMember;
			}
		}
		/// <summary>
		/// RemoveClosure cache
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.IElementVisitorFilter RemoveClosure
		{
			get
			{
				if (ORMMetaModel.removeClosureMember == null)
				{
					ORMMetaModel.removeClosureMember = new ORMMetaModelRemoveClosure();
				}
				return ORMMetaModel.removeClosureMember;
			}
		}
	}
	#endregion
	/// <summary>
	/// 
	/// </summary>
	public  partial class ORMMetaModel : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region ORMMetaModel's AllGeneratedMetaModelTypes Code
		/// <summary>
		/// Virtual method that returns a collection of all types for metamodel 
		/// </summary>
		protected sealed override System.Type[] AllGeneratedMetaModelTypes()
		{
			System.Type[] typeArray = new System.Type[]
			{
				typeof(Northface.Tools.ORM.ObjectModel.ORMMetaModel),
				typeof(Northface.Tools.ORM.ObjectModel.ORMModel),
				typeof(Northface.Tools.ORM.ObjectModel.ORMModelElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.RootType),
				typeof(Northface.Tools.ORM.ObjectModel.ObjectType),
				typeof(Northface.Tools.ORM.ObjectModel.ObjectTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.FactType),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.SubtypeFact),
				typeof(Northface.Tools.ORM.ObjectModel.SubtypeFactElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.EqualityConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.EqualityConstraintElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ExclusionConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.ExclusionConstraintElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.SubsetConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.SubsetConstraintElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.DataType),
				typeof(Northface.Tools.ORM.ObjectModel.UnspecifiedDataType),
				typeof(Northface.Tools.ORM.ObjectModel.UnspecifiedDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.TextDataType),
				typeof(Northface.Tools.ORM.ObjectModel.FixedLengthTextDataType),
				typeof(Northface.Tools.ORM.ObjectModel.FixedLengthTextDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.VariableLengthTextDataType),
				typeof(Northface.Tools.ORM.ObjectModel.VariableLengthTextDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.LargeLengthTextDataType),
				typeof(Northface.Tools.ORM.ObjectModel.LargeLengthTextDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.NumericDataType),
				typeof(Northface.Tools.ORM.ObjectModel.SignedIntegerNumericDataType),
				typeof(Northface.Tools.ORM.ObjectModel.SignedIntegerNumericDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.UnsignedIntegerNumericDataType),
				typeof(Northface.Tools.ORM.ObjectModel.UnsignedIntegerNumericDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.AutoCounterNumericDataType),
				typeof(Northface.Tools.ORM.ObjectModel.AutoCounterNumericDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.FloatingPointNumericDataType),
				typeof(Northface.Tools.ORM.ObjectModel.FloatingPointNumericDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.DecimalNumericDataType),
				typeof(Northface.Tools.ORM.ObjectModel.DecimalNumericDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.MoneyNumericDataType),
				typeof(Northface.Tools.ORM.ObjectModel.MoneyNumericDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.RawDataDataType),
				typeof(Northface.Tools.ORM.ObjectModel.FixedLengthRawDataDataType),
				typeof(Northface.Tools.ORM.ObjectModel.FixedLengthRawDataDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.VariableLengthRawDataDataType),
				typeof(Northface.Tools.ORM.ObjectModel.VariableLengthRawDataDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.LargeLengthRawDataDataType),
				typeof(Northface.Tools.ORM.ObjectModel.LargeLengthRawDataDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.PictureRawDataDataType),
				typeof(Northface.Tools.ORM.ObjectModel.PictureRawDataDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.OleObjectRawDataDataType),
				typeof(Northface.Tools.ORM.ObjectModel.OleObjectRawDataDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.TemporalDataType),
				typeof(Northface.Tools.ORM.ObjectModel.AutoTimestampTemporalDataType),
				typeof(Northface.Tools.ORM.ObjectModel.AutoTimestampTemporalDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.TimeTemporalDataType),
				typeof(Northface.Tools.ORM.ObjectModel.TimeTemporalDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.DateTemporalDataType),
				typeof(Northface.Tools.ORM.ObjectModel.DateTemporalDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.DateAndTimeTemporalDataType),
				typeof(Northface.Tools.ORM.ObjectModel.DateAndTimeTemporalDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.LogicalDataType),
				typeof(Northface.Tools.ORM.ObjectModel.TrueOrFalseLogicalDataType),
				typeof(Northface.Tools.ORM.ObjectModel.TrueOrFalseLogicalDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.YesOrNoLogicalDataType),
				typeof(Northface.Tools.ORM.ObjectModel.YesOrNoLogicalDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.OtherDataType),
				typeof(Northface.Tools.ORM.ObjectModel.RowIdOtherDataType),
				typeof(Northface.Tools.ORM.ObjectModel.RowIdOtherDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ObjectIdOtherDataType),
				typeof(Northface.Tools.ORM.ObjectModel.ObjectIdOtherDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.Expression),
				typeof(Northface.Tools.ORM.ObjectModel.ExpressionElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.Role),
				typeof(Northface.Tools.ORM.ObjectModel.RoleElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence),
				typeof(Northface.Tools.ORM.ObjectModel.InternalConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.SimpleMandatoryConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.SimpleMandatoryConstraintElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence),
				typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequenceElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.RingConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.RingConstraintElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.FrequencyConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.FrequencyConstraintElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraintElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.DisjunctiveMandatoryConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.DisjunctiveMandatoryConstraintElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.Reading),
				typeof(Northface.Tools.ORM.ObjectModel.ReadingElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ModelError),
				typeof(Northface.Tools.ORM.ObjectModel.TooFewRoleSequencesError),
				typeof(Northface.Tools.ORM.ObjectModel.TooFewRoleSequencesErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.TooManyRoleSequencesError),
				typeof(Northface.Tools.ORM.ObjectModel.TooManyRoleSequencesErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.DuplicateNameError),
				typeof(Northface.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError),
				typeof(Northface.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeDuplicateNameError),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeDuplicateNameErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError),
				typeof(Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.TooFewReadingRolesError),
				typeof(Northface.Tools.ORM.ObjectModel.TooFewReadingRolesErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.TooManyReadingRolesError),
				typeof(Northface.Tools.ORM.ObjectModel.TooManyReadingRolesErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError),
				typeof(Northface.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeRequiresReadingError),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeRequiresReadingErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError),
				typeof(Northface.Tools.ORM.ObjectModel.DataTypeNotSpecifiedErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.NMinusOneError),
				typeof(Northface.Tools.ORM.ObjectModel.NMinusOneErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError),
				typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.RolePlayerRequiredError),
				typeof(Northface.Tools.ORM.ObjectModel.RolePlayerRequiredErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder),
				typeof(Northface.Tools.ORM.ObjectModel.ReadingOrderElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind),
				typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKindElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode),
				typeof(Northface.Tools.ORM.ObjectModel.IntrinsicReferenceMode),
				typeof(Northface.Tools.ORM.ObjectModel.IntrinsicReferenceModeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.CustomReferenceMode),
				typeof(Northface.Tools.ORM.ObjectModel.CustomReferenceModeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ValueRange),
				typeof(Northface.Tools.ORM.ObjectModel.ValueRangeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ValueRangeDefinition),
				typeof(Northface.Tools.ORM.ObjectModel.ValueTypeValueRangeDefinition),
				typeof(Northface.Tools.ORM.ObjectModel.ValueTypeValueRangeDefinitionElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.RoleValueRangeDefinition),
				typeof(Northface.Tools.ORM.ObjectModel.RoleValueRangeDefinitionElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType),
				typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeDerivation),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeDerivationElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType),
				typeof(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasRole),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasRoleElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole),
				typeof(Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRoleElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ModelHasObjectType),
				typeof(Northface.Tools.ORM.ObjectModel.ModelHasObjectTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ModelHasFactType),
				typeof(Northface.Tools.ORM.ObjectModel.ModelHasFactTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraintElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraintElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.ExternalRoleConstraintElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence),
				typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequenceElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole),
				typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ReadingHasRole),
				typeof(Northface.Tools.ORM.ObjectModel.ReadingHasRoleElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ModelHasError),
				typeof(Northface.Tools.ORM.ObjectModel.ModelHasErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError),
				typeof(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError),
				typeof(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError),
				typeof(Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading),
				typeof(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReadingElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole),
				typeof(Northface.Tools.ORM.ObjectModel.ReadingOrderHasRoleElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrderElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind),
				typeof(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKindElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode),
				typeof(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind),
				typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKindElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraintElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraintElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraintElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError),
				typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError),
				typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier),
				typeof(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifierElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError),
				typeof(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError),
				typeof(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError),
				typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ModelHasDataType),
				typeof(Northface.Tools.ORM.ObjectModel.ModelHasDataTypeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError),
				typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition),
				typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinitionElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition),
				typeof(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinitionElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange),
				typeof(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRangeElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError),
				typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError),
				typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError),
				typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError),
				typeof(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneErrorElementFactoryCreator),
				typeof(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError),
				typeof(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredErrorElementFactoryCreator),

			};
			return typeArray;
		}
		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public  partial class ORMMetaModel : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region ORMMetaModel's GeneratedReflectedMetaAttributes Code
		/// <summary>
		/// Virtual method that returns a collection of all fields for all types in metamodel ORMMetaModel
		/// </summary>
		protected sealed override Microsoft.VisualStudio.Modeling.MetaFieldInfo[] GeneratedReflectedMetaAttributes()
		{
			Microsoft.VisualStudio.Modeling.MetaFieldInfo[] typeArray = new Microsoft.VisualStudio.Modeling.MetaFieldInfo[]
			{
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.RootType), "IsExternal", Northface.Tools.ORM.ObjectModel.RootType.IsExternalMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.RootType.RootTypeIsExternalFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ObjectType), "IsIndependent", Northface.Tools.ORM.ObjectModel.ObjectType.IsIndependentMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ObjectType.ObjectTypeIsIndependentFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ObjectType), "IsValueType", Northface.Tools.ORM.ObjectModel.ObjectType.IsValueTypeMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ObjectType.ObjectTypeIsValueTypeFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ObjectType), "Scale", Northface.Tools.ORM.ObjectModel.ObjectType.ScaleMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ObjectType.ObjectTypeScaleFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ObjectType), "Length", Northface.Tools.ORM.ObjectModel.ObjectType.LengthMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ObjectType.ObjectTypeLengthFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ObjectType), "NestedFactTypeDisplay", Northface.Tools.ORM.ObjectModel.ObjectType.NestedFactTypeDisplayMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ObjectType.ObjectTypeNestedFactTypeDisplayFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ObjectType), "ReferenceModeDisplay", Northface.Tools.ORM.ObjectModel.ObjectType.ReferenceModeDisplayMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ObjectType.ObjectTypeReferenceModeDisplayFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ObjectType), "ReferenceModeString", Northface.Tools.ORM.ObjectModel.ObjectType.ReferenceModeStringMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ObjectType.ObjectTypeReferenceModeStringFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ObjectType), "ReferenceMode", Northface.Tools.ORM.ObjectModel.ObjectType.ReferenceModeMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ObjectType.ObjectTypeReferenceModeFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ObjectType), "DataTypeDisplay", Northface.Tools.ORM.ObjectModel.ObjectType.DataTypeDisplayMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ObjectType.ObjectTypeDataTypeDisplayFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ObjectType), "ValueRangeText", Northface.Tools.ORM.ObjectModel.ObjectType.ValueRangeTextMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ObjectType.ObjectTypeValueRangeTextFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.FactType), "NestingTypeDisplay", Northface.Tools.ORM.ObjectModel.FactType.NestingTypeDisplayMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.FactType.FactTypeNestingTypeDisplayFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.Expression), "Body", Northface.Tools.ORM.ObjectModel.Expression.BodyMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.Expression.ExpressionBodyFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.Expression), "Language", Northface.Tools.ORM.ObjectModel.Expression.LanguageMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.Expression.ExpressionLanguageFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.Role), "RolePlayerDisplay", Northface.Tools.ORM.ObjectModel.Role.RolePlayerDisplayMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.Role.RoleRolePlayerDisplayFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.Role), "IsMandatory", Northface.Tools.ORM.ObjectModel.Role.IsMandatoryMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.Role.RoleIsMandatoryFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.Role), "Multiplicity", Northface.Tools.ORM.ObjectModel.Role.MultiplicityMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.Role.RoleMultiplicityFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.Role), "ValueRangeText", Northface.Tools.ORM.ObjectModel.Role.ValueRangeTextMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.Role.RoleValueRangeTextFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint), "IsPreferred", Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint.IsPreferredMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint.InternalUniquenessConstraintIsPreferredFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.FrequencyConstraint), "MinFrequency", Northface.Tools.ORM.ObjectModel.FrequencyConstraint.MinFrequencyMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.FrequencyConstraint.FrequencyConstraintMinFrequencyFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.FrequencyConstraint), "MaxFrequency", Northface.Tools.ORM.ObjectModel.FrequencyConstraint.MaxFrequencyMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.FrequencyConstraint.FrequencyConstraintMaxFrequencyFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraint), "IsPreferred", Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraint.IsPreferredMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraint.ExternalUniquenessConstraintIsPreferredFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.Reading), "Text", Northface.Tools.ORM.ObjectModel.Reading.TextMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.Reading.ReadingTextFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.Reading), "IsPrimary", Northface.Tools.ORM.ObjectModel.Reading.IsPrimaryMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.Reading.ReadingIsPrimaryFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.Reading), "Language", Northface.Tools.ORM.ObjectModel.Reading.LanguageMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.Reading.ReadingLanguageFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError), "Column", Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.ColumnMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorColumnFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder), "ReadingText", Northface.Tools.ORM.ObjectModel.ReadingOrder.ReadingTextMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder.ReadingOrderReadingTextFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind), "FormatString", Northface.Tools.ORM.ObjectModel.ReferenceModeKind.FormatStringMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind.ReferenceModeKindFormatStringFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind), "ReferenceModeType", Northface.Tools.ORM.ObjectModel.ReferenceModeKind.ReferenceModeTypeMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind.ReferenceModeKindReferenceModeTypeFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode), "KindDisplay", Northface.Tools.ORM.ObjectModel.ReferenceMode.KindDisplayMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode.ReferenceModeKindDisplayFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.CustomReferenceMode), "CustomFormatString", Northface.Tools.ORM.ObjectModel.CustomReferenceMode.CustomFormatStringMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.CustomReferenceMode.CustomReferenceModeCustomFormatStringFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ValueRange), "MinValue", Northface.Tools.ORM.ObjectModel.ValueRange.MinValueMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ValueRange.ValueRangeMinValueFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ValueRange), "MaxValue", Northface.Tools.ORM.ObjectModel.ValueRange.MaxValueMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ValueRange.ValueRangeMaxValueFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ValueRange), "Text", Northface.Tools.ORM.ObjectModel.ValueRange.TextMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ValueRange.ValueRangeTextFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ValueRange), "MinInclusion", Northface.Tools.ORM.ObjectModel.ValueRange.MinInclusionMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ValueRange.ValueRangeMinInclusionFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ValueRange), "MaxInclusion", Northface.Tools.ORM.ObjectModel.ValueRange.MaxInclusionMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ValueRange.ValueRangeMaxInclusionFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ValueRangeDefinition), "Text", Northface.Tools.ORM.ObjectModel.ValueRangeDefinition.TextMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ValueRangeDefinition.ValueRangeDefinitionTextFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType), "Scale", Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.ScaleMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeHasDataTypeScaleFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType), "Length", Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.LengthMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeHasDataTypeLengthFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Northface.Tools.ORM.ObjectModel.FactTypeDerivation), "IsStored", Northface.Tools.ORM.ObjectModel.FactTypeDerivation.IsStoredMetaAttributeGuid, typeof(Northface.Tools.ORM.ObjectModel.FactTypeDerivation.FactTypeDerivationIsStoredFieldHandler)),

			};
			return typeArray;
		}
		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public  partial class ORMMetaModel : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region ORMMetaModel's GeneratedReflectedMetaRoleAttributes Code
		/// <summary>
		/// Virtual method that returns a collection of all fields for all types in metamodel ORMMetaModel
		/// </summary>
		protected sealed override Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[] GeneratedReflectedMetaRoles()
		{
			Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[] typeArray = new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[]
			{
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType), "DataType", Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType), "ValueTypeCollection", Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.FactTypeDerivation), "AssociatedFactType", Northface.Tools.ORM.ObjectModel.FactTypeDerivation.AssociatedFactTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.FactTypeDerivation), "DerivationRule", Northface.Tools.ORM.ObjectModel.FactTypeDerivation.DerivationRuleMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType), "NestedFactType", Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestedFactTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType), "NestingType", Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestingTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasRole), "FactType", Northface.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasRole), "RoleCollection", Northface.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole), "RolePlayer", Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayerMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole), "PlayedRoleCollection", Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ModelHasObjectType), "Model", Northface.Tools.ORM.ObjectModel.ModelHasObjectType.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ModelHasObjectType), "ObjectTypeCollection", Northface.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ModelHasFactType), "Model", Northface.Tools.ORM.ObjectModel.ModelHasFactType.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ModelHasFactType), "FactTypeCollection", Northface.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint), "MultiColumnExternalConstraintCollection", Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint.MultiColumnExternalConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint), "FactTypeCollection", Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint.FactTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint), "SingleColumnExternalConstraintCollection", Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint.SingleColumnExternalConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint), "FactTypeCollection", Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint.FactTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint), "FactConstraintCollection", Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint.FactConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint), "ConstrainedRoleCollection", Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRoleCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence), "RoleSequenceCollection", Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence), "ExternalConstraint", Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.ExternalConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole), "ConstraintRoleSequenceCollection", Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole), "RoleCollection", Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ReadingHasRole), "RoleCollection", Northface.Tools.ORM.ObjectModel.ReadingHasRole.RoleCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ReadingHasRole), "ReadingCollection", Northface.Tools.ORM.ObjectModel.ReadingHasRole.ReadingCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ModelHasError), "ErrorCollection", Northface.Tools.ORM.ObjectModel.ModelHasError.ErrorCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ModelHasError), "Model", Northface.Tools.ORM.ObjectModel.ModelHasError.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError), "TooFewRoleSequencesError", Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError), "Constraint", Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.ConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError), "TooManyRoleSequencesError", Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError), "Constraint", Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.ConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError), "DuplicateNameError", Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError), "ObjectTypeCollection", Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError), "DuplicateNameError", Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError), "FactTypeCollection", Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.FactTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading), "ReadingCollection", Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading), "ReadingOrder", Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole), "RoleCollection", Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole.RoleCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole), "ReadingOrder", Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole.ReadingOrderMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder), "ReadingOrderCollection", Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder), "FactType", Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind), "ReferenceModeKindCollection", Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind), "Model", Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode), "ReferenceModeCollection", Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode), "Model", Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind), "Kind", Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.KindMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind), "ReferenceModeCollection", Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint), "SingleColumnExternalConstraintCollection", Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.SingleColumnExternalConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint), "Model", Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint), "MultiColumnExternalConstraintCollection", Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.MultiColumnExternalConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint), "Model", Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint), "InternalConstraintCollection", Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.InternalConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint), "FactType", Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.FactTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError), "DuplicateNameError", Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError), "SingleColumnExternalConstraintCollection", Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.SingleColumnExternalConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError), "DuplicateNameError", Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError), "MultiColumnExternalConstraintCollection", Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.MultiColumnExternalConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier), "PreferredIdentifier", Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier), "PreferredIdentifierFor", Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError), "TooManyRolesError", Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError), "Reading", Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError), "TooFewRolesError", Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError), "Reading", Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError), "ArityMismatchError", Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError), "Constraint", Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError), "ReadingRequiredError", Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError), "FactType", Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ModelHasDataType), "DataTypeCollection", Northface.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ModelHasDataType), "Model", Northface.Tools.ORM.ObjectModel.ModelHasDataType.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), "InternalUniquenessConstraintRequiredError", Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), "FactType", Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition), "ValueRangeDefinition", Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition), "ValueType", Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition), "ValueRangeDefinition", Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition), "Role", Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.RoleMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange), "ValueRangeCollection", Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange), "ValueRangeDefinition", Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeDefinitionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError), "DataTypeNotSpecifiedError", Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError), "ValueTypeHasDataType", Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError), "CompatibleRolePlayerTypeErrorCollection", Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError), "MultiColumnExternalConstraint", Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.MultiColumnExternalConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError), "CompatibleRolePlayerTypeError", Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError), "SingleColumnExternalConstraint", Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.SingleColumnExternalConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError), "NMinusOneError", Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError), "Constraint", Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError), "RolePlayerRequiredError", Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError), "Role", Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuid),

			};
			return typeArray;
		}
		#endregion
	}
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ORMModel.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.ORMModel")]
	public  partial class ORMModel : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region ORMModel's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3f4ba8fa-355b-4a49-a42c-9c56f6e5f242";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ORMModel.MetaClassGuidString);
		#endregion

		#region ObjectTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ObjectTypeMoveableCollection ObjectTypeCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.ObjectTypeMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ModelHasObjectType.ModelMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid); }
		}
		#endregion
		#region FactTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.FactTypeMoveableCollection FactTypeCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.FactTypeMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ModelHasFactType.ModelMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuid); }
		}
		#endregion
		#region ErrorCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ModelErrorMoveableCollection ErrorCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.ModelErrorMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ModelHasError.ModelMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasError.ErrorCollectionMetaRoleGuid); }
		}
		#endregion
		#region ReferenceModeKindCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ReferenceModeKindMoveableCollection ReferenceModeKindCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.ReferenceModeKindMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuid); }
		}
		#endregion
		#region ReferenceModeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ReferenceModeMoveableCollection ReferenceModeCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.ReferenceModeMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuid); }
		}
		#endregion
		#region SingleColumnExternalConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintMoveableCollection SingleColumnExternalConstraintCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.ModelMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.SingleColumnExternalConstraintCollectionMetaRoleGuid); }
		}
		#endregion
		#region MultiColumnExternalConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintMoveableCollection MultiColumnExternalConstraintCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.ModelMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.MultiColumnExternalConstraintCollectionMetaRoleGuid); }
		}
		#endregion
		#region DataTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.DataTypeMoveableCollection DataTypeCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.DataTypeMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ModelHasDataType.ModelMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region ORMModel's Generated Constructor Code
	public  partial class ORMModel
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMModel(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMModel CreateORMModel(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateORMModel(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMModel CreateAndInitializeORMModel(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeORMModel(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMModel(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMModel CreateORMModel(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ORMModel)partition.ElementFactory.CreateElement(typeof(ORMModel));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMModel CreateAndInitializeORMModel(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ORMModel)partition.ElementFactory.CreateElement(typeof(ORMModel), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ORMModel
	/// <summary>
	/// ORMModel Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ORMModel))]
	public sealed class ORMModelElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMModelElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ORMModel( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ORMModelElementFactoryCreator Instance
		{
			get
			{
				return new ORMModelElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.RootType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.RootType")]
	public abstract partial class RootType : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region RootType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c6bdf8b0-ef3d-406a-afb2-8bfeb1f528c3";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.RootType.MetaClassGuidString);
		#endregion

		#region IsExternal's Generated  Field Code
		#region IsExternal's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsExternalMetaAttributeGuidString = "b62dffb1-d93c-4b77-901a-ad7f0920141a";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsExternalMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.RootType.IsExternalMetaAttributeGuidString);
		#endregion

		#region IsExternal's Generated Property Code

		private System.Boolean isExternalPropertyStorage = false;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(RootTypeIsExternalFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.RootType.IsExternalMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.RootType.IsExternal")]
		public  System.Boolean IsExternal
		{
			get
			{
				return isExternalPropertyStorage;
			}
		
			set
			{
				rootTypeIsExternalFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RootTypeIsExternalFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for RootType.IsExternal field
		/// </summary>
		private static RootTypeIsExternalFieldHandler	rootTypeIsExternalFieldHandler	= RootTypeIsExternalFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for RootType.IsExternal
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RootTypeIsExternalFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.RootType,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RootTypeIsExternalFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the RootType.IsExternal field handler
			/// </summary>
			/// <value>RootTypeIsExternalFieldHandler</value>
			public static RootTypeIsExternalFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.RootType.rootTypeIsExternalFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.RootType.rootTypeIsExternalFieldHandler;
					}
					else
					{
						// The static constructor in RootType will assign this value to
						// Northface.Tools.ORM.ObjectModel.RootType.rootTypeIsExternalFieldHandler, so just instantiate one and return it
						return new RootTypeIsExternalFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the RootType.IsExternal field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.RootType.IsExternalMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the RootType</param>
			protected sealed override System.Boolean GetValue(Northface.Tools.ORM.ObjectModel.RootType element)
			{
				return element.isExternalPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.RootType element, System.Boolean value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Boolean oldValue)
			{
				oldValue = element.isExternalPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.isExternalPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
	}
	#region RootType's Generated Constructor Code
	public abstract partial class RootType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected RootType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.ObjectType")]
	public  partial class ObjectType : Northface.Tools.ORM.ObjectModel.RootType
	{
		#region ObjectType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "910a08ef-e1a5-461a-bebd-150932f12aad";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectType.MetaClassGuidString);
		#endregion

		#region IsIndependent's Generated  Field Code
		#region IsIndependent's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsIndependentMetaAttributeGuidString = "9d618c71-7721-41bd-a1f3-dc321a7960ec";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsIndependentMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectType.IsIndependentMetaAttributeGuidString);
		#endregion

		#region IsIndependent's Generated Property Code

		private System.Boolean isIndependentPropertyStorage = false;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ObjectTypeIsIndependentFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectType.IsIndependentMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ObjectType.IsIndependent")]
		public  System.Boolean IsIndependent
		{
			get
			{
				return isIndependentPropertyStorage;
			}
		
			set
			{
				objectTypeIsIndependentFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeIsIndependentFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.IsIndependent field
		/// </summary>
		private static ObjectTypeIsIndependentFieldHandler	objectTypeIsIndependentFieldHandler	= ObjectTypeIsIndependentFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.IsIndependent
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeIsIndependentFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.ObjectType,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeIsIndependentFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.IsIndependent field handler
			/// </summary>
			/// <value>ObjectTypeIsIndependentFieldHandler</value>
			public static ObjectTypeIsIndependentFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeIsIndependentFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeIsIndependentFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeIsIndependentFieldHandler, so just instantiate one and return it
						return new ObjectTypeIsIndependentFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.IsIndependent field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ObjectType.IsIndependentMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ObjectType</param>
			protected sealed override System.Boolean GetValue(Northface.Tools.ORM.ObjectModel.ObjectType element)
			{
				return element.isIndependentPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.ObjectType element, System.Boolean value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Boolean oldValue)
			{
				oldValue = element.isIndependentPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.isIndependentPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region IsValueType's Generated  Field Code
		#region IsValueType's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsValueTypeMetaAttributeGuidString = "08503b2b-de15-4682-8ac5-972708b73d8a";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsValueTypeMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectType.IsValueTypeMetaAttributeGuidString);
		#endregion

		#region IsValueType's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.ReadOnly(State=Microsoft.VisualStudio.Modeling.ReadOnlyAttributeValue.SometimesUIReadOnlyPreferFalse)]
		[System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)]
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ObjectTypeIsValueTypeFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectType.IsValueTypeMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ObjectType.IsValueType")]
		public  System.Boolean IsValueType
		{
			get
			{
				return objectTypeIsValueTypeFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeIsValueTypeFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeIsValueTypeFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.IsValueType field
		/// </summary>
		private static ObjectTypeIsValueTypeFieldHandler	objectTypeIsValueTypeFieldHandler	= ObjectTypeIsValueTypeFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.IsValueType
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeIsValueTypeFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.ObjectType,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeIsValueTypeFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.IsValueType field handler
			/// </summary>
			/// <value>ObjectTypeIsValueTypeFieldHandler</value>
			public static ObjectTypeIsValueTypeFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeIsValueTypeFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeIsValueTypeFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeIsValueTypeFieldHandler, so just instantiate one and return it
						return new ObjectTypeIsValueTypeFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.IsValueType field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ObjectType.IsValueTypeMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region Scale's Generated  Field Code
		#region Scale's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ScaleMetaAttributeGuidString = "5d7a6975-eff0-4832-bc3c-bc6fb3b0e9cf";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ScaleMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectType.ScaleMetaAttributeGuidString);
		#endregion

		#region Scale's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.IntegerDomainAttribute(MinValue=0)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ObjectTypeScaleFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectType.ScaleMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ObjectType.Scale")]
		public  System.Int32 Scale
		{
			get
			{
				return objectTypeScaleFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeScaleFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeScaleFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.Scale field
		/// </summary>
		private static ObjectTypeScaleFieldHandler	objectTypeScaleFieldHandler	= ObjectTypeScaleFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.Scale
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeScaleFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.ObjectType,System.Int32>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeScaleFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.Scale field handler
			/// </summary>
			/// <value>ObjectTypeScaleFieldHandler</value>
			public static ObjectTypeScaleFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeScaleFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeScaleFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeScaleFieldHandler, so just instantiate one and return it
						return new ObjectTypeScaleFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.Scale field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ObjectType.ScaleMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region Length's Generated  Field Code
		#region Length's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String LengthMetaAttributeGuidString = "f3e0995d-b18e-4c42-aedd-28de749b6abd";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid LengthMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectType.LengthMetaAttributeGuidString);
		#endregion

		#region Length's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.IntegerDomainAttribute(MinValue=0)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ObjectTypeLengthFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectType.LengthMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ObjectType.Length")]
		public  System.Int32 Length
		{
			get
			{
				return objectTypeLengthFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeLengthFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeLengthFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.Length field
		/// </summary>
		private static ObjectTypeLengthFieldHandler	objectTypeLengthFieldHandler	= ObjectTypeLengthFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.Length
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeLengthFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.ObjectType,System.Int32>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeLengthFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.Length field handler
			/// </summary>
			/// <value>ObjectTypeLengthFieldHandler</value>
			public static ObjectTypeLengthFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeLengthFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeLengthFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeLengthFieldHandler, so just instantiate one and return it
						return new ObjectTypeLengthFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.Length field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ObjectType.LengthMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region NestedFactTypeDisplay's Generated  Field Code
		#region NestedFactTypeDisplay's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String NestedFactTypeDisplayMetaAttributeGuidString = "d94fc8f5-22f2-4864-9be1-7eb74ba9193b";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid NestedFactTypeDisplayMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectType.NestedFactTypeDisplayMetaAttributeGuidString);
		#endregion

		#region NestedFactTypeDisplay's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Editor(typeof(Northface.Tools.ORM.ObjectModel.Editors.NestedFactTypePicker), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.MergableProperty(false)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, AllowNulls=true, FieldHandlerType=typeof(ObjectTypeNestedFactTypeDisplayFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectType.NestedFactTypeDisplayMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ObjectType.NestedFactTypeDisplay")]
		public  Northface.Tools.ORM.ObjectModel.FactType NestedFactTypeDisplay
		{
			get
			{
				return objectTypeNestedFactTypeDisplayFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeNestedFactTypeDisplayFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeNestedFactTypeDisplayFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.NestedFactTypeDisplay field
		/// </summary>
		private static ObjectTypeNestedFactTypeDisplayFieldHandler	objectTypeNestedFactTypeDisplayFieldHandler	= ObjectTypeNestedFactTypeDisplayFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.NestedFactTypeDisplay
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeNestedFactTypeDisplayFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.ObjectType,Northface.Tools.ORM.ObjectModel.FactType>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeNestedFactTypeDisplayFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.NestedFactTypeDisplay field handler
			/// </summary>
			/// <value>ObjectTypeNestedFactTypeDisplayFieldHandler</value>
			public static ObjectTypeNestedFactTypeDisplayFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeNestedFactTypeDisplayFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeNestedFactTypeDisplayFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeNestedFactTypeDisplayFieldHandler, so just instantiate one and return it
						return new ObjectTypeNestedFactTypeDisplayFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.NestedFactTypeDisplay field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ObjectType.NestedFactTypeDisplayMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region ReferenceModeDisplay's Generated  Field Code
		#region ReferenceModeDisplay's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ReferenceModeDisplayMetaAttributeGuidString = "4273a21b-afa2-4ba8-bdba-179b578a11b5";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ReferenceModeDisplayMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectType.ReferenceModeDisplayMetaAttributeGuidString);
		#endregion

		#region ReferenceModeDisplay's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Editor(typeof(Northface.Tools.ORM.ObjectModel.Editors.ReferenceModePicker), typeof(System.Drawing.Design.UITypeEditor))]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, AllowNulls=true, FieldHandlerType=typeof(ObjectTypeReferenceModeDisplayFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectType.ReferenceModeDisplayMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ObjectType.ReferenceModeDisplay")]
		public  System.Object ReferenceModeDisplay
		{
			get
			{
				return objectTypeReferenceModeDisplayFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeReferenceModeDisplayFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeReferenceModeDisplayFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.ReferenceModeDisplay field
		/// </summary>
		private static ObjectTypeReferenceModeDisplayFieldHandler	objectTypeReferenceModeDisplayFieldHandler	= ObjectTypeReferenceModeDisplayFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.ReferenceModeDisplay
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeReferenceModeDisplayFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.ObjectType,System.Object>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeReferenceModeDisplayFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.ReferenceModeDisplay field handler
			/// </summary>
			/// <value>ObjectTypeReferenceModeDisplayFieldHandler</value>
			public static ObjectTypeReferenceModeDisplayFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeDisplayFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeDisplayFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeDisplayFieldHandler, so just instantiate one and return it
						return new ObjectTypeReferenceModeDisplayFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.ReferenceModeDisplay field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ObjectType.ReferenceModeDisplayMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region ReferenceModeString's Generated  Field Code
		#region ReferenceModeString's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ReferenceModeStringMetaAttributeGuidString = "9fe0a63e-fda6-47cb-aa43-2bd5ab99b0a5";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ReferenceModeStringMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectType.ReferenceModeStringMetaAttributeGuidString);
		#endregion

		#region ReferenceModeString's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ObjectTypeReferenceModeStringFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectType.ReferenceModeStringMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ObjectType.ReferenceModeString")]
		public  System.String ReferenceModeString
		{
			get
			{
				return objectTypeReferenceModeStringFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeReferenceModeStringFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeReferenceModeStringFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.ReferenceModeString field
		/// </summary>
		private static ObjectTypeReferenceModeStringFieldHandler	objectTypeReferenceModeStringFieldHandler	= ObjectTypeReferenceModeStringFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.ReferenceModeString
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeReferenceModeStringFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.ObjectType,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeReferenceModeStringFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.ReferenceModeString field handler
			/// </summary>
			/// <value>ObjectTypeReferenceModeStringFieldHandler</value>
			public static ObjectTypeReferenceModeStringFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeStringFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeStringFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeStringFieldHandler, so just instantiate one and return it
						return new ObjectTypeReferenceModeStringFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.ReferenceModeString field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ObjectType.ReferenceModeStringMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region ReferenceMode's Generated  Field Code
		#region ReferenceMode's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ReferenceModeMetaAttributeGuidString = "c33b225e-ba4a-4174-9231-527483fa289e";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ReferenceModeMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectType.ReferenceModeMetaAttributeGuidString);
		#endregion

		#region ReferenceMode's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, AllowNulls=true, FieldHandlerType=typeof(ObjectTypeReferenceModeFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectType.ReferenceModeMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ObjectType.ReferenceMode")]
		public  Northface.Tools.ORM.ObjectModel.ReferenceMode ReferenceMode
		{
			get
			{
				return objectTypeReferenceModeFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeReferenceModeFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeReferenceModeFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.ReferenceMode field
		/// </summary>
		private static ObjectTypeReferenceModeFieldHandler	objectTypeReferenceModeFieldHandler	= ObjectTypeReferenceModeFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.ReferenceMode
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeReferenceModeFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.ObjectType,Northface.Tools.ORM.ObjectModel.ReferenceMode>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeReferenceModeFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.ReferenceMode field handler
			/// </summary>
			/// <value>ObjectTypeReferenceModeFieldHandler</value>
			public static ObjectTypeReferenceModeFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeFieldHandler, so just instantiate one and return it
						return new ObjectTypeReferenceModeFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.ReferenceMode field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ObjectType.ReferenceModeMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region DataTypeDisplay's Generated  Field Code
		#region DataTypeDisplay's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String DataTypeDisplayMetaAttributeGuidString = "23bccbcf-4eff-4ae5-a32b-36cf2267957e";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid DataTypeDisplayMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectType.DataTypeDisplayMetaAttributeGuidString);
		#endregion

		#region DataTypeDisplay's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Editor(typeof(Northface.Tools.ORM.ObjectModel.Editors.DataTypePicker), typeof(System.Drawing.Design.UITypeEditor))]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, AllowNulls=true, FieldHandlerType=typeof(ObjectTypeDataTypeDisplayFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectType.DataTypeDisplayMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ObjectType.DataTypeDisplay")]
		public  Northface.Tools.ORM.ObjectModel.DataType DataTypeDisplay
		{
			get
			{
				return objectTypeDataTypeDisplayFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeDataTypeDisplayFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeDataTypeDisplayFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.DataTypeDisplay field
		/// </summary>
		private static ObjectTypeDataTypeDisplayFieldHandler	objectTypeDataTypeDisplayFieldHandler	= ObjectTypeDataTypeDisplayFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.DataTypeDisplay
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeDataTypeDisplayFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.ObjectType,Northface.Tools.ORM.ObjectModel.DataType>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeDataTypeDisplayFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.DataTypeDisplay field handler
			/// </summary>
			/// <value>ObjectTypeDataTypeDisplayFieldHandler</value>
			public static ObjectTypeDataTypeDisplayFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeDataTypeDisplayFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeDataTypeDisplayFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeDataTypeDisplayFieldHandler, so just instantiate one and return it
						return new ObjectTypeDataTypeDisplayFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.DataTypeDisplay field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ObjectType.DataTypeDisplayMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region ValueRangeText's Generated  Field Code
		#region ValueRangeText's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ValueRangeTextMetaAttributeGuidString = "6a594927-309d-48be-b52a-d600ae118131";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ValueRangeTextMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectType.ValueRangeTextMetaAttributeGuidString);
		#endregion

		#region ValueRangeText's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.ReadOnly(State=Microsoft.VisualStudio.Modeling.ReadOnlyAttributeValue.SometimesUIReadOnlyPreferTrue)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ObjectTypeValueRangeTextFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectType.ValueRangeTextMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ObjectType.ValueRangeText")]
		public  System.String ValueRangeText
		{
			get
			{
				return objectTypeValueRangeTextFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeValueRangeTextFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeValueRangeTextFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.ValueRangeText field
		/// </summary>
		private static ObjectTypeValueRangeTextFieldHandler	objectTypeValueRangeTextFieldHandler	= ObjectTypeValueRangeTextFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.ValueRangeText
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeValueRangeTextFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.ObjectType,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeValueRangeTextFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.ValueRangeText field handler
			/// </summary>
			/// <value>ObjectTypeValueRangeTextFieldHandler</value>
			public static ObjectTypeValueRangeTextFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeValueRangeTextFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeValueRangeTextFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Northface.Tools.ORM.ObjectModel.ObjectType.objectTypeValueRangeTextFieldHandler, so just instantiate one and return it
						return new ObjectTypeValueRangeTextFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.ValueRangeText field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ObjectType.ValueRangeTextMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region DataType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.DataType DataType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataTypeMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.DataType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.DataType counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.DataType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType), newRoles);
				}
			}
		}
		#endregion
		#region NestedFactType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.FactType NestedFactType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestingTypeMetaRoleGuid, Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestedFactTypeMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.FactType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestingTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestedFactTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.FactType counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.FactType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestedFactTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestingTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType), newRoles);
				}
			}
		}
		#endregion
		#region PlayedRoleCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.RoleMoveableCollection PlayedRoleCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.RoleMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayerMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuid); }
		}
		#endregion
		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ORMModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasObjectType.ModelMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ORMModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ModelHasObjectType.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ORMModel counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ORMModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ModelHasObjectType.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ModelHasObjectType), newRoles);
				}
			}
		}
		#endregion
		#region DuplicateNameError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError DuplicateNameError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError), newRoles);
				}
			}
		}
		#endregion
		#region PreferredIdentifier's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence PreferredIdentifier
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuid, Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier), newRoles);
				}
			}
		}
		#endregion
		#region ValueRangeDefinition's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ValueTypeValueRangeDefinition ValueRangeDefinition
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueTypeMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ValueTypeValueRangeDefinition;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ValueTypeValueRangeDefinition counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ValueTypeValueRangeDefinition;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for ObjectType
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.ObjectType Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ObjectTypeMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ObjectTypeMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ObjectType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ObjectType))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ObjectType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ObjectType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ObjectType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ObjectType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ObjectType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ObjectType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ObjectType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ObjectType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ObjectType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ObjectType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ObjectType) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ObjectType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ObjectType) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ObjectType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.ObjectType[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.ObjectType at that index</returns>
		public Northface.Tools.ORM.ObjectModel.ObjectType this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.ObjectType)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ObjectType to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.ObjectType value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ObjectType to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.ObjectType value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ObjectType to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.ObjectType value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ObjectType to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.ObjectType value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ObjectType to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.ObjectType value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.ObjectType rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.ObjectType rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ObjectType's Generated Constructor Code
	public  partial class ObjectType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectType CreateObjectType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateObjectType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectType CreateAndInitializeObjectType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectType CreateObjectType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ObjectType)partition.ElementFactory.CreateElement(typeof(ObjectType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectType CreateAndInitializeObjectType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectType)partition.ElementFactory.CreateElement(typeof(ObjectType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectType
	/// <summary>
	/// ObjectType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ObjectType))]
	public sealed class ObjectTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ObjectType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectTypeElementFactoryCreator Instance
		{
			get
			{
				return new ObjectTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.FactType")]
	public  partial class FactType : Northface.Tools.ORM.ObjectModel.RootType
	{
		#region FactType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "a3acc35a-ce71-4cb8-8770-b87fbfa462d8";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactType.MetaClassGuidString);
		#endregion

		#region NestingTypeDisplay's Generated  Field Code
		#region NestingTypeDisplay's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String NestingTypeDisplayMetaAttributeGuidString = "b4a12078-45aa-4cab-a6d9-da2317ddc64a";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid NestingTypeDisplayMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactType.NestingTypeDisplayMetaAttributeGuidString);
		#endregion

		#region NestingTypeDisplay's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Editor(typeof(Northface.Tools.ORM.ObjectModel.Editors.NestingTypePicker), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.MergableProperty(false)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, AllowNulls=true, FieldHandlerType=typeof(FactTypeNestingTypeDisplayFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactType.NestingTypeDisplayMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.FactType.NestingTypeDisplay")]
		public  Northface.Tools.ORM.ObjectModel.ObjectType NestingTypeDisplay
		{
			get
			{
				return factTypeNestingTypeDisplayFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				factTypeNestingTypeDisplayFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FactTypeNestingTypeDisplayFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FactType.NestingTypeDisplay field
		/// </summary>
		private static FactTypeNestingTypeDisplayFieldHandler	factTypeNestingTypeDisplayFieldHandler	= FactTypeNestingTypeDisplayFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FactType.NestingTypeDisplay
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FactTypeNestingTypeDisplayFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.FactType,Northface.Tools.ORM.ObjectModel.ObjectType>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FactTypeNestingTypeDisplayFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FactType.NestingTypeDisplay field handler
			/// </summary>
			/// <value>FactTypeNestingTypeDisplayFieldHandler</value>
			public static FactTypeNestingTypeDisplayFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.FactType.factTypeNestingTypeDisplayFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.FactType.factTypeNestingTypeDisplayFieldHandler;
					}
					else
					{
						// The static constructor in FactType will assign this value to
						// Northface.Tools.ORM.ObjectModel.FactType.factTypeNestingTypeDisplayFieldHandler, so just instantiate one and return it
						return new FactTypeNestingTypeDisplayFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FactType.NestingTypeDisplay field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.FactType.NestingTypeDisplayMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region DerivationRule's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.Expression DerivationRule
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.FactTypeDerivation.AssociatedFactTypeMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeDerivation.DerivationRuleMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.Expression;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.FactTypeDerivation.AssociatedFactTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.FactTypeDerivation.DerivationRuleMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.Expression counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.Expression;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeDerivation.DerivationRuleMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeDerivation.AssociatedFactTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.FactTypeDerivation), newRoles);
				}
			}
		}
		#endregion
		#region NestingType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ObjectType NestingType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestedFactTypeMetaRoleGuid, Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestingTypeMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ObjectType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestedFactTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestingTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ObjectType counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ObjectType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestingTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestedFactTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType), newRoles);
				}
			}
		}
		#endregion
		#region RoleCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.RoleMoveableCollection RoleCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.RoleMoveableCollection(this, Northface.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuid); }
		}
		#endregion
		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ORMModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasFactType.ModelMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ORMModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ModelHasFactType.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ORMModel counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ORMModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ModelHasFactType.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ModelHasFactType), newRoles);
				}
			}
		}
		#endregion
		#region MultiColumnExternalConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintMoveableCollection MultiColumnExternalConstraintCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintMoveableCollection(this, Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint.FactTypeCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint.MultiColumnExternalConstraintCollectionMetaRoleGuid); }
		}
		#endregion
		#region SingleColumnExternalConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintMoveableCollection SingleColumnExternalConstraintCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintMoveableCollection(this, Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint.FactTypeCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint.SingleColumnExternalConstraintCollectionMetaRoleGuid); }
		}
		#endregion
		#region DuplicateNameError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.FactTypeDuplicateNameError DuplicateNameError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.FactTypeCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.FactTypeDuplicateNameError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.FactTypeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.FactTypeDuplicateNameError counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.FactTypeDuplicateNameError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.FactTypeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError), newRoles);
				}
			}
		}
		#endregion
		#region ReadingOrderCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ReadingOrderMoveableCollection ReadingOrderCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.ReadingOrderMoveableCollection(this, Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid); }
		}
		#endregion
		#region InternalConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.InternalConstraintMoveableCollection InternalConstraintCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.InternalConstraintMoveableCollection(this, Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.FactTypeMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.InternalConstraintCollectionMetaRoleGuid); }
		}
		#endregion
		#region ReadingRequiredError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.FactTypeRequiresReadingError ReadingRequiredError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.FactTypeRequiresReadingError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.FactTypeRequiresReadingError counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.FactTypeRequiresReadingError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError), newRoles);
				}
			}
		}
		#endregion
		#region InternalUniquenessConstraintRequiredError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError InternalUniquenessConstraintRequiredError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for FactType
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.FactType Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class FactTypeMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public FactTypeMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.FactType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.FactType))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.FactType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.FactType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.FactType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.FactType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.FactType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.FactType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.FactType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.FactType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.FactType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.FactType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.FactType) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.FactType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.FactType) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.FactType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.FactType[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.FactType at that index</returns>
		public Northface.Tools.ORM.ObjectModel.FactType this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.FactType)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.FactType to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.FactType value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.FactType to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.FactType value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.FactType to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.FactType value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.FactType to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.FactType value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.FactType to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.FactType value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.FactType rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.FactType rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region FactType's Generated Constructor Code
	public  partial class FactType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactType CreateFactType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFactType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactType CreateAndInitializeFactType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactType CreateFactType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FactType)partition.ElementFactory.CreateElement(typeof(FactType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactType CreateAndInitializeFactType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactType)partition.ElementFactory.CreateElement(typeof(FactType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactType
	/// <summary>
	/// FactType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.FactType))]
	public sealed class FactTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.FactType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.SubtypeFact.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.SubtypeFact")]
	public  partial class SubtypeFact : Northface.Tools.ORM.ObjectModel.FactType
	{
		#region SubtypeFact's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "012ad46d-6e3e-4ca2-97e8-44ea4f27ca75";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.SubtypeFact.MetaClassGuidString);
		#endregion

	}
	#region SubtypeFact's Generated Constructor Code
	public  partial class SubtypeFact
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubtypeFact(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubtypeFact CreateSubtypeFact(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateSubtypeFact(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubtypeFact CreateAndInitializeSubtypeFact(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSubtypeFact(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SubtypeFact(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubtypeFact CreateSubtypeFact(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (SubtypeFact)partition.ElementFactory.CreateElement(typeof(SubtypeFact));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubtypeFact CreateAndInitializeSubtypeFact(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SubtypeFact)partition.ElementFactory.CreateElement(typeof(SubtypeFact), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SubtypeFact
	/// <summary>
	/// SubtypeFact Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.SubtypeFact))]
	public sealed class SubtypeFactElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubtypeFactElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.SubtypeFact( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SubtypeFactElementFactoryCreator Instance
		{
			get
			{
				return new SubtypeFactElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint")]
	public abstract partial class MultiColumnExternalConstraint : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region MultiColumnExternalConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "0d75242d-1462-4936-ad30-e1ce61a6ba3f";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint.MetaClassGuidString);
		#endregion

		#region FactTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.FactTypeMoveableCollection FactTypeCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.FactTypeMoveableCollection(this, Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint.MultiColumnExternalConstraintCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint.FactTypeCollectionMetaRoleGuid); }
		}
		#endregion
		#region RoleSequenceCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequenceMoveableCollection RoleSequenceCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequenceMoveableCollection(this, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.ExternalConstraintMetaRoleGuid, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuid); }
		}
		#endregion
		#region TooFewRoleSequencesError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.TooFewRoleSequencesError TooFewRoleSequencesError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.ConstraintMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.TooFewRoleSequencesError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.ConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.TooFewRoleSequencesError counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.TooFewRoleSequencesError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.ConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError), newRoles);
				}
			}
		}
		#endregion
		#region TooManyRoleSequencesError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.TooManyRoleSequencesError TooManyRoleSequencesError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.ConstraintMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.TooManyRoleSequencesError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.ConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.TooManyRoleSequencesError counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.TooManyRoleSequencesError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.ConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError), newRoles);
				}
			}
		}
		#endregion
		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ORMModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.MultiColumnExternalConstraintCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.ModelMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ORMModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.MultiColumnExternalConstraintCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ORMModel counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ORMModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.MultiColumnExternalConstraintCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint), newRoles);
				}
			}
		}
		#endregion
		#region DuplicateNameError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError DuplicateNameError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.MultiColumnExternalConstraintCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.MultiColumnExternalConstraintCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.MultiColumnExternalConstraintCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError), newRoles);
				}
			}
		}
		#endregion
		#region ArityMismatchError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError ArityMismatchError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuid, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError), newRoles);
				}
			}
		}
		#endregion
		#region CompatibleRolePlayerTypeErrorCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeErrorMoveableCollection CompatibleRolePlayerTypeErrorCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeErrorMoveableCollection(this, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.MultiColumnExternalConstraintMetaRoleGuid, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region Collection Classes for MultiColumnExternalConstraint
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class MultiColumnExternalConstraintMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public MultiColumnExternalConstraintMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint at that index</returns>
		public Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region MultiColumnExternalConstraint's Generated Constructor Code
	public abstract partial class MultiColumnExternalConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected MultiColumnExternalConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.EqualityConstraint.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.EqualityConstraint")]
	public  partial class EqualityConstraint : Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint
	{
		#region EqualityConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "1bee2436-cd79-45be-b484-9c1dc5cb81ab";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.EqualityConstraint.MetaClassGuidString);
		#endregion

	}
	#region EqualityConstraint's Generated Constructor Code
	public  partial class EqualityConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EqualityConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityConstraint CreateEqualityConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateEqualityConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityConstraint CreateAndInitializeEqualityConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeEqualityConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public EqualityConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityConstraint CreateEqualityConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (EqualityConstraint)partition.ElementFactory.CreateElement(typeof(EqualityConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityConstraint CreateAndInitializeEqualityConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (EqualityConstraint)partition.ElementFactory.CreateElement(typeof(EqualityConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for EqualityConstraint
	/// <summary>
	/// EqualityConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.EqualityConstraint))]
	public sealed class EqualityConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EqualityConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.EqualityConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static EqualityConstraintElementFactoryCreator Instance
		{
			get
			{
				return new EqualityConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ExclusionConstraint.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.ExclusionConstraint")]
	public  partial class ExclusionConstraint : Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint
	{
		#region ExclusionConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "5373783f-9ddd-4ffb-95d8-8e28cd73b98a";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ExclusionConstraint.MetaClassGuidString);
		#endregion

	}
	#region ExclusionConstraint's Generated Constructor Code
	public  partial class ExclusionConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExclusionConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExclusionConstraint CreateExclusionConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateExclusionConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExclusionConstraint CreateAndInitializeExclusionConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeExclusionConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ExclusionConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExclusionConstraint CreateExclusionConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ExclusionConstraint)partition.ElementFactory.CreateElement(typeof(ExclusionConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExclusionConstraint CreateAndInitializeExclusionConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ExclusionConstraint)partition.ElementFactory.CreateElement(typeof(ExclusionConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ExclusionConstraint
	/// <summary>
	/// ExclusionConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ExclusionConstraint))]
	public sealed class ExclusionConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExclusionConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ExclusionConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ExclusionConstraintElementFactoryCreator Instance
		{
			get
			{
				return new ExclusionConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.SubsetConstraint.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.SubsetConstraint")]
	public  partial class SubsetConstraint : Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint
	{
		#region SubsetConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "7ac282bf-98d2-4ad1-9bf0-5ec0cdb17d95";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.SubsetConstraint.MetaClassGuidString);
		#endregion

	}
	#region SubsetConstraint's Generated Constructor Code
	public  partial class SubsetConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubsetConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraint CreateSubsetConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateSubsetConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraint CreateAndInitializeSubsetConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSubsetConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SubsetConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraint CreateSubsetConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (SubsetConstraint)partition.ElementFactory.CreateElement(typeof(SubsetConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraint CreateAndInitializeSubsetConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SubsetConstraint)partition.ElementFactory.CreateElement(typeof(SubsetConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SubsetConstraint
	/// <summary>
	/// SubsetConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.SubsetConstraint))]
	public sealed class SubsetConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubsetConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.SubsetConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SubsetConstraintElementFactoryCreator Instance
		{
			get
			{
				return new SubsetConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.DataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.DataType")]
	public abstract partial class DataType : Microsoft.VisualStudio.Modeling.ModelElement
	{
		#region DataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "547d17bb-3dc9-4869-b280-ff6be0f7dca9";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.DataType.MetaClassGuidString);
		#endregion

		#region ValueTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ObjectTypeMoveableCollection ValueTypeCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.ObjectTypeMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataTypeMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeCollectionMetaRoleGuid); }
		}
		#endregion
		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ORMModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasDataType.ModelMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ORMModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ModelHasDataType.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ORMModel counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ORMModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ModelHasDataType.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ModelHasDataType), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for DataType
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.DataType Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class DataTypeMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public DataTypeMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.DataType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.DataType))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.DataType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.DataType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.DataType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.DataType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.DataType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.DataType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.DataType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.DataType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.DataType) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.DataType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.DataType) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.DataType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.DataType) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.DataType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.DataType[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.DataType at that index</returns>
		public Northface.Tools.ORM.ObjectModel.DataType this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.DataType)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.DataType to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.DataType value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.DataType to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.DataType value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.DataType to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.DataType value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.DataType to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.DataType value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.DataType to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.DataType value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.DataType rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.DataType rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region DataType's Generated Constructor Code
	public abstract partial class DataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected DataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.UnspecifiedDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.UnspecifiedDataType")]
	public  partial class UnspecifiedDataType : Northface.Tools.ORM.ObjectModel.DataType
	{
		#region UnspecifiedDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "12a11e3f-7daf-4ced-8ca2-34d3250ad125";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.UnspecifiedDataType.MetaClassGuidString);
		#endregion

	}
	#region UnspecifiedDataType's Generated Constructor Code
	public  partial class UnspecifiedDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public UnspecifiedDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UnspecifiedDataType CreateUnspecifiedDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateUnspecifiedDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UnspecifiedDataType CreateAndInitializeUnspecifiedDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeUnspecifiedDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public UnspecifiedDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UnspecifiedDataType CreateUnspecifiedDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (UnspecifiedDataType)partition.ElementFactory.CreateElement(typeof(UnspecifiedDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UnspecifiedDataType CreateAndInitializeUnspecifiedDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (UnspecifiedDataType)partition.ElementFactory.CreateElement(typeof(UnspecifiedDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for UnspecifiedDataType
	/// <summary>
	/// UnspecifiedDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.UnspecifiedDataType))]
	public sealed class UnspecifiedDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public UnspecifiedDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.UnspecifiedDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static UnspecifiedDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new UnspecifiedDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.TextDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.TextDataType")]
	public abstract partial class TextDataType : Northface.Tools.ORM.ObjectModel.DataType
	{
		#region TextDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "8590bbf5-92b9-4a9d-98a0-7b7a0d01c450";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.TextDataType.MetaClassGuidString);
		#endregion

	}
	#region TextDataType's Generated Constructor Code
	public abstract partial class TextDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected TextDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FixedLengthTextDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.FixedLengthTextDataType")]
	public  partial class FixedLengthTextDataType : Northface.Tools.ORM.ObjectModel.TextDataType
	{
		#region FixedLengthTextDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "9de7b056-3e4d-4344-a00c-a9e81da805f6";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FixedLengthTextDataType.MetaClassGuidString);
		#endregion

	}
	#region FixedLengthTextDataType's Generated Constructor Code
	public  partial class FixedLengthTextDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FixedLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FixedLengthTextDataType CreateFixedLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFixedLengthTextDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FixedLengthTextDataType CreateAndInitializeFixedLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFixedLengthTextDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FixedLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FixedLengthTextDataType CreateFixedLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FixedLengthTextDataType)partition.ElementFactory.CreateElement(typeof(FixedLengthTextDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FixedLengthTextDataType CreateAndInitializeFixedLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FixedLengthTextDataType)partition.ElementFactory.CreateElement(typeof(FixedLengthTextDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FixedLengthTextDataType
	/// <summary>
	/// FixedLengthTextDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.FixedLengthTextDataType))]
	public sealed class FixedLengthTextDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FixedLengthTextDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.FixedLengthTextDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FixedLengthTextDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new FixedLengthTextDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.VariableLengthTextDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.VariableLengthTextDataType")]
	public  partial class VariableLengthTextDataType : Northface.Tools.ORM.ObjectModel.TextDataType
	{
		#region VariableLengthTextDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "4498d0d4-f386-46c5-a7ef-6ee9abc14611";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.VariableLengthTextDataType.MetaClassGuidString);
		#endregion

	}
	#region VariableLengthTextDataType's Generated Constructor Code
	public  partial class VariableLengthTextDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public VariableLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static VariableLengthTextDataType CreateVariableLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateVariableLengthTextDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static VariableLengthTextDataType CreateAndInitializeVariableLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeVariableLengthTextDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public VariableLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static VariableLengthTextDataType CreateVariableLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (VariableLengthTextDataType)partition.ElementFactory.CreateElement(typeof(VariableLengthTextDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static VariableLengthTextDataType CreateAndInitializeVariableLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (VariableLengthTextDataType)partition.ElementFactory.CreateElement(typeof(VariableLengthTextDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for VariableLengthTextDataType
	/// <summary>
	/// VariableLengthTextDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.VariableLengthTextDataType))]
	public sealed class VariableLengthTextDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public VariableLengthTextDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.VariableLengthTextDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static VariableLengthTextDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new VariableLengthTextDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.LargeLengthTextDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.LargeLengthTextDataType")]
	public  partial class LargeLengthTextDataType : Northface.Tools.ORM.ObjectModel.TextDataType
	{
		#region LargeLengthTextDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "42b4206d-7766-41f0-87d6-6ff23b10756e";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.LargeLengthTextDataType.MetaClassGuidString);
		#endregion

	}
	#region LargeLengthTextDataType's Generated Constructor Code
	public  partial class LargeLengthTextDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public LargeLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LargeLengthTextDataType CreateLargeLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateLargeLengthTextDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LargeLengthTextDataType CreateAndInitializeLargeLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeLargeLengthTextDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public LargeLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LargeLengthTextDataType CreateLargeLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (LargeLengthTextDataType)partition.ElementFactory.CreateElement(typeof(LargeLengthTextDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LargeLengthTextDataType CreateAndInitializeLargeLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (LargeLengthTextDataType)partition.ElementFactory.CreateElement(typeof(LargeLengthTextDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for LargeLengthTextDataType
	/// <summary>
	/// LargeLengthTextDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.LargeLengthTextDataType))]
	public sealed class LargeLengthTextDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public LargeLengthTextDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.LargeLengthTextDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static LargeLengthTextDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new LargeLengthTextDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.NumericDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.NumericDataType")]
	public abstract partial class NumericDataType : Northface.Tools.ORM.ObjectModel.DataType
	{
		#region NumericDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "5d6c8146-073b-4f54-ae4e-e97620c42b2c";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.NumericDataType.MetaClassGuidString);
		#endregion

	}
	#region NumericDataType's Generated Constructor Code
	public abstract partial class NumericDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected NumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.SignedIntegerNumericDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.SignedIntegerNumericDataType")]
	public  partial class SignedIntegerNumericDataType : Northface.Tools.ORM.ObjectModel.NumericDataType
	{
		#region SignedIntegerNumericDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "0a1d30c1-a7cb-47bb-ab4a-36a89522e12a";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.SignedIntegerNumericDataType.MetaClassGuidString);
		#endregion

	}
	#region SignedIntegerNumericDataType's Generated Constructor Code
	public  partial class SignedIntegerNumericDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SignedIntegerNumericDataType CreateSignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateSignedIntegerNumericDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SignedIntegerNumericDataType CreateAndInitializeSignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSignedIntegerNumericDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SignedIntegerNumericDataType CreateSignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (SignedIntegerNumericDataType)partition.ElementFactory.CreateElement(typeof(SignedIntegerNumericDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SignedIntegerNumericDataType CreateAndInitializeSignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SignedIntegerNumericDataType)partition.ElementFactory.CreateElement(typeof(SignedIntegerNumericDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SignedIntegerNumericDataType
	/// <summary>
	/// SignedIntegerNumericDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.SignedIntegerNumericDataType))]
	public sealed class SignedIntegerNumericDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SignedIntegerNumericDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.SignedIntegerNumericDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SignedIntegerNumericDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new SignedIntegerNumericDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.UnsignedIntegerNumericDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.UnsignedIntegerNumericDataType")]
	public  partial class UnsignedIntegerNumericDataType : Northface.Tools.ORM.ObjectModel.NumericDataType
	{
		#region UnsignedIntegerNumericDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "773798cc-73bb-49b0-ad72-cb145d0a5f14";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.UnsignedIntegerNumericDataType.MetaClassGuidString);
		#endregion

	}
	#region UnsignedIntegerNumericDataType's Generated Constructor Code
	public  partial class UnsignedIntegerNumericDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public UnsignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UnsignedIntegerNumericDataType CreateUnsignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateUnsignedIntegerNumericDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UnsignedIntegerNumericDataType CreateAndInitializeUnsignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeUnsignedIntegerNumericDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public UnsignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UnsignedIntegerNumericDataType CreateUnsignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (UnsignedIntegerNumericDataType)partition.ElementFactory.CreateElement(typeof(UnsignedIntegerNumericDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UnsignedIntegerNumericDataType CreateAndInitializeUnsignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (UnsignedIntegerNumericDataType)partition.ElementFactory.CreateElement(typeof(UnsignedIntegerNumericDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for UnsignedIntegerNumericDataType
	/// <summary>
	/// UnsignedIntegerNumericDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.UnsignedIntegerNumericDataType))]
	public sealed class UnsignedIntegerNumericDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public UnsignedIntegerNumericDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.UnsignedIntegerNumericDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static UnsignedIntegerNumericDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new UnsignedIntegerNumericDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.AutoCounterNumericDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.AutoCounterNumericDataType")]
	public  partial class AutoCounterNumericDataType : Northface.Tools.ORM.ObjectModel.NumericDataType
	{
		#region AutoCounterNumericDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "ff1b07d5-e8fc-44cb-acec-cb93f6e6e37a";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.AutoCounterNumericDataType.MetaClassGuidString);
		#endregion

	}
	#region AutoCounterNumericDataType's Generated Constructor Code
	public  partial class AutoCounterNumericDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public AutoCounterNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static AutoCounterNumericDataType CreateAutoCounterNumericDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateAutoCounterNumericDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static AutoCounterNumericDataType CreateAndInitializeAutoCounterNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeAutoCounterNumericDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public AutoCounterNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static AutoCounterNumericDataType CreateAutoCounterNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (AutoCounterNumericDataType)partition.ElementFactory.CreateElement(typeof(AutoCounterNumericDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static AutoCounterNumericDataType CreateAndInitializeAutoCounterNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (AutoCounterNumericDataType)partition.ElementFactory.CreateElement(typeof(AutoCounterNumericDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for AutoCounterNumericDataType
	/// <summary>
	/// AutoCounterNumericDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.AutoCounterNumericDataType))]
	public sealed class AutoCounterNumericDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public AutoCounterNumericDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.AutoCounterNumericDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static AutoCounterNumericDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new AutoCounterNumericDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FloatingPointNumericDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.FloatingPointNumericDataType")]
	public  partial class FloatingPointNumericDataType : Northface.Tools.ORM.ObjectModel.NumericDataType
	{
		#region FloatingPointNumericDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "2ead05d6-d343-43ea-8130-fc226751b1cf";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FloatingPointNumericDataType.MetaClassGuidString);
		#endregion

	}
	#region FloatingPointNumericDataType's Generated Constructor Code
	public  partial class FloatingPointNumericDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FloatingPointNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FloatingPointNumericDataType CreateFloatingPointNumericDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFloatingPointNumericDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FloatingPointNumericDataType CreateAndInitializeFloatingPointNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFloatingPointNumericDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FloatingPointNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FloatingPointNumericDataType CreateFloatingPointNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FloatingPointNumericDataType)partition.ElementFactory.CreateElement(typeof(FloatingPointNumericDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FloatingPointNumericDataType CreateAndInitializeFloatingPointNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FloatingPointNumericDataType)partition.ElementFactory.CreateElement(typeof(FloatingPointNumericDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FloatingPointNumericDataType
	/// <summary>
	/// FloatingPointNumericDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.FloatingPointNumericDataType))]
	public sealed class FloatingPointNumericDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FloatingPointNumericDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.FloatingPointNumericDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FloatingPointNumericDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new FloatingPointNumericDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.DecimalNumericDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.DecimalNumericDataType")]
	public  partial class DecimalNumericDataType : Northface.Tools.ORM.ObjectModel.NumericDataType
	{
		#region DecimalNumericDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "8e7c90d2-8c42-4932-8275-ad4fed9227bb";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.DecimalNumericDataType.MetaClassGuidString);
		#endregion

	}
	#region DecimalNumericDataType's Generated Constructor Code
	public  partial class DecimalNumericDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DecimalNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DecimalNumericDataType CreateDecimalNumericDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateDecimalNumericDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DecimalNumericDataType CreateAndInitializeDecimalNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeDecimalNumericDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public DecimalNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DecimalNumericDataType CreateDecimalNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (DecimalNumericDataType)partition.ElementFactory.CreateElement(typeof(DecimalNumericDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DecimalNumericDataType CreateAndInitializeDecimalNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (DecimalNumericDataType)partition.ElementFactory.CreateElement(typeof(DecimalNumericDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for DecimalNumericDataType
	/// <summary>
	/// DecimalNumericDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.DecimalNumericDataType))]
	public sealed class DecimalNumericDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DecimalNumericDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.DecimalNumericDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static DecimalNumericDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new DecimalNumericDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MoneyNumericDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.MoneyNumericDataType")]
	public  partial class MoneyNumericDataType : Northface.Tools.ORM.ObjectModel.NumericDataType
	{
		#region MoneyNumericDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "67f4fed3-53a4-462f-a050-c3de3055620f";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MoneyNumericDataType.MetaClassGuidString);
		#endregion

	}
	#region MoneyNumericDataType's Generated Constructor Code
	public  partial class MoneyNumericDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MoneyNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MoneyNumericDataType CreateMoneyNumericDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateMoneyNumericDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MoneyNumericDataType CreateAndInitializeMoneyNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeMoneyNumericDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public MoneyNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MoneyNumericDataType CreateMoneyNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (MoneyNumericDataType)partition.ElementFactory.CreateElement(typeof(MoneyNumericDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MoneyNumericDataType CreateAndInitializeMoneyNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (MoneyNumericDataType)partition.ElementFactory.CreateElement(typeof(MoneyNumericDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for MoneyNumericDataType
	/// <summary>
	/// MoneyNumericDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.MoneyNumericDataType))]
	public sealed class MoneyNumericDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MoneyNumericDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.MoneyNumericDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static MoneyNumericDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new MoneyNumericDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.RawDataDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.RawDataDataType")]
	public abstract partial class RawDataDataType : Northface.Tools.ORM.ObjectModel.DataType
	{
		#region RawDataDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "fdd0f0c5-33fe-408e-92ea-7fe3e17f80dd";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.RawDataDataType.MetaClassGuidString);
		#endregion

	}
	#region RawDataDataType's Generated Constructor Code
	public abstract partial class RawDataDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected RawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FixedLengthRawDataDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.FixedLengthRawDataDataType")]
	public  partial class FixedLengthRawDataDataType : Northface.Tools.ORM.ObjectModel.RawDataDataType
	{
		#region FixedLengthRawDataDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "44a46583-e878-4f70-90ac-ca08f37feba6";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FixedLengthRawDataDataType.MetaClassGuidString);
		#endregion

	}
	#region FixedLengthRawDataDataType's Generated Constructor Code
	public  partial class FixedLengthRawDataDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FixedLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FixedLengthRawDataDataType CreateFixedLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFixedLengthRawDataDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FixedLengthRawDataDataType CreateAndInitializeFixedLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFixedLengthRawDataDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FixedLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FixedLengthRawDataDataType CreateFixedLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FixedLengthRawDataDataType)partition.ElementFactory.CreateElement(typeof(FixedLengthRawDataDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FixedLengthRawDataDataType CreateAndInitializeFixedLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FixedLengthRawDataDataType)partition.ElementFactory.CreateElement(typeof(FixedLengthRawDataDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FixedLengthRawDataDataType
	/// <summary>
	/// FixedLengthRawDataDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.FixedLengthRawDataDataType))]
	public sealed class FixedLengthRawDataDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FixedLengthRawDataDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.FixedLengthRawDataDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FixedLengthRawDataDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new FixedLengthRawDataDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.VariableLengthRawDataDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.VariableLengthRawDataDataType")]
	public  partial class VariableLengthRawDataDataType : Northface.Tools.ORM.ObjectModel.RawDataDataType
	{
		#region VariableLengthRawDataDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "ac252d1e-c491-495f-988c-3e9649d00720";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.VariableLengthRawDataDataType.MetaClassGuidString);
		#endregion

	}
	#region VariableLengthRawDataDataType's Generated Constructor Code
	public  partial class VariableLengthRawDataDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public VariableLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static VariableLengthRawDataDataType CreateVariableLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateVariableLengthRawDataDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static VariableLengthRawDataDataType CreateAndInitializeVariableLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeVariableLengthRawDataDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public VariableLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static VariableLengthRawDataDataType CreateVariableLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (VariableLengthRawDataDataType)partition.ElementFactory.CreateElement(typeof(VariableLengthRawDataDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static VariableLengthRawDataDataType CreateAndInitializeVariableLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (VariableLengthRawDataDataType)partition.ElementFactory.CreateElement(typeof(VariableLengthRawDataDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for VariableLengthRawDataDataType
	/// <summary>
	/// VariableLengthRawDataDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.VariableLengthRawDataDataType))]
	public sealed class VariableLengthRawDataDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public VariableLengthRawDataDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.VariableLengthRawDataDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static VariableLengthRawDataDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new VariableLengthRawDataDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.LargeLengthRawDataDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.LargeLengthRawDataDataType")]
	public  partial class LargeLengthRawDataDataType : Northface.Tools.ORM.ObjectModel.RawDataDataType
	{
		#region LargeLengthRawDataDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "4133fda1-45bf-48c5-b3ce-4f4a9d891066";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.LargeLengthRawDataDataType.MetaClassGuidString);
		#endregion

	}
	#region LargeLengthRawDataDataType's Generated Constructor Code
	public  partial class LargeLengthRawDataDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public LargeLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LargeLengthRawDataDataType CreateLargeLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateLargeLengthRawDataDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LargeLengthRawDataDataType CreateAndInitializeLargeLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeLargeLengthRawDataDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public LargeLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LargeLengthRawDataDataType CreateLargeLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (LargeLengthRawDataDataType)partition.ElementFactory.CreateElement(typeof(LargeLengthRawDataDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LargeLengthRawDataDataType CreateAndInitializeLargeLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (LargeLengthRawDataDataType)partition.ElementFactory.CreateElement(typeof(LargeLengthRawDataDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for LargeLengthRawDataDataType
	/// <summary>
	/// LargeLengthRawDataDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.LargeLengthRawDataDataType))]
	public sealed class LargeLengthRawDataDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public LargeLengthRawDataDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.LargeLengthRawDataDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static LargeLengthRawDataDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new LargeLengthRawDataDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.PictureRawDataDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.PictureRawDataDataType")]
	public  partial class PictureRawDataDataType : Northface.Tools.ORM.ObjectModel.RawDataDataType
	{
		#region PictureRawDataDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "7e172f50-433b-4d89-acfa-5f1022c379a5";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.PictureRawDataDataType.MetaClassGuidString);
		#endregion

	}
	#region PictureRawDataDataType's Generated Constructor Code
	public  partial class PictureRawDataDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public PictureRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static PictureRawDataDataType CreatePictureRawDataDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreatePictureRawDataDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static PictureRawDataDataType CreateAndInitializePictureRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializePictureRawDataDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public PictureRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static PictureRawDataDataType CreatePictureRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (PictureRawDataDataType)partition.ElementFactory.CreateElement(typeof(PictureRawDataDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static PictureRawDataDataType CreateAndInitializePictureRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (PictureRawDataDataType)partition.ElementFactory.CreateElement(typeof(PictureRawDataDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for PictureRawDataDataType
	/// <summary>
	/// PictureRawDataDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.PictureRawDataDataType))]
	public sealed class PictureRawDataDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public PictureRawDataDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.PictureRawDataDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static PictureRawDataDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new PictureRawDataDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.OleObjectRawDataDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.OleObjectRawDataDataType")]
	public  partial class OleObjectRawDataDataType : Northface.Tools.ORM.ObjectModel.RawDataDataType
	{
		#region OleObjectRawDataDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "560297d3-6e91-4090-8daa-54784f85990d";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.OleObjectRawDataDataType.MetaClassGuidString);
		#endregion

	}
	#region OleObjectRawDataDataType's Generated Constructor Code
	public  partial class OleObjectRawDataDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public OleObjectRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OleObjectRawDataDataType CreateOleObjectRawDataDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateOleObjectRawDataDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OleObjectRawDataDataType CreateAndInitializeOleObjectRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeOleObjectRawDataDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public OleObjectRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OleObjectRawDataDataType CreateOleObjectRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (OleObjectRawDataDataType)partition.ElementFactory.CreateElement(typeof(OleObjectRawDataDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OleObjectRawDataDataType CreateAndInitializeOleObjectRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (OleObjectRawDataDataType)partition.ElementFactory.CreateElement(typeof(OleObjectRawDataDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for OleObjectRawDataDataType
	/// <summary>
	/// OleObjectRawDataDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.OleObjectRawDataDataType))]
	public sealed class OleObjectRawDataDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public OleObjectRawDataDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.OleObjectRawDataDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static OleObjectRawDataDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new OleObjectRawDataDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.TemporalDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.TemporalDataType")]
	public abstract partial class TemporalDataType : Northface.Tools.ORM.ObjectModel.DataType
	{
		#region TemporalDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "10027217-5978-4286-bf21-80738dc9a877";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.TemporalDataType.MetaClassGuidString);
		#endregion

	}
	#region TemporalDataType's Generated Constructor Code
	public abstract partial class TemporalDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected TemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.AutoTimestampTemporalDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.AutoTimestampTemporalDataType")]
	public  partial class AutoTimestampTemporalDataType : Northface.Tools.ORM.ObjectModel.TemporalDataType
	{
		#region AutoTimestampTemporalDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "d3c4e6b2-79cc-4f09-8080-62ce74090fd1";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.AutoTimestampTemporalDataType.MetaClassGuidString);
		#endregion

	}
	#region AutoTimestampTemporalDataType's Generated Constructor Code
	public  partial class AutoTimestampTemporalDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public AutoTimestampTemporalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static AutoTimestampTemporalDataType CreateAutoTimestampTemporalDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateAutoTimestampTemporalDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static AutoTimestampTemporalDataType CreateAndInitializeAutoTimestampTemporalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeAutoTimestampTemporalDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public AutoTimestampTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static AutoTimestampTemporalDataType CreateAutoTimestampTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (AutoTimestampTemporalDataType)partition.ElementFactory.CreateElement(typeof(AutoTimestampTemporalDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static AutoTimestampTemporalDataType CreateAndInitializeAutoTimestampTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (AutoTimestampTemporalDataType)partition.ElementFactory.CreateElement(typeof(AutoTimestampTemporalDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for AutoTimestampTemporalDataType
	/// <summary>
	/// AutoTimestampTemporalDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.AutoTimestampTemporalDataType))]
	public sealed class AutoTimestampTemporalDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public AutoTimestampTemporalDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.AutoTimestampTemporalDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static AutoTimestampTemporalDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new AutoTimestampTemporalDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.TimeTemporalDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.TimeTemporalDataType")]
	public  partial class TimeTemporalDataType : Northface.Tools.ORM.ObjectModel.TemporalDataType
	{
		#region TimeTemporalDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "4677814b-958d-4176-a54e-8f70b7ca0d56";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.TimeTemporalDataType.MetaClassGuidString);
		#endregion

	}
	#region TimeTemporalDataType's Generated Constructor Code
	public  partial class TimeTemporalDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TimeTemporalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TimeTemporalDataType CreateTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateTimeTemporalDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TimeTemporalDataType CreateAndInitializeTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeTimeTemporalDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public TimeTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TimeTemporalDataType CreateTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (TimeTemporalDataType)partition.ElementFactory.CreateElement(typeof(TimeTemporalDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TimeTemporalDataType CreateAndInitializeTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (TimeTemporalDataType)partition.ElementFactory.CreateElement(typeof(TimeTemporalDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for TimeTemporalDataType
	/// <summary>
	/// TimeTemporalDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.TimeTemporalDataType))]
	public sealed class TimeTemporalDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TimeTemporalDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.TimeTemporalDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static TimeTemporalDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new TimeTemporalDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.DateTemporalDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.DateTemporalDataType")]
	public  partial class DateTemporalDataType : Northface.Tools.ORM.ObjectModel.TemporalDataType
	{
		#region DateTemporalDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "905b8a13-7c5e-430f-8d7b-03e63356439b";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.DateTemporalDataType.MetaClassGuidString);
		#endregion

	}
	#region DateTemporalDataType's Generated Constructor Code
	public  partial class DateTemporalDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DateTemporalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DateTemporalDataType CreateDateTemporalDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateDateTemporalDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DateTemporalDataType CreateAndInitializeDateTemporalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeDateTemporalDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public DateTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DateTemporalDataType CreateDateTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (DateTemporalDataType)partition.ElementFactory.CreateElement(typeof(DateTemporalDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DateTemporalDataType CreateAndInitializeDateTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (DateTemporalDataType)partition.ElementFactory.CreateElement(typeof(DateTemporalDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for DateTemporalDataType
	/// <summary>
	/// DateTemporalDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.DateTemporalDataType))]
	public sealed class DateTemporalDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DateTemporalDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.DateTemporalDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static DateTemporalDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new DateTemporalDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.DateAndTimeTemporalDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.DateAndTimeTemporalDataType")]
	public  partial class DateAndTimeTemporalDataType : Northface.Tools.ORM.ObjectModel.TemporalDataType
	{
		#region DateAndTimeTemporalDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "facd55e1-c5a2-4d3d-93d2-7b651c05e7a2";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.DateAndTimeTemporalDataType.MetaClassGuidString);
		#endregion

	}
	#region DateAndTimeTemporalDataType's Generated Constructor Code
	public  partial class DateAndTimeTemporalDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DateAndTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DateAndTimeTemporalDataType CreateDateAndTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateDateAndTimeTemporalDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DateAndTimeTemporalDataType CreateAndInitializeDateAndTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeDateAndTimeTemporalDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public DateAndTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DateAndTimeTemporalDataType CreateDateAndTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (DateAndTimeTemporalDataType)partition.ElementFactory.CreateElement(typeof(DateAndTimeTemporalDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DateAndTimeTemporalDataType CreateAndInitializeDateAndTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (DateAndTimeTemporalDataType)partition.ElementFactory.CreateElement(typeof(DateAndTimeTemporalDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for DateAndTimeTemporalDataType
	/// <summary>
	/// DateAndTimeTemporalDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.DateAndTimeTemporalDataType))]
	public sealed class DateAndTimeTemporalDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DateAndTimeTemporalDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.DateAndTimeTemporalDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static DateAndTimeTemporalDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new DateAndTimeTemporalDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.LogicalDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.LogicalDataType")]
	public abstract partial class LogicalDataType : Northface.Tools.ORM.ObjectModel.DataType
	{
		#region LogicalDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "85881c27-24d8-4a89-a81d-6031128ae967";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.LogicalDataType.MetaClassGuidString);
		#endregion

	}
	#region LogicalDataType's Generated Constructor Code
	public abstract partial class LogicalDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected LogicalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.TrueOrFalseLogicalDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.TrueOrFalseLogicalDataType")]
	public  partial class TrueOrFalseLogicalDataType : Northface.Tools.ORM.ObjectModel.LogicalDataType
	{
		#region TrueOrFalseLogicalDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "a4c50357-f789-472c-a94e-93af109f1056";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.TrueOrFalseLogicalDataType.MetaClassGuidString);
		#endregion

	}
	#region TrueOrFalseLogicalDataType's Generated Constructor Code
	public  partial class TrueOrFalseLogicalDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TrueOrFalseLogicalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TrueOrFalseLogicalDataType CreateTrueOrFalseLogicalDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateTrueOrFalseLogicalDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TrueOrFalseLogicalDataType CreateAndInitializeTrueOrFalseLogicalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeTrueOrFalseLogicalDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public TrueOrFalseLogicalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TrueOrFalseLogicalDataType CreateTrueOrFalseLogicalDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (TrueOrFalseLogicalDataType)partition.ElementFactory.CreateElement(typeof(TrueOrFalseLogicalDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TrueOrFalseLogicalDataType CreateAndInitializeTrueOrFalseLogicalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (TrueOrFalseLogicalDataType)partition.ElementFactory.CreateElement(typeof(TrueOrFalseLogicalDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for TrueOrFalseLogicalDataType
	/// <summary>
	/// TrueOrFalseLogicalDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.TrueOrFalseLogicalDataType))]
	public sealed class TrueOrFalseLogicalDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TrueOrFalseLogicalDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.TrueOrFalseLogicalDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static TrueOrFalseLogicalDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new TrueOrFalseLogicalDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.YesOrNoLogicalDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.YesOrNoLogicalDataType")]
	public  partial class YesOrNoLogicalDataType : Northface.Tools.ORM.ObjectModel.LogicalDataType
	{
		#region YesOrNoLogicalDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "f6d6b7e4-c22b-47e1-8f30-2bcaee1d3c17";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.YesOrNoLogicalDataType.MetaClassGuidString);
		#endregion

	}
	#region YesOrNoLogicalDataType's Generated Constructor Code
	public  partial class YesOrNoLogicalDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public YesOrNoLogicalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static YesOrNoLogicalDataType CreateYesOrNoLogicalDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateYesOrNoLogicalDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static YesOrNoLogicalDataType CreateAndInitializeYesOrNoLogicalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeYesOrNoLogicalDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public YesOrNoLogicalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static YesOrNoLogicalDataType CreateYesOrNoLogicalDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (YesOrNoLogicalDataType)partition.ElementFactory.CreateElement(typeof(YesOrNoLogicalDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static YesOrNoLogicalDataType CreateAndInitializeYesOrNoLogicalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (YesOrNoLogicalDataType)partition.ElementFactory.CreateElement(typeof(YesOrNoLogicalDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for YesOrNoLogicalDataType
	/// <summary>
	/// YesOrNoLogicalDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.YesOrNoLogicalDataType))]
	public sealed class YesOrNoLogicalDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public YesOrNoLogicalDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.YesOrNoLogicalDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static YesOrNoLogicalDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new YesOrNoLogicalDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.OtherDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.OtherDataType")]
	public abstract partial class OtherDataType : Northface.Tools.ORM.ObjectModel.DataType
	{
		#region OtherDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3efdcece-b2e0-45f0-aab1-ca085144b933";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.OtherDataType.MetaClassGuidString);
		#endregion

	}
	#region OtherDataType's Generated Constructor Code
	public abstract partial class OtherDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected OtherDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.RowIdOtherDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.RowIdOtherDataType")]
	public  partial class RowIdOtherDataType : Northface.Tools.ORM.ObjectModel.OtherDataType
	{
		#region RowIdOtherDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "ccdd5096-8948-45cc-835b-321af2c8b656";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.RowIdOtherDataType.MetaClassGuidString);
		#endregion

	}
	#region RowIdOtherDataType's Generated Constructor Code
	public  partial class RowIdOtherDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RowIdOtherDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RowIdOtherDataType CreateRowIdOtherDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateRowIdOtherDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RowIdOtherDataType CreateAndInitializeRowIdOtherDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRowIdOtherDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RowIdOtherDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RowIdOtherDataType CreateRowIdOtherDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (RowIdOtherDataType)partition.ElementFactory.CreateElement(typeof(RowIdOtherDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RowIdOtherDataType CreateAndInitializeRowIdOtherDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RowIdOtherDataType)partition.ElementFactory.CreateElement(typeof(RowIdOtherDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RowIdOtherDataType
	/// <summary>
	/// RowIdOtherDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.RowIdOtherDataType))]
	public sealed class RowIdOtherDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RowIdOtherDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.RowIdOtherDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RowIdOtherDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new RowIdOtherDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectIdOtherDataType.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.ObjectIdOtherDataType")]
	public  partial class ObjectIdOtherDataType : Northface.Tools.ORM.ObjectModel.OtherDataType
	{
		#region ObjectIdOtherDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "2ce276c0-607d-43f3-ae1e-162be0c853ec";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectIdOtherDataType.MetaClassGuidString);
		#endregion

	}
	#region ObjectIdOtherDataType's Generated Constructor Code
	public  partial class ObjectIdOtherDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectIdOtherDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectIdOtherDataType CreateObjectIdOtherDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateObjectIdOtherDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectIdOtherDataType CreateAndInitializeObjectIdOtherDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectIdOtherDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectIdOtherDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectIdOtherDataType CreateObjectIdOtherDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ObjectIdOtherDataType)partition.ElementFactory.CreateElement(typeof(ObjectIdOtherDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectIdOtherDataType CreateAndInitializeObjectIdOtherDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectIdOtherDataType)partition.ElementFactory.CreateElement(typeof(ObjectIdOtherDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectIdOtherDataType
	/// <summary>
	/// ObjectIdOtherDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ObjectIdOtherDataType))]
	public sealed class ObjectIdOtherDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectIdOtherDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ObjectIdOtherDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectIdOtherDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new ObjectIdOtherDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.Expression.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.Expression")]
	public  partial class Expression : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region Expression's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "ddc5ef24-70bb-48aa-8481-2a76021581a3";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.Expression.MetaClassGuidString);
		#endregion

		#region Body's Generated  Field Code
		#region Body's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String BodyMetaAttributeGuidString = "75d72ae2-bc07-493b-a4d1-9b9b1f2e1dd1";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid BodyMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.Expression.BodyMetaAttributeGuidString);
		#endregion

		#region Body's Generated Property Code

		private System.String bodyPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ExpressionBodyFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.Expression.BodyMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.Expression.Body")]
		public  System.String Body
		{
			get
			{
				return bodyPropertyStorage;
			}
		
			set
			{
				expressionBodyFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ExpressionBodyFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Expression.Body field
		/// </summary>
		private static ExpressionBodyFieldHandler	expressionBodyFieldHandler	= ExpressionBodyFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Expression.Body
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ExpressionBodyFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.Expression,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ExpressionBodyFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Expression.Body field handler
			/// </summary>
			/// <value>ExpressionBodyFieldHandler</value>
			public static ExpressionBodyFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.Expression.expressionBodyFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.Expression.expressionBodyFieldHandler;
					}
					else
					{
						// The static constructor in Expression will assign this value to
						// Northface.Tools.ORM.ObjectModel.Expression.expressionBodyFieldHandler, so just instantiate one and return it
						return new ExpressionBodyFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Expression.Body field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.Expression.BodyMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Expression</param>
			protected sealed override System.String GetValue(Northface.Tools.ORM.ObjectModel.Expression element)
			{
				return element.bodyPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.Expression element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.bodyPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.bodyPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Language's Generated  Field Code
		#region Language's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String LanguageMetaAttributeGuidString = "a1dc9629-53d7-48fe-84e2-98423f1d292e";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid LanguageMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.Expression.LanguageMetaAttributeGuidString);
		#endregion

		#region Language's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ExpressionLanguageFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.Expression.LanguageMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.Expression.Language")]
		public  System.String Language
		{
			get
			{
				return expressionLanguageFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				expressionLanguageFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ExpressionLanguageFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Expression.Language field
		/// </summary>
		private static ExpressionLanguageFieldHandler	expressionLanguageFieldHandler	= ExpressionLanguageFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Expression.Language
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ExpressionLanguageFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.Expression,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ExpressionLanguageFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Expression.Language field handler
			/// </summary>
			/// <value>ExpressionLanguageFieldHandler</value>
			public static ExpressionLanguageFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.Expression.expressionLanguageFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.Expression.expressionLanguageFieldHandler;
					}
					else
					{
						// The static constructor in Expression will assign this value to
						// Northface.Tools.ORM.ObjectModel.Expression.expressionLanguageFieldHandler, so just instantiate one and return it
						return new ExpressionLanguageFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Expression.Language field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.Expression.LanguageMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
	}
	#region Expression's Generated Constructor Code
	public  partial class Expression
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public Expression(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Expression CreateExpression(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateExpression(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Expression CreateAndInitializeExpression(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeExpression(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public Expression(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Expression CreateExpression(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (Expression)partition.ElementFactory.CreateElement(typeof(Expression));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Expression CreateAndInitializeExpression(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (Expression)partition.ElementFactory.CreateElement(typeof(Expression), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for Expression
	/// <summary>
	/// Expression Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.Expression))]
	public sealed class ExpressionElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExpressionElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.Expression( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ExpressionElementFactoryCreator Instance
		{
			get
			{
				return new ExpressionElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.Role.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.Role")]
	public  partial class Role : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region Role's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "393d854f-34c5-4dc5-86c6-56816581b957";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.Role.MetaClassGuidString);
		#endregion

		#region RolePlayerDisplay's Generated  Field Code
		#region RolePlayerDisplay's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String RolePlayerDisplayMetaAttributeGuidString = "b892ba33-3d6d-41e0-98a1-54ef51a7ed57";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid RolePlayerDisplayMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.Role.RolePlayerDisplayMetaAttributeGuidString);
		#endregion

		#region RolePlayerDisplay's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Editor(typeof(Northface.Tools.ORM.ObjectModel.Editors.RolePlayerPicker), typeof(System.Drawing.Design.UITypeEditor))]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, AllowNulls=true, FieldHandlerType=typeof(RoleRolePlayerDisplayFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.Role.RolePlayerDisplayMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.Role.RolePlayerDisplay")]
		public  Northface.Tools.ORM.ObjectModel.ObjectType RolePlayerDisplay
		{
			get
			{
				return roleRolePlayerDisplayFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				roleRolePlayerDisplayFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RoleRolePlayerDisplayFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Role.RolePlayerDisplay field
		/// </summary>
		private static RoleRolePlayerDisplayFieldHandler	roleRolePlayerDisplayFieldHandler	= RoleRolePlayerDisplayFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Role.RolePlayerDisplay
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RoleRolePlayerDisplayFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.Role,Northface.Tools.ORM.ObjectModel.ObjectType>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RoleRolePlayerDisplayFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Role.RolePlayerDisplay field handler
			/// </summary>
			/// <value>RoleRolePlayerDisplayFieldHandler</value>
			public static RoleRolePlayerDisplayFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.Role.roleRolePlayerDisplayFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.Role.roleRolePlayerDisplayFieldHandler;
					}
					else
					{
						// The static constructor in Role will assign this value to
						// Northface.Tools.ORM.ObjectModel.Role.roleRolePlayerDisplayFieldHandler, so just instantiate one and return it
						return new RoleRolePlayerDisplayFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Role.RolePlayerDisplay field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.Role.RolePlayerDisplayMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region IsMandatory's Generated  Field Code
		#region IsMandatory's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsMandatoryMetaAttributeGuidString = "d2d267cb-547f-441e-94ab-730d1138672c";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsMandatoryMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.Role.IsMandatoryMetaAttributeGuidString);
		#endregion

		#region IsMandatory's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(RoleIsMandatoryFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.Role.IsMandatoryMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.Role.IsMandatory")]
		public  System.Boolean IsMandatory
		{
			get
			{
				return roleIsMandatoryFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				roleIsMandatoryFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RoleIsMandatoryFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Role.IsMandatory field
		/// </summary>
		private static RoleIsMandatoryFieldHandler	roleIsMandatoryFieldHandler	= RoleIsMandatoryFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Role.IsMandatory
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RoleIsMandatoryFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.Role,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RoleIsMandatoryFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Role.IsMandatory field handler
			/// </summary>
			/// <value>RoleIsMandatoryFieldHandler</value>
			public static RoleIsMandatoryFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.Role.roleIsMandatoryFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.Role.roleIsMandatoryFieldHandler;
					}
					else
					{
						// The static constructor in Role will assign this value to
						// Northface.Tools.ORM.ObjectModel.Role.roleIsMandatoryFieldHandler, so just instantiate one and return it
						return new RoleIsMandatoryFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Role.IsMandatory field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.Role.IsMandatoryMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region Multiplicity's Generated  Field Code
		#region Multiplicity's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MultiplicityMetaAttributeGuidString = "91159767-f6ce-4591-aeb2-ff0ab25f1b44";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MultiplicityMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.Role.MultiplicityMetaAttributeGuidString);
		#endregion

		#region Multiplicity's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.MergableProperty(false)]
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(Northface.Tools.ORM.ObjectModel.RoleMultiplicity),DefaultEnumerationValueName="Unspecified")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(RoleMultiplicityFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.Role.MultiplicityMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.Role.Multiplicity")]
		public  Northface.Tools.ORM.ObjectModel.RoleMultiplicity Multiplicity
		{
			get
			{
				return roleMultiplicityFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				roleMultiplicityFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RoleMultiplicityFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Role.Multiplicity field
		/// </summary>
		private static RoleMultiplicityFieldHandler	roleMultiplicityFieldHandler	= RoleMultiplicityFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Role.Multiplicity
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RoleMultiplicityFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.Role,Northface.Tools.ORM.ObjectModel.RoleMultiplicity>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RoleMultiplicityFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Role.Multiplicity field handler
			/// </summary>
			/// <value>RoleMultiplicityFieldHandler</value>
			public static RoleMultiplicityFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.Role.roleMultiplicityFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.Role.roleMultiplicityFieldHandler;
					}
					else
					{
						// The static constructor in Role will assign this value to
						// Northface.Tools.ORM.ObjectModel.Role.roleMultiplicityFieldHandler, so just instantiate one and return it
						return new RoleMultiplicityFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Role.Multiplicity field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.Role.MultiplicityMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region ValueRangeText's Generated  Field Code
		#region ValueRangeText's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ValueRangeTextMetaAttributeGuidString = "cd66def6-4feb-4791-917d-e71ba634b2cd";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ValueRangeTextMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.Role.ValueRangeTextMetaAttributeGuidString);
		#endregion

		#region ValueRangeText's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.ReadOnly(State=Microsoft.VisualStudio.Modeling.ReadOnlyAttributeValue.SometimesUIReadOnlyPreferTrue)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(RoleValueRangeTextFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.Role.ValueRangeTextMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.Role.ValueRangeText")]
		public  System.String ValueRangeText
		{
			get
			{
				return roleValueRangeTextFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				roleValueRangeTextFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RoleValueRangeTextFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Role.ValueRangeText field
		/// </summary>
		private static RoleValueRangeTextFieldHandler	roleValueRangeTextFieldHandler	= RoleValueRangeTextFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Role.ValueRangeText
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RoleValueRangeTextFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.Role,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RoleValueRangeTextFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Role.ValueRangeText field handler
			/// </summary>
			/// <value>RoleValueRangeTextFieldHandler</value>
			public static RoleValueRangeTextFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.Role.roleValueRangeTextFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.Role.roleValueRangeTextFieldHandler;
					}
					else
					{
						// The static constructor in Role will assign this value to
						// Northface.Tools.ORM.ObjectModel.Role.roleValueRangeTextFieldHandler, so just instantiate one and return it
						return new RoleValueRangeTextFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Role.ValueRangeText field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.Role.ValueRangeTextMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region FactType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.FactType FactType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.FactType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.FactType counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.FactType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasRole), newRoles);
				}
			}
		}
		#endregion
		#region RolePlayer's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ObjectType RolePlayer
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayerMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ObjectType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayerMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ObjectType counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ObjectType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayerMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole), newRoles);
				}
			}
		}
		#endregion
		#region ConstraintRoleSequenceCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceMoveableCollection ConstraintRoleSequenceCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceCollectionMetaRoleGuid); }
		}
		#endregion
		#region ValueRangeDefinition's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.RoleValueRangeDefinition ValueRangeDefinition
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.RoleMetaRoleGuid, Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.RoleValueRangeDefinition;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.RoleMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.RoleValueRangeDefinition counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.RoleValueRangeDefinition;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.RoleMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition), newRoles);
				}
			}
		}
		#endregion
		#region RolePlayerRequiredError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.RolePlayerRequiredError RolePlayerRequiredError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuid, Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.RolePlayerRequiredError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.RolePlayerRequiredError counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.RolePlayerRequiredError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for Role
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.Role Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class RoleMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public RoleMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.Role) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.Role))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.Role) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.Role))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.Role) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.Role))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.Role) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.Role))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.Role) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.Role))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.Role) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.Role))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.Role) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.Role))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.Role) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.Role))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.Role[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.Role at that index</returns>
		public Northface.Tools.ORM.ObjectModel.Role this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.Role)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.Role to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.Role value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.Role to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.Role value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.Role to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.Role value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.Role to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.Role value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.Role to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.Role value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.Role rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.Role rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region Role's Generated Constructor Code
	public  partial class Role
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public Role(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Role CreateRole(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateRole(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Role CreateAndInitializeRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRole(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public Role(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Role CreateRole(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (Role)partition.ElementFactory.CreateElement(typeof(Role));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Role CreateAndInitializeRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (Role)partition.ElementFactory.CreateElement(typeof(Role), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for Role
	/// <summary>
	/// Role Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.Role))]
	public sealed class RoleElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.Role( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RoleElementFactoryCreator Instance
		{
			get
			{
				return new RoleElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence")]
	public abstract partial class ConstraintRoleSequence : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region ConstraintRoleSequence's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "d9ab8420-8604-4016-8827-0d59c77b47f8";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence.MetaClassGuidString);
		#endregion

		#region RoleCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.RoleMoveableCollection RoleCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.RoleMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid); }
		}
		#endregion
		#region PreferredIdentifierFor's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ObjectType PreferredIdentifierFor
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierMetaRoleGuid, Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ObjectType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ObjectType counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ObjectType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for ConstraintRoleSequence
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ConstraintRoleSequenceMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ConstraintRoleSequenceMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence at that index</returns>
		public Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ConstraintRoleSequence's Generated Constructor Code
	public abstract partial class ConstraintRoleSequence
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ConstraintRoleSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.InternalConstraint.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.InternalConstraint")]
	public abstract partial class InternalConstraint : Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence
	{
		#region InternalConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "e17dcd50-eefe-4960-b425-b87f246c6ea0";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.InternalConstraint.MetaClassGuidString);
		#endregion

		#region FactType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.FactType FactType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.InternalConstraintCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.FactTypeMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.FactType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.InternalConstraintCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.FactTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.FactType counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.FactType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.FactTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.InternalConstraintCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for InternalConstraint
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.InternalConstraint Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class InternalConstraintMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public InternalConstraintMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.InternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.InternalConstraint))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.InternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.InternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.InternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.InternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.InternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.InternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.InternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.InternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.InternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.InternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.InternalConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.InternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.InternalConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.InternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.InternalConstraint[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.InternalConstraint at that index</returns>
		public Northface.Tools.ORM.ObjectModel.InternalConstraint this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.InternalConstraint)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.InternalConstraint to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.InternalConstraint value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.InternalConstraint to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.InternalConstraint value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.InternalConstraint to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.InternalConstraint value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.InternalConstraint to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.InternalConstraint value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.InternalConstraint to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.InternalConstraint value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.InternalConstraint rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.InternalConstraint rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region InternalConstraint's Generated Constructor Code
	public abstract partial class InternalConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected InternalConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.SimpleMandatoryConstraint.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.SimpleMandatoryConstraint")]
	public  partial class SimpleMandatoryConstraint : Northface.Tools.ORM.ObjectModel.InternalConstraint
	{
		#region SimpleMandatoryConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "b09e7a1f-184e-4e7f-88e3-6ca763ded9eb";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.SimpleMandatoryConstraint.MetaClassGuidString);
		#endregion

	}
	#region SimpleMandatoryConstraint's Generated Constructor Code
	public  partial class SimpleMandatoryConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SimpleMandatoryConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SimpleMandatoryConstraint CreateSimpleMandatoryConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateSimpleMandatoryConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SimpleMandatoryConstraint CreateAndInitializeSimpleMandatoryConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSimpleMandatoryConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SimpleMandatoryConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SimpleMandatoryConstraint CreateSimpleMandatoryConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (SimpleMandatoryConstraint)partition.ElementFactory.CreateElement(typeof(SimpleMandatoryConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SimpleMandatoryConstraint CreateAndInitializeSimpleMandatoryConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SimpleMandatoryConstraint)partition.ElementFactory.CreateElement(typeof(SimpleMandatoryConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SimpleMandatoryConstraint
	/// <summary>
	/// SimpleMandatoryConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.SimpleMandatoryConstraint))]
	public sealed class SimpleMandatoryConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SimpleMandatoryConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.SimpleMandatoryConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SimpleMandatoryConstraintElementFactoryCreator Instance
		{
			get
			{
				return new SimpleMandatoryConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint")]
	public  partial class InternalUniquenessConstraint : Northface.Tools.ORM.ObjectModel.InternalConstraint
	{
		#region InternalUniquenessConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "9480cf96-adfd-45b6-967e-018dddf27b94";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint.MetaClassGuidString);
		#endregion

		#region IsPreferred's Generated  Field Code
		#region IsPreferred's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsPreferredMetaAttributeGuidString = "c1ba5d02-a7e4-4cd5-ac9f-89ee1d811ee8";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsPreferredMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint.IsPreferredMetaAttributeGuidString);
		#endregion

		#region IsPreferred's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.ReadOnly(State=Microsoft.VisualStudio.Modeling.ReadOnlyAttributeValue.SometimesUIReadOnlyPreferTrue)]
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(InternalUniquenessConstraintIsPreferredFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint.IsPreferredMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint.IsPreferred")]
		public  System.Boolean IsPreferred
		{
			get
			{
				return internalUniquenessConstraintIsPreferredFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				internalUniquenessConstraintIsPreferredFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region InternalUniquenessConstraintIsPreferredFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for InternalUniquenessConstraint.IsPreferred field
		/// </summary>
		private static InternalUniquenessConstraintIsPreferredFieldHandler	internalUniquenessConstraintIsPreferredFieldHandler	= InternalUniquenessConstraintIsPreferredFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for InternalUniquenessConstraint.IsPreferred
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class InternalUniquenessConstraintIsPreferredFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private InternalUniquenessConstraintIsPreferredFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the InternalUniquenessConstraint.IsPreferred field handler
			/// </summary>
			/// <value>InternalUniquenessConstraintIsPreferredFieldHandler</value>
			public static InternalUniquenessConstraintIsPreferredFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint.internalUniquenessConstraintIsPreferredFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint.internalUniquenessConstraintIsPreferredFieldHandler;
					}
					else
					{
						// The static constructor in InternalUniquenessConstraint will assign this value to
						// Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint.internalUniquenessConstraintIsPreferredFieldHandler, so just instantiate one and return it
						return new InternalUniquenessConstraintIsPreferredFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the InternalUniquenessConstraint.IsPreferred field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint.IsPreferredMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region NMinusOneError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.NMinusOneError NMinusOneError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuid, Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.NMinusOneError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.NMinusOneError counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.NMinusOneError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError), newRoles);
				}
			}
		}
		#endregion
	}
	#region InternalUniquenessConstraint's Generated Constructor Code
	public  partial class InternalUniquenessConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public InternalUniquenessConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InternalUniquenessConstraint CreateInternalUniquenessConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateInternalUniquenessConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InternalUniquenessConstraint CreateAndInitializeInternalUniquenessConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeInternalUniquenessConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public InternalUniquenessConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InternalUniquenessConstraint CreateInternalUniquenessConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (InternalUniquenessConstraint)partition.ElementFactory.CreateElement(typeof(InternalUniquenessConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InternalUniquenessConstraint CreateAndInitializeInternalUniquenessConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (InternalUniquenessConstraint)partition.ElementFactory.CreateElement(typeof(InternalUniquenessConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for InternalUniquenessConstraint
	/// <summary>
	/// InternalUniquenessConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint))]
	public sealed class InternalUniquenessConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public InternalUniquenessConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static InternalUniquenessConstraintElementFactoryCreator Instance
		{
			get
			{
				return new InternalUniquenessConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence")]
	public  partial class MultiColumnExternalConstraintRoleSequence : Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence
	{
		#region MultiColumnExternalConstraintRoleSequence's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "34a3c709-1021-4afe-80db-6302f4c681ea";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence.MetaClassGuidString);
		#endregion

		#region ExternalConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint ExternalConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.ExternalConstraintMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.ExternalConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.ExternalConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for MultiColumnExternalConstraintRoleSequence
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class MultiColumnExternalConstraintRoleSequenceMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public MultiColumnExternalConstraintRoleSequenceMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence at that index</returns>
		public Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region MultiColumnExternalConstraintRoleSequence's Generated Constructor Code
	public  partial class MultiColumnExternalConstraintRoleSequence
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalConstraintRoleSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintRoleSequence CreateMultiColumnExternalConstraintRoleSequence(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateMultiColumnExternalConstraintRoleSequence(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintRoleSequence CreateAndInitializeMultiColumnExternalConstraintRoleSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeMultiColumnExternalConstraintRoleSequence(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalConstraintRoleSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintRoleSequence CreateMultiColumnExternalConstraintRoleSequence(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (MultiColumnExternalConstraintRoleSequence)partition.ElementFactory.CreateElement(typeof(MultiColumnExternalConstraintRoleSequence));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintRoleSequence CreateAndInitializeMultiColumnExternalConstraintRoleSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (MultiColumnExternalConstraintRoleSequence)partition.ElementFactory.CreateElement(typeof(MultiColumnExternalConstraintRoleSequence), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for MultiColumnExternalConstraintRoleSequence
	/// <summary>
	/// MultiColumnExternalConstraintRoleSequence Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence))]
	public sealed class MultiColumnExternalConstraintRoleSequenceElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalConstraintRoleSequenceElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static MultiColumnExternalConstraintRoleSequenceElementFactoryCreator Instance
		{
			get
			{
				return new MultiColumnExternalConstraintRoleSequenceElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint")]
	public abstract partial class SingleColumnExternalConstraint : Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence
	{
		#region SingleColumnExternalConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "5b304d59-8d34-45c5-80fc-4a0fe122aa0a";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint.MetaClassGuidString);
		#endregion

		#region FactTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.FactTypeMoveableCollection FactTypeCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.FactTypeMoveableCollection(this, Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint.SingleColumnExternalConstraintCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint.FactTypeCollectionMetaRoleGuid); }
		}
		#endregion
		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ORMModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.SingleColumnExternalConstraintCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.ModelMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ORMModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.SingleColumnExternalConstraintCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ORMModel counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ORMModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.SingleColumnExternalConstraintCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint), newRoles);
				}
			}
		}
		#endregion
		#region DuplicateNameError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError DuplicateNameError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.SingleColumnExternalConstraintCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.SingleColumnExternalConstraintCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.SingleColumnExternalConstraintCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError), newRoles);
				}
			}
		}
		#endregion
		#region CompatibleRolePlayerTypeError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError CompatibleRolePlayerTypeError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.SingleColumnExternalConstraintMetaRoleGuid, Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.SingleColumnExternalConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.SingleColumnExternalConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for SingleColumnExternalConstraint
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class SingleColumnExternalConstraintMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public SingleColumnExternalConstraintMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint at that index</returns>
		public Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region SingleColumnExternalConstraint's Generated Constructor Code
	public abstract partial class SingleColumnExternalConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected SingleColumnExternalConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.RingConstraint.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.RingConstraint")]
	public  partial class RingConstraint : Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint
	{
		#region RingConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c0f29d7a-f057-49a6-87df-7abcbb55d471";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.RingConstraint.MetaClassGuidString);
		#endregion

	}
	#region RingConstraint's Generated Constructor Code
	public  partial class RingConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraint CreateRingConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateRingConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraint CreateAndInitializeRingConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRingConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraint CreateRingConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (RingConstraint)partition.ElementFactory.CreateElement(typeof(RingConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraint CreateAndInitializeRingConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RingConstraint)partition.ElementFactory.CreateElement(typeof(RingConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RingConstraint
	/// <summary>
	/// RingConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.RingConstraint))]
	public sealed class RingConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.RingConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RingConstraintElementFactoryCreator Instance
		{
			get
			{
				return new RingConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FrequencyConstraint.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.FrequencyConstraint")]
	public  partial class FrequencyConstraint : Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint
	{
		#region FrequencyConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "cee1eaf8-155f-4646-acb3-bf2e87be032a";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FrequencyConstraint.MetaClassGuidString);
		#endregion

		#region MinFrequency's Generated  Field Code
		#region MinFrequency's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MinFrequencyMetaAttributeGuidString = "473b1d1e-6848-45ed-83dd-3def2334cf79";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MinFrequencyMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FrequencyConstraint.MinFrequencyMetaAttributeGuidString);
		#endregion

		#region MinFrequency's Generated Property Code

		private System.Int32 minFrequencyPropertyStorage = 1;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.IntegerDomainAttribute(MinValue=1,DefaultInt=1)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(FrequencyConstraintMinFrequencyFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FrequencyConstraint.MinFrequencyMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.FrequencyConstraint.MinFrequency")]
		public  System.Int32 MinFrequency
		{
			get
			{
				return minFrequencyPropertyStorage;
			}
		
			set
			{
				frequencyConstraintMinFrequencyFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FrequencyConstraintMinFrequencyFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FrequencyConstraint.MinFrequency field
		/// </summary>
		private static FrequencyConstraintMinFrequencyFieldHandler	frequencyConstraintMinFrequencyFieldHandler	= FrequencyConstraintMinFrequencyFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FrequencyConstraint.MinFrequency
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FrequencyConstraintMinFrequencyFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.FrequencyConstraint,System.Int32>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FrequencyConstraintMinFrequencyFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FrequencyConstraint.MinFrequency field handler
			/// </summary>
			/// <value>FrequencyConstraintMinFrequencyFieldHandler</value>
			public static FrequencyConstraintMinFrequencyFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.FrequencyConstraint.frequencyConstraintMinFrequencyFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.FrequencyConstraint.frequencyConstraintMinFrequencyFieldHandler;
					}
					else
					{
						// The static constructor in FrequencyConstraint will assign this value to
						// Northface.Tools.ORM.ObjectModel.FrequencyConstraint.frequencyConstraintMinFrequencyFieldHandler, so just instantiate one and return it
						return new FrequencyConstraintMinFrequencyFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FrequencyConstraint.MinFrequency field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.FrequencyConstraint.MinFrequencyMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the FrequencyConstraint</param>
			protected sealed override System.Int32 GetValue(Northface.Tools.ORM.ObjectModel.FrequencyConstraint element)
			{
				return element.minFrequencyPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.FrequencyConstraint element, System.Int32 value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Int32 oldValue)
			{
				oldValue = element.minFrequencyPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.minFrequencyPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region MaxFrequency's Generated  Field Code
		#region MaxFrequency's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MaxFrequencyMetaAttributeGuidString = "7c65f145-1e17-4ea6-8863-2c3c6974b22c";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MaxFrequencyMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FrequencyConstraint.MaxFrequencyMetaAttributeGuidString);
		#endregion

		#region MaxFrequency's Generated Property Code

		private System.Int32 maxFrequencyPropertyStorage = 0;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.IntegerDomainAttribute(MinValue=0)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(FrequencyConstraintMaxFrequencyFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FrequencyConstraint.MaxFrequencyMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.FrequencyConstraint.MaxFrequency")]
		public  System.Int32 MaxFrequency
		{
			get
			{
				return maxFrequencyPropertyStorage;
			}
		
			set
			{
				frequencyConstraintMaxFrequencyFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FrequencyConstraintMaxFrequencyFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FrequencyConstraint.MaxFrequency field
		/// </summary>
		private static FrequencyConstraintMaxFrequencyFieldHandler	frequencyConstraintMaxFrequencyFieldHandler	= FrequencyConstraintMaxFrequencyFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FrequencyConstraint.MaxFrequency
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FrequencyConstraintMaxFrequencyFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.FrequencyConstraint,System.Int32>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FrequencyConstraintMaxFrequencyFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FrequencyConstraint.MaxFrequency field handler
			/// </summary>
			/// <value>FrequencyConstraintMaxFrequencyFieldHandler</value>
			public static FrequencyConstraintMaxFrequencyFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.FrequencyConstraint.frequencyConstraintMaxFrequencyFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.FrequencyConstraint.frequencyConstraintMaxFrequencyFieldHandler;
					}
					else
					{
						// The static constructor in FrequencyConstraint will assign this value to
						// Northface.Tools.ORM.ObjectModel.FrequencyConstraint.frequencyConstraintMaxFrequencyFieldHandler, so just instantiate one and return it
						return new FrequencyConstraintMaxFrequencyFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FrequencyConstraint.MaxFrequency field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.FrequencyConstraint.MaxFrequencyMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the FrequencyConstraint</param>
			protected sealed override System.Int32 GetValue(Northface.Tools.ORM.ObjectModel.FrequencyConstraint element)
			{
				return element.maxFrequencyPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.FrequencyConstraint element, System.Int32 value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Int32 oldValue)
			{
				oldValue = element.maxFrequencyPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.maxFrequencyPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
	}
	#region FrequencyConstraint's Generated Constructor Code
	public  partial class FrequencyConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraint CreateFrequencyConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFrequencyConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraint CreateAndInitializeFrequencyConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFrequencyConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraint CreateFrequencyConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FrequencyConstraint)partition.ElementFactory.CreateElement(typeof(FrequencyConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraint CreateAndInitializeFrequencyConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FrequencyConstraint)partition.ElementFactory.CreateElement(typeof(FrequencyConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FrequencyConstraint
	/// <summary>
	/// FrequencyConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.FrequencyConstraint))]
	public sealed class FrequencyConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.FrequencyConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FrequencyConstraintElementFactoryCreator Instance
		{
			get
			{
				return new FrequencyConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraint.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraint")]
	public  partial class ExternalUniquenessConstraint : Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint
	{
		#region ExternalUniquenessConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c50782de-5fd3-4076-a062-dd8983367363";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraint.MetaClassGuidString);
		#endregion

		#region IsPreferred's Generated  Field Code
		#region IsPreferred's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsPreferredMetaAttributeGuidString = "81ceefc5-e227-4a8e-be95-1a63066bc9b7";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsPreferredMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraint.IsPreferredMetaAttributeGuidString);
		#endregion

		#region IsPreferred's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.ReadOnly(State=Microsoft.VisualStudio.Modeling.ReadOnlyAttributeValue.SometimesUIReadOnlyPreferTrue)]
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ExternalUniquenessConstraintIsPreferredFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraint.IsPreferredMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraint.IsPreferred")]
		public  System.Boolean IsPreferred
		{
			get
			{
				return externalUniquenessConstraintIsPreferredFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				externalUniquenessConstraintIsPreferredFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ExternalUniquenessConstraintIsPreferredFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ExternalUniquenessConstraint.IsPreferred field
		/// </summary>
		private static ExternalUniquenessConstraintIsPreferredFieldHandler	externalUniquenessConstraintIsPreferredFieldHandler	= ExternalUniquenessConstraintIsPreferredFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ExternalUniquenessConstraint.IsPreferred
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ExternalUniquenessConstraintIsPreferredFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraint,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ExternalUniquenessConstraintIsPreferredFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ExternalUniquenessConstraint.IsPreferred field handler
			/// </summary>
			/// <value>ExternalUniquenessConstraintIsPreferredFieldHandler</value>
			public static ExternalUniquenessConstraintIsPreferredFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraint.externalUniquenessConstraintIsPreferredFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraint.externalUniquenessConstraintIsPreferredFieldHandler;
					}
					else
					{
						// The static constructor in ExternalUniquenessConstraint will assign this value to
						// Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraint.externalUniquenessConstraintIsPreferredFieldHandler, so just instantiate one and return it
						return new ExternalUniquenessConstraintIsPreferredFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ExternalUniquenessConstraint.IsPreferred field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraint.IsPreferredMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
	}
	#region ExternalUniquenessConstraint's Generated Constructor Code
	public  partial class ExternalUniquenessConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalUniquenessConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalUniquenessConstraint CreateExternalUniquenessConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateExternalUniquenessConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalUniquenessConstraint CreateAndInitializeExternalUniquenessConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeExternalUniquenessConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalUniquenessConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalUniquenessConstraint CreateExternalUniquenessConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ExternalUniquenessConstraint)partition.ElementFactory.CreateElement(typeof(ExternalUniquenessConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalUniquenessConstraint CreateAndInitializeExternalUniquenessConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ExternalUniquenessConstraint)partition.ElementFactory.CreateElement(typeof(ExternalUniquenessConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ExternalUniquenessConstraint
	/// <summary>
	/// ExternalUniquenessConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraint))]
	public sealed class ExternalUniquenessConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalUniquenessConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ExternalUniquenessConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ExternalUniquenessConstraintElementFactoryCreator Instance
		{
			get
			{
				return new ExternalUniquenessConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.DisjunctiveMandatoryConstraint.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.DisjunctiveMandatoryConstraint")]
	public  partial class DisjunctiveMandatoryConstraint : Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint
	{
		#region DisjunctiveMandatoryConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "749901ac-66bb-4d86-a42c-127456eb5451";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.DisjunctiveMandatoryConstraint.MetaClassGuidString);
		#endregion

	}
	#region DisjunctiveMandatoryConstraint's Generated Constructor Code
	public  partial class DisjunctiveMandatoryConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DisjunctiveMandatoryConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DisjunctiveMandatoryConstraint CreateDisjunctiveMandatoryConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateDisjunctiveMandatoryConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DisjunctiveMandatoryConstraint CreateAndInitializeDisjunctiveMandatoryConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeDisjunctiveMandatoryConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public DisjunctiveMandatoryConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DisjunctiveMandatoryConstraint CreateDisjunctiveMandatoryConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (DisjunctiveMandatoryConstraint)partition.ElementFactory.CreateElement(typeof(DisjunctiveMandatoryConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DisjunctiveMandatoryConstraint CreateAndInitializeDisjunctiveMandatoryConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (DisjunctiveMandatoryConstraint)partition.ElementFactory.CreateElement(typeof(DisjunctiveMandatoryConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for DisjunctiveMandatoryConstraint
	/// <summary>
	/// DisjunctiveMandatoryConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.DisjunctiveMandatoryConstraint))]
	public sealed class DisjunctiveMandatoryConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DisjunctiveMandatoryConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.DisjunctiveMandatoryConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static DisjunctiveMandatoryConstraintElementFactoryCreator Instance
		{
			get
			{
				return new DisjunctiveMandatoryConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.Reading.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.Reading")]
	public  partial class Reading : Microsoft.VisualStudio.Modeling.ModelElement
	{
		#region Reading's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "cef616d5-3fe8-489e-bd60-3333921b675e";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.Reading.MetaClassGuidString);
		#endregion

		#region Text's Generated  Field Code
		#region Text's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String TextMetaAttributeGuidString = "deb9d5ff-64f8-4887-b41a-8ea3689efa4d";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid TextMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.Reading.TextMetaAttributeGuidString);
		#endregion

		#region Text's Generated Property Code

		private System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ReadingTextFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.Reading.TextMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.Reading.Text")]
		public  System.String Text
		{
			get
			{
				return textPropertyStorage;
			}
		
			set
			{
				readingTextFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ReadingTextFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Reading.Text field
		/// </summary>
		private static ReadingTextFieldHandler	readingTextFieldHandler	= ReadingTextFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Reading.Text
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ReadingTextFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.Reading,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ReadingTextFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Reading.Text field handler
			/// </summary>
			/// <value>ReadingTextFieldHandler</value>
			public static ReadingTextFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.Reading.readingTextFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.Reading.readingTextFieldHandler;
					}
					else
					{
						// The static constructor in Reading will assign this value to
						// Northface.Tools.ORM.ObjectModel.Reading.readingTextFieldHandler, so just instantiate one and return it
						return new ReadingTextFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Reading.Text field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.Reading.TextMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Reading</param>
			protected sealed override System.String GetValue(Northface.Tools.ORM.ObjectModel.Reading element)
			{
				return element.textPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.Reading element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.textPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.textPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region IsPrimary's Generated  Field Code
		#region IsPrimary's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsPrimaryMetaAttributeGuidString = "fb40e877-7171-473d-88b5-bea06782e468";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsPrimaryMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.Reading.IsPrimaryMetaAttributeGuidString);
		#endregion

		#region IsPrimary's Generated Property Code

		private System.Boolean isPrimaryPropertyStorage = false;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.ReadOnly(State=Microsoft.VisualStudio.Modeling.ReadOnlyAttributeValue.SometimesUIReadOnlyPreferFalse)]
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ReadingIsPrimaryFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.Reading.IsPrimaryMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.Reading.IsPrimary")]
		public  System.Boolean IsPrimary
		{
			get
			{
				return isPrimaryPropertyStorage;
			}
		
			set
			{
				readingIsPrimaryFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ReadingIsPrimaryFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Reading.IsPrimary field
		/// </summary>
		private static ReadingIsPrimaryFieldHandler	readingIsPrimaryFieldHandler	= ReadingIsPrimaryFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Reading.IsPrimary
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ReadingIsPrimaryFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.Reading,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ReadingIsPrimaryFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Reading.IsPrimary field handler
			/// </summary>
			/// <value>ReadingIsPrimaryFieldHandler</value>
			public static ReadingIsPrimaryFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.Reading.readingIsPrimaryFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.Reading.readingIsPrimaryFieldHandler;
					}
					else
					{
						// The static constructor in Reading will assign this value to
						// Northface.Tools.ORM.ObjectModel.Reading.readingIsPrimaryFieldHandler, so just instantiate one and return it
						return new ReadingIsPrimaryFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Reading.IsPrimary field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.Reading.IsPrimaryMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Reading</param>
			protected sealed override System.Boolean GetValue(Northface.Tools.ORM.ObjectModel.Reading element)
			{
				return element.isPrimaryPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.Reading element, System.Boolean value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Boolean oldValue)
			{
				oldValue = element.isPrimaryPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.isPrimaryPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Language's Generated  Field Code
		#region Language's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String LanguageMetaAttributeGuidString = "28f89850-a91e-4b64-a917-43a97cfb192e";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid LanguageMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.Reading.LanguageMetaAttributeGuidString);
		#endregion

		#region Language's Generated Property Code

		private System.String languagePropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ReadingLanguageFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.Reading.LanguageMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.Reading.Language")]
		public  System.String Language
		{
			get
			{
				return languagePropertyStorage;
			}
		
			set
			{
				readingLanguageFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ReadingLanguageFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Reading.Language field
		/// </summary>
		private static ReadingLanguageFieldHandler	readingLanguageFieldHandler	= ReadingLanguageFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Reading.Language
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ReadingLanguageFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.Reading,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ReadingLanguageFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Reading.Language field handler
			/// </summary>
			/// <value>ReadingLanguageFieldHandler</value>
			public static ReadingLanguageFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.Reading.readingLanguageFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.Reading.readingLanguageFieldHandler;
					}
					else
					{
						// The static constructor in Reading will assign this value to
						// Northface.Tools.ORM.ObjectModel.Reading.readingLanguageFieldHandler, so just instantiate one and return it
						return new ReadingLanguageFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Reading.Language field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.Reading.LanguageMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Reading</param>
			protected sealed override System.String GetValue(Northface.Tools.ORM.ObjectModel.Reading element)
			{
				return element.languagePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.Reading element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.languagePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.languagePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region RoleCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.RoleMoveableCollection RoleCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.RoleMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ReadingHasRole.ReadingCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ReadingHasRole.RoleCollectionMetaRoleGuid); }
		}
		#endregion
		#region ReadingOrder's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ReadingOrder ReadingOrder
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ReadingOrder;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ReadingOrder counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ReadingOrder;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading), newRoles);
				}
			}
		}
		#endregion
		#region TooManyRolesError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.TooManyReadingRolesError TooManyRolesError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.TooManyReadingRolesError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.TooManyReadingRolesError counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.TooManyReadingRolesError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError), newRoles);
				}
			}
		}
		#endregion
		#region TooFewRolesError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.TooFewReadingRolesError TooFewRolesError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.TooFewReadingRolesError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.TooFewReadingRolesError counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.TooFewReadingRolesError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for Reading
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.Reading Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ReadingMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ReadingMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.Reading) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.Reading))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.Reading) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.Reading))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.Reading) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.Reading))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.Reading) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.Reading))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.Reading) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.Reading))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.Reading) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.Reading))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.Reading) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.Reading))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.Reading) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.Reading))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.Reading[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.Reading at that index</returns>
		public Northface.Tools.ORM.ObjectModel.Reading this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.Reading)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.Reading to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.Reading value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.Reading to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.Reading value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.Reading to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.Reading value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.Reading to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.Reading value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.Reading to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.Reading value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.Reading rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.Reading rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region Reading's Generated Constructor Code
	public  partial class Reading
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public Reading(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Reading CreateReading(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateReading(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Reading CreateAndInitializeReading(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReading(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public Reading(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Reading CreateReading(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (Reading)partition.ElementFactory.CreateElement(typeof(Reading));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Reading CreateAndInitializeReading(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (Reading)partition.ElementFactory.CreateElement(typeof(Reading), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for Reading
	/// <summary>
	/// Reading Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.Reading))]
	public sealed class ReadingElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.Reading( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReadingElementFactoryCreator Instance
		{
			get
			{
				return new ReadingElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelError.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.ModelError")]
	public abstract partial class ModelError : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region ModelError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "50b3feea-fa3a-4c87-bb8c-74b26c12b330";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelError.MetaClassGuidString);
		#endregion

		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ORMModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ModelHasError.ErrorCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasError.ModelMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ORMModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ModelHasError.ErrorCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ModelHasError.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ORMModel counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ORMModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ModelHasError.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ModelHasError.ErrorCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ModelHasError), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for ModelError
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.ModelError Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ModelErrorMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ModelErrorMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ModelError) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ModelError))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ModelError) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ModelError))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ModelError) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ModelError))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ModelError) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ModelError))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ModelError) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ModelError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ModelError) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ModelError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ModelError) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ModelError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ModelError) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ModelError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.ModelError[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.ModelError at that index</returns>
		public Northface.Tools.ORM.ObjectModel.ModelError this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.ModelError)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ModelError to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.ModelError value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ModelError to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.ModelError value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ModelError to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.ModelError value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ModelError to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.ModelError value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ModelError to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.ModelError value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.ModelError rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.ModelError rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ModelError's Generated Constructor Code
	public abstract partial class ModelError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ModelError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.TooFewRoleSequencesError.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.TooFewRoleSequencesError")]
	public  partial class TooFewRoleSequencesError : Northface.Tools.ORM.ObjectModel.ModelError
	{
		#region TooFewRoleSequencesError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "a2f137b4-5973-4e4f-90aa-6bc936bf8e79";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.TooFewRoleSequencesError.MetaClassGuidString);
		#endregion

		#region Constraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint Constraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.ConstraintMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.ConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.ConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError), newRoles);
				}
			}
		}
		#endregion
	}
	#region TooFewRoleSequencesError's Generated Constructor Code
	public  partial class TooFewRoleSequencesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooFewRoleSequencesError CreateTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateTooFewRoleSequencesError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooFewRoleSequencesError CreateAndInitializeTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeTooFewRoleSequencesError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public TooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooFewRoleSequencesError CreateTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (TooFewRoleSequencesError)partition.ElementFactory.CreateElement(typeof(TooFewRoleSequencesError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooFewRoleSequencesError CreateAndInitializeTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (TooFewRoleSequencesError)partition.ElementFactory.CreateElement(typeof(TooFewRoleSequencesError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for TooFewRoleSequencesError
	/// <summary>
	/// TooFewRoleSequencesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.TooFewRoleSequencesError))]
	public sealed class TooFewRoleSequencesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TooFewRoleSequencesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.TooFewRoleSequencesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static TooFewRoleSequencesErrorElementFactoryCreator Instance
		{
			get
			{
				return new TooFewRoleSequencesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.TooManyRoleSequencesError.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.TooManyRoleSequencesError")]
	public  partial class TooManyRoleSequencesError : Northface.Tools.ORM.ObjectModel.ModelError
	{
		#region TooManyRoleSequencesError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c0e9f4b2-c8e8-4126-bde2-ec5de62d2b58";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.TooManyRoleSequencesError.MetaClassGuidString);
		#endregion

		#region Constraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint Constraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.ConstraintMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.ConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.ConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError), newRoles);
				}
			}
		}
		#endregion
	}
	#region TooManyRoleSequencesError's Generated Constructor Code
	public  partial class TooManyRoleSequencesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooManyRoleSequencesError CreateTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateTooManyRoleSequencesError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooManyRoleSequencesError CreateAndInitializeTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeTooManyRoleSequencesError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public TooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooManyRoleSequencesError CreateTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (TooManyRoleSequencesError)partition.ElementFactory.CreateElement(typeof(TooManyRoleSequencesError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooManyRoleSequencesError CreateAndInitializeTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (TooManyRoleSequencesError)partition.ElementFactory.CreateElement(typeof(TooManyRoleSequencesError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for TooManyRoleSequencesError
	/// <summary>
	/// TooManyRoleSequencesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.TooManyRoleSequencesError))]
	public sealed class TooManyRoleSequencesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TooManyRoleSequencesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.TooManyRoleSequencesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static TooManyRoleSequencesErrorElementFactoryCreator Instance
		{
			get
			{
				return new TooManyRoleSequencesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.DuplicateNameError.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.DuplicateNameError")]
	public abstract partial class DuplicateNameError : Northface.Tools.ORM.ObjectModel.ModelError
	{
		#region DuplicateNameError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "cbd2724e-6199-4f12-a3aa-7522187bea20";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.DuplicateNameError.MetaClassGuidString);
		#endregion

	}
	#region DuplicateNameError's Generated Constructor Code
	public abstract partial class DuplicateNameError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected DuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError")]
	public  partial class ObjectTypeDuplicateNameError : Northface.Tools.ORM.ObjectModel.DuplicateNameError
	{
		#region ObjectTypeDuplicateNameError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "29be74c2-24cc-4b4b-ab61-7750ca7ec339";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError.MetaClassGuidString);
		#endregion

		#region ObjectTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ObjectTypeMoveableCollection ObjectTypeCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.ObjectTypeMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region ObjectTypeDuplicateNameError's Generated Constructor Code
	public  partial class ObjectTypeDuplicateNameError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeDuplicateNameError CreateObjectTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateObjectTypeDuplicateNameError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeDuplicateNameError CreateAndInitializeObjectTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectTypeDuplicateNameError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeDuplicateNameError CreateObjectTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ObjectTypeDuplicateNameError)partition.ElementFactory.CreateElement(typeof(ObjectTypeDuplicateNameError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeDuplicateNameError CreateAndInitializeObjectTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectTypeDuplicateNameError)partition.ElementFactory.CreateElement(typeof(ObjectTypeDuplicateNameError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectTypeDuplicateNameError
	/// <summary>
	/// ObjectTypeDuplicateNameError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError))]
	public sealed class ObjectTypeDuplicateNameErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeDuplicateNameErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectTypeDuplicateNameErrorElementFactoryCreator Instance
		{
			get
			{
				return new ObjectTypeDuplicateNameErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeDuplicateNameError.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeDuplicateNameError")]
	public  partial class FactTypeDuplicateNameError : Northface.Tools.ORM.ObjectModel.DuplicateNameError
	{
		#region FactTypeDuplicateNameError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "51040183-4ecf-4128-9e5f-89369fcf152b";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeDuplicateNameError.MetaClassGuidString);
		#endregion

		#region FactTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.FactTypeMoveableCollection FactTypeCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.FactTypeMoveableCollection(this, Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.FactTypeCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region FactTypeDuplicateNameError's Generated Constructor Code
	public  partial class FactTypeDuplicateNameError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeDuplicateNameError CreateFactTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFactTypeDuplicateNameError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeDuplicateNameError CreateAndInitializeFactTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeDuplicateNameError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeDuplicateNameError CreateFactTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FactTypeDuplicateNameError)partition.ElementFactory.CreateElement(typeof(FactTypeDuplicateNameError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeDuplicateNameError CreateAndInitializeFactTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeDuplicateNameError)partition.ElementFactory.CreateElement(typeof(FactTypeDuplicateNameError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeDuplicateNameError
	/// <summary>
	/// FactTypeDuplicateNameError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.FactTypeDuplicateNameError))]
	public sealed class FactTypeDuplicateNameErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeDuplicateNameErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.FactTypeDuplicateNameError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeDuplicateNameErrorElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeDuplicateNameErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError")]
	public  partial class ConstraintDuplicateNameError : Northface.Tools.ORM.ObjectModel.DuplicateNameError
	{
		#region ConstraintDuplicateNameError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "0ecf0d2d-b3a3-4652-9e77-48fa7765d08f";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError.MetaClassGuidString);
		#endregion

		#region SingleColumnExternalConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintMoveableCollection SingleColumnExternalConstraintCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintMoveableCollection(this, Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.SingleColumnExternalConstraintCollectionMetaRoleGuid); }
		}
		#endregion
		#region MultiColumnExternalConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintMoveableCollection MultiColumnExternalConstraintCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintMoveableCollection(this, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.MultiColumnExternalConstraintCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region ConstraintDuplicateNameError's Generated Constructor Code
	public  partial class ConstraintDuplicateNameError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConstraintDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConstraintDuplicateNameError CreateConstraintDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateConstraintDuplicateNameError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConstraintDuplicateNameError CreateAndInitializeConstraintDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeConstraintDuplicateNameError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ConstraintDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConstraintDuplicateNameError CreateConstraintDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ConstraintDuplicateNameError)partition.ElementFactory.CreateElement(typeof(ConstraintDuplicateNameError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConstraintDuplicateNameError CreateAndInitializeConstraintDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ConstraintDuplicateNameError)partition.ElementFactory.CreateElement(typeof(ConstraintDuplicateNameError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ConstraintDuplicateNameError
	/// <summary>
	/// ConstraintDuplicateNameError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError))]
	public sealed class ConstraintDuplicateNameErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConstraintDuplicateNameErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ConstraintDuplicateNameErrorElementFactoryCreator Instance
		{
			get
			{
				return new ConstraintDuplicateNameErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.TooFewReadingRolesError.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.TooFewReadingRolesError")]
	public  partial class TooFewReadingRolesError : Northface.Tools.ORM.ObjectModel.ModelError
	{
		#region TooFewReadingRolesError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "55d96499-dc85-4a2a-b999-5a34afa800e5";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.TooFewReadingRolesError.MetaClassGuidString);
		#endregion

		#region Reading's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.Reading Reading
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.Reading;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.Reading counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.Reading;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError), newRoles);
				}
			}
		}
		#endregion
	}
	#region TooFewReadingRolesError's Generated Constructor Code
	public  partial class TooFewReadingRolesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TooFewReadingRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooFewReadingRolesError CreateTooFewReadingRolesError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateTooFewReadingRolesError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooFewReadingRolesError CreateAndInitializeTooFewReadingRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeTooFewReadingRolesError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public TooFewReadingRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooFewReadingRolesError CreateTooFewReadingRolesError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (TooFewReadingRolesError)partition.ElementFactory.CreateElement(typeof(TooFewReadingRolesError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooFewReadingRolesError CreateAndInitializeTooFewReadingRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (TooFewReadingRolesError)partition.ElementFactory.CreateElement(typeof(TooFewReadingRolesError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for TooFewReadingRolesError
	/// <summary>
	/// TooFewReadingRolesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.TooFewReadingRolesError))]
	public sealed class TooFewReadingRolesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TooFewReadingRolesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.TooFewReadingRolesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static TooFewReadingRolesErrorElementFactoryCreator Instance
		{
			get
			{
				return new TooFewReadingRolesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.TooManyReadingRolesError.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.TooManyReadingRolesError")]
	public  partial class TooManyReadingRolesError : Northface.Tools.ORM.ObjectModel.ModelError
	{
		#region TooManyReadingRolesError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "9422c67e-b405-4897-bb0c-bcce18d98537";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.TooManyReadingRolesError.MetaClassGuidString);
		#endregion

		#region Reading's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.Reading Reading
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.Reading;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.Reading counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.Reading;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError), newRoles);
				}
			}
		}
		#endregion
	}
	#region TooManyReadingRolesError's Generated Constructor Code
	public  partial class TooManyReadingRolesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TooManyReadingRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooManyReadingRolesError CreateTooManyReadingRolesError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateTooManyReadingRolesError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooManyReadingRolesError CreateAndInitializeTooManyReadingRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeTooManyReadingRolesError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public TooManyReadingRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooManyReadingRolesError CreateTooManyReadingRolesError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (TooManyReadingRolesError)partition.ElementFactory.CreateElement(typeof(TooManyReadingRolesError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooManyReadingRolesError CreateAndInitializeTooManyReadingRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (TooManyReadingRolesError)partition.ElementFactory.CreateElement(typeof(TooManyReadingRolesError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for TooManyReadingRolesError
	/// <summary>
	/// TooManyReadingRolesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.TooManyReadingRolesError))]
	public sealed class TooManyReadingRolesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TooManyReadingRolesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.TooManyReadingRolesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static TooManyReadingRolesErrorElementFactoryCreator Instance
		{
			get
			{
				return new TooManyReadingRolesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError")]
	public  partial class ExternalConstraintRoleSequenceArityMismatchError : Northface.Tools.ORM.ObjectModel.ModelError
	{
		#region ExternalConstraintRoleSequenceArityMismatchError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "e7a403dd-6e87-4ae3-b985-6438fff37379";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError.MetaClassGuidString);
		#endregion

		#region Constraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint Constraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError), newRoles);
				}
			}
		}
		#endregion
	}
	#region ExternalConstraintRoleSequenceArityMismatchError's Generated Constructor Code
	public  partial class ExternalConstraintRoleSequenceArityMismatchError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintRoleSequenceArityMismatchError CreateExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateExternalConstraintRoleSequenceArityMismatchError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintRoleSequenceArityMismatchError CreateAndInitializeExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeExternalConstraintRoleSequenceArityMismatchError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintRoleSequenceArityMismatchError CreateExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ExternalConstraintRoleSequenceArityMismatchError)partition.ElementFactory.CreateElement(typeof(ExternalConstraintRoleSequenceArityMismatchError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintRoleSequenceArityMismatchError CreateAndInitializeExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ExternalConstraintRoleSequenceArityMismatchError)partition.ElementFactory.CreateElement(typeof(ExternalConstraintRoleSequenceArityMismatchError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ExternalConstraintRoleSequenceArityMismatchError
	/// <summary>
	/// ExternalConstraintRoleSequenceArityMismatchError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError))]
	public sealed class ExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator Instance
		{
			get
			{
				return new ExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeRequiresReadingError.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeRequiresReadingError")]
	public  partial class FactTypeRequiresReadingError : Northface.Tools.ORM.ObjectModel.ModelError
	{
		#region FactTypeRequiresReadingError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "81bf4cab-ab44-4a83-9d4e-1399dbcb4719";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeRequiresReadingError.MetaClassGuidString);
		#endregion

		#region FactType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.FactType FactType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.FactType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.FactType counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.FactType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError), newRoles);
				}
			}
		}
		#endregion
	}
	#region FactTypeRequiresReadingError's Generated Constructor Code
	public  partial class FactTypeRequiresReadingError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeRequiresReadingError CreateFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFactTypeRequiresReadingError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeRequiresReadingError CreateAndInitializeFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeRequiresReadingError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeRequiresReadingError CreateFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FactTypeRequiresReadingError)partition.ElementFactory.CreateElement(typeof(FactTypeRequiresReadingError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeRequiresReadingError CreateAndInitializeFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeRequiresReadingError)partition.ElementFactory.CreateElement(typeof(FactTypeRequiresReadingError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeRequiresReadingError
	/// <summary>
	/// FactTypeRequiresReadingError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.FactTypeRequiresReadingError))]
	public sealed class FactTypeRequiresReadingErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeRequiresReadingErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.FactTypeRequiresReadingError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeRequiresReadingErrorElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeRequiresReadingErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError")]
	public  partial class FactTypeRequiresInternalUniquenessConstraintError : Northface.Tools.ORM.ObjectModel.ModelError
	{
		#region FactTypeRequiresInternalUniquenessConstraintError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c0ede09d-e8cd-49d2-9cb6-cd1071e799f9";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError.MetaClassGuidString);
		#endregion

		#region FactType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.FactType FactType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.FactType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.FactType counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.FactType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), newRoles);
				}
			}
		}
		#endregion
	}
	#region FactTypeRequiresInternalUniquenessConstraintError's Generated Constructor Code
	public  partial class FactTypeRequiresInternalUniquenessConstraintError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeRequiresInternalUniquenessConstraintError CreateFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFactTypeRequiresInternalUniquenessConstraintError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeRequiresInternalUniquenessConstraintError CreateAndInitializeFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeRequiresInternalUniquenessConstraintError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeRequiresInternalUniquenessConstraintError CreateFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FactTypeRequiresInternalUniquenessConstraintError)partition.ElementFactory.CreateElement(typeof(FactTypeRequiresInternalUniquenessConstraintError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeRequiresInternalUniquenessConstraintError CreateAndInitializeFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeRequiresInternalUniquenessConstraintError)partition.ElementFactory.CreateElement(typeof(FactTypeRequiresInternalUniquenessConstraintError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeRequiresInternalUniquenessConstraintError
	/// <summary>
	/// FactTypeRequiresInternalUniquenessConstraintError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError))]
	public sealed class FactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError")]
	public  partial class DataTypeNotSpecifiedError : Northface.Tools.ORM.ObjectModel.ModelError
	{
		#region DataTypeNotSpecifiedError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "d28dadd0-133b-419a-927b-c7189f4344f1";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError.MetaClassGuidString);
		#endregion

		#region ValueTypeHasDataType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType ValueTypeHasDataType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError), newRoles);
				}
			}
		}
		#endregion
	}
	#region DataTypeNotSpecifiedError's Generated Constructor Code
	public  partial class DataTypeNotSpecifiedError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DataTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DataTypeNotSpecifiedError CreateDataTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateDataTypeNotSpecifiedError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DataTypeNotSpecifiedError CreateAndInitializeDataTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeDataTypeNotSpecifiedError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public DataTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DataTypeNotSpecifiedError CreateDataTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (DataTypeNotSpecifiedError)partition.ElementFactory.CreateElement(typeof(DataTypeNotSpecifiedError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DataTypeNotSpecifiedError CreateAndInitializeDataTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (DataTypeNotSpecifiedError)partition.ElementFactory.CreateElement(typeof(DataTypeNotSpecifiedError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for DataTypeNotSpecifiedError
	/// <summary>
	/// DataTypeNotSpecifiedError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError))]
	public sealed class DataTypeNotSpecifiedErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DataTypeNotSpecifiedErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static DataTypeNotSpecifiedErrorElementFactoryCreator Instance
		{
			get
			{
				return new DataTypeNotSpecifiedErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.NMinusOneError.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.NMinusOneError")]
	public  partial class NMinusOneError : Northface.Tools.ORM.ObjectModel.ModelError
	{
		#region NMinusOneError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c47f58f9-5d4d-442f-ad88-fefc94d63250";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.NMinusOneError.MetaClassGuidString);
		#endregion

		#region Constraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint Constraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError), newRoles);
				}
			}
		}
		#endregion
	}
	#region NMinusOneError's Generated Constructor Code
	public  partial class NMinusOneError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public NMinusOneError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static NMinusOneError CreateNMinusOneError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateNMinusOneError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static NMinusOneError CreateAndInitializeNMinusOneError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeNMinusOneError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public NMinusOneError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static NMinusOneError CreateNMinusOneError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (NMinusOneError)partition.ElementFactory.CreateElement(typeof(NMinusOneError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static NMinusOneError CreateAndInitializeNMinusOneError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (NMinusOneError)partition.ElementFactory.CreateElement(typeof(NMinusOneError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for NMinusOneError
	/// <summary>
	/// NMinusOneError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.NMinusOneError))]
	public sealed class NMinusOneErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public NMinusOneErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.NMinusOneError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static NMinusOneErrorElementFactoryCreator Instance
		{
			get
			{
				return new NMinusOneErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError")]
	public  partial class CompatibleRolePlayerTypeError : Northface.Tools.ORM.ObjectModel.ModelError
	{
		#region CompatibleRolePlayerTypeError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "edfc4b63-9538-4ae4-9dc3-0e8d0594bf35";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.MetaClassGuidString);
		#endregion

		#region Column's Generated  Field Code
		#region Column's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ColumnMetaAttributeGuidString = "236436ed-1514-470f-97a4-6c7285723fc4";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ColumnMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.ColumnMetaAttributeGuidString);
		#endregion

		#region Column's Generated Property Code

		private System.Int32 columnPropertyStorage = 0;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.IntegerDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(CompatibleRolePlayerTypeErrorColumnFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.ColumnMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.Column")]
		public  System.Int32 Column
		{
			get
			{
				return columnPropertyStorage;
			}
		
			set
			{
				compatibleRolePlayerTypeErrorColumnFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region CompatibleRolePlayerTypeErrorColumnFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for CompatibleRolePlayerTypeError.Column field
		/// </summary>
		private static CompatibleRolePlayerTypeErrorColumnFieldHandler	compatibleRolePlayerTypeErrorColumnFieldHandler	= CompatibleRolePlayerTypeErrorColumnFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for CompatibleRolePlayerTypeError.Column
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class CompatibleRolePlayerTypeErrorColumnFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError,System.Int32>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private CompatibleRolePlayerTypeErrorColumnFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the CompatibleRolePlayerTypeError.Column field handler
			/// </summary>
			/// <value>CompatibleRolePlayerTypeErrorColumnFieldHandler</value>
			public static CompatibleRolePlayerTypeErrorColumnFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.compatibleRolePlayerTypeErrorColumnFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.compatibleRolePlayerTypeErrorColumnFieldHandler;
					}
					else
					{
						// The static constructor in CompatibleRolePlayerTypeError will assign this value to
						// Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.compatibleRolePlayerTypeErrorColumnFieldHandler, so just instantiate one and return it
						return new CompatibleRolePlayerTypeErrorColumnFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the CompatibleRolePlayerTypeError.Column field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.ColumnMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the CompatibleRolePlayerTypeError</param>
			protected sealed override System.Int32 GetValue(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError element)
			{
				return element.columnPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError element, System.Int32 value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Int32 oldValue)
			{
				oldValue = element.columnPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.columnPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region MultiColumnExternalConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint MultiColumnExternalConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.MultiColumnExternalConstraintMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.MultiColumnExternalConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.MultiColumnExternalConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError), newRoles);
				}
			}
		}
		#endregion
		#region SingleColumnExternalConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint SingleColumnExternalConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.SingleColumnExternalConstraintMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.SingleColumnExternalConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.SingleColumnExternalConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for CompatibleRolePlayerTypeError
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class CompatibleRolePlayerTypeErrorMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public CompatibleRolePlayerTypeErrorMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError at that index</returns>
		public Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region CompatibleRolePlayerTypeError's Generated Constructor Code
	public  partial class CompatibleRolePlayerTypeError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CompatibleRolePlayerTypeError CreateCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateCompatibleRolePlayerTypeError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CompatibleRolePlayerTypeError CreateAndInitializeCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeCompatibleRolePlayerTypeError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public CompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CompatibleRolePlayerTypeError CreateCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (CompatibleRolePlayerTypeError)partition.ElementFactory.CreateElement(typeof(CompatibleRolePlayerTypeError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CompatibleRolePlayerTypeError CreateAndInitializeCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (CompatibleRolePlayerTypeError)partition.ElementFactory.CreateElement(typeof(CompatibleRolePlayerTypeError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for CompatibleRolePlayerTypeError
	/// <summary>
	/// CompatibleRolePlayerTypeError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))]
	public sealed class CompatibleRolePlayerTypeErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CompatibleRolePlayerTypeErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static CompatibleRolePlayerTypeErrorElementFactoryCreator Instance
		{
			get
			{
				return new CompatibleRolePlayerTypeErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.RolePlayerRequiredError.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.RolePlayerRequiredError")]
	public  partial class RolePlayerRequiredError : Northface.Tools.ORM.ObjectModel.ModelError
	{
		#region RolePlayerRequiredError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "11a3fe3f-7986-4c12-9c6a-d89b56db29a0";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.RolePlayerRequiredError.MetaClassGuidString);
		#endregion

		#region Role's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.Role Role
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid, Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.Role;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.Role counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.Role;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError), newRoles);
				}
			}
		}
		#endregion
	}
	#region RolePlayerRequiredError's Generated Constructor Code
	public  partial class RolePlayerRequiredError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RolePlayerRequiredError CreateRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateRolePlayerRequiredError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RolePlayerRequiredError CreateAndInitializeRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRolePlayerRequiredError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RolePlayerRequiredError CreateRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (RolePlayerRequiredError)partition.ElementFactory.CreateElement(typeof(RolePlayerRequiredError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RolePlayerRequiredError CreateAndInitializeRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RolePlayerRequiredError)partition.ElementFactory.CreateElement(typeof(RolePlayerRequiredError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RolePlayerRequiredError
	/// <summary>
	/// RolePlayerRequiredError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.RolePlayerRequiredError))]
	public sealed class RolePlayerRequiredErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RolePlayerRequiredErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.RolePlayerRequiredError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RolePlayerRequiredErrorElementFactoryCreator Instance
		{
			get
			{
				return new RolePlayerRequiredErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReadingOrder.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.ReadingOrder")]
	public  partial class ReadingOrder : Microsoft.VisualStudio.Modeling.ModelElement
	{
		#region ReadingOrder's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "624a498e-0659-4c34-ab74-7fe43b4c8fa1";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReadingOrder.MetaClassGuidString);
		#endregion

		#region ReadingText's Generated  Field Code
		#region ReadingText's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ReadingTextMetaAttributeGuidString = "b426931f-9232-4e42-b384-61c60d331aae";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ReadingTextMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReadingOrder.ReadingTextMetaAttributeGuidString);
		#endregion

		#region ReadingText's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Editor(typeof(Northface.Tools.ORM.ObjectModel.Editors.ReadingTextEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ReadingOrderReadingTextFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReadingOrder.ReadingTextMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ReadingOrder.ReadingText")]
		public  System.String ReadingText
		{
			get
			{
				return readingOrderReadingTextFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				readingOrderReadingTextFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ReadingOrderReadingTextFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ReadingOrder.ReadingText field
		/// </summary>
		private static ReadingOrderReadingTextFieldHandler	readingOrderReadingTextFieldHandler	= ReadingOrderReadingTextFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ReadingOrder.ReadingText
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ReadingOrderReadingTextFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.ReadingOrder,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ReadingOrderReadingTextFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ReadingOrder.ReadingText field handler
			/// </summary>
			/// <value>ReadingOrderReadingTextFieldHandler</value>
			public static ReadingOrderReadingTextFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ReadingOrder.readingOrderReadingTextFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ReadingOrder.readingOrderReadingTextFieldHandler;
					}
					else
					{
						// The static constructor in ReadingOrder will assign this value to
						// Northface.Tools.ORM.ObjectModel.ReadingOrder.readingOrderReadingTextFieldHandler, so just instantiate one and return it
						return new ReadingOrderReadingTextFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ReadingOrder.ReadingText field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ReadingOrder.ReadingTextMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region ReadingCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ReadingMoveableCollection ReadingCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.ReadingMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuid); }
		}
		#endregion
		#region RoleCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.RoleMoveableCollection RoleCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.RoleMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole.ReadingOrderMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole.RoleCollectionMetaRoleGuid); }
		}
		#endregion
		#region FactType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.FactType FactType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.FactType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.FactType counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.FactType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for ReadingOrder
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.ReadingOrder Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ReadingOrderMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ReadingOrderMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.ReadingOrder[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.ReadingOrder at that index</returns>
		public Northface.Tools.ORM.ObjectModel.ReadingOrder this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.ReadingOrder)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ReadingOrder to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.ReadingOrder value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ReadingOrder to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.ReadingOrder value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ReadingOrder to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.ReadingOrder value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ReadingOrder to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.ReadingOrder value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ReadingOrder to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.ReadingOrder value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.ReadingOrder rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.ReadingOrder rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ReadingOrder's Generated Constructor Code
	public  partial class ReadingOrder
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrder CreateReadingOrder(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateReadingOrder(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrder CreateAndInitializeReadingOrder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReadingOrder(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrder CreateReadingOrder(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ReadingOrder)partition.ElementFactory.CreateElement(typeof(ReadingOrder));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrder CreateAndInitializeReadingOrder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ReadingOrder)partition.ElementFactory.CreateElement(typeof(ReadingOrder), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ReadingOrder
	/// <summary>
	/// ReadingOrder Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ReadingOrder))]
	public sealed class ReadingOrderElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrderElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ReadingOrder( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReadingOrderElementFactoryCreator Instance
		{
			get
			{
				return new ReadingOrderElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReferenceModeKind.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.ReferenceModeKind")]
	public  partial class ReferenceModeKind : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region ReferenceModeKind's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3fc5ec28-7c78-49e7-955c-4c54536c8d21";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReferenceModeKind.MetaClassGuidString);
		#endregion

		#region FormatString's Generated  Field Code
		#region FormatString's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String FormatStringMetaAttributeGuidString = "76827916-449c-4e9a-ab21-01ac01cc5817";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid FormatStringMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReferenceModeKind.FormatStringMetaAttributeGuidString);
		#endregion

		#region FormatString's Generated Property Code

		private System.String formatStringPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ReferenceModeKindFormatStringFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReferenceModeKind.FormatStringMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ReferenceModeKind.FormatString")]
		public  System.String FormatString
		{
			get
			{
				return formatStringPropertyStorage;
			}
		
			set
			{
				referenceModeKindFormatStringFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ReferenceModeKindFormatStringFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ReferenceModeKind.FormatString field
		/// </summary>
		private static ReferenceModeKindFormatStringFieldHandler	referenceModeKindFormatStringFieldHandler	= ReferenceModeKindFormatStringFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ReferenceModeKind.FormatString
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ReferenceModeKindFormatStringFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.ReferenceModeKind,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ReferenceModeKindFormatStringFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ReferenceModeKind.FormatString field handler
			/// </summary>
			/// <value>ReferenceModeKindFormatStringFieldHandler</value>
			public static ReferenceModeKindFormatStringFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ReferenceModeKind.referenceModeKindFormatStringFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ReferenceModeKind.referenceModeKindFormatStringFieldHandler;
					}
					else
					{
						// The static constructor in ReferenceModeKind will assign this value to
						// Northface.Tools.ORM.ObjectModel.ReferenceModeKind.referenceModeKindFormatStringFieldHandler, so just instantiate one and return it
						return new ReferenceModeKindFormatStringFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ReferenceModeKind.FormatString field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ReferenceModeKind.FormatStringMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ReferenceModeKind</param>
			protected sealed override System.String GetValue(Northface.Tools.ORM.ObjectModel.ReferenceModeKind element)
			{
				return element.formatStringPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.ReferenceModeKind element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.formatStringPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.formatStringPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region ReferenceModeType's Generated  Field Code
		#region ReferenceModeType's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ReferenceModeTypeMetaAttributeGuidString = "ccb8e858-ddf2-4810-8231-99ccabc73142";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ReferenceModeTypeMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReferenceModeKind.ReferenceModeTypeMetaAttributeGuidString);
		#endregion

		#region ReferenceModeType's Generated Property Code

		private Northface.Tools.ORM.ObjectModel.ReferenceModeType referenceModeTypePropertyStorage = Northface.Tools.ORM.ObjectModel.ReferenceModeType.General;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeType),DefaultEnumerationValueName="General")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ReferenceModeKindReferenceModeTypeFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReferenceModeKind.ReferenceModeTypeMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ReferenceModeKind.ReferenceModeType")]
		public  Northface.Tools.ORM.ObjectModel.ReferenceModeType ReferenceModeType
		{
			get
			{
				return referenceModeTypePropertyStorage;
			}
		
			set
			{
				referenceModeKindReferenceModeTypeFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ReferenceModeKindReferenceModeTypeFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ReferenceModeKind.ReferenceModeType field
		/// </summary>
		private static ReferenceModeKindReferenceModeTypeFieldHandler	referenceModeKindReferenceModeTypeFieldHandler	= ReferenceModeKindReferenceModeTypeFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ReferenceModeKind.ReferenceModeType
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ReferenceModeKindReferenceModeTypeFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.ReferenceModeKind,Northface.Tools.ORM.ObjectModel.ReferenceModeType>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ReferenceModeKindReferenceModeTypeFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ReferenceModeKind.ReferenceModeType field handler
			/// </summary>
			/// <value>ReferenceModeKindReferenceModeTypeFieldHandler</value>
			public static ReferenceModeKindReferenceModeTypeFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ReferenceModeKind.referenceModeKindReferenceModeTypeFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ReferenceModeKind.referenceModeKindReferenceModeTypeFieldHandler;
					}
					else
					{
						// The static constructor in ReferenceModeKind will assign this value to
						// Northface.Tools.ORM.ObjectModel.ReferenceModeKind.referenceModeKindReferenceModeTypeFieldHandler, so just instantiate one and return it
						return new ReferenceModeKindReferenceModeTypeFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ReferenceModeKind.ReferenceModeType field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ReferenceModeKind.ReferenceModeTypeMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ReferenceModeKind</param>
			protected sealed override Northface.Tools.ORM.ObjectModel.ReferenceModeType GetValue(Northface.Tools.ORM.ObjectModel.ReferenceModeKind element)
			{
				return element.referenceModeTypePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.ReferenceModeKind element, Northface.Tools.ORM.ObjectModel.ReferenceModeType value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref Northface.Tools.ORM.ObjectModel.ReferenceModeType oldValue)
			{
				oldValue = element.referenceModeTypePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.referenceModeTypePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ORMModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ORMModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ORMModel counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ORMModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind), newRoles);
				}
			}
		}
		#endregion
		#region ReferenceModeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ReferenceModeMoveableCollection ReferenceModeCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.ReferenceModeMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.KindMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region Collection Classes for ReferenceModeKind
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.ReferenceModeKind Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ReferenceModeKindMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ReferenceModeKindMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.ReferenceModeKind[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.ReferenceModeKind at that index</returns>
		public Northface.Tools.ORM.ObjectModel.ReferenceModeKind this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.ReferenceModeKind)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ReferenceModeKind to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.ReferenceModeKind value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ReferenceModeKind to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.ReferenceModeKind value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ReferenceModeKind to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.ReferenceModeKind value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ReferenceModeKind to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.ReferenceModeKind value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ReferenceModeKind to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.ReferenceModeKind value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.ReferenceModeKind rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.ReferenceModeKind rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ReferenceModeKind's Generated Constructor Code
	public  partial class ReferenceModeKind
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReferenceModeKind CreateReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateReferenceModeKind(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReferenceModeKind CreateAndInitializeReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReferenceModeKind(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReferenceModeKind CreateReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ReferenceModeKind)partition.ElementFactory.CreateElement(typeof(ReferenceModeKind));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReferenceModeKind CreateAndInitializeReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ReferenceModeKind)partition.ElementFactory.CreateElement(typeof(ReferenceModeKind), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ReferenceModeKind
	/// <summary>
	/// ReferenceModeKind Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeKind))]
	public sealed class ReferenceModeKindElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReferenceModeKindElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ReferenceModeKind( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReferenceModeKindElementFactoryCreator Instance
		{
			get
			{
				return new ReferenceModeKindElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReferenceMode.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.ReferenceMode")]
	public abstract partial class ReferenceMode : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region ReferenceMode's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "f6388323-e223-4e06-bbc8-055339c5bedb";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReferenceMode.MetaClassGuidString);
		#endregion

		#region KindDisplay's Generated  Field Code
		#region KindDisplay's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String KindDisplayMetaAttributeGuidString = "0212a64d-baf9-42a1-890f-92b8d6b5ee2d";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid KindDisplayMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReferenceMode.KindDisplayMetaAttributeGuidString);
		#endregion

		#region KindDisplay's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Editor(typeof(Northface.Tools.ORM.ObjectModel.Editors.ReferenceModeKindPicker), typeof(System.Drawing.Design.UITypeEditor))]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, AllowNulls=true, FieldHandlerType=typeof(ReferenceModeKindDisplayFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReferenceMode.KindDisplayMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ReferenceMode.KindDisplay")]
		public  Northface.Tools.ORM.ObjectModel.ReferenceModeKind KindDisplay
		{
			get
			{
				return referenceModeKindDisplayFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				referenceModeKindDisplayFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ReferenceModeKindDisplayFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ReferenceMode.KindDisplay field
		/// </summary>
		private static ReferenceModeKindDisplayFieldHandler	referenceModeKindDisplayFieldHandler	= ReferenceModeKindDisplayFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ReferenceMode.KindDisplay
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ReferenceModeKindDisplayFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.ReferenceMode,Northface.Tools.ORM.ObjectModel.ReferenceModeKind>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ReferenceModeKindDisplayFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ReferenceMode.KindDisplay field handler
			/// </summary>
			/// <value>ReferenceModeKindDisplayFieldHandler</value>
			public static ReferenceModeKindDisplayFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ReferenceMode.referenceModeKindDisplayFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ReferenceMode.referenceModeKindDisplayFieldHandler;
					}
					else
					{
						// The static constructor in ReferenceMode will assign this value to
						// Northface.Tools.ORM.ObjectModel.ReferenceMode.referenceModeKindDisplayFieldHandler, so just instantiate one and return it
						return new ReferenceModeKindDisplayFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ReferenceMode.KindDisplay field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ReferenceMode.KindDisplayMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ORMModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ORMModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ORMModel counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ORMModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for ReferenceMode
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.ReferenceMode Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ReferenceModeMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ReferenceModeMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ReferenceMode))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.ReferenceMode[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.ReferenceMode at that index</returns>
		public Northface.Tools.ORM.ObjectModel.ReferenceMode this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.ReferenceMode)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ReferenceMode to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.ReferenceMode value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ReferenceMode to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.ReferenceMode value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ReferenceMode to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.ReferenceMode value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ReferenceMode to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.ReferenceMode value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ReferenceMode to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.ReferenceMode value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.ReferenceMode rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.ReferenceMode rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ReferenceMode's Generated Constructor Code
	public abstract partial class ReferenceMode
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.IntrinsicReferenceMode.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.IntrinsicReferenceMode")]
	public  partial class IntrinsicReferenceMode : Northface.Tools.ORM.ObjectModel.ReferenceMode
	{
		#region IntrinsicReferenceMode's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3e08027c-e2c5-4237-a640-2a22a6f534af";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.IntrinsicReferenceMode.MetaClassGuidString);
		#endregion

	}
	#region IntrinsicReferenceMode's Generated Constructor Code
	public  partial class IntrinsicReferenceMode
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public IntrinsicReferenceMode(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static IntrinsicReferenceMode CreateIntrinsicReferenceMode(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateIntrinsicReferenceMode(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static IntrinsicReferenceMode CreateAndInitializeIntrinsicReferenceMode(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeIntrinsicReferenceMode(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public IntrinsicReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static IntrinsicReferenceMode CreateIntrinsicReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (IntrinsicReferenceMode)partition.ElementFactory.CreateElement(typeof(IntrinsicReferenceMode));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static IntrinsicReferenceMode CreateAndInitializeIntrinsicReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (IntrinsicReferenceMode)partition.ElementFactory.CreateElement(typeof(IntrinsicReferenceMode), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for IntrinsicReferenceMode
	/// <summary>
	/// IntrinsicReferenceMode Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.IntrinsicReferenceMode))]
	public sealed class IntrinsicReferenceModeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public IntrinsicReferenceModeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.IntrinsicReferenceMode( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static IntrinsicReferenceModeElementFactoryCreator Instance
		{
			get
			{
				return new IntrinsicReferenceModeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.CustomReferenceMode.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.CustomReferenceMode")]
	public  partial class CustomReferenceMode : Northface.Tools.ORM.ObjectModel.ReferenceMode
	{
		#region CustomReferenceMode's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "6c7bae68-81a4-4bfa-b75b-c231cc77a3b3";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.CustomReferenceMode.MetaClassGuidString);
		#endregion

		#region CustomFormatString's Generated  Field Code
		#region CustomFormatString's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String CustomFormatStringMetaAttributeGuidString = "92e785d7-3457-4e91-b99b-17a8bb46e65b";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid CustomFormatStringMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.CustomReferenceMode.CustomFormatStringMetaAttributeGuidString);
		#endregion

		#region CustomFormatString's Generated Property Code

		private System.String customFormatStringPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(CustomReferenceModeCustomFormatStringFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.CustomReferenceMode.CustomFormatStringMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.CustomReferenceMode.CustomFormatString")]
		public  System.String CustomFormatString
		{
			get
			{
				return customFormatStringPropertyStorage;
			}
		
			set
			{
				customReferenceModeCustomFormatStringFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region CustomReferenceModeCustomFormatStringFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for CustomReferenceMode.CustomFormatString field
		/// </summary>
		private static CustomReferenceModeCustomFormatStringFieldHandler	customReferenceModeCustomFormatStringFieldHandler	= CustomReferenceModeCustomFormatStringFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for CustomReferenceMode.CustomFormatString
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class CustomReferenceModeCustomFormatStringFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.CustomReferenceMode,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private CustomReferenceModeCustomFormatStringFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the CustomReferenceMode.CustomFormatString field handler
			/// </summary>
			/// <value>CustomReferenceModeCustomFormatStringFieldHandler</value>
			public static CustomReferenceModeCustomFormatStringFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.CustomReferenceMode.customReferenceModeCustomFormatStringFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.CustomReferenceMode.customReferenceModeCustomFormatStringFieldHandler;
					}
					else
					{
						// The static constructor in CustomReferenceMode will assign this value to
						// Northface.Tools.ORM.ObjectModel.CustomReferenceMode.customReferenceModeCustomFormatStringFieldHandler, so just instantiate one and return it
						return new CustomReferenceModeCustomFormatStringFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the CustomReferenceMode.CustomFormatString field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.CustomReferenceMode.CustomFormatStringMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the CustomReferenceMode</param>
			protected sealed override System.String GetValue(Northface.Tools.ORM.ObjectModel.CustomReferenceMode element)
			{
				return element.customFormatStringPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.CustomReferenceMode element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.customFormatStringPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.customFormatStringPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
	}
	#region CustomReferenceMode's Generated Constructor Code
	public  partial class CustomReferenceMode
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CustomReferenceMode(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CustomReferenceMode CreateCustomReferenceMode(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateCustomReferenceMode(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CustomReferenceMode CreateAndInitializeCustomReferenceMode(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeCustomReferenceMode(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public CustomReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CustomReferenceMode CreateCustomReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (CustomReferenceMode)partition.ElementFactory.CreateElement(typeof(CustomReferenceMode));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CustomReferenceMode CreateAndInitializeCustomReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (CustomReferenceMode)partition.ElementFactory.CreateElement(typeof(CustomReferenceMode), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for CustomReferenceMode
	/// <summary>
	/// CustomReferenceMode Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.CustomReferenceMode))]
	public sealed class CustomReferenceModeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CustomReferenceModeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.CustomReferenceMode( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static CustomReferenceModeElementFactoryCreator Instance
		{
			get
			{
				return new CustomReferenceModeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueRange.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.ValueRange")]
	public  partial class ValueRange : Microsoft.VisualStudio.Modeling.ModelElement
	{
		#region ValueRange's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "1d6eaad6-7c7f-4762-8e61-2755a063b2c2";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueRange.MetaClassGuidString);
		#endregion

		#region MinValue's Generated  Field Code
		#region MinValue's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MinValueMetaAttributeGuidString = "56a75fd4-b0e5-4744-afb6-00b4ae09b284";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MinValueMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueRange.MinValueMetaAttributeGuidString);
		#endregion

		#region MinValue's Generated Property Code

		private System.String minValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ValueRangeMinValueFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueRange.MinValueMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ValueRange.MinValue")]
		public  System.String MinValue
		{
			get
			{
				return minValuePropertyStorage;
			}
		
			set
			{
				valueRangeMinValueFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ValueRangeMinValueFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ValueRange.MinValue field
		/// </summary>
		private static ValueRangeMinValueFieldHandler	valueRangeMinValueFieldHandler	= ValueRangeMinValueFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ValueRange.MinValue
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ValueRangeMinValueFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.ValueRange,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ValueRangeMinValueFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ValueRange.MinValue field handler
			/// </summary>
			/// <value>ValueRangeMinValueFieldHandler</value>
			public static ValueRangeMinValueFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ValueRange.valueRangeMinValueFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ValueRange.valueRangeMinValueFieldHandler;
					}
					else
					{
						// The static constructor in ValueRange will assign this value to
						// Northface.Tools.ORM.ObjectModel.ValueRange.valueRangeMinValueFieldHandler, so just instantiate one and return it
						return new ValueRangeMinValueFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ValueRange.MinValue field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ValueRange.MinValueMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ValueRange</param>
			protected sealed override System.String GetValue(Northface.Tools.ORM.ObjectModel.ValueRange element)
			{
				return element.minValuePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.ValueRange element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.minValuePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.minValuePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region MaxValue's Generated  Field Code
		#region MaxValue's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MaxValueMetaAttributeGuidString = "cf33a7ff-00d6-4c2c-9eac-30969ea6da0f";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MaxValueMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueRange.MaxValueMetaAttributeGuidString);
		#endregion

		#region MaxValue's Generated Property Code

		private System.String maxValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ValueRangeMaxValueFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueRange.MaxValueMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ValueRange.MaxValue")]
		public  System.String MaxValue
		{
			get
			{
				return maxValuePropertyStorage;
			}
		
			set
			{
				valueRangeMaxValueFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ValueRangeMaxValueFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ValueRange.MaxValue field
		/// </summary>
		private static ValueRangeMaxValueFieldHandler	valueRangeMaxValueFieldHandler	= ValueRangeMaxValueFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ValueRange.MaxValue
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ValueRangeMaxValueFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.ValueRange,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ValueRangeMaxValueFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ValueRange.MaxValue field handler
			/// </summary>
			/// <value>ValueRangeMaxValueFieldHandler</value>
			public static ValueRangeMaxValueFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ValueRange.valueRangeMaxValueFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ValueRange.valueRangeMaxValueFieldHandler;
					}
					else
					{
						// The static constructor in ValueRange will assign this value to
						// Northface.Tools.ORM.ObjectModel.ValueRange.valueRangeMaxValueFieldHandler, so just instantiate one and return it
						return new ValueRangeMaxValueFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ValueRange.MaxValue field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ValueRange.MaxValueMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ValueRange</param>
			protected sealed override System.String GetValue(Northface.Tools.ORM.ObjectModel.ValueRange element)
			{
				return element.maxValuePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.ValueRange element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.maxValuePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.maxValuePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Text's Generated  Field Code
		#region Text's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String TextMetaAttributeGuidString = "acfc1745-a76b-4955-9157-71ba6e4f5446";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid TextMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueRange.TextMetaAttributeGuidString);
		#endregion

		#region Text's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ValueRangeTextFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueRange.TextMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ValueRange.Text")]
		public  System.String Text
		{
			get
			{
				return valueRangeTextFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				valueRangeTextFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ValueRangeTextFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ValueRange.Text field
		/// </summary>
		private static ValueRangeTextFieldHandler	valueRangeTextFieldHandler	= ValueRangeTextFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ValueRange.Text
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ValueRangeTextFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.ValueRange,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ValueRangeTextFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ValueRange.Text field handler
			/// </summary>
			/// <value>ValueRangeTextFieldHandler</value>
			public static ValueRangeTextFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ValueRange.valueRangeTextFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ValueRange.valueRangeTextFieldHandler;
					}
					else
					{
						// The static constructor in ValueRange will assign this value to
						// Northface.Tools.ORM.ObjectModel.ValueRange.valueRangeTextFieldHandler, so just instantiate one and return it
						return new ValueRangeTextFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ValueRange.Text field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ValueRange.TextMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region MinInclusion's Generated  Field Code
		#region MinInclusion's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MinInclusionMetaAttributeGuidString = "25c82411-21b3-4d03-9511-736479d5d487";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MinInclusionMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueRange.MinInclusionMetaAttributeGuidString);
		#endregion

		#region MinInclusion's Generated Property Code

		private Northface.Tools.ORM.ObjectModel.RangeInclusion minInclusionPropertyStorage = Northface.Tools.ORM.ObjectModel.RangeInclusion.NotSet;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(Northface.Tools.ORM.ObjectModel.RangeInclusion),DefaultEnumerationValueName="NotSet")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ValueRangeMinInclusionFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueRange.MinInclusionMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ValueRange.MinInclusion")]
		public  Northface.Tools.ORM.ObjectModel.RangeInclusion MinInclusion
		{
			get
			{
				return minInclusionPropertyStorage;
			}
		
			set
			{
				valueRangeMinInclusionFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ValueRangeMinInclusionFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ValueRange.MinInclusion field
		/// </summary>
		private static ValueRangeMinInclusionFieldHandler	valueRangeMinInclusionFieldHandler	= ValueRangeMinInclusionFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ValueRange.MinInclusion
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ValueRangeMinInclusionFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.ValueRange,Northface.Tools.ORM.ObjectModel.RangeInclusion>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ValueRangeMinInclusionFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ValueRange.MinInclusion field handler
			/// </summary>
			/// <value>ValueRangeMinInclusionFieldHandler</value>
			public static ValueRangeMinInclusionFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ValueRange.valueRangeMinInclusionFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ValueRange.valueRangeMinInclusionFieldHandler;
					}
					else
					{
						// The static constructor in ValueRange will assign this value to
						// Northface.Tools.ORM.ObjectModel.ValueRange.valueRangeMinInclusionFieldHandler, so just instantiate one and return it
						return new ValueRangeMinInclusionFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ValueRange.MinInclusion field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ValueRange.MinInclusionMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ValueRange</param>
			protected sealed override Northface.Tools.ORM.ObjectModel.RangeInclusion GetValue(Northface.Tools.ORM.ObjectModel.ValueRange element)
			{
				return element.minInclusionPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.ValueRange element, Northface.Tools.ORM.ObjectModel.RangeInclusion value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref Northface.Tools.ORM.ObjectModel.RangeInclusion oldValue)
			{
				oldValue = element.minInclusionPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.minInclusionPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region MaxInclusion's Generated  Field Code
		#region MaxInclusion's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MaxInclusionMetaAttributeGuidString = "ac948ffb-8da6-4aff-ad60-40472c3cc868";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MaxInclusionMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueRange.MaxInclusionMetaAttributeGuidString);
		#endregion

		#region MaxInclusion's Generated Property Code

		private Northface.Tools.ORM.ObjectModel.RangeInclusion maxInclusionPropertyStorage = Northface.Tools.ORM.ObjectModel.RangeInclusion.NotSet;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(Northface.Tools.ORM.ObjectModel.RangeInclusion),DefaultEnumerationValueName="NotSet")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ValueRangeMaxInclusionFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueRange.MaxInclusionMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ValueRange.MaxInclusion")]
		public  Northface.Tools.ORM.ObjectModel.RangeInclusion MaxInclusion
		{
			get
			{
				return maxInclusionPropertyStorage;
			}
		
			set
			{
				valueRangeMaxInclusionFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ValueRangeMaxInclusionFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ValueRange.MaxInclusion field
		/// </summary>
		private static ValueRangeMaxInclusionFieldHandler	valueRangeMaxInclusionFieldHandler	= ValueRangeMaxInclusionFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ValueRange.MaxInclusion
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ValueRangeMaxInclusionFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.ValueRange,Northface.Tools.ORM.ObjectModel.RangeInclusion>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ValueRangeMaxInclusionFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ValueRange.MaxInclusion field handler
			/// </summary>
			/// <value>ValueRangeMaxInclusionFieldHandler</value>
			public static ValueRangeMaxInclusionFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ValueRange.valueRangeMaxInclusionFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ValueRange.valueRangeMaxInclusionFieldHandler;
					}
					else
					{
						// The static constructor in ValueRange will assign this value to
						// Northface.Tools.ORM.ObjectModel.ValueRange.valueRangeMaxInclusionFieldHandler, so just instantiate one and return it
						return new ValueRangeMaxInclusionFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ValueRange.MaxInclusion field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ValueRange.MaxInclusionMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ValueRange</param>
			protected sealed override Northface.Tools.ORM.ObjectModel.RangeInclusion GetValue(Northface.Tools.ORM.ObjectModel.ValueRange element)
			{
				return element.maxInclusionPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.ValueRange element, Northface.Tools.ORM.ObjectModel.RangeInclusion value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref Northface.Tools.ORM.ObjectModel.RangeInclusion oldValue)
			{
				oldValue = element.maxInclusionPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.maxInclusionPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region ValueRangeDefinition's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ValueRangeDefinition ValueRangeDefinition
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeDefinitionMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ValueRangeDefinition;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeDefinitionMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ValueRangeDefinition counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ValueRangeDefinition;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeDefinitionMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for ValueRange
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.ValueRange Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ValueRangeMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ValueRangeMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ValueRange) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ValueRange))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ValueRange) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ValueRange))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ValueRange) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ValueRange))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ValueRange) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ValueRange))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ValueRange) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ValueRange))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ValueRange) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ValueRange))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ValueRange) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ValueRange))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ValueRange) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ValueRange))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.ValueRange[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.ValueRange at that index</returns>
		public Northface.Tools.ORM.ObjectModel.ValueRange this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.ValueRange)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ValueRange to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.ValueRange value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ValueRange to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.ValueRange value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ValueRange to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.ValueRange value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ValueRange to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.ValueRange value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ValueRange to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.ValueRange value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.ValueRange rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.ValueRange rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ValueRange's Generated Constructor Code
	public  partial class ValueRange
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRange(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRange CreateValueRange(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateValueRange(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRange CreateAndInitializeValueRange(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueRange(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRange(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRange CreateValueRange(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ValueRange)partition.ElementFactory.CreateElement(typeof(ValueRange));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRange CreateAndInitializeValueRange(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueRange)partition.ElementFactory.CreateElement(typeof(ValueRange), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueRange
	/// <summary>
	/// ValueRange Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ValueRange))]
	public sealed class ValueRangeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRangeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ValueRange( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueRangeElementFactoryCreator Instance
		{
			get
			{
				return new ValueRangeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueRangeDefinition.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.ValueRangeDefinition")]
	public abstract partial class ValueRangeDefinition : Microsoft.VisualStudio.Modeling.ModelElement
	{
		#region ValueRangeDefinition's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "48ce9fde-500d-4066-bdcb-bb3cf7fb72f1";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueRangeDefinition.MetaClassGuidString);
		#endregion

		#region Text's Generated  Field Code
		#region Text's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String TextMetaAttributeGuidString = "bcb9afd4-188c-4d98-9429-88544e85adaf";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid TextMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueRangeDefinition.TextMetaAttributeGuidString);
		#endregion

		#region Text's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ValueRangeDefinitionTextFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueRangeDefinition.TextMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ValueRangeDefinition.Text")]
		public  System.String Text
		{
			get
			{
				return valueRangeDefinitionTextFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				valueRangeDefinitionTextFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ValueRangeDefinitionTextFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ValueRangeDefinition.Text field
		/// </summary>
		private static ValueRangeDefinitionTextFieldHandler	valueRangeDefinitionTextFieldHandler	= ValueRangeDefinitionTextFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ValueRangeDefinition.Text
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ValueRangeDefinitionTextFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Northface.Tools.ORM.ObjectModel.ValueRangeDefinition,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ValueRangeDefinitionTextFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ValueRangeDefinition.Text field handler
			/// </summary>
			/// <value>ValueRangeDefinitionTextFieldHandler</value>
			public static ValueRangeDefinitionTextFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ValueRangeDefinition.valueRangeDefinitionTextFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ValueRangeDefinition.valueRangeDefinitionTextFieldHandler;
					}
					else
					{
						// The static constructor in ValueRangeDefinition will assign this value to
						// Northface.Tools.ORM.ObjectModel.ValueRangeDefinition.valueRangeDefinitionTextFieldHandler, so just instantiate one and return it
						return new ValueRangeDefinitionTextFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ValueRangeDefinition.Text field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ValueRangeDefinition.TextMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region ValueRangeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ValueRangeMoveableCollection ValueRangeCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.ValueRangeMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeDefinitionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region ValueRangeDefinition's Generated Constructor Code
	public abstract partial class ValueRangeDefinition
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ValueRangeDefinition(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueTypeValueRangeDefinition.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.ValueTypeValueRangeDefinition")]
	public  partial class ValueTypeValueRangeDefinition : Northface.Tools.ORM.ObjectModel.ValueRangeDefinition
	{
		#region ValueTypeValueRangeDefinition's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "05587b6c-d9e7-4717-b20c-93b4c0f60c38";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueTypeValueRangeDefinition.MetaClassGuidString);
		#endregion

		#region ValueType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ObjectType ValueType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueTypeMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.ObjectType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.ObjectType counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.ObjectType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition), newRoles);
				}
			}
		}
		#endregion
	}
	#region ValueTypeValueRangeDefinition's Generated Constructor Code
	public  partial class ValueTypeValueRangeDefinition
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeValueRangeDefinition(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeValueRangeDefinition CreateValueTypeValueRangeDefinition(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateValueTypeValueRangeDefinition(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeValueRangeDefinition CreateAndInitializeValueTypeValueRangeDefinition(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueTypeValueRangeDefinition(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeValueRangeDefinition(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeValueRangeDefinition CreateValueTypeValueRangeDefinition(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ValueTypeValueRangeDefinition)partition.ElementFactory.CreateElement(typeof(ValueTypeValueRangeDefinition));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeValueRangeDefinition CreateAndInitializeValueTypeValueRangeDefinition(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueTypeValueRangeDefinition)partition.ElementFactory.CreateElement(typeof(ValueTypeValueRangeDefinition), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueTypeValueRangeDefinition
	/// <summary>
	/// ValueTypeValueRangeDefinition Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ValueTypeValueRangeDefinition))]
	public sealed class ValueTypeValueRangeDefinitionElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeValueRangeDefinitionElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ValueTypeValueRangeDefinition( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueTypeValueRangeDefinitionElementFactoryCreator Instance
		{
			get
			{
				return new ValueTypeValueRangeDefinitionElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.RoleValueRangeDefinition.MetaClassGuidString, "Northface.Tools.ORM.ObjectModel.RoleValueRangeDefinition")]
	public  partial class RoleValueRangeDefinition : Northface.Tools.ORM.ObjectModel.ValueRangeDefinition
	{
		#region RoleValueRangeDefinition's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "588ce2ce-1025-4a7a-8964-6d99ccb2d2aa";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.RoleValueRangeDefinition.MetaClassGuidString);
		#endregion

		#region Role's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.Role Role
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.RoleMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.Role;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.RoleMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.Role counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.Role;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.RoleMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition), newRoles);
				}
			}
		}
		#endregion
	}
	#region RoleValueRangeDefinition's Generated Constructor Code
	public  partial class RoleValueRangeDefinition
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleValueRangeDefinition(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleValueRangeDefinition CreateRoleValueRangeDefinition(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateRoleValueRangeDefinition(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleValueRangeDefinition CreateAndInitializeRoleValueRangeDefinition(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRoleValueRangeDefinition(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleValueRangeDefinition(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleValueRangeDefinition CreateRoleValueRangeDefinition(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (RoleValueRangeDefinition)partition.ElementFactory.CreateElement(typeof(RoleValueRangeDefinition));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleValueRangeDefinition CreateAndInitializeRoleValueRangeDefinition(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RoleValueRangeDefinition)partition.ElementFactory.CreateElement(typeof(RoleValueRangeDefinition), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RoleValueRangeDefinition
	/// <summary>
	/// RoleValueRangeDefinition Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.RoleValueRangeDefinition))]
	public sealed class RoleValueRangeDefinitionElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleValueRangeDefinitionElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.RoleValueRangeDefinition( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RoleValueRangeDefinitionElementFactoryCreator Instance
		{
			get
			{
				return new RoleValueRangeDefinitionElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType")]
	public  partial class ValueTypeHasDataType : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ValueTypeHasDataType's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "eaf3a24b-8adc-4836-a901-6eaa560946d1";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ValueTypeHasDataType.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ValueTypeHasDataType.MetaClassGuid;
		#endregion

		#region Scale's Generated  Field Code
		#region Scale's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ScaleMetaAttributeGuidString = "927b45e4-e831-43f5-b1af-99e18df739ce";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ScaleMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.ScaleMetaAttributeGuidString);
		#endregion

		#region Scale's Generated Property Code

		private System.Int32 scalePropertyStorage = 0;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.IntegerDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ValueTypeHasDataTypeScaleFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.ScaleMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.Scale")]
		public  System.Int32 Scale
		{
			get
			{
				return scalePropertyStorage;
			}
		
			set
			{
				valueTypeHasDataTypeScaleFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ValueTypeHasDataTypeScaleFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ValueTypeHasDataType.Scale field
		/// </summary>
		private static ValueTypeHasDataTypeScaleFieldHandler	valueTypeHasDataTypeScaleFieldHandler	= ValueTypeHasDataTypeScaleFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ValueTypeHasDataType.Scale
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ValueTypeHasDataTypeScaleFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType,System.Int32>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ValueTypeHasDataTypeScaleFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ValueTypeHasDataType.Scale field handler
			/// </summary>
			/// <value>ValueTypeHasDataTypeScaleFieldHandler</value>
			public static ValueTypeHasDataTypeScaleFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.valueTypeHasDataTypeScaleFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.valueTypeHasDataTypeScaleFieldHandler;
					}
					else
					{
						// The static constructor in ValueTypeHasDataType will assign this value to
						// Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.valueTypeHasDataTypeScaleFieldHandler, so just instantiate one and return it
						return new ValueTypeHasDataTypeScaleFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ValueTypeHasDataType.Scale field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.ScaleMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ValueTypeHasDataType</param>
			protected sealed override System.Int32 GetValue(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType element)
			{
				return element.scalePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType element, System.Int32 value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Int32 oldValue)
			{
				oldValue = element.scalePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.scalePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Length's Generated  Field Code
		#region Length's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String LengthMetaAttributeGuidString = "1a220465-c1bc-4736-93e4-e675eb1d1196";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid LengthMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.LengthMetaAttributeGuidString);
		#endregion

		#region Length's Generated Property Code

		private System.Int32 lengthPropertyStorage = 0;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.IntegerDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ValueTypeHasDataTypeLengthFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.LengthMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.Length")]
		public  System.Int32 Length
		{
			get
			{
				return lengthPropertyStorage;
			}
		
			set
			{
				valueTypeHasDataTypeLengthFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ValueTypeHasDataTypeLengthFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ValueTypeHasDataType.Length field
		/// </summary>
		private static ValueTypeHasDataTypeLengthFieldHandler	valueTypeHasDataTypeLengthFieldHandler	= ValueTypeHasDataTypeLengthFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ValueTypeHasDataType.Length
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ValueTypeHasDataTypeLengthFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType,System.Int32>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ValueTypeHasDataTypeLengthFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ValueTypeHasDataType.Length field handler
			/// </summary>
			/// <value>ValueTypeHasDataTypeLengthFieldHandler</value>
			public static ValueTypeHasDataTypeLengthFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.valueTypeHasDataTypeLengthFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.valueTypeHasDataTypeLengthFieldHandler;
					}
					else
					{
						// The static constructor in ValueTypeHasDataType will assign this value to
						// Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.valueTypeHasDataTypeLengthFieldHandler, so just instantiate one and return it
						return new ValueTypeHasDataTypeLengthFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ValueTypeHasDataType.Length field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.LengthMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ValueTypeHasDataType</param>
			protected sealed override System.Int32 GetValue(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType element)
			{
				return element.lengthPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType element, System.Int32 value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Int32 oldValue)
			{
				oldValue = element.lengthPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.lengthPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region DataType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String DataTypeMetaRoleGuidString = "f428f909-8e22-4608-bef3-1f730fd1077f";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid DataTypeMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataTypeMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataType")]
		public  Northface.Tools.ORM.ObjectModel.DataType DataType
		{
			get { return (Northface.Tools.ORM.ObjectModel.DataType)this.GetRolePlayer(DataTypeMetaRoleGuid); }
			set { this.SetRolePlayer(DataTypeMetaRoleGuid, value); }
		}
		
		#endregion
		#region ValueTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueTypeCollectionMetaRoleGuidString = "72598bd8-40da-4a90-8005-d7ef2acaf536";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueTypeCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeCollection")]
		public  Northface.Tools.ORM.ObjectModel.ObjectType ValueTypeCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(ValueTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ValueTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region DataTypeNotSpecifiedError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError DataTypeNotSpecifiedError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid, false) as Northface.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Northface.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError counterpart = link.GetRolePlayer(roleInfo) as Northface.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError), newRoles);
				}
			}
		}
		#endregion
	}
	#region ValueTypeHasDataType's Generated Constructor Code
	public  partial class ValueTypeHasDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasDataType CreateValueTypeHasDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateValueTypeHasDataType(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasDataType CreateAndInitializeValueTypeHasDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueTypeHasDataType(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasDataType CreateValueTypeHasDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ValueTypeHasDataType)partition.ElementFactory.CreateElementLink(typeof(ValueTypeHasDataType), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasDataType CreateAndInitializeValueTypeHasDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueTypeHasDataType)partition.ElementFactory.CreateElementLink(typeof(ValueTypeHasDataType), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueTypeHasDataType
	/// <summary>
	/// ValueTypeHasDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType))]
	public sealed class ValueTypeHasDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueTypeHasDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new ValueTypeHasDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeDerivation.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeDerivation")]
	public  partial class FactTypeDerivation : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region FactTypeDerivation's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "20e02e70-ade6-4882-9db8-8792e880e19c";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeDerivation.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactTypeDerivation.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactTypeDerivation.MetaClassGuid;
		#endregion

		#region IsStored's Generated  Field Code
		#region IsStored's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsStoredMetaAttributeGuidString = "f5540418-e472-4b4c-af64-27aa6b41be29";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsStoredMetaAttributeGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeDerivation.IsStoredMetaAttributeGuidString);
		#endregion

		#region IsStored's Generated Property Code

		private System.Boolean isStoredPropertyStorage = false;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(FactTypeDerivationIsStoredFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeDerivation.IsStoredMetaAttributeGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeDerivation.IsStored")]
		public  System.Boolean IsStored
		{
			get
			{
				return isStoredPropertyStorage;
			}
		
			set
			{
				factTypeDerivationIsStoredFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FactTypeDerivationIsStoredFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FactTypeDerivation.IsStored field
		/// </summary>
		private static FactTypeDerivationIsStoredFieldHandler	factTypeDerivationIsStoredFieldHandler	= FactTypeDerivationIsStoredFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FactTypeDerivation.IsStored
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FactTypeDerivationIsStoredFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Northface.Tools.ORM.ObjectModel.FactTypeDerivation,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FactTypeDerivationIsStoredFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FactTypeDerivation.IsStored field handler
			/// </summary>
			/// <value>FactTypeDerivationIsStoredFieldHandler</value>
			public static FactTypeDerivationIsStoredFieldHandler Instance
			{
				get
				{
					if (Northface.Tools.ORM.ObjectModel.FactTypeDerivation.factTypeDerivationIsStoredFieldHandler != null)
					{
						return Northface.Tools.ORM.ObjectModel.FactTypeDerivation.factTypeDerivationIsStoredFieldHandler;
					}
					else
					{
						// The static constructor in FactTypeDerivation will assign this value to
						// Northface.Tools.ORM.ObjectModel.FactTypeDerivation.factTypeDerivationIsStoredFieldHandler, so just instantiate one and return it
						return new FactTypeDerivationIsStoredFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FactTypeDerivation.IsStored field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Northface.Tools.ORM.ObjectModel.FactTypeDerivation.IsStoredMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the FactTypeDerivation</param>
			protected sealed override System.Boolean GetValue(Northface.Tools.ORM.ObjectModel.FactTypeDerivation element)
			{
				return element.isStoredPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Northface.Tools.ORM.ObjectModel.FactTypeDerivation element, System.Boolean value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Boolean oldValue)
			{
				oldValue = element.isStoredPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.isStoredPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region AssociatedFactType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String AssociatedFactTypeMetaRoleGuidString = "cb2af830-7d0d-42b7-ae61-c4edb6bd5250";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid AssociatedFactTypeMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeDerivation.AssociatedFactTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=true, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeDerivation.AssociatedFactTypeMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeDerivation.AssociatedFactType")]
		public  Northface.Tools.ORM.ObjectModel.FactType AssociatedFactType
		{
			get { return (Northface.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(AssociatedFactTypeMetaRoleGuid); }
			set { this.SetRolePlayer(AssociatedFactTypeMetaRoleGuid, value); }
		}
		
		#endregion
		#region DerivationRule's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String DerivationRuleMetaRoleGuidString = "8fb08a4b-f809-4e37-a62b-28c082a28a54";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid DerivationRuleMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeDerivation.DerivationRuleMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeDerivation.DerivationRuleMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeDerivation.DerivationRule")]
		public  Northface.Tools.ORM.ObjectModel.Expression DerivationRule
		{
			get { return (Northface.Tools.ORM.ObjectModel.Expression)this.GetRolePlayer(DerivationRuleMetaRoleGuid); }
			set { this.SetRolePlayer(DerivationRuleMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactTypeDerivation's Generated Constructor Code
	public  partial class FactTypeDerivation
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeDerivation(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeDerivation CreateFactTypeDerivation(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactTypeDerivation(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeDerivation CreateAndInitializeFactTypeDerivation(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeDerivation(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeDerivation(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeDerivation CreateFactTypeDerivation(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactTypeDerivation)partition.ElementFactory.CreateElementLink(typeof(FactTypeDerivation), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeDerivation CreateAndInitializeFactTypeDerivation(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeDerivation)partition.ElementFactory.CreateElementLink(typeof(FactTypeDerivation), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeDerivation
	/// <summary>
	/// FactTypeDerivation Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.FactTypeDerivation))]
	public sealed class FactTypeDerivationElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeDerivationElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.FactTypeDerivation( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeDerivationElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeDerivationElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType")]
	public  partial class NestingEntityTypeHasFactType : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region NestingEntityTypeHasFactType's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "542e780f-0bd0-4617-9715-935beb73cee9";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = NestingEntityTypeHasFactType.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = NestingEntityTypeHasFactType.MetaClassGuid;
		#endregion

		#region NestedFactType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String NestedFactTypeMetaRoleGuidString = "6743ca8b-70dc-4c77-85ff-acf2f197ef72";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid NestedFactTypeMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestedFactTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestedFactTypeMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestedFactType")]
		public  Northface.Tools.ORM.ObjectModel.FactType NestedFactType
		{
			get { return (Northface.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(NestedFactTypeMetaRoleGuid); }
			set { this.SetRolePlayer(NestedFactTypeMetaRoleGuid, value); }
		}
		
		#endregion
		#region NestingType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String NestingTypeMetaRoleGuidString = "7a57a47b-772d-4362-898a-572e9e5a7728";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid NestingTypeMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestingTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestingTypeMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType.NestingType")]
		public  Northface.Tools.ORM.ObjectModel.ObjectType NestingType
		{
			get { return (Northface.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(NestingTypeMetaRoleGuid); }
			set { this.SetRolePlayer(NestingTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region NestingEntityTypeHasFactType's Generated Constructor Code
	public  partial class NestingEntityTypeHasFactType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public NestingEntityTypeHasFactType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static NestingEntityTypeHasFactType CreateNestingEntityTypeHasFactType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateNestingEntityTypeHasFactType(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static NestingEntityTypeHasFactType CreateAndInitializeNestingEntityTypeHasFactType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeNestingEntityTypeHasFactType(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public NestingEntityTypeHasFactType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static NestingEntityTypeHasFactType CreateNestingEntityTypeHasFactType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (NestingEntityTypeHasFactType)partition.ElementFactory.CreateElementLink(typeof(NestingEntityTypeHasFactType), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static NestingEntityTypeHasFactType CreateAndInitializeNestingEntityTypeHasFactType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (NestingEntityTypeHasFactType)partition.ElementFactory.CreateElementLink(typeof(NestingEntityTypeHasFactType), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for NestingEntityTypeHasFactType
	/// <summary>
	/// NestingEntityTypeHasFactType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType))]
	public sealed class NestingEntityTypeHasFactTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public NestingEntityTypeHasFactTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.NestingEntityTypeHasFactType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static NestingEntityTypeHasFactTypeElementFactoryCreator Instance
		{
			get
			{
				return new NestingEntityTypeHasFactTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasRole.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasRole")]
	public  partial class FactTypeHasRole : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region FactTypeHasRole's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "af40ed09-483b-47ea-bfd6-12d7e4cb3dde";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasRole.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactTypeHasRole.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactTypeHasRole.MetaClassGuid;
		#endregion

		#region FactType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeMetaRoleGuidString = "67f51c5d-90a1-4719-8454-9da18c1d1a5c";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=true, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasRole.FactType")]
		public  Northface.Tools.ORM.ObjectModel.FactType FactType
		{
			get { return (Northface.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeMetaRoleGuid, value); }
		}
		
		#endregion
		#region RoleCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RoleCollectionMetaRoleGuidString = "dd378220-7c82-4522-979b-0d7b23be7cab";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RoleCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollection")]
		public  Northface.Tools.ORM.ObjectModel.Role RoleCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.Role)this.GetRolePlayer(RoleCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(RoleCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactTypeHasRole's Generated Constructor Code
	public  partial class FactTypeHasRole
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasRole CreateFactTypeHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactTypeHasRole(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasRole CreateAndInitializeFactTypeHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeHasRole(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasRole CreateFactTypeHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactTypeHasRole)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasRole), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasRole CreateAndInitializeFactTypeHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeHasRole)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasRole), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeHasRole
	/// <summary>
	/// FactTypeHasRole Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasRole))]
	public sealed class FactTypeHasRoleElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasRoleElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.FactTypeHasRole( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeHasRoleElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeHasRoleElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole")]
	public  partial class ObjectTypePlaysRole : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ObjectTypePlaysRole's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "cd3fd3e2-9822-47b3-a158-8bc59b7ef0fc";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ObjectTypePlaysRole.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ObjectTypePlaysRole.MetaClassGuid;
		#endregion

		#region RolePlayer's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RolePlayerMetaRoleGuidString = "8cabe0dc-33de-4332-93fe-c9f4b092004c";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RolePlayerMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayerMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayerMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayer")]
		public  Northface.Tools.ORM.ObjectModel.ObjectType RolePlayer
		{
			get { return (Northface.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(RolePlayerMetaRoleGuid); }
			set { this.SetRolePlayer(RolePlayerMetaRoleGuid, value); }
		}
		
		#endregion
		#region PlayedRoleCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String PlayedRoleCollectionMetaRoleGuidString = "0f45f22d-a7a7-49a8-9e09-17cf362639d0";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid PlayedRoleCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleCollection")]
		public  Northface.Tools.ORM.ObjectModel.Role PlayedRoleCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.Role)this.GetRolePlayer(PlayedRoleCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(PlayedRoleCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ObjectTypePlaysRole's Generated Constructor Code
	public  partial class ObjectTypePlaysRole
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypePlaysRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypePlaysRole CreateObjectTypePlaysRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateObjectTypePlaysRole(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypePlaysRole CreateAndInitializeObjectTypePlaysRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectTypePlaysRole(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypePlaysRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypePlaysRole CreateObjectTypePlaysRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ObjectTypePlaysRole)partition.ElementFactory.CreateElementLink(typeof(ObjectTypePlaysRole), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypePlaysRole CreateAndInitializeObjectTypePlaysRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectTypePlaysRole)partition.ElementFactory.CreateElementLink(typeof(ObjectTypePlaysRole), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectTypePlaysRole
	/// <summary>
	/// ObjectTypePlaysRole Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole))]
	public sealed class ObjectTypePlaysRoleElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypePlaysRoleElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ObjectTypePlaysRole( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectTypePlaysRoleElementFactoryCreator Instance
		{
			get
			{
				return new ObjectTypePlaysRoleElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasObjectType.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasObjectType")]
	public  partial class ModelHasObjectType : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ModelHasObjectType's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "7f3a3597-e6e1-487b-a762-378fc79aedba";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasObjectType.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ModelHasObjectType.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ModelHasObjectType.MetaClassGuid;
		#endregion

		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "f2e6e473-0a96-4199-9a63-67ce66a8783d";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasObjectType.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=true, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasObjectType.ModelMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasObjectType.Model")]
		public  Northface.Tools.ORM.ObjectModel.ORMModel Model
		{
			get { return (Northface.Tools.ORM.ObjectModel.ORMModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
		#region ObjectTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ObjectTypeCollectionMetaRoleGuidString = "d4e2ef09-1187-4d73-b0ce-c3c539e8a708";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ObjectTypeCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollection")]
		public  Northface.Tools.ORM.ObjectModel.ObjectType ObjectTypeCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(ObjectTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ObjectTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ModelHasObjectType's Generated Constructor Code
	public  partial class ModelHasObjectType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasObjectType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasObjectType CreateModelHasObjectType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateModelHasObjectType(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasObjectType CreateAndInitializeModelHasObjectType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeModelHasObjectType(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasObjectType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasObjectType CreateModelHasObjectType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ModelHasObjectType)partition.ElementFactory.CreateElementLink(typeof(ModelHasObjectType), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasObjectType CreateAndInitializeModelHasObjectType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ModelHasObjectType)partition.ElementFactory.CreateElementLink(typeof(ModelHasObjectType), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ModelHasObjectType
	/// <summary>
	/// ModelHasObjectType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ModelHasObjectType))]
	public sealed class ModelHasObjectTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasObjectTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ModelHasObjectType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ModelHasObjectTypeElementFactoryCreator Instance
		{
			get
			{
				return new ModelHasObjectTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasFactType.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasFactType")]
	public  partial class ModelHasFactType : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ModelHasFactType's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "4f0bfd84-658b-4bf4-acda-5db1355b1a33";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasFactType.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ModelHasFactType.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ModelHasFactType.MetaClassGuid;
		#endregion

		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "c7885cbd-6e5c-48f3-bb08-80335d82096a";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasFactType.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=true, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasFactType.ModelMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasFactType.Model")]
		public  Northface.Tools.ORM.ObjectModel.ORMModel Model
		{
			get { return (Northface.Tools.ORM.ObjectModel.ORMModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeCollectionMetaRoleGuidString = "ba041047-0d0f-45dc-aac3-29d5111ed1b0";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollection")]
		public  Northface.Tools.ORM.ObjectModel.FactType FactTypeCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ModelHasFactType's Generated Constructor Code
	public  partial class ModelHasFactType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasFactType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasFactType CreateModelHasFactType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateModelHasFactType(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasFactType CreateAndInitializeModelHasFactType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeModelHasFactType(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasFactType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasFactType CreateModelHasFactType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ModelHasFactType)partition.ElementFactory.CreateElementLink(typeof(ModelHasFactType), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasFactType CreateAndInitializeModelHasFactType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ModelHasFactType)partition.ElementFactory.CreateElementLink(typeof(ModelHasFactType), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ModelHasFactType
	/// <summary>
	/// ModelHasFactType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ModelHasFactType))]
	public sealed class ModelHasFactTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasFactTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ModelHasFactType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ModelHasFactTypeElementFactoryCreator Instance
		{
			get
			{
				return new ModelHasFactTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ExternalFactConstraint")]
	public abstract partial class ExternalFactConstraint : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ExternalFactConstraint's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "2ccd6a09-46be-4d7c-9d8b-b77679074f17";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ExternalFactConstraint.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ExternalFactConstraint.MetaClassGuid;
		#endregion

		#region ConstrainedRoleCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleMoveableCollection ConstrainedRoleCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint.FactConstraintCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRoleCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region Collection Classes for ExternalFactConstraint
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.ExternalFactConstraint Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ExternalFactConstraintMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ExternalFactConstraintMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.ExternalFactConstraint at that index</returns>
		public Northface.Tools.ORM.ObjectModel.ExternalFactConstraint this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.ExternalFactConstraint)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ExternalFactConstraint to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ExternalFactConstraint to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ExternalFactConstraint to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ExternalFactConstraint to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.ExternalFactConstraint value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ExternalFactConstraint to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.ExternalFactConstraint rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.ExternalFactConstraint rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ExternalFactConstraint's Generated Constructor Code
	public abstract partial class ExternalFactConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ExternalFactConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint")]
	public  partial class MultiColumnExternalFactConstraint : Northface.Tools.ORM.ObjectModel.ExternalFactConstraint
	{
		#region MultiColumnExternalFactConstraint's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "6de34bee-23ca-4503-b451-0bf4f9623e88";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = MultiColumnExternalFactConstraint.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = MultiColumnExternalFactConstraint.MetaClassGuid;
		#endregion

		#region MultiColumnExternalConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String MultiColumnExternalConstraintCollectionMetaRoleGuidString = "00ab3368-d142-4d99-8457-afd56e639f5a";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid MultiColumnExternalConstraintCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint.MultiColumnExternalConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint.MultiColumnExternalConstraintCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint.MultiColumnExternalConstraintCollection")]
		public  Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint MultiColumnExternalConstraintCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint)this.GetRolePlayer(MultiColumnExternalConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(MultiColumnExternalConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeCollectionMetaRoleGuidString = "6352e486-6683-4334-8c5c-9601fa3c07d7";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint.FactTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint.FactTypeCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint.FactTypeCollection")]
		public  Northface.Tools.ORM.ObjectModel.FactType FactTypeCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region MultiColumnExternalFactConstraint's Generated Constructor Code
	public  partial class MultiColumnExternalFactConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalFactConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalFactConstraint CreateMultiColumnExternalFactConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateMultiColumnExternalFactConstraint(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalFactConstraint CreateAndInitializeMultiColumnExternalFactConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeMultiColumnExternalFactConstraint(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalFactConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalFactConstraint CreateMultiColumnExternalFactConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (MultiColumnExternalFactConstraint)partition.ElementFactory.CreateElementLink(typeof(MultiColumnExternalFactConstraint), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalFactConstraint CreateAndInitializeMultiColumnExternalFactConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (MultiColumnExternalFactConstraint)partition.ElementFactory.CreateElementLink(typeof(MultiColumnExternalFactConstraint), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for MultiColumnExternalFactConstraint
	/// <summary>
	/// MultiColumnExternalFactConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint))]
	public sealed class MultiColumnExternalFactConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalFactConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.MultiColumnExternalFactConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static MultiColumnExternalFactConstraintElementFactoryCreator Instance
		{
			get
			{
				return new MultiColumnExternalFactConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint")]
	public  partial class SingleColumnExternalFactConstraint : Northface.Tools.ORM.ObjectModel.ExternalFactConstraint
	{
		#region SingleColumnExternalFactConstraint's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "786eebce-120b-43c0-9622-e799943f4021";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SingleColumnExternalFactConstraint.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SingleColumnExternalFactConstraint.MetaClassGuid;
		#endregion

		#region SingleColumnExternalConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SingleColumnExternalConstraintCollectionMetaRoleGuidString = "6045259d-a85e-40f6-bac3-744f03cef430";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SingleColumnExternalConstraintCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint.SingleColumnExternalConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint.SingleColumnExternalConstraintCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint.SingleColumnExternalConstraintCollection")]
		public  Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint SingleColumnExternalConstraintCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint)this.GetRolePlayer(SingleColumnExternalConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(SingleColumnExternalConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeCollectionMetaRoleGuidString = "3330f860-0dd6-4178-b7e8-e89cec558389";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint.FactTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint.FactTypeCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint.FactTypeCollection")]
		public  Northface.Tools.ORM.ObjectModel.FactType FactTypeCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SingleColumnExternalFactConstraint's Generated Constructor Code
	public  partial class SingleColumnExternalFactConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleColumnExternalFactConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleColumnExternalFactConstraint CreateSingleColumnExternalFactConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSingleColumnExternalFactConstraint(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleColumnExternalFactConstraint CreateAndInitializeSingleColumnExternalFactConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSingleColumnExternalFactConstraint(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleColumnExternalFactConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleColumnExternalFactConstraint CreateSingleColumnExternalFactConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SingleColumnExternalFactConstraint)partition.ElementFactory.CreateElementLink(typeof(SingleColumnExternalFactConstraint), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleColumnExternalFactConstraint CreateAndInitializeSingleColumnExternalFactConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SingleColumnExternalFactConstraint)partition.ElementFactory.CreateElementLink(typeof(SingleColumnExternalFactConstraint), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SingleColumnExternalFactConstraint
	/// <summary>
	/// SingleColumnExternalFactConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint))]
	public sealed class SingleColumnExternalFactConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleColumnExternalFactConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.SingleColumnExternalFactConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SingleColumnExternalFactConstraintElementFactoryCreator Instance
		{
			get
			{
				return new SingleColumnExternalFactConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint")]
	public  partial class ExternalRoleConstraint : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ExternalRoleConstraint's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "a075a8fd-feb9-4dec-9852-85b7272a009f";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ExternalRoleConstraint.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ExternalRoleConstraint.MetaClassGuid;
		#endregion

		#region FactConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactConstraintCollectionMetaRoleGuidString = "3b2ebee1-afe8-42cb-a7db-8ad4dc7d8be9";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactConstraintCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint.FactConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint.FactConstraintCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint.FactConstraintCollection")]
		public  Northface.Tools.ORM.ObjectModel.ExternalFactConstraint FactConstraintCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.ExternalFactConstraint)this.GetRolePlayer(FactConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(FactConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ConstrainedRoleCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ConstrainedRoleCollectionMetaRoleGuidString = "c419f56d-c63f-4972-bdeb-86d9264e2de7";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ConstrainedRoleCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRoleCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRoleCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRoleCollection")]
		public  Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole ConstrainedRoleCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole)this.GetRolePlayer(ConstrainedRoleCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ConstrainedRoleCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ExternalRoleConstraint's Generated Constructor Code
	public  partial class ExternalRoleConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalRoleConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalRoleConstraint CreateExternalRoleConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateExternalRoleConstraint(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalRoleConstraint CreateAndInitializeExternalRoleConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeExternalRoleConstraint(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalRoleConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalRoleConstraint CreateExternalRoleConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ExternalRoleConstraint)partition.ElementFactory.CreateElementLink(typeof(ExternalRoleConstraint), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalRoleConstraint CreateAndInitializeExternalRoleConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ExternalRoleConstraint)partition.ElementFactory.CreateElementLink(typeof(ExternalRoleConstraint), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ExternalRoleConstraint
	/// <summary>
	/// ExternalRoleConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint))]
	public sealed class ExternalRoleConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalRoleConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ExternalRoleConstraintElementFactoryCreator Instance
		{
			get
			{
				return new ExternalRoleConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence")]
	public  partial class MultiColumnExternalConstraintHasRoleSequence : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region MultiColumnExternalConstraintHasRoleSequence's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "4d952086-d820-4023-9207-14302e77b703";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = MultiColumnExternalConstraintHasRoleSequence.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = MultiColumnExternalConstraintHasRoleSequence.MetaClassGuid;
		#endregion

		#region RoleSequenceCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RoleSequenceCollectionMetaRoleGuidString = "152a01ce-3754-4b69-9f9e-036762f25a58";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RoleSequenceCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.RoleSequenceCollection")]
		public  Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence RoleSequenceCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintRoleSequence)this.GetRolePlayer(RoleSequenceCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(RoleSequenceCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ExternalConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ExternalConstraintMetaRoleGuidString = "efd54a41-2206-4daa-969a-b85b6a662ca9";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ExternalConstraintMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.ExternalConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.ExternalConstraintMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence.ExternalConstraint")]
		public  Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint ExternalConstraint
		{
			get { return (Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint)this.GetRolePlayer(ExternalConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(ExternalConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region MultiColumnExternalConstraintHasRoleSequence's Generated Constructor Code
	public  partial class MultiColumnExternalConstraintHasRoleSequence
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalConstraintHasRoleSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintHasRoleSequence CreateMultiColumnExternalConstraintHasRoleSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateMultiColumnExternalConstraintHasRoleSequence(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintHasRoleSequence CreateAndInitializeMultiColumnExternalConstraintHasRoleSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeMultiColumnExternalConstraintHasRoleSequence(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalConstraintHasRoleSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintHasRoleSequence CreateMultiColumnExternalConstraintHasRoleSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (MultiColumnExternalConstraintHasRoleSequence)partition.ElementFactory.CreateElementLink(typeof(MultiColumnExternalConstraintHasRoleSequence), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintHasRoleSequence CreateAndInitializeMultiColumnExternalConstraintHasRoleSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (MultiColumnExternalConstraintHasRoleSequence)partition.ElementFactory.CreateElementLink(typeof(MultiColumnExternalConstraintHasRoleSequence), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for MultiColumnExternalConstraintHasRoleSequence
	/// <summary>
	/// MultiColumnExternalConstraintHasRoleSequence Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence))]
	public sealed class MultiColumnExternalConstraintHasRoleSequenceElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalConstraintHasRoleSequenceElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasRoleSequence( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static MultiColumnExternalConstraintHasRoleSequenceElementFactoryCreator Instance
		{
			get
			{
				return new MultiColumnExternalConstraintHasRoleSequenceElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole")]
	public  partial class ConstraintRoleSequenceHasRole : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ConstraintRoleSequenceHasRole's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "b66ae3b4-c404-486c-933a-fd23eea3c3d7";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ConstraintRoleSequenceHasRole.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ConstraintRoleSequenceHasRole.MetaClassGuid;
		#endregion

		#region ConstraintRoleSequenceCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ConstraintRoleSequenceCollectionMetaRoleGuidString = "dea36a6c-6706-41ee-bb34-61bc9a5416d2";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ConstraintRoleSequenceCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceCollection")]
		public  Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence ConstraintRoleSequenceCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence)this.GetRolePlayer(ConstraintRoleSequenceCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ConstraintRoleSequenceCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region RoleCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RoleCollectionMetaRoleGuidString = "43f43911-662e-480d-b566-8025ccb1f673";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RoleCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.RoleCollection")]
		public  Northface.Tools.ORM.ObjectModel.Role RoleCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.Role)this.GetRolePlayer(RoleCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(RoleCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Northface.Tools.ORM.ObjectModel.ExternalFactConstraintMoveableCollection FactConstraintCollection
		{
			get { return new Northface.Tools.ORM.ObjectModel.ExternalFactConstraintMoveableCollection(this, Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRoleCollectionMetaRoleGuid, Northface.Tools.ORM.ObjectModel.ExternalRoleConstraint.FactConstraintCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region Collection Classes for ConstraintRoleSequenceHasRole
	/// <summary>
	/// Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ConstraintRoleSequenceHasRoleMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ConstraintRoleSequenceHasRoleMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole) && !value.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole) && !rolePlayer.GetType().IsSubclassOf(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole at that index</returns>
		public Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole this[System.Int32 index]
		{
			get { return (Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole to insert into the list</param>
		public void Insert(System.Int32 index, Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole to remove from the list</param>
		public void Remove(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ConstraintRoleSequenceHasRole's Generated Constructor Code
	public  partial class ConstraintRoleSequenceHasRole
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConstraintRoleSequenceHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConstraintRoleSequenceHasRole CreateConstraintRoleSequenceHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateConstraintRoleSequenceHasRole(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConstraintRoleSequenceHasRole CreateAndInitializeConstraintRoleSequenceHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeConstraintRoleSequenceHasRole(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ConstraintRoleSequenceHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConstraintRoleSequenceHasRole CreateConstraintRoleSequenceHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ConstraintRoleSequenceHasRole)partition.ElementFactory.CreateElementLink(typeof(ConstraintRoleSequenceHasRole), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConstraintRoleSequenceHasRole CreateAndInitializeConstraintRoleSequenceHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ConstraintRoleSequenceHasRole)partition.ElementFactory.CreateElementLink(typeof(ConstraintRoleSequenceHasRole), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ConstraintRoleSequenceHasRole
	/// <summary>
	/// ConstraintRoleSequenceHasRole Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))]
	public sealed class ConstraintRoleSequenceHasRoleElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConstraintRoleSequenceHasRoleElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ConstraintRoleSequenceHasRoleElementFactoryCreator Instance
		{
			get
			{
				return new ConstraintRoleSequenceHasRoleElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReadingHasRole.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ReadingHasRole")]
	public  partial class ReadingHasRole : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ReadingHasRole's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "e81b771c-faba-4f9a-9361-92d2a9f5498c";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReadingHasRole.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ReadingHasRole.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ReadingHasRole.MetaClassGuid;
		#endregion

		#region RoleCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RoleCollectionMetaRoleGuidString = "54350d49-2d00-46f9-85d0-68fa9771ca47";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RoleCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReadingHasRole.RoleCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReadingHasRole.RoleCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ReadingHasRole.RoleCollection")]
		public  Northface.Tools.ORM.ObjectModel.Role RoleCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.Role)this.GetRolePlayer(RoleCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(RoleCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ReadingCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReadingCollectionMetaRoleGuidString = "da79a849-c301-40ff-b5a8-69c2c41045e5";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReadingCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReadingHasRole.ReadingCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReadingHasRole.ReadingCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ReadingHasRole.ReadingCollection")]
		public  Northface.Tools.ORM.ObjectModel.Reading ReadingCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.Reading)this.GetRolePlayer(ReadingCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ReadingCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ReadingHasRole's Generated Constructor Code
	public  partial class ReadingHasRole
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasRole CreateReadingHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateReadingHasRole(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasRole CreateAndInitializeReadingHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReadingHasRole(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasRole CreateReadingHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ReadingHasRole)partition.ElementFactory.CreateElementLink(typeof(ReadingHasRole), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasRole CreateAndInitializeReadingHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ReadingHasRole)partition.ElementFactory.CreateElementLink(typeof(ReadingHasRole), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ReadingHasRole
	/// <summary>
	/// ReadingHasRole Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ReadingHasRole))]
	public sealed class ReadingHasRoleElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingHasRoleElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ReadingHasRole( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReadingHasRoleElementFactoryCreator Instance
		{
			get
			{
				return new ReadingHasRoleElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasError.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasError")]
	public  partial class ModelHasError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ModelHasError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "4389da95-bd9e-4615-ac5f-5a466414c9b0";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ModelHasError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ModelHasError.MetaClassGuid;
		#endregion

		#region ErrorCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ErrorCollectionMetaRoleGuidString = "0cc3a152-c6c3-49f3-97fd-7c97a6fd9657";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ErrorCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasError.ErrorCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasError.ErrorCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasError.ErrorCollection")]
		public  Northface.Tools.ORM.ObjectModel.ModelError ErrorCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.ModelError)this.GetRolePlayer(ErrorCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ErrorCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "a407c3f0-23dc-468a-bc22-568bfcf8a827";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasError.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=true, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasError.ModelMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasError.Model")]
		public  Northface.Tools.ORM.ObjectModel.ORMModel Model
		{
			get { return (Northface.Tools.ORM.ObjectModel.ORMModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ModelHasError's Generated Constructor Code
	public  partial class ModelHasError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasError CreateModelHasError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateModelHasError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasError CreateAndInitializeModelHasError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeModelHasError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasError CreateModelHasError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ModelHasError)partition.ElementFactory.CreateElementLink(typeof(ModelHasError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasError CreateAndInitializeModelHasError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ModelHasError)partition.ElementFactory.CreateElementLink(typeof(ModelHasError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ModelHasError
	/// <summary>
	/// ModelHasError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ModelHasError))]
	public sealed class ModelHasErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ModelHasError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ModelHasErrorElementFactoryCreator Instance
		{
			get
			{
				return new ModelHasErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError")]
	public  partial class ExternalConstraintHasTooFewRoleSequencesError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ExternalConstraintHasTooFewRoleSequencesError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "dcf38e2c-fe6e-4f89-8cb2-44bb1e512856";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ExternalConstraintHasTooFewRoleSequencesError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ExternalConstraintHasTooFewRoleSequencesError.MetaClassGuid;
		#endregion

		#region TooFewRoleSequencesError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String TooFewRoleSequencesErrorMetaRoleGuidString = "438baa58-0cff-42b2-93f5-38dffa0544a1";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid TooFewRoleSequencesErrorMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesError")]
		public  Northface.Tools.ORM.ObjectModel.TooFewRoleSequencesError TooFewRoleSequencesError
		{
			get { return (Northface.Tools.ORM.ObjectModel.TooFewRoleSequencesError)this.GetRolePlayer(TooFewRoleSequencesErrorMetaRoleGuid); }
			set { this.SetRolePlayer(TooFewRoleSequencesErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region Constraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ConstraintMetaRoleGuidString = "fcb1aaae-a4fb-4eac-943b-af02468061d3";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ConstraintMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.ConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.ConstraintMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError.Constraint")]
		public  Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint Constraint
		{
			get { return (Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint)this.GetRolePlayer(ConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(ConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ExternalConstraintHasTooFewRoleSequencesError's Generated Constructor Code
	public  partial class ExternalConstraintHasTooFewRoleSequencesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintHasTooFewRoleSequencesError CreateExternalConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateExternalConstraintHasTooFewRoleSequencesError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintHasTooFewRoleSequencesError CreateAndInitializeExternalConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeExternalConstraintHasTooFewRoleSequencesError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintHasTooFewRoleSequencesError CreateExternalConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ExternalConstraintHasTooFewRoleSequencesError)partition.ElementFactory.CreateElementLink(typeof(ExternalConstraintHasTooFewRoleSequencesError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintHasTooFewRoleSequencesError CreateAndInitializeExternalConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ExternalConstraintHasTooFewRoleSequencesError)partition.ElementFactory.CreateElementLink(typeof(ExternalConstraintHasTooFewRoleSequencesError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ExternalConstraintHasTooFewRoleSequencesError
	/// <summary>
	/// ExternalConstraintHasTooFewRoleSequencesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError))]
	public sealed class ExternalConstraintHasTooFewRoleSequencesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintHasTooFewRoleSequencesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooFewRoleSequencesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ExternalConstraintHasTooFewRoleSequencesErrorElementFactoryCreator Instance
		{
			get
			{
				return new ExternalConstraintHasTooFewRoleSequencesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError")]
	public  partial class ExternalConstraintHasTooManyRoleSequencesError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ExternalConstraintHasTooManyRoleSequencesError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "5aec6871-993f-4373-8627-fb5eba073edd";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ExternalConstraintHasTooManyRoleSequencesError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ExternalConstraintHasTooManyRoleSequencesError.MetaClassGuid;
		#endregion

		#region TooManyRoleSequencesError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String TooManyRoleSequencesErrorMetaRoleGuidString = "b65ff045-247b-4890-aa03-44d53c1832ad";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid TooManyRoleSequencesErrorMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesError")]
		public  Northface.Tools.ORM.ObjectModel.TooManyRoleSequencesError TooManyRoleSequencesError
		{
			get { return (Northface.Tools.ORM.ObjectModel.TooManyRoleSequencesError)this.GetRolePlayer(TooManyRoleSequencesErrorMetaRoleGuid); }
			set { this.SetRolePlayer(TooManyRoleSequencesErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region Constraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ConstraintMetaRoleGuidString = "943eb43b-956e-4d97-9917-773386b53025";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ConstraintMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.ConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.ConstraintMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError.Constraint")]
		public  Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint Constraint
		{
			get { return (Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint)this.GetRolePlayer(ConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(ConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ExternalConstraintHasTooManyRoleSequencesError's Generated Constructor Code
	public  partial class ExternalConstraintHasTooManyRoleSequencesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintHasTooManyRoleSequencesError CreateExternalConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateExternalConstraintHasTooManyRoleSequencesError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintHasTooManyRoleSequencesError CreateAndInitializeExternalConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeExternalConstraintHasTooManyRoleSequencesError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintHasTooManyRoleSequencesError CreateExternalConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ExternalConstraintHasTooManyRoleSequencesError)partition.ElementFactory.CreateElementLink(typeof(ExternalConstraintHasTooManyRoleSequencesError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintHasTooManyRoleSequencesError CreateAndInitializeExternalConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ExternalConstraintHasTooManyRoleSequencesError)partition.ElementFactory.CreateElementLink(typeof(ExternalConstraintHasTooManyRoleSequencesError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ExternalConstraintHasTooManyRoleSequencesError
	/// <summary>
	/// ExternalConstraintHasTooManyRoleSequencesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError))]
	public sealed class ExternalConstraintHasTooManyRoleSequencesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintHasTooManyRoleSequencesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ExternalConstraintHasTooManyRoleSequencesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ExternalConstraintHasTooManyRoleSequencesErrorElementFactoryCreator Instance
		{
			get
			{
				return new ExternalConstraintHasTooManyRoleSequencesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError")]
	public  partial class ObjectTypeHasDuplicateNameError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ObjectTypeHasDuplicateNameError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3743ce4a-674e-4aeb-8e1c-a195fa76a063";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ObjectTypeHasDuplicateNameError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ObjectTypeHasDuplicateNameError.MetaClassGuid;
		#endregion

		#region DuplicateNameError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String DuplicateNameErrorMetaRoleGuidString = "250dd899-b1d7-40f2-88dc-b0e75c7d94c7";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid DuplicateNameErrorMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameError")]
		public  Northface.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError DuplicateNameError
		{
			get { return (Northface.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError)this.GetRolePlayer(DuplicateNameErrorMetaRoleGuid); }
			set { this.SetRolePlayer(DuplicateNameErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region ObjectTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ObjectTypeCollectionMetaRoleGuidString = "532ed9c4-f43f-434f-8fab-f4dd2bad747e";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ObjectTypeCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeCollection")]
		public  Northface.Tools.ORM.ObjectModel.ObjectType ObjectTypeCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(ObjectTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ObjectTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ObjectTypeHasDuplicateNameError's Generated Constructor Code
	public  partial class ObjectTypeHasDuplicateNameError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasDuplicateNameError CreateObjectTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateObjectTypeHasDuplicateNameError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasDuplicateNameError CreateAndInitializeObjectTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectTypeHasDuplicateNameError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasDuplicateNameError CreateObjectTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ObjectTypeHasDuplicateNameError)partition.ElementFactory.CreateElementLink(typeof(ObjectTypeHasDuplicateNameError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasDuplicateNameError CreateAndInitializeObjectTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectTypeHasDuplicateNameError)partition.ElementFactory.CreateElementLink(typeof(ObjectTypeHasDuplicateNameError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectTypeHasDuplicateNameError
	/// <summary>
	/// ObjectTypeHasDuplicateNameError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError))]
	public sealed class ObjectTypeHasDuplicateNameErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasDuplicateNameErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectTypeHasDuplicateNameErrorElementFactoryCreator Instance
		{
			get
			{
				return new ObjectTypeHasDuplicateNameErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError")]
	public  partial class FactTypeHasDuplicateNameError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region FactTypeHasDuplicateNameError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "688413fc-399c-4ebb-b1e0-cc6e302b0e08";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactTypeHasDuplicateNameError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactTypeHasDuplicateNameError.MetaClassGuid;
		#endregion

		#region DuplicateNameError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String DuplicateNameErrorMetaRoleGuidString = "1c6dcf27-af15-4850-a00d-dfe60594cbfc";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid DuplicateNameErrorMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.DuplicateNameError")]
		public  Northface.Tools.ORM.ObjectModel.FactTypeDuplicateNameError DuplicateNameError
		{
			get { return (Northface.Tools.ORM.ObjectModel.FactTypeDuplicateNameError)this.GetRolePlayer(DuplicateNameErrorMetaRoleGuid); }
			set { this.SetRolePlayer(DuplicateNameErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeCollectionMetaRoleGuidString = "66f806d4-d65d-4ef6-9a22-72c4044dff83";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.FactTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.FactTypeCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError.FactTypeCollection")]
		public  Northface.Tools.ORM.ObjectModel.FactType FactTypeCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactTypeHasDuplicateNameError's Generated Constructor Code
	public  partial class FactTypeHasDuplicateNameError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasDuplicateNameError CreateFactTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactTypeHasDuplicateNameError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasDuplicateNameError CreateAndInitializeFactTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeHasDuplicateNameError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasDuplicateNameError CreateFactTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactTypeHasDuplicateNameError)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasDuplicateNameError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasDuplicateNameError CreateAndInitializeFactTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeHasDuplicateNameError)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasDuplicateNameError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeHasDuplicateNameError
	/// <summary>
	/// FactTypeHasDuplicateNameError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError))]
	public sealed class FactTypeHasDuplicateNameErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasDuplicateNameErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.FactTypeHasDuplicateNameError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeHasDuplicateNameErrorElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeHasDuplicateNameErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading")]
	public  partial class ReadingOrderHasReading : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ReadingOrderHasReading's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "929ef898-db8d-44cf-b2d2-f1b030752b08";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ReadingOrderHasReading.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ReadingOrderHasReading.MetaClassGuid;
		#endregion

		#region ReadingCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReadingCollectionMetaRoleGuidString = "f09f87e5-bb49-4cc7-be1d-26104769e721";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReadingCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollection")]
		public  Northface.Tools.ORM.ObjectModel.Reading ReadingCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.Reading)this.GetRolePlayer(ReadingCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ReadingCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ReadingOrder's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReadingOrderMetaRoleGuidString = "6d039c34-74fb-47dd-9dbd-19d7754ad67f";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReadingOrderMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrder")]
		public  Northface.Tools.ORM.ObjectModel.ReadingOrder ReadingOrder
		{
			get { return (Northface.Tools.ORM.ObjectModel.ReadingOrder)this.GetRolePlayer(ReadingOrderMetaRoleGuid); }
			set { this.SetRolePlayer(ReadingOrderMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ReadingOrderHasReading's Generated Constructor Code
	public  partial class ReadingOrderHasReading
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrderHasReading(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrderHasReading CreateReadingOrderHasReading(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateReadingOrderHasReading(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrderHasReading CreateAndInitializeReadingOrderHasReading(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReadingOrderHasReading(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrderHasReading(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrderHasReading CreateReadingOrderHasReading(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ReadingOrderHasReading)partition.ElementFactory.CreateElementLink(typeof(ReadingOrderHasReading), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrderHasReading CreateAndInitializeReadingOrderHasReading(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ReadingOrderHasReading)partition.ElementFactory.CreateElementLink(typeof(ReadingOrderHasReading), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ReadingOrderHasReading
	/// <summary>
	/// ReadingOrderHasReading Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading))]
	public sealed class ReadingOrderHasReadingElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrderHasReadingElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ReadingOrderHasReading( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReadingOrderHasReadingElementFactoryCreator Instance
		{
			get
			{
				return new ReadingOrderHasReadingElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole")]
	public  partial class ReadingOrderHasRole : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ReadingOrderHasRole's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "5f244cf8-a0e0-48cc-9e74-ed2ee3c853b0";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ReadingOrderHasRole.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ReadingOrderHasRole.MetaClassGuid;
		#endregion

		#region RoleCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RoleCollectionMetaRoleGuidString = "fb522e84-ba2d-49a0-bd18-37cf1f00ae11";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RoleCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole.RoleCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole.RoleCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole.RoleCollection")]
		public  Northface.Tools.ORM.ObjectModel.Role RoleCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.Role)this.GetRolePlayer(RoleCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(RoleCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ReadingOrder's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReadingOrderMetaRoleGuidString = "71a07cfd-e938-414e-a390-1cd6dacd690e";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReadingOrderMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole.ReadingOrderMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole.ReadingOrderMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole.ReadingOrder")]
		public  Northface.Tools.ORM.ObjectModel.ReadingOrder ReadingOrder
		{
			get { return (Northface.Tools.ORM.ObjectModel.ReadingOrder)this.GetRolePlayer(ReadingOrderMetaRoleGuid); }
			set { this.SetRolePlayer(ReadingOrderMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ReadingOrderHasRole's Generated Constructor Code
	public  partial class ReadingOrderHasRole
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrderHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrderHasRole CreateReadingOrderHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateReadingOrderHasRole(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrderHasRole CreateAndInitializeReadingOrderHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReadingOrderHasRole(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrderHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrderHasRole CreateReadingOrderHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ReadingOrderHasRole)partition.ElementFactory.CreateElementLink(typeof(ReadingOrderHasRole), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrderHasRole CreateAndInitializeReadingOrderHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ReadingOrderHasRole)partition.ElementFactory.CreateElementLink(typeof(ReadingOrderHasRole), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ReadingOrderHasRole
	/// <summary>
	/// ReadingOrderHasRole Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole))]
	public sealed class ReadingOrderHasRoleElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrderHasRoleElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ReadingOrderHasRole( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReadingOrderHasRoleElementFactoryCreator Instance
		{
			get
			{
				return new ReadingOrderHasRoleElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder")]
	public  partial class FactTypeHasReadingOrder : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region FactTypeHasReadingOrder's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "1170285d-5118-4945-81a9-c6ea63863c39";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactTypeHasReadingOrder.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactTypeHasReadingOrder.MetaClassGuid;
		#endregion

		#region ReadingOrderCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReadingOrderCollectionMetaRoleGuidString = "ac5ae124-5cf2-4c0f-9071-11d57cdf6668";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReadingOrderCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollection")]
		public  Northface.Tools.ORM.ObjectModel.ReadingOrder ReadingOrderCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.ReadingOrder)this.GetRolePlayer(ReadingOrderCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ReadingOrderCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeMetaRoleGuidString = "b852113d-a2b6-44ff-82a5-5295e69faedb";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactType")]
		public  Northface.Tools.ORM.ObjectModel.FactType FactType
		{
			get { return (Northface.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactTypeHasReadingOrder's Generated Constructor Code
	public  partial class FactTypeHasReadingOrder
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasReadingOrder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasReadingOrder CreateFactTypeHasReadingOrder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactTypeHasReadingOrder(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasReadingOrder CreateAndInitializeFactTypeHasReadingOrder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeHasReadingOrder(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasReadingOrder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasReadingOrder CreateFactTypeHasReadingOrder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactTypeHasReadingOrder)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasReadingOrder), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasReadingOrder CreateAndInitializeFactTypeHasReadingOrder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeHasReadingOrder)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasReadingOrder), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeHasReadingOrder
	/// <summary>
	/// FactTypeHasReadingOrder Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder))]
	public sealed class FactTypeHasReadingOrderElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasReadingOrderElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.FactTypeHasReadingOrder( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeHasReadingOrderElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeHasReadingOrderElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind")]
	public  partial class ModelHasReferenceModeKind : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ModelHasReferenceModeKind's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "ecdad33e-fb6f-49a8-84da-abdb9f6d936c";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ModelHasReferenceModeKind.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ModelHasReferenceModeKind.MetaClassGuid;
		#endregion

		#region ReferenceModeKindCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReferenceModeKindCollectionMetaRoleGuidString = "45bfc8c9-bf29-4e6d-81af-89f82a92e126";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReferenceModeKindCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollection")]
		public  Northface.Tools.ORM.ObjectModel.ReferenceModeKind ReferenceModeKindCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.ReferenceModeKind)this.GetRolePlayer(ReferenceModeKindCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ReferenceModeKindCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "e7a1e999-7f55-4420-b318-d3be76e3809d";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.Model")]
		public  Northface.Tools.ORM.ObjectModel.ORMModel Model
		{
			get { return (Northface.Tools.ORM.ObjectModel.ORMModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ModelHasReferenceModeKind's Generated Constructor Code
	public  partial class ModelHasReferenceModeKind
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasReferenceModeKind CreateModelHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateModelHasReferenceModeKind(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasReferenceModeKind CreateAndInitializeModelHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeModelHasReferenceModeKind(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasReferenceModeKind CreateModelHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ModelHasReferenceModeKind)partition.ElementFactory.CreateElementLink(typeof(ModelHasReferenceModeKind), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasReferenceModeKind CreateAndInitializeModelHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ModelHasReferenceModeKind)partition.ElementFactory.CreateElementLink(typeof(ModelHasReferenceModeKind), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ModelHasReferenceModeKind
	/// <summary>
	/// ModelHasReferenceModeKind Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind))]
	public sealed class ModelHasReferenceModeKindElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasReferenceModeKindElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ModelHasReferenceModeKind( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ModelHasReferenceModeKindElementFactoryCreator Instance
		{
			get
			{
				return new ModelHasReferenceModeKindElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode")]
	public  partial class ModelHasReferenceMode : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ModelHasReferenceMode's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3a05bf70-175f-4dac-9692-ca158806acb2";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ModelHasReferenceMode.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ModelHasReferenceMode.MetaClassGuid;
		#endregion

		#region ReferenceModeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReferenceModeCollectionMetaRoleGuidString = "47a57da0-d5e9-4291-a418-1fc328d668b3";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReferenceModeCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollection")]
		public  Northface.Tools.ORM.ObjectModel.ReferenceMode ReferenceModeCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.ReferenceMode)this.GetRolePlayer(ReferenceModeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ReferenceModeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "213e68bd-1cdf-4e91-be12-be0a74d334fb";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode.Model")]
		public  Northface.Tools.ORM.ObjectModel.ORMModel Model
		{
			get { return (Northface.Tools.ORM.ObjectModel.ORMModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ModelHasReferenceMode's Generated Constructor Code
	public  partial class ModelHasReferenceMode
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasReferenceMode(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasReferenceMode CreateModelHasReferenceMode(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateModelHasReferenceMode(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasReferenceMode CreateAndInitializeModelHasReferenceMode(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeModelHasReferenceMode(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasReferenceMode CreateModelHasReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ModelHasReferenceMode)partition.ElementFactory.CreateElementLink(typeof(ModelHasReferenceMode), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasReferenceMode CreateAndInitializeModelHasReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ModelHasReferenceMode)partition.ElementFactory.CreateElementLink(typeof(ModelHasReferenceMode), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ModelHasReferenceMode
	/// <summary>
	/// ModelHasReferenceMode Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode))]
	public sealed class ModelHasReferenceModeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasReferenceModeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ModelHasReferenceMode( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ModelHasReferenceModeElementFactoryCreator Instance
		{
			get
			{
				return new ModelHasReferenceModeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind")]
	public  partial class ReferenceModeHasReferenceModeKind : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ReferenceModeHasReferenceModeKind's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "b82e579e-4d0c-4411-9135-8c8b15979355";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ReferenceModeHasReferenceModeKind.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ReferenceModeHasReferenceModeKind.MetaClassGuid;
		#endregion

		#region Kind's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String KindMetaRoleGuidString = "bfb270b2-dcd7-4637-83af-956b28b9cd83";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid KindMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.KindMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.KindMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.Kind")]
		public  Northface.Tools.ORM.ObjectModel.ReferenceModeKind Kind
		{
			get { return (Northface.Tools.ORM.ObjectModel.ReferenceModeKind)this.GetRolePlayer(KindMetaRoleGuid); }
			set { this.SetRolePlayer(KindMetaRoleGuid, value); }
		}
		
		#endregion
		#region ReferenceModeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReferenceModeCollectionMetaRoleGuidString = "babae7a3-71e7-426b-a5c3-d8ec45d12df6";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReferenceModeCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeCollection")]
		public  Northface.Tools.ORM.ObjectModel.ReferenceMode ReferenceModeCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.ReferenceMode)this.GetRolePlayer(ReferenceModeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ReferenceModeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ReferenceModeHasReferenceModeKind's Generated Constructor Code
	public  partial class ReferenceModeHasReferenceModeKind
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReferenceModeHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReferenceModeHasReferenceModeKind CreateReferenceModeHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateReferenceModeHasReferenceModeKind(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReferenceModeHasReferenceModeKind CreateAndInitializeReferenceModeHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReferenceModeHasReferenceModeKind(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ReferenceModeHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReferenceModeHasReferenceModeKind CreateReferenceModeHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ReferenceModeHasReferenceModeKind)partition.ElementFactory.CreateElementLink(typeof(ReferenceModeHasReferenceModeKind), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReferenceModeHasReferenceModeKind CreateAndInitializeReferenceModeHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ReferenceModeHasReferenceModeKind)partition.ElementFactory.CreateElementLink(typeof(ReferenceModeHasReferenceModeKind), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ReferenceModeHasReferenceModeKind
	/// <summary>
	/// ReferenceModeHasReferenceModeKind Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind))]
	public sealed class ReferenceModeHasReferenceModeKindElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReferenceModeHasReferenceModeKindElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReferenceModeHasReferenceModeKindElementFactoryCreator Instance
		{
			get
			{
				return new ReferenceModeHasReferenceModeKindElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint")]
	public  partial class ModelHasSingleColumnExternalConstraint : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ModelHasSingleColumnExternalConstraint's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c39ab93e-10fd-4629-a27a-b5560039f36c";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ModelHasSingleColumnExternalConstraint.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ModelHasSingleColumnExternalConstraint.MetaClassGuid;
		#endregion

		#region SingleColumnExternalConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SingleColumnExternalConstraintCollectionMetaRoleGuidString = "e5a1060b-13ab-4ab1-8a12-c6aeeef6f8bf";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SingleColumnExternalConstraintCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.SingleColumnExternalConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.SingleColumnExternalConstraintCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.SingleColumnExternalConstraintCollection")]
		public  Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint SingleColumnExternalConstraintCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint)this.GetRolePlayer(SingleColumnExternalConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(SingleColumnExternalConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "1769af74-7b45-4b04-b049-ec0b7fded9f0";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.ModelMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint.Model")]
		public  Northface.Tools.ORM.ObjectModel.ORMModel Model
		{
			get { return (Northface.Tools.ORM.ObjectModel.ORMModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ModelHasSingleColumnExternalConstraint's Generated Constructor Code
	public  partial class ModelHasSingleColumnExternalConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasSingleColumnExternalConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasSingleColumnExternalConstraint CreateModelHasSingleColumnExternalConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateModelHasSingleColumnExternalConstraint(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasSingleColumnExternalConstraint CreateAndInitializeModelHasSingleColumnExternalConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeModelHasSingleColumnExternalConstraint(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasSingleColumnExternalConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasSingleColumnExternalConstraint CreateModelHasSingleColumnExternalConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ModelHasSingleColumnExternalConstraint)partition.ElementFactory.CreateElementLink(typeof(ModelHasSingleColumnExternalConstraint), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasSingleColumnExternalConstraint CreateAndInitializeModelHasSingleColumnExternalConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ModelHasSingleColumnExternalConstraint)partition.ElementFactory.CreateElementLink(typeof(ModelHasSingleColumnExternalConstraint), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ModelHasSingleColumnExternalConstraint
	/// <summary>
	/// ModelHasSingleColumnExternalConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint))]
	public sealed class ModelHasSingleColumnExternalConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasSingleColumnExternalConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ModelHasSingleColumnExternalConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ModelHasSingleColumnExternalConstraintElementFactoryCreator Instance
		{
			get
			{
				return new ModelHasSingleColumnExternalConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint")]
	public  partial class ModelHasMultiColumnExternalConstraint : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ModelHasMultiColumnExternalConstraint's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "b4dc9ac8-f3f3-4280-bf70-32bd74695ea3";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ModelHasMultiColumnExternalConstraint.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ModelHasMultiColumnExternalConstraint.MetaClassGuid;
		#endregion

		#region MultiColumnExternalConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String MultiColumnExternalConstraintCollectionMetaRoleGuidString = "d1aac147-a429-4d57-a8c7-e658130e1e74";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid MultiColumnExternalConstraintCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.MultiColumnExternalConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.MultiColumnExternalConstraintCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.MultiColumnExternalConstraintCollection")]
		public  Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint MultiColumnExternalConstraintCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint)this.GetRolePlayer(MultiColumnExternalConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(MultiColumnExternalConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "8e41a69c-0797-4882-ac2a-2fd39cef5a18";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.ModelMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint.Model")]
		public  Northface.Tools.ORM.ObjectModel.ORMModel Model
		{
			get { return (Northface.Tools.ORM.ObjectModel.ORMModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ModelHasMultiColumnExternalConstraint's Generated Constructor Code
	public  partial class ModelHasMultiColumnExternalConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasMultiColumnExternalConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasMultiColumnExternalConstraint CreateModelHasMultiColumnExternalConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateModelHasMultiColumnExternalConstraint(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasMultiColumnExternalConstraint CreateAndInitializeModelHasMultiColumnExternalConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeModelHasMultiColumnExternalConstraint(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasMultiColumnExternalConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasMultiColumnExternalConstraint CreateModelHasMultiColumnExternalConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ModelHasMultiColumnExternalConstraint)partition.ElementFactory.CreateElementLink(typeof(ModelHasMultiColumnExternalConstraint), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasMultiColumnExternalConstraint CreateAndInitializeModelHasMultiColumnExternalConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ModelHasMultiColumnExternalConstraint)partition.ElementFactory.CreateElementLink(typeof(ModelHasMultiColumnExternalConstraint), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ModelHasMultiColumnExternalConstraint
	/// <summary>
	/// ModelHasMultiColumnExternalConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint))]
	public sealed class ModelHasMultiColumnExternalConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasMultiColumnExternalConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ModelHasMultiColumnExternalConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ModelHasMultiColumnExternalConstraintElementFactoryCreator Instance
		{
			get
			{
				return new ModelHasMultiColumnExternalConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint")]
	public  partial class FactTypeHasInternalConstraint : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region FactTypeHasInternalConstraint's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c2f9b082-f991-4fbd-9945-d55032e7ce27";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactTypeHasInternalConstraint.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactTypeHasInternalConstraint.MetaClassGuid;
		#endregion

		#region InternalConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String InternalConstraintCollectionMetaRoleGuidString = "bee9d250-53f3-48b5-b63b-337f545bf988";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid InternalConstraintCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.InternalConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.InternalConstraintCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.InternalConstraintCollection")]
		public  Northface.Tools.ORM.ObjectModel.InternalConstraint InternalConstraintCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.InternalConstraint)this.GetRolePlayer(InternalConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(InternalConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeMetaRoleGuidString = "95904280-42fc-47ce-8ed3-40f58b2deec9";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.FactTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.FactTypeMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint.FactType")]
		public  Northface.Tools.ORM.ObjectModel.FactType FactType
		{
			get { return (Northface.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactTypeHasInternalConstraint's Generated Constructor Code
	public  partial class FactTypeHasInternalConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasInternalConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasInternalConstraint CreateFactTypeHasInternalConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactTypeHasInternalConstraint(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasInternalConstraint CreateAndInitializeFactTypeHasInternalConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeHasInternalConstraint(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasInternalConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasInternalConstraint CreateFactTypeHasInternalConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactTypeHasInternalConstraint)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasInternalConstraint), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasInternalConstraint CreateAndInitializeFactTypeHasInternalConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeHasInternalConstraint)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasInternalConstraint), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeHasInternalConstraint
	/// <summary>
	/// FactTypeHasInternalConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint))]
	public sealed class FactTypeHasInternalConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasInternalConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.FactTypeHasInternalConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeHasInternalConstraintElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeHasInternalConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError")]
	public  partial class SingleColumnExternalConstraintHasDuplicateNameError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region SingleColumnExternalConstraintHasDuplicateNameError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "36e3a440-8e08-4b01-91cb-9182ec03f621";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SingleColumnExternalConstraintHasDuplicateNameError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SingleColumnExternalConstraintHasDuplicateNameError.MetaClassGuid;
		#endregion

		#region DuplicateNameError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String DuplicateNameErrorMetaRoleGuidString = "f16cdde1-b246-4528-a9c2-49ba4be7c288";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid DuplicateNameErrorMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.DuplicateNameError")]
		public  Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError DuplicateNameError
		{
			get { return (Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError)this.GetRolePlayer(DuplicateNameErrorMetaRoleGuid); }
			set { this.SetRolePlayer(DuplicateNameErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region SingleColumnExternalConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SingleColumnExternalConstraintCollectionMetaRoleGuidString = "2c19092d-87b2-4b01-90c3-ffac3a8b4828";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SingleColumnExternalConstraintCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.SingleColumnExternalConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.SingleColumnExternalConstraintCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError.SingleColumnExternalConstraintCollection")]
		public  Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint SingleColumnExternalConstraintCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint)this.GetRolePlayer(SingleColumnExternalConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(SingleColumnExternalConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SingleColumnExternalConstraintHasDuplicateNameError's Generated Constructor Code
	public  partial class SingleColumnExternalConstraintHasDuplicateNameError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleColumnExternalConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleColumnExternalConstraintHasDuplicateNameError CreateSingleColumnExternalConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSingleColumnExternalConstraintHasDuplicateNameError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleColumnExternalConstraintHasDuplicateNameError CreateAndInitializeSingleColumnExternalConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSingleColumnExternalConstraintHasDuplicateNameError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleColumnExternalConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleColumnExternalConstraintHasDuplicateNameError CreateSingleColumnExternalConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SingleColumnExternalConstraintHasDuplicateNameError)partition.ElementFactory.CreateElementLink(typeof(SingleColumnExternalConstraintHasDuplicateNameError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleColumnExternalConstraintHasDuplicateNameError CreateAndInitializeSingleColumnExternalConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SingleColumnExternalConstraintHasDuplicateNameError)partition.ElementFactory.CreateElementLink(typeof(SingleColumnExternalConstraintHasDuplicateNameError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SingleColumnExternalConstraintHasDuplicateNameError
	/// <summary>
	/// SingleColumnExternalConstraintHasDuplicateNameError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError))]
	public sealed class SingleColumnExternalConstraintHasDuplicateNameErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleColumnExternalConstraintHasDuplicateNameErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasDuplicateNameError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SingleColumnExternalConstraintHasDuplicateNameErrorElementFactoryCreator Instance
		{
			get
			{
				return new SingleColumnExternalConstraintHasDuplicateNameErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError")]
	public  partial class MultiColumnExternalConstraintHasDuplicateNameError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region MultiColumnExternalConstraintHasDuplicateNameError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "ed53d70d-b151-45bb-a0dd-13f50dc475c1";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = MultiColumnExternalConstraintHasDuplicateNameError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = MultiColumnExternalConstraintHasDuplicateNameError.MetaClassGuid;
		#endregion

		#region DuplicateNameError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String DuplicateNameErrorMetaRoleGuidString = "83d48411-c26c-4755-a726-76ef2716998a";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid DuplicateNameErrorMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.DuplicateNameError")]
		public  Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError DuplicateNameError
		{
			get { return (Northface.Tools.ORM.ObjectModel.ConstraintDuplicateNameError)this.GetRolePlayer(DuplicateNameErrorMetaRoleGuid); }
			set { this.SetRolePlayer(DuplicateNameErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region MultiColumnExternalConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String MultiColumnExternalConstraintCollectionMetaRoleGuidString = "f2ee7a71-9202-4dc3-9843-ea3a7c1585e3";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid MultiColumnExternalConstraintCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.MultiColumnExternalConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.MultiColumnExternalConstraintCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError.MultiColumnExternalConstraintCollection")]
		public  Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint MultiColumnExternalConstraintCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint)this.GetRolePlayer(MultiColumnExternalConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(MultiColumnExternalConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region MultiColumnExternalConstraintHasDuplicateNameError's Generated Constructor Code
	public  partial class MultiColumnExternalConstraintHasDuplicateNameError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintHasDuplicateNameError CreateMultiColumnExternalConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateMultiColumnExternalConstraintHasDuplicateNameError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintHasDuplicateNameError CreateAndInitializeMultiColumnExternalConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeMultiColumnExternalConstraintHasDuplicateNameError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintHasDuplicateNameError CreateMultiColumnExternalConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (MultiColumnExternalConstraintHasDuplicateNameError)partition.ElementFactory.CreateElementLink(typeof(MultiColumnExternalConstraintHasDuplicateNameError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintHasDuplicateNameError CreateAndInitializeMultiColumnExternalConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (MultiColumnExternalConstraintHasDuplicateNameError)partition.ElementFactory.CreateElementLink(typeof(MultiColumnExternalConstraintHasDuplicateNameError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for MultiColumnExternalConstraintHasDuplicateNameError
	/// <summary>
	/// MultiColumnExternalConstraintHasDuplicateNameError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError))]
	public sealed class MultiColumnExternalConstraintHasDuplicateNameErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalConstraintHasDuplicateNameErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasDuplicateNameError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static MultiColumnExternalConstraintHasDuplicateNameErrorElementFactoryCreator Instance
		{
			get
			{
				return new MultiColumnExternalConstraintHasDuplicateNameErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier")]
	public  partial class EntityTypeHasPreferredIdentifier : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region EntityTypeHasPreferredIdentifier's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "4e07ae25-5acd-47b4-b3cd-f92fef621975";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = EntityTypeHasPreferredIdentifier.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = EntityTypeHasPreferredIdentifier.MetaClassGuid;
		#endregion

		#region PreferredIdentifier's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String PreferredIdentifierMetaRoleGuidString = "6d26f6c2-85d7-47e5-8bba-54824fbd5ee2";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid PreferredIdentifierMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifier")]
		public  Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence PreferredIdentifier
		{
			get { return (Northface.Tools.ORM.ObjectModel.ConstraintRoleSequence)this.GetRolePlayer(PreferredIdentifierMetaRoleGuid); }
			set { this.SetRolePlayer(PreferredIdentifierMetaRoleGuid, value); }
		}
		
		#endregion
		#region PreferredIdentifierFor's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String PreferredIdentifierForMetaRoleGuidString = "2f929a15-e1d5-4486-81de-d43e7df45405";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid PreferredIdentifierForMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierFor")]
		public  Northface.Tools.ORM.ObjectModel.ObjectType PreferredIdentifierFor
		{
			get { return (Northface.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(PreferredIdentifierForMetaRoleGuid); }
			set { this.SetRolePlayer(PreferredIdentifierForMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region EntityTypeHasPreferredIdentifier's Generated Constructor Code
	public  partial class EntityTypeHasPreferredIdentifier
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EntityTypeHasPreferredIdentifier(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EntityTypeHasPreferredIdentifier CreateEntityTypeHasPreferredIdentifier(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateEntityTypeHasPreferredIdentifier(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EntityTypeHasPreferredIdentifier CreateAndInitializeEntityTypeHasPreferredIdentifier(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeEntityTypeHasPreferredIdentifier(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public EntityTypeHasPreferredIdentifier(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EntityTypeHasPreferredIdentifier CreateEntityTypeHasPreferredIdentifier(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (EntityTypeHasPreferredIdentifier)partition.ElementFactory.CreateElementLink(typeof(EntityTypeHasPreferredIdentifier), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EntityTypeHasPreferredIdentifier CreateAndInitializeEntityTypeHasPreferredIdentifier(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (EntityTypeHasPreferredIdentifier)partition.ElementFactory.CreateElementLink(typeof(EntityTypeHasPreferredIdentifier), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for EntityTypeHasPreferredIdentifier
	/// <summary>
	/// EntityTypeHasPreferredIdentifier Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier))]
	public sealed class EntityTypeHasPreferredIdentifierElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EntityTypeHasPreferredIdentifierElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static EntityTypeHasPreferredIdentifierElementFactoryCreator Instance
		{
			get
			{
				return new EntityTypeHasPreferredIdentifierElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError")]
	public  partial class ReadingHasTooManyRolesError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ReadingHasTooManyRolesError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c5e1a9c2-53c4-4de9-a6ef-b9205463e481";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ReadingHasTooManyRolesError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ReadingHasTooManyRolesError.MetaClassGuid;
		#endregion

		#region TooManyRolesError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String TooManyRolesErrorMetaRoleGuidString = "cda3f679-4425-4e56-92b1-b5eecc6fc459";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid TooManyRolesErrorMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesError")]
		public  Northface.Tools.ORM.ObjectModel.TooManyReadingRolesError TooManyRolesError
		{
			get { return (Northface.Tools.ORM.ObjectModel.TooManyReadingRolesError)this.GetRolePlayer(TooManyRolesErrorMetaRoleGuid); }
			set { this.SetRolePlayer(TooManyRolesErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region Reading's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReadingMetaRoleGuidString = "45b44737-503c-4264-8062-5a23bb99e1a3";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReadingMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.Reading")]
		public  Northface.Tools.ORM.ObjectModel.Reading Reading
		{
			get { return (Northface.Tools.ORM.ObjectModel.Reading)this.GetRolePlayer(ReadingMetaRoleGuid); }
			set { this.SetRolePlayer(ReadingMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ReadingHasTooManyRolesError's Generated Constructor Code
	public  partial class ReadingHasTooManyRolesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingHasTooManyRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasTooManyRolesError CreateReadingHasTooManyRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateReadingHasTooManyRolesError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasTooManyRolesError CreateAndInitializeReadingHasTooManyRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReadingHasTooManyRolesError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingHasTooManyRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasTooManyRolesError CreateReadingHasTooManyRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ReadingHasTooManyRolesError)partition.ElementFactory.CreateElementLink(typeof(ReadingHasTooManyRolesError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasTooManyRolesError CreateAndInitializeReadingHasTooManyRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ReadingHasTooManyRolesError)partition.ElementFactory.CreateElementLink(typeof(ReadingHasTooManyRolesError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ReadingHasTooManyRolesError
	/// <summary>
	/// ReadingHasTooManyRolesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError))]
	public sealed class ReadingHasTooManyRolesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingHasTooManyRolesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReadingHasTooManyRolesErrorElementFactoryCreator Instance
		{
			get
			{
				return new ReadingHasTooManyRolesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError")]
	public  partial class ReadingHasTooFewRolesError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ReadingHasTooFewRolesError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "6eaa9466-7d37-4c73-a92d-3f96b5f06cf3";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ReadingHasTooFewRolesError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ReadingHasTooFewRolesError.MetaClassGuid;
		#endregion

		#region TooFewRolesError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String TooFewRolesErrorMetaRoleGuidString = "b5991c3d-0013-46ab-9f17-9a3c70d69e57";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid TooFewRolesErrorMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesError")]
		public  Northface.Tools.ORM.ObjectModel.TooFewReadingRolesError TooFewRolesError
		{
			get { return (Northface.Tools.ORM.ObjectModel.TooFewReadingRolesError)this.GetRolePlayer(TooFewRolesErrorMetaRoleGuid); }
			set { this.SetRolePlayer(TooFewRolesErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region Reading's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReadingMetaRoleGuidString = "60e3df7d-cfad-4cf6-9d9b-5569fa68e373";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReadingMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.Reading")]
		public  Northface.Tools.ORM.ObjectModel.Reading Reading
		{
			get { return (Northface.Tools.ORM.ObjectModel.Reading)this.GetRolePlayer(ReadingMetaRoleGuid); }
			set { this.SetRolePlayer(ReadingMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ReadingHasTooFewRolesError's Generated Constructor Code
	public  partial class ReadingHasTooFewRolesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingHasTooFewRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasTooFewRolesError CreateReadingHasTooFewRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateReadingHasTooFewRolesError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasTooFewRolesError CreateAndInitializeReadingHasTooFewRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReadingHasTooFewRolesError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingHasTooFewRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasTooFewRolesError CreateReadingHasTooFewRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ReadingHasTooFewRolesError)partition.ElementFactory.CreateElementLink(typeof(ReadingHasTooFewRolesError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasTooFewRolesError CreateAndInitializeReadingHasTooFewRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ReadingHasTooFewRolesError)partition.ElementFactory.CreateElementLink(typeof(ReadingHasTooFewRolesError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ReadingHasTooFewRolesError
	/// <summary>
	/// ReadingHasTooFewRolesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError))]
	public sealed class ReadingHasTooFewRolesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingHasTooFewRolesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReadingHasTooFewRolesErrorElementFactoryCreator Instance
		{
			get
			{
				return new ReadingHasTooFewRolesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError")]
	public  partial class MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "4d0d1805-bcf9-4026-91cc-e6d21b81bf3a";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.MetaClassGuid;
		#endregion

		#region ArityMismatchError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ArityMismatchErrorMetaRoleGuidString = "59b2a377-5b0e-455b-91ea-67be1e4c57ce";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ArityMismatchErrorMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchError")]
		public  Northface.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError ArityMismatchError
		{
			get { return (Northface.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError)this.GetRolePlayer(ArityMismatchErrorMetaRoleGuid); }
			set { this.SetRolePlayer(ArityMismatchErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region Constraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ConstraintMetaRoleGuidString = "4d9e7146-6f77-413e-afb4-d885bff9295e";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ConstraintMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.Constraint")]
		public  Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint Constraint
		{
			get { return (Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint)this.GetRolePlayer(ConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(ConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError's Generated Constructor Code
	public  partial class MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError CreateMultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateMultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError CreateAndInitializeMultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeMultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError CreateMultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError)partition.ElementFactory.CreateElementLink(typeof(MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError CreateAndInitializeMultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError)partition.ElementFactory.CreateElementLink(typeof(MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError
	/// <summary>
	/// MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError))]
	public sealed class MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator Instance
		{
			get
			{
				return new MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError")]
	public  partial class FactTypeHasFactTypeRequiresReadingError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region FactTypeHasFactTypeRequiresReadingError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "91ed8d30-5100-4674-9cd8-9de09e885d5d";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactTypeHasFactTypeRequiresReadingError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactTypeHasFactTypeRequiresReadingError.MetaClassGuid;
		#endregion

		#region ReadingRequiredError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReadingRequiredErrorMetaRoleGuidString = "0726e39d-63eb-4fc5-8828-f40c2e35edaf";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReadingRequiredErrorMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredError")]
		public  Northface.Tools.ORM.ObjectModel.FactTypeRequiresReadingError ReadingRequiredError
		{
			get { return (Northface.Tools.ORM.ObjectModel.FactTypeRequiresReadingError)this.GetRolePlayer(ReadingRequiredErrorMetaRoleGuid); }
			set { this.SetRolePlayer(ReadingRequiredErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeMetaRoleGuidString = "74c01faa-0605-41c6-90db-8a8b5ca8f47d";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactType")]
		public  Northface.Tools.ORM.ObjectModel.FactType FactType
		{
			get { return (Northface.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactTypeHasFactTypeRequiresReadingError's Generated Constructor Code
	public  partial class FactTypeHasFactTypeRequiresReadingError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFactTypeRequiresReadingError CreateFactTypeHasFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactTypeHasFactTypeRequiresReadingError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFactTypeRequiresReadingError CreateAndInitializeFactTypeHasFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeHasFactTypeRequiresReadingError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFactTypeRequiresReadingError CreateFactTypeHasFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactTypeHasFactTypeRequiresReadingError)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasFactTypeRequiresReadingError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFactTypeRequiresReadingError CreateAndInitializeFactTypeHasFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeHasFactTypeRequiresReadingError)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasFactTypeRequiresReadingError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeHasFactTypeRequiresReadingError
	/// <summary>
	/// FactTypeHasFactTypeRequiresReadingError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError))]
	public sealed class FactTypeHasFactTypeRequiresReadingErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasFactTypeRequiresReadingErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeHasFactTypeRequiresReadingErrorElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeHasFactTypeRequiresReadingErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasDataType.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasDataType")]
	public  partial class ModelHasDataType : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ModelHasDataType's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "bdd7a7cc-78b3-4d9d-8fbe-f34e6d97b87f";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasDataType.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ModelHasDataType.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ModelHasDataType.MetaClassGuid;
		#endregion

		#region DataTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String DataTypeCollectionMetaRoleGuidString = "a50a62f1-df7e-42fa-9d3e-9cebb1972892";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid DataTypeCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollection")]
		public  Northface.Tools.ORM.ObjectModel.DataType DataTypeCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.DataType)this.GetRolePlayer(DataTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(DataTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "02d46f20-fccc-45cf-a958-fb8c785400b8";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ModelHasDataType.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ModelHasDataType.ModelMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ModelHasDataType.Model")]
		public  Northface.Tools.ORM.ObjectModel.ORMModel Model
		{
			get { return (Northface.Tools.ORM.ObjectModel.ORMModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ModelHasDataType's Generated Constructor Code
	public  partial class ModelHasDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasDataType CreateModelHasDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateModelHasDataType(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasDataType CreateAndInitializeModelHasDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeModelHasDataType(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasDataType CreateModelHasDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ModelHasDataType)partition.ElementFactory.CreateElementLink(typeof(ModelHasDataType), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasDataType CreateAndInitializeModelHasDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ModelHasDataType)partition.ElementFactory.CreateElementLink(typeof(ModelHasDataType), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ModelHasDataType
	/// <summary>
	/// ModelHasDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ModelHasDataType))]
	public sealed class ModelHasDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ModelHasDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ModelHasDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new ModelHasDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError")]
	public  partial class FactTypeHasFactTypeRequiresInternalUniquenessConstraintError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region FactTypeHasFactTypeRequiresInternalUniquenessConstraintError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c9aaf11f-827f-44bd-9933-ccdbe24c65ee";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.MetaClassGuid;
		#endregion

		#region InternalUniquenessConstraintRequiredError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String InternalUniquenessConstraintRequiredErrorMetaRoleGuidString = "ee6e1fa4-7bcf-44a0-a3fa-57f7cc1deea9";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid InternalUniquenessConstraintRequiredErrorMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredError")]
		public  Northface.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError InternalUniquenessConstraintRequiredError
		{
			get { return (Northface.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError)this.GetRolePlayer(InternalUniquenessConstraintRequiredErrorMetaRoleGuid); }
			set { this.SetRolePlayer(InternalUniquenessConstraintRequiredErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeMetaRoleGuidString = "ad65ad56-50e9-4485-8997-efbe76216174";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactType")]
		public  Northface.Tools.ORM.ObjectModel.FactType FactType
		{
			get { return (Northface.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactTypeHasFactTypeRequiresInternalUniquenessConstraintError's Generated Constructor Code
	public  partial class FactTypeHasFactTypeRequiresInternalUniquenessConstraintError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFactTypeRequiresInternalUniquenessConstraintError CreateFactTypeHasFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactTypeHasFactTypeRequiresInternalUniquenessConstraintError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFactTypeRequiresInternalUniquenessConstraintError CreateAndInitializeFactTypeHasFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeHasFactTypeRequiresInternalUniquenessConstraintError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFactTypeRequiresInternalUniquenessConstraintError CreateFactTypeHasFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactTypeHasFactTypeRequiresInternalUniquenessConstraintError)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFactTypeRequiresInternalUniquenessConstraintError CreateAndInitializeFactTypeHasFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeHasFactTypeRequiresInternalUniquenessConstraintError)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeHasFactTypeRequiresInternalUniquenessConstraintError
	/// <summary>
	/// FactTypeHasFactTypeRequiresInternalUniquenessConstraintError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError))]
	public sealed class FactTypeHasFactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasFactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeHasFactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeHasFactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition")]
	public  partial class ValueTypeHasValueRangeDefinition : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ValueTypeHasValueRangeDefinition's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "1fa7d98b-ef7e-4dad-b5e7-94097daeb0f8";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ValueTypeHasValueRangeDefinition.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ValueTypeHasValueRangeDefinition.MetaClassGuid;
		#endregion

		#region ValueRangeDefinition's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueRangeDefinitionMetaRoleGuidString = "e96a260b-3621-44e6-ba61-9f1b8f929489";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueRangeDefinitionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueRangeDefinition")]
		public  Northface.Tools.ORM.ObjectModel.ValueTypeValueRangeDefinition ValueRangeDefinition
		{
			get { return (Northface.Tools.ORM.ObjectModel.ValueTypeValueRangeDefinition)this.GetRolePlayer(ValueRangeDefinitionMetaRoleGuid); }
			set { this.SetRolePlayer(ValueRangeDefinitionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ValueType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueTypeMetaRoleGuidString = "46c627dd-36f8-4223-b6ff-8a7f015e77ac";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueTypeMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueTypeMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition.ValueType")]
		public  Northface.Tools.ORM.ObjectModel.ObjectType ValueType
		{
			get { return (Northface.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(ValueTypeMetaRoleGuid); }
			set { this.SetRolePlayer(ValueTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ValueTypeHasValueRangeDefinition's Generated Constructor Code
	public  partial class ValueTypeHasValueRangeDefinition
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasValueRangeDefinition(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasValueRangeDefinition CreateValueTypeHasValueRangeDefinition(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateValueTypeHasValueRangeDefinition(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasValueRangeDefinition CreateAndInitializeValueTypeHasValueRangeDefinition(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueTypeHasValueRangeDefinition(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasValueRangeDefinition(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasValueRangeDefinition CreateValueTypeHasValueRangeDefinition(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ValueTypeHasValueRangeDefinition)partition.ElementFactory.CreateElementLink(typeof(ValueTypeHasValueRangeDefinition), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasValueRangeDefinition CreateAndInitializeValueTypeHasValueRangeDefinition(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueTypeHasValueRangeDefinition)partition.ElementFactory.CreateElementLink(typeof(ValueTypeHasValueRangeDefinition), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueTypeHasValueRangeDefinition
	/// <summary>
	/// ValueTypeHasValueRangeDefinition Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition))]
	public sealed class ValueTypeHasValueRangeDefinitionElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasValueRangeDefinitionElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ValueTypeHasValueRangeDefinition( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueTypeHasValueRangeDefinitionElementFactoryCreator Instance
		{
			get
			{
				return new ValueTypeHasValueRangeDefinitionElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition")]
	public  partial class RoleHasValueRangeDefinition : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region RoleHasValueRangeDefinition's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "45bc2557-b58c-44d6-81d1-f0f7ed6f524e";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = RoleHasValueRangeDefinition.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = RoleHasValueRangeDefinition.MetaClassGuid;
		#endregion

		#region ValueRangeDefinition's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueRangeDefinitionMetaRoleGuidString = "a58e8573-d27a-4529-83d0-cb9a9cbb6f71";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueRangeDefinitionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.ValueRangeDefinition")]
		public  Northface.Tools.ORM.ObjectModel.RoleValueRangeDefinition ValueRangeDefinition
		{
			get { return (Northface.Tools.ORM.ObjectModel.RoleValueRangeDefinition)this.GetRolePlayer(ValueRangeDefinitionMetaRoleGuid); }
			set { this.SetRolePlayer(ValueRangeDefinitionMetaRoleGuid, value); }
		}
		
		#endregion
		#region Role's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RoleMetaRoleGuidString = "18050dbe-6c56-4fe3-8427-14219ffec899";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RoleMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.RoleMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.RoleMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition.Role")]
		public  Northface.Tools.ORM.ObjectModel.Role Role
		{
			get { return (Northface.Tools.ORM.ObjectModel.Role)this.GetRolePlayer(RoleMetaRoleGuid); }
			set { this.SetRolePlayer(RoleMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region RoleHasValueRangeDefinition's Generated Constructor Code
	public  partial class RoleHasValueRangeDefinition
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleHasValueRangeDefinition(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleHasValueRangeDefinition CreateRoleHasValueRangeDefinition(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateRoleHasValueRangeDefinition(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleHasValueRangeDefinition CreateAndInitializeRoleHasValueRangeDefinition(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRoleHasValueRangeDefinition(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleHasValueRangeDefinition(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleHasValueRangeDefinition CreateRoleHasValueRangeDefinition(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (RoleHasValueRangeDefinition)partition.ElementFactory.CreateElementLink(typeof(RoleHasValueRangeDefinition), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleHasValueRangeDefinition CreateAndInitializeRoleHasValueRangeDefinition(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RoleHasValueRangeDefinition)partition.ElementFactory.CreateElementLink(typeof(RoleHasValueRangeDefinition), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RoleHasValueRangeDefinition
	/// <summary>
	/// RoleHasValueRangeDefinition Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition))]
	public sealed class RoleHasValueRangeDefinitionElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleHasValueRangeDefinitionElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.RoleHasValueRangeDefinition( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RoleHasValueRangeDefinitionElementFactoryCreator Instance
		{
			get
			{
				return new RoleHasValueRangeDefinitionElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange")]
	public  partial class ValueRangeDefinitionHasValueRange : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ValueRangeDefinitionHasValueRange's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "26e66737-a802-457e-bb69-f19005fca896";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ValueRangeDefinitionHasValueRange.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ValueRangeDefinitionHasValueRange.MetaClassGuid;
		#endregion

		#region ValueRangeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueRangeCollectionMetaRoleGuidString = "ca257569-ac45-47eb-b670-2efcbe637104";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueRangeCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeCollection")]
		public  Northface.Tools.ORM.ObjectModel.ValueRange ValueRangeCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.ValueRange)this.GetRolePlayer(ValueRangeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ValueRangeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ValueRangeDefinition's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueRangeDefinitionMetaRoleGuidString = "f406b051-c206-4535-8334-f39187e3362f";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueRangeDefinitionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeDefinitionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeDefinitionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange.ValueRangeDefinition")]
		public  Northface.Tools.ORM.ObjectModel.ValueRangeDefinition ValueRangeDefinition
		{
			get { return (Northface.Tools.ORM.ObjectModel.ValueRangeDefinition)this.GetRolePlayer(ValueRangeDefinitionMetaRoleGuid); }
			set { this.SetRolePlayer(ValueRangeDefinitionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ValueRangeDefinitionHasValueRange's Generated Constructor Code
	public  partial class ValueRangeDefinitionHasValueRange
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRangeDefinitionHasValueRange(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeDefinitionHasValueRange CreateValueRangeDefinitionHasValueRange(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateValueRangeDefinitionHasValueRange(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeDefinitionHasValueRange CreateAndInitializeValueRangeDefinitionHasValueRange(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueRangeDefinitionHasValueRange(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRangeDefinitionHasValueRange(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeDefinitionHasValueRange CreateValueRangeDefinitionHasValueRange(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ValueRangeDefinitionHasValueRange)partition.ElementFactory.CreateElementLink(typeof(ValueRangeDefinitionHasValueRange), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeDefinitionHasValueRange CreateAndInitializeValueRangeDefinitionHasValueRange(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueRangeDefinitionHasValueRange)partition.ElementFactory.CreateElementLink(typeof(ValueRangeDefinitionHasValueRange), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueRangeDefinitionHasValueRange
	/// <summary>
	/// ValueRangeDefinitionHasValueRange Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange))]
	public sealed class ValueRangeDefinitionHasValueRangeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRangeDefinitionHasValueRangeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ValueRangeDefinitionHasValueRange( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueRangeDefinitionHasValueRangeElementFactoryCreator Instance
		{
			get
			{
				return new ValueRangeDefinitionHasValueRangeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError")]
	public  partial class ValueTypeHasUnspecifiedDataTypeError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ValueTypeHasUnspecifiedDataTypeError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "8bba1a0e-d440-4952-858e-d98be57a86a5";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ValueTypeHasUnspecifiedDataTypeError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ValueTypeHasUnspecifiedDataTypeError.MetaClassGuid;
		#endregion

		#region DataTypeNotSpecifiedError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String DataTypeNotSpecifiedErrorMetaRoleGuidString = "4260983a-5da6-4598-b6fb-f0e015c431a6";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid DataTypeNotSpecifiedErrorMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedError")]
		public  Northface.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError DataTypeNotSpecifiedError
		{
			get { return (Northface.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError)this.GetRolePlayer(DataTypeNotSpecifiedErrorMetaRoleGuid); }
			set { this.SetRolePlayer(DataTypeNotSpecifiedErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region ValueTypeHasDataType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueTypeHasDataTypeMetaRoleGuidString = "18a22f2c-e949-4384-be3e-6c5684f47358";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueTypeHasDataTypeMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataType")]
		public  Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType ValueTypeHasDataType
		{
			get { return (Northface.Tools.ORM.ObjectModel.ValueTypeHasDataType)this.GetRolePlayer(ValueTypeHasDataTypeMetaRoleGuid); }
			set { this.SetRolePlayer(ValueTypeHasDataTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ValueTypeHasUnspecifiedDataTypeError's Generated Constructor Code
	public  partial class ValueTypeHasUnspecifiedDataTypeError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasUnspecifiedDataTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasUnspecifiedDataTypeError CreateValueTypeHasUnspecifiedDataTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateValueTypeHasUnspecifiedDataTypeError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasUnspecifiedDataTypeError CreateAndInitializeValueTypeHasUnspecifiedDataTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueTypeHasUnspecifiedDataTypeError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasUnspecifiedDataTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasUnspecifiedDataTypeError CreateValueTypeHasUnspecifiedDataTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ValueTypeHasUnspecifiedDataTypeError)partition.ElementFactory.CreateElementLink(typeof(ValueTypeHasUnspecifiedDataTypeError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasUnspecifiedDataTypeError CreateAndInitializeValueTypeHasUnspecifiedDataTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueTypeHasUnspecifiedDataTypeError)partition.ElementFactory.CreateElementLink(typeof(ValueTypeHasUnspecifiedDataTypeError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueTypeHasUnspecifiedDataTypeError
	/// <summary>
	/// ValueTypeHasUnspecifiedDataTypeError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError))]
	public sealed class ValueTypeHasUnspecifiedDataTypeErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasUnspecifiedDataTypeErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueTypeHasUnspecifiedDataTypeErrorElementFactoryCreator Instance
		{
			get
			{
				return new ValueTypeHasUnspecifiedDataTypeErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError")]
	public  partial class MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "f9f003bb-7296-4ae9-9dde-08d0018f8aed";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.MetaClassGuid;
		#endregion

		#region CompatibleRolePlayerTypeErrorCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String CompatibleRolePlayerTypeErrorCollectionMetaRoleGuidString = "dc5071d8-d878-4821-990e-3bb8792e5a3a";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollection")]
		public  Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError CompatibleRolePlayerTypeErrorCollection
		{
			get { return (Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError)this.GetRolePlayer(CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region MultiColumnExternalConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String MultiColumnExternalConstraintMetaRoleGuidString = "0730fc3b-4254-4546-b607-0cd96a428a3e";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid MultiColumnExternalConstraintMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.MultiColumnExternalConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.MultiColumnExternalConstraintMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.MultiColumnExternalConstraint")]
		public  Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint MultiColumnExternalConstraint
		{
			get { return (Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraint)this.GetRolePlayer(MultiColumnExternalConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(MultiColumnExternalConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError's Generated Constructor Code
	public  partial class MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError CreateMultiColumnExternalConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateMultiColumnExternalConstraintHasCompatibleRolePlayerTypeError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError CreateAndInitializeMultiColumnExternalConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeMultiColumnExternalConstraintHasCompatibleRolePlayerTypeError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError CreateMultiColumnExternalConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError)partition.ElementFactory.CreateElementLink(typeof(MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError CreateAndInitializeMultiColumnExternalConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError)partition.ElementFactory.CreateElementLink(typeof(MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError
	/// <summary>
	/// MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError))]
	public sealed class MultiColumnExternalConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MultiColumnExternalConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static MultiColumnExternalConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator Instance
		{
			get
			{
				return new MultiColumnExternalConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError")]
	public  partial class SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "be96de91-b789-468a-8140-fc083adc13b7";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.MetaClassGuid;
		#endregion

		#region CompatibleRolePlayerTypeError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String CompatibleRolePlayerTypeErrorMetaRoleGuidString = "0fa1d625-2370-4adc-b0af-57266b0370c6";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid CompatibleRolePlayerTypeErrorMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeError")]
		public  Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError CompatibleRolePlayerTypeError
		{
			get { return (Northface.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError)this.GetRolePlayer(CompatibleRolePlayerTypeErrorMetaRoleGuid); }
			set { this.SetRolePlayer(CompatibleRolePlayerTypeErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region SingleColumnExternalConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SingleColumnExternalConstraintMetaRoleGuidString = "d8a3c296-8f3f-4a14-b198-ade11de6a48a";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SingleColumnExternalConstraintMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.SingleColumnExternalConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.SingleColumnExternalConstraintMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.SingleColumnExternalConstraint")]
		public  Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint SingleColumnExternalConstraint
		{
			get { return (Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraint)this.GetRolePlayer(SingleColumnExternalConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(SingleColumnExternalConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError's Generated Constructor Code
	public  partial class SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError CreateSingleColumnExternalConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSingleColumnExternalConstraintHasCompatibleRolePlayerTypeError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError CreateAndInitializeSingleColumnExternalConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSingleColumnExternalConstraintHasCompatibleRolePlayerTypeError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError CreateSingleColumnExternalConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError)partition.ElementFactory.CreateElementLink(typeof(SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError CreateAndInitializeSingleColumnExternalConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError)partition.ElementFactory.CreateElementLink(typeof(SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError
	/// <summary>
	/// SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError))]
	public sealed class SingleColumnExternalConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SingleColumnExternalConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SingleColumnExternalConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator Instance
		{
			get
			{
				return new SingleColumnExternalConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError")]
	public  partial class InternalUniquenessConstraintHasNMinusOneError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region InternalUniquenessConstraintHasNMinusOneError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3813d2d2-a6cc-4f26-a5ff-24b6c05e0cc5";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = InternalUniquenessConstraintHasNMinusOneError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = InternalUniquenessConstraintHasNMinusOneError.MetaClassGuid;
		#endregion

		#region NMinusOneError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String NMinusOneErrorMetaRoleGuidString = "c5b85dae-aaba-40b1-b300-a9c2cf03e91e";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid NMinusOneErrorMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.NMinusOneError")]
		public  Northface.Tools.ORM.ObjectModel.NMinusOneError NMinusOneError
		{
			get { return (Northface.Tools.ORM.ObjectModel.NMinusOneError)this.GetRolePlayer(NMinusOneErrorMetaRoleGuid); }
			set { this.SetRolePlayer(NMinusOneErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region Constraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ConstraintMetaRoleGuidString = "df179dfc-8827-46b7-a19a-b3428ceb09ce";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ConstraintMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError.Constraint")]
		public  Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint Constraint
		{
			get { return (Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraint)this.GetRolePlayer(ConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(ConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region InternalUniquenessConstraintHasNMinusOneError's Generated Constructor Code
	public  partial class InternalUniquenessConstraintHasNMinusOneError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public InternalUniquenessConstraintHasNMinusOneError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InternalUniquenessConstraintHasNMinusOneError CreateInternalUniquenessConstraintHasNMinusOneError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateInternalUniquenessConstraintHasNMinusOneError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InternalUniquenessConstraintHasNMinusOneError CreateAndInitializeInternalUniquenessConstraintHasNMinusOneError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeInternalUniquenessConstraintHasNMinusOneError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public InternalUniquenessConstraintHasNMinusOneError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InternalUniquenessConstraintHasNMinusOneError CreateInternalUniquenessConstraintHasNMinusOneError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (InternalUniquenessConstraintHasNMinusOneError)partition.ElementFactory.CreateElementLink(typeof(InternalUniquenessConstraintHasNMinusOneError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static InternalUniquenessConstraintHasNMinusOneError CreateAndInitializeInternalUniquenessConstraintHasNMinusOneError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (InternalUniquenessConstraintHasNMinusOneError)partition.ElementFactory.CreateElementLink(typeof(InternalUniquenessConstraintHasNMinusOneError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for InternalUniquenessConstraintHasNMinusOneError
	/// <summary>
	/// InternalUniquenessConstraintHasNMinusOneError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError))]
	public sealed class InternalUniquenessConstraintHasNMinusOneErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public InternalUniquenessConstraintHasNMinusOneErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.InternalUniquenessConstraintHasNMinusOneError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static InternalUniquenessConstraintHasNMinusOneErrorElementFactoryCreator Instance
		{
			get
			{
				return new InternalUniquenessConstraintHasNMinusOneErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Northface.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.MetaRelationshipGuidString, "Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError")]
	public  partial class RoleHasRolePlayerRequiredError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region RoleHasRolePlayerRequiredError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3d930f60-df77-482d-b522-aed091f46349";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = RoleHasRolePlayerRequiredError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = RoleHasRolePlayerRequiredError.MetaClassGuid;
		#endregion

		#region RolePlayerRequiredError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RolePlayerRequiredErrorMetaRoleGuidString = "35e5a908-dc07-4971-95a3-6f998ad80b5b";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RolePlayerRequiredErrorMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredError")]
		public  Northface.Tools.ORM.ObjectModel.RolePlayerRequiredError RolePlayerRequiredError
		{
			get { return (Northface.Tools.ORM.ObjectModel.RolePlayerRequiredError)this.GetRolePlayer(RolePlayerRequiredErrorMetaRoleGuid); }
			set { this.SetRolePlayer(RolePlayerRequiredErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region Role's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RoleMetaRoleGuidString = "5a789e61-2569-4f9b-9186-fa4b575d39cf";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RoleMetaRoleGuid = new System.Guid(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuidString, "Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.Role")]
		public  Northface.Tools.ORM.ObjectModel.Role Role
		{
			get { return (Northface.Tools.ORM.ObjectModel.Role)this.GetRolePlayer(RoleMetaRoleGuid); }
			set { this.SetRolePlayer(RoleMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region RoleHasRolePlayerRequiredError's Generated Constructor Code
	public  partial class RoleHasRolePlayerRequiredError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleHasRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleHasRolePlayerRequiredError CreateRoleHasRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateRoleHasRolePlayerRequiredError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleHasRolePlayerRequiredError CreateAndInitializeRoleHasRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRoleHasRolePlayerRequiredError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleHasRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleHasRolePlayerRequiredError CreateRoleHasRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (RoleHasRolePlayerRequiredError)partition.ElementFactory.CreateElementLink(typeof(RoleHasRolePlayerRequiredError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleHasRolePlayerRequiredError CreateAndInitializeRoleHasRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RoleHasRolePlayerRequiredError)partition.ElementFactory.CreateElementLink(typeof(RoleHasRolePlayerRequiredError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RoleHasRolePlayerRequiredError
	/// <summary>
	/// RoleHasRolePlayerRequiredError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError))]
	public sealed class RoleHasRolePlayerRequiredErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleHasRolePlayerRequiredErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Northface.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RoleHasRolePlayerRequiredErrorElementFactoryCreator Instance
		{
			get
			{
				return new RoleHasRolePlayerRequiredErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}


