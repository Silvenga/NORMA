//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Common Public License Copyright Notice
// /**************************************************************************\
// * Neumont Object-Role Modeling Architect for Visual Studio                 *
// *                                                                          *
// * Copyright © Neumont University. All rights reserved.                     *
// *                                                                          *
// * The use and distribution terms for this software are covered by the      *
// * Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
// * can be found in the file CPL.txt at the root of this distribution.       *
// * By using this software in any fashion, you are agreeing to be bound by   *
// * the terms of this license.                                               *
// *                                                                          *
// * You must not remove this notice, or any other, from this software.       *
// \**************************************************************************/
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.InheritBaseModel("2b131234-7959-458d-834f-2dc0769ce683")]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMMetaModel.MetaModelGuidString, "Neumont.Tools.ORM.ObjectModel.ORMMetaModel")]
	public  partial class ORMMetaModel : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region ORMMetaModel's Generated MetaClass Code
		/// <summary>
		/// MetaModel Guid String
		/// </summary>
		public const System.String MetaModelGuidString = "83ad9e12-0e90-47cd-8e2f-a79f8d9c7288";
		/// <summary>
		/// MetaModel Guid
		/// </summary>
		public static readonly System.Guid MetaModelGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMMetaModel.MetaModelGuidString);
		/// <summary>
		/// Default Constructor called by the IMS -- do not call directly
		/// </summary>
		public ORMMetaModel() : base()
		{
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMMetaModel(Microsoft.VisualStudio.Modeling.Store store) : base(store.DefaultPartition, Neumont.Tools.ORM.ObjectModel.ORMMetaModel.MetaModelGuid)
		{
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMMetaModel(Microsoft.VisualStudio.Modeling.Partition partition) : base(partition, Neumont.Tools.ORM.ObjectModel.ORMMetaModel.MetaModelGuid)
		{
		}
		#endregion

	}
	#region ORMMetaModel's ResourceManager Code
	public  partial class ORMMetaModel
	{
		private static System.Resources.ResourceManager resourceManager = null;
		/// <summary>
		/// The base name of this models resources.
		/// </summary>
		public const string ResourceBaseName = "Neumont.Tools.ORM.ObjectModel.ORMMetaModel";
		/// <summary>
		/// Returns the SubStore's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override System.Resources.ResourceManager ResourceManager
		{
			get
			{
				return Neumont.Tools.ORM.ObjectModel.ORMMetaModel.SingletonResourceManager;
			}
		}
		/// <summary>
		/// A internal object used for synchronization.
		/// </summary>
		private static object internalSyncObject;
		/// <summary>
		/// Gets the internal object used for synchronization.
		/// </summary>
		private static object InternalSyncObject 
		{
			get 
			{
				if (internalSyncObject == null) 
				{
					object o = new object();
					System.Threading.Interlocked.CompareExchange(ref internalSyncObject, o, null);
				}
				return internalSyncObject;
			}
		}
		/// <summary>
		/// Gets the Singleton ResourceManager for this SubStore
		/// </summary>
		public static System.Resources.ResourceManager SingletonResourceManager
		{
			get
			{
				if (Neumont.Tools.ORM.ObjectModel.ORMMetaModel.resourceManager == null)
				{
					lock (Neumont.Tools.ORM.ObjectModel.ORMMetaModel.InternalSyncObject)
					{
						if (Neumont.Tools.ORM.ObjectModel.ORMMetaModel.resourceManager == null)
						{
							Neumont.Tools.ORM.ObjectModel.ORMMetaModel.resourceManager = new System.Resources.ResourceManager(ResourceBaseName, typeof(Neumont.Tools.ORM.ObjectModel.ORMMetaModel).Assembly);
						}
					}
				}
				return Neumont.Tools.ORM.ObjectModel.ORMMetaModel.resourceManager;
			}
		}
	}
	#endregion
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	public sealed class ORMMetaModelCopyClosure : Microsoft.VisualStudio.Modeling.IElementVisitorFilter
	{
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> metaRolesMember;
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMMetaModelCopyClosure()
		{
			#region Initialize MetaData Table
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">MetaRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="metaRelationshipInfo">MetaRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public  Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleInfo, Microsoft.VisualStudio.Modeling.MetaRelationshipInfo metaRelationshipInfo, Microsoft.VisualStudio.Modeling.ElementLink targetRelationship)
		{
			return this.MetaRoles.ContainsKey(sourceRoleInfo.Id) ? Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes : Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetRoleInfo">MetaRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public  Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.ElementLink elementLink, Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleInfo, Microsoft.VisualStudio.Modeling.ModelElement targetRolePlayer)
		{
			foreach (Microsoft.VisualStudio.Modeling.MetaRoleInfo metaRoleInfo in elementLink.MetaRelationship.MetaRoles)
			{
				if (metaRoleInfo != targetRoleInfo && this.MetaRoles.ContainsKey(metaRoleInfo.Id))
				{
					return Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes;
				}
			}
			return Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> MetaRoles
		{
			get
			{
				if (this.metaRolesMember == null)
				{
					this.metaRolesMember = new System.Collections.Generic.Dictionary<System.Guid, System.Guid>();
				}
				return this.metaRolesMember;
			}
		}

	}
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	public sealed class ORMMetaModelRemoveClosure : Microsoft.VisualStudio.Modeling.IElementVisitorFilter
	{
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> metaRolesMember;
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMMetaModelRemoveClosure()
		{
			#region Initialize MetaData Table
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ModelHasError.ErrorCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasError.ErrorCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.SetConstraintCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.SetConstraintCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraintMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueRangeCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueRangeCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.ImpliedByMandatoryErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.ImpliedByMandatoryErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement.ExtensionCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement.ExtensionCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtensionCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtensionCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError.ExtensionModelErrorCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError.ExtensionModelErrorCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtensionModelErrorCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtensionModelErrorCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.NoteMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.NoteMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.NoteMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.NoteMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.ImpliedByUniquenessErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.ImpliedByUniquenessErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyMetaRoleGuid);
			MetaRoles.Add(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleMetaRoleGuid);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">MetaRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="metaRelationshipInfo">MetaRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public  Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleInfo, Microsoft.VisualStudio.Modeling.MetaRelationshipInfo metaRelationshipInfo, Microsoft.VisualStudio.Modeling.ElementLink targetRelationship)
		{
			return Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetRoleInfo">MetaRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public  Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.ElementLink elementLink, Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleInfo, Microsoft.VisualStudio.Modeling.ModelElement targetRolePlayer)
		{
			return this.MetaRoles.ContainsKey(targetRoleInfo.Id) ? Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes : Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> MetaRoles
		{
			get
			{
				if (this.metaRolesMember == null)
				{
					this.metaRolesMember = new System.Collections.Generic.Dictionary<System.Guid, System.Guid>();
				}
				return this.metaRolesMember;
			}
		}

	}
	#region ORMMetaModel's Generated Closure Code
	public  partial class ORMMetaModel
	{
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.IElementVisitorFilter copyClosureMember;
		/// <summary>
		/// RemoveClosure cache
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.IElementVisitorFilter removeClosureMember;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override Microsoft.VisualStudio.Modeling.IElementVisitorFilter GetClosureFilter(Microsoft.VisualStudio.Modeling.ClosureType type, System.Collections.ICollection rootElements)
		{
			switch (type)
			{
				case Microsoft.VisualStudio.Modeling.ClosureType.CopyClosure:
					return ORMMetaModel.CopyClosure;
				case Microsoft.VisualStudio.Modeling.ClosureType.RemoveClosure:
					return ORMMetaModel.RemoveClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.IElementVisitorFilter CopyClosure
		{
			get
			{
				if (ORMMetaModel.copyClosureMember == null)
				{
					ORMMetaModel.copyClosureMember = new ORMMetaModelCopyClosure();
				}
				return ORMMetaModel.copyClosureMember;
			}
		}
		/// <summary>
		/// RemoveClosure cache
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.IElementVisitorFilter RemoveClosure
		{
			get
			{
				if (ORMMetaModel.removeClosureMember == null)
				{
					ORMMetaModel.removeClosureMember = new ORMMetaModelRemoveClosure();
				}
				return ORMMetaModel.removeClosureMember;
			}
		}
	}
	#endregion
	/// <summary>
	/// 
	/// </summary>
	public  partial class ORMMetaModel : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region ORMMetaModel's AllGeneratedMetaModelTypes Code
		/// <summary>
		/// Virtual method that returns a collection of all types for metamodel 
		/// </summary>
		protected sealed override System.Type[] AllGeneratedMetaModelTypes()
		{
			System.Type[] typeArray = new System.Type[]
			{
				typeof(Neumont.Tools.ORM.ObjectModel.ORMMetaModel),
				typeof(Neumont.Tools.ORM.ObjectModel.ORMNamedElement),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectType),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.EqualityConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.EqualityConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ExclusionConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.ExclusionConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.SubsetConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.SubsetConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence),
				typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence),
				typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequenceElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.RingConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.RingConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.MandatoryConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ModelError),
				typeof(Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError),
				typeof(Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError),
				typeof(Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.DuplicateNameError),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError),
				typeof(Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesError),
				typeof(Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesError),
				typeof(Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError),
				typeof(Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingError),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError),
				typeof(Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.NMinusOneError),
				typeof(Neumont.Tools.ORM.ObjectModel.NMinusOneErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError),
				typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredError),
				typeof(Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryError),
				typeof(Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeError),
				typeof(Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.MandatoryImpliedByMandatoryError),
				typeof(Neumont.Tools.ORM.ObjectModel.MandatoryImpliedByMandatoryErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxError),
				typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueMismatchError),
				typeof(Neumont.Tools.ORM.ObjectModel.MinValueMismatchError),
				typeof(Neumont.Tools.ORM.ObjectModel.MinValueMismatchErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.MaxValueMismatchError),
				typeof(Neumont.Tools.ORM.ObjectModel.MaxValueMismatchErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintError),
				typeof(Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError),
				typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedError),
				typeof(Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeError),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesError),
				typeof(Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.UniquenessImpliedByUniquenessError),
				typeof(Neumont.Tools.ORM.ObjectModel.UniquenessImpliedByUniquenessErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryError),
				typeof(Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapError),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind),
				typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKindElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode),
				typeof(Neumont.Tools.ORM.ObjectModel.IntrinsicReferenceMode),
				typeof(Neumont.Tools.ORM.ObjectModel.IntrinsicReferenceModeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.CustomReferenceMode),
				typeof(Neumont.Tools.ORM.ObjectModel.CustomReferenceModeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ORMModel),
				typeof(Neumont.Tools.ORM.ObjectModel.ORMModelElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.RoleValueConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.RoleValueConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ORMModelElement),
				typeof(Neumont.Tools.ORM.ObjectModel.FactType),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.SubtypeFact),
				typeof(Neumont.Tools.ORM.ObjectModel.SubtypeFactElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.Expression),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpressionElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.DataType),
				typeof(Neumont.Tools.ORM.ObjectModel.UnspecifiedDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.UnspecifiedDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.TextDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.FixedLengthTextDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.FixedLengthTextDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.VariableLengthTextDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.VariableLengthTextDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.LargeLengthTextDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.LargeLengthTextDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.NumericDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.SignedIntegerNumericDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.SignedIntegerNumericDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.UnsignedIntegerNumericDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.UnsignedIntegerNumericDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.AutoCounterNumericDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.AutoCounterNumericDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FloatingPointNumericDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.FloatingPointNumericDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.DecimalNumericDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.DecimalNumericDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.MoneyNumericDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.MoneyNumericDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.RawDataDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.FixedLengthRawDataDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.FixedLengthRawDataDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.VariableLengthRawDataDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.VariableLengthRawDataDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.LargeLengthRawDataDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.LargeLengthRawDataDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.PictureRawDataDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.PictureRawDataDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.OleObjectRawDataDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.OleObjectRawDataDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.TemporalDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.AutoTimestampTemporalDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.AutoTimestampTemporalDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.TimeTemporalDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.TimeTemporalDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.DateTemporalDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.DateTemporalDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.DateAndTimeTemporalDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.DateAndTimeTemporalDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.LogicalDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.TrueOrFalseLogicalDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.TrueOrFalseLogicalDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.YesOrNoLogicalDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.YesOrNoLogicalDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.OtherDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.RowIdOtherDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.RowIdOtherDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectIdOtherDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectIdOtherDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.Reading),
				typeof(Neumont.Tools.ORM.ObjectModel.ReadingElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder),
				typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrderElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueRange),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.Note),
				typeof(Neumont.Tools.ORM.ObjectModel.NoteElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.RoleBase),
				typeof(Neumont.Tools.ORM.ObjectModel.Role),
				typeof(Neumont.Tools.ORM.ObjectModel.RoleElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.SubtypeMetaRole),
				typeof(Neumont.Tools.ORM.ObjectModel.SubtypeMetaRoleElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.SupertypeMetaRole),
				typeof(Neumont.Tools.ORM.ObjectModel.SupertypeMetaRoleElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.RoleProxy),
				typeof(Neumont.Tools.ORM.ObjectModel.RoleProxyElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ORMElementLink),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.Objectification),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectificationElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRoleElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ModelHasObjectType),
				typeof(Neumont.Tools.ORM.ObjectModel.ModelHasObjectTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ModelHasFactType),
				typeof(Neumont.Tools.ORM.ObjectModel.ModelHasFactTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FactConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FactSetConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.FactSetConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence),
				typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequenceElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole),
				typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ModelHasError),
				typeof(Neumont.Tools.ORM.ObjectModel.ModelHasErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError),
				typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError),
				typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading),
				typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReadingElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrderElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind),
				typeof(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKindElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode),
				typeof(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind),
				typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKindElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError),
				typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError),
				typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier),
				typeof(Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifierElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError),
				typeof(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError),
				typeof(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError),
				typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ModelHasDataType),
				typeof(Neumont.Tools.ORM.ObjectModel.ModelHasDataTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint),
				typeof(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraintElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError),
				typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError),
				typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError),
				typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError),
				typeof(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError),
				typeof(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError),
				typeof(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError),
				typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ORMExtendableElementHasExtensionElement),
				typeof(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement),
				typeof(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElementElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement),
				typeof(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElementElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ORMExtendableElementHasExtensionModelError),
				typeof(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError),
				typeof(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError),
				typeof(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactTypeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError),
				typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError),
				typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError),
				typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError),
				typeof(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasNoteElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNoteElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError),
				typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError),
				typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError),
				typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameErrorElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasRole),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasRoleElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole),
				typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRoleElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole),
				typeof(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRoleElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression),
				typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpressionElementFactoryCreator),

			};
			return typeArray;
		}
		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public  partial class ORMMetaModel : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region ORMMetaModel's GeneratedReflectedMetaAttributes Code
		/// <summary>
		/// Virtual method that returns a collection of all fields for all types in metamodel ORMMetaModel
		/// </summary>
		protected sealed override Microsoft.VisualStudio.Modeling.MetaFieldInfo[] GeneratedReflectedMetaAttributes()
		{
			Microsoft.VisualStudio.Modeling.MetaFieldInfo[] typeArray = new Microsoft.VisualStudio.Modeling.MetaFieldInfo[]
			{
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType), "IsExternal", Neumont.Tools.ORM.ObjectModel.ObjectType.IsExternalMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ObjectType.ObjectTypeIsExternalFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType), "NoteText", Neumont.Tools.ORM.ObjectModel.ObjectType.NoteTextMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ObjectType.ObjectTypeNoteTextFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType), "IsIndependent", Neumont.Tools.ORM.ObjectModel.ObjectType.IsIndependentMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ObjectType.ObjectTypeIsIndependentFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType), "IsValueType", Neumont.Tools.ORM.ObjectModel.ObjectType.IsValueTypeMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ObjectType.ObjectTypeIsValueTypeFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType), "Scale", Neumont.Tools.ORM.ObjectModel.ObjectType.ScaleMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ObjectType.ObjectTypeScaleFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType), "Length", Neumont.Tools.ORM.ObjectModel.ObjectType.LengthMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ObjectType.ObjectTypeLengthFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType), "NestedFactTypeDisplay", Neumont.Tools.ORM.ObjectModel.ObjectType.NestedFactTypeDisplayMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ObjectType.ObjectTypeNestedFactTypeDisplayFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType), "ReferenceModeDisplay", Neumont.Tools.ORM.ObjectModel.ObjectType.ReferenceModeDisplayMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ObjectType.ObjectTypeReferenceModeDisplayFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType), "ReferenceModeString", Neumont.Tools.ORM.ObjectModel.ObjectType.ReferenceModeStringMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ObjectType.ObjectTypeReferenceModeStringFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType), "ReferenceMode", Neumont.Tools.ORM.ObjectModel.ObjectType.ReferenceModeMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ObjectType.ObjectTypeReferenceModeFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType), "DataTypeDisplay", Neumont.Tools.ORM.ObjectModel.ObjectType.DataTypeDisplayMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ObjectType.ObjectTypeDataTypeDisplayFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType), "ValueRangeText", Neumont.Tools.ORM.ObjectModel.ObjectType.ValueRangeTextMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ObjectType.ObjectTypeValueRangeTextFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType), "IsPersonal", Neumont.Tools.ORM.ObjectModel.ObjectType.IsPersonalMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ObjectType.ObjectTypeIsPersonalFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint), "Modality", Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint.ModalityMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint.SetComparisonConstraintModalityFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint), "Modality", Neumont.Tools.ORM.ObjectModel.SetConstraint.ModalityMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint.SetConstraintModalityFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.RingConstraint), "RingType", Neumont.Tools.ORM.ObjectModel.RingConstraint.RingTypeMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.RingConstraint.RingConstraintRingTypeFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraint), "MinFrequency", Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.MinFrequencyMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.FrequencyConstraintMinFrequencyFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraint), "MaxFrequency", Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.MaxFrequencyMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.FrequencyConstraintMaxFrequencyFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraint), "IsPreferred", Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.IsPreferredMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.UniquenessConstraintIsPreferredFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraint), "IsInternal", Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.IsInternalMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.UniquenessConstraintIsInternalFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.MandatoryConstraint), "IsSimple", Neumont.Tools.ORM.ObjectModel.MandatoryConstraint.IsSimpleMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.MandatoryConstraint.MandatoryConstraintIsSimpleFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError), "Column", Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.ColumnMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorColumnFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind), "FormatString", Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.FormatStringMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.ReferenceModeKindFormatStringFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind), "ReferenceModeType", Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.ReferenceModeTypeMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.ReferenceModeKindReferenceModeTypeFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode), "KindDisplay", Neumont.Tools.ORM.ObjectModel.ReferenceMode.KindDisplayMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode.ReferenceModeKindDisplayFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.CustomReferenceMode), "CustomFormatString", Neumont.Tools.ORM.ObjectModel.CustomReferenceMode.CustomFormatStringMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.CustomReferenceMode.CustomReferenceModeCustomFormatStringFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint), "Text", Neumont.Tools.ORM.ObjectModel.ValueConstraint.TextMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint.ValueConstraintTextFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactType), "IsExternal", Neumont.Tools.ORM.ObjectModel.FactType.IsExternalMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.FactType.FactTypeIsExternalFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactType), "NoteText", Neumont.Tools.ORM.ObjectModel.FactType.NoteTextMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.FactType.FactTypeNoteTextFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactType), "Name", Neumont.Tools.ORM.ObjectModel.FactType.NameMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.FactType.FactTypeNameFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactType), "NestingTypeDisplay", Neumont.Tools.ORM.ObjectModel.FactType.NestingTypeDisplayMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.FactType.FactTypeNestingTypeDisplayFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactType), "DerivationRuleDisplay", Neumont.Tools.ORM.ObjectModel.FactType.DerivationRuleDisplayMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.FactType.FactTypeDerivationRuleDisplayFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactType), "DerivationStorageDisplay", Neumont.Tools.ORM.ObjectModel.FactType.DerivationStorageDisplayMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.FactType.FactTypeDerivationStorageDisplayFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.SubtypeFact), "IsPrimary", Neumont.Tools.ORM.ObjectModel.SubtypeFact.IsPrimaryMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.SubtypeFact.SubtypeFactIsPrimaryFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.Expression), "Body", Neumont.Tools.ORM.ObjectModel.Expression.BodyMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.Expression.ExpressionBodyFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.Expression), "Language", Neumont.Tools.ORM.ObjectModel.Expression.LanguageMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.Expression.ExpressionLanguageFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression), "DerivationStorage", Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression.DerivationStorageMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression.FactTypeDerivationExpressionDerivationStorageFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.Reading), "Text", Neumont.Tools.ORM.ObjectModel.Reading.TextMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.Reading.ReadingTextFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.Reading), "IsPrimary", Neumont.Tools.ORM.ObjectModel.Reading.IsPrimaryMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.Reading.ReadingIsPrimaryFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.Reading), "Language", Neumont.Tools.ORM.ObjectModel.Reading.LanguageMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.Reading.ReadingLanguageFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder), "ReadingText", Neumont.Tools.ORM.ObjectModel.ReadingOrder.ReadingTextMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder.ReadingOrderReadingTextFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueRange), "MinValue", Neumont.Tools.ORM.ObjectModel.ValueRange.MinValueMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ValueRange.ValueRangeMinValueFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueRange), "MaxValue", Neumont.Tools.ORM.ObjectModel.ValueRange.MaxValueMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ValueRange.ValueRangeMaxValueFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueRange), "Text", Neumont.Tools.ORM.ObjectModel.ValueRange.TextMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ValueRange.ValueRangeTextFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueRange), "MinInclusion", Neumont.Tools.ORM.ObjectModel.ValueRange.MinInclusionMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ValueRange.ValueRangeMinInclusionFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueRange), "MaxInclusion", Neumont.Tools.ORM.ObjectModel.ValueRange.MaxInclusionMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ValueRange.ValueRangeMaxInclusionFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.Note), "Text", Neumont.Tools.ORM.ObjectModel.Note.TextMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.Note.NoteTextFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.Role), "RolePlayerDisplay", Neumont.Tools.ORM.ObjectModel.Role.RolePlayerDisplayMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.Role.RoleRolePlayerDisplayFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.Role), "IsMandatory", Neumont.Tools.ORM.ObjectModel.Role.IsMandatoryMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.Role.RoleIsMandatoryFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.Role), "Multiplicity", Neumont.Tools.ORM.ObjectModel.Role.MultiplicityMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.Role.RoleMultiplicityFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.Role), "ValueRangeText", Neumont.Tools.ORM.ObjectModel.Role.ValueRangeTextMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.Role.RoleValueRangeTextFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.Role), "MandatoryConstraintName", Neumont.Tools.ORM.ObjectModel.Role.MandatoryConstraintNameMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.Role.RoleMandatoryConstraintNameFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.Role), "MandatoryConstraintModality", Neumont.Tools.ORM.ObjectModel.Role.MandatoryConstraintModalityMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.Role.RoleMandatoryConstraintModalityFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.Role), "Name", Neumont.Tools.ORM.ObjectModel.Role.NameMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.Role.RoleNameFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType), "Scale", Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ScaleMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeHasDataTypeScaleFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType), "Length", Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.LengthMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeHasDataTypeLengthFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ObjectModel.Objectification), "IsImplied", Neumont.Tools.ORM.ObjectModel.Objectification.IsImpliedMetaAttributeGuid, typeof(Neumont.Tools.ORM.ObjectModel.Objectification.ObjectificationIsImpliedFieldHandler)),

			};
			return typeArray;
		}
		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public  partial class ORMMetaModel : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region ORMMetaModel's GeneratedReflectedMetaRoleAttributes Code
		/// <summary>
		/// Virtual method that returns a collection of all fields for all types in metamodel ORMMetaModel
		/// </summary>
		protected sealed override Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[] GeneratedReflectedMetaRoles()
		{
			Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[] typeArray = new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[]
			{
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType), "DataType", Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType), "ValueTypeCollection", Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.Objectification), "NestedFactType", Neumont.Tools.ORM.ObjectModel.Objectification.NestedFactTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.Objectification), "NestingType", Neumont.Tools.ORM.ObjectModel.Objectification.NestingTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole), "RolePlayer", Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayerMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole), "PlayedRoleCollection", Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasObjectType), "Model", Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasObjectType), "ObjectTypeCollection", Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasFactType), "Model", Neumont.Tools.ORM.ObjectModel.ModelHasFactType.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasFactType), "FactTypeCollection", Neumont.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint), "SetComparisonConstraintCollection", Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.SetComparisonConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint), "FactTypeCollection", Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.FactTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactSetConstraint), "SetConstraintCollection", Neumont.Tools.ORM.ObjectModel.FactSetConstraint.SetConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactSetConstraint), "FactTypeCollection", Neumont.Tools.ORM.ObjectModel.FactSetConstraint.FactTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint), "FactConstraintCollection", Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.FactConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint), "ConstrainedRoleCollection", Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRoleCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence), "RoleSequenceCollection", Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence), "ExternalConstraint", Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole), "ConstraintRoleSequenceCollection", Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole), "RoleCollection", Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasError), "ErrorCollection", Neumont.Tools.ORM.ObjectModel.ModelHasError.ErrorCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasError), "Model", Neumont.Tools.ORM.ObjectModel.ModelHasError.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError), "TooFewRoleSequencesError", Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError), "SetComparisonConstraint", Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError), "TooManyRoleSequencesError", Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError), "SetComparisonConstraint", Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError), "DuplicateNameError", Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError), "ObjectTypeCollection", Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading), "ReadingCollection", Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading), "ReadingOrder", Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder), "ReadingOrderCollection", Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder), "FactType", Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind), "ReferenceModeKindCollection", Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind), "Model", Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode), "ReferenceModeCollection", Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode), "Model", Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind), "Kind", Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.KindMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind), "ReferenceModeCollection", Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint), "SetConstraintCollection", Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.SetConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint), "Model", Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint), "SetComparisonConstraintCollection", Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint), "Model", Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError), "DuplicateNameError", Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError), "SetConstraintCollection", Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError), "DuplicateNameError", Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError), "SetComparisonConstraintCollection", Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier), "PreferredIdentifier", Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier), "PreferredIdentifierFor", Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError), "TooManyRolesError", Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError), "Reading", Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError), "TooFewRolesError", Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError), "Reading", Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError), "ArityMismatchError", Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError), "Constraint", Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError), "ReadingRequiredError", Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError), "FactType", Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasDataType), "DataTypeCollection", Neumont.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasDataType), "Model", Neumont.Tools.ORM.ObjectModel.ModelHasDataType.ModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), "InternalUniquenessConstraintRequiredError", Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), "FactType", Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint), "ValueConstraint", Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint), "ValueType", Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint), "ValueConstraint", Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint), "Role", Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.RoleMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange), "ValueRangeCollection", Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueRangeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange), "ValueConstraint", Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError), "DataTypeNotSpecifiedError", Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError), "ValueTypeHasDataType", Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError), "CompatibleRolePlayerTypeErrorCollection", Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError), "SetComparisonConstraint", Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError), "CompatibleRolePlayerTypeError", Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError), "SetConstraint", Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError), "NMinusOneError", Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError), "Constraint", Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError), "RolePlayerRequiredError", Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError), "Role", Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError), "EqualityImpliedByMandatoryError", Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError), "EqualityConstraint", Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError), "ReferenceSchemeError", Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError), "ObjectType", Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError), "ImpliedByMandatoryError", Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.ImpliedByMandatoryErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError), "MandatoryConstraint", Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.MandatoryConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError), "FrequencyConstraintMinMaxError", Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError), "FrequencyConstraint", Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement), "ExtensionCollection", Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement.ExtensionCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement), "ExtendedElement", Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement.ExtendedElementMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement), "ExtensionCollection", Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtensionCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement), "ExtendedElement", Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtendedElementMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError), "ExtensionModelErrorCollection", Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError.ExtensionModelErrorCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError), "ExtendedElement", Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError.ExtendedElementMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError), "ExtensionModelErrorCollection", Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtensionModelErrorCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError), "ExtendedElement", Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtendedElementMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType), "ImpliedFactTypeCollection", Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType), "ImpliedByObjectification", Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectificationMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError), "MaxValueMismatchError", Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError), "ValueRange", Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError), "ImpliedInternalUniquenessConstraintError", Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError), "FactType", Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError), "TooFewRoleSequencesError", Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError), "SetConstraint", Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError), "TooManyRoleSequencesError", Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError), "SetConstraint", Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError), "FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection", Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError), "FrequencyConstraint", Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError), "RingConstraintTypeNotSpecifiedError", Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError), "RingConstraint", Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError), "ObjectTypeRequiresPrimarySupertypeError", Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError), "ObjectType", Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote), "Note", Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.NoteMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote), "FactType", Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote), "Note", Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.NoteMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote), "ObjectType", Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError), "CompatibleSupertypesError", Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError), "ObjectType", Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError), "ImpliedByUniquenessError", Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.ImpliedByUniquenessErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError), "UniquenessConstraint", Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.UniquenessConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError), "PreferredIdentifierRequiresMandatoryError", Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError), "ObjectType", Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError), "ValueRangeOverlapError", Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError), "ValueConstraint", Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError), "MinValueMismatchError", Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError), "ValueRange", Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError), "FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection", Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError), "FactType", Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FactTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError), "DuplicateNameError", Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError), "ValueConstraintCollection", Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasRole), "RoleCollection", Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasRole), "FactType", Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole), "RoleCollection", Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.RoleCollectionMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole), "ReadingOrder", Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.ReadingOrderMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole), "TargetRole", Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.TargetRoleMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole), "Proxy", Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression), "DerivationRule", Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression), "FactType", Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactTypeMetaRoleGuid),

			};
			return typeArray;
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMNamedElement.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ORMNamedElement")]
	public abstract partial class ORMNamedElement : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region ORMNamedElement's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "d18ac149-4ff4-433b-bc8e-440e96842cbb";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMNamedElement.MetaClassGuidString);
		#endregion

		#region ExtensionCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElementMoveableCollection ExtensionCollection
		{
			get { return new Microsoft.VisualStudio.Modeling.ModelElementMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement.ExtendedElementMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement.ExtensionCollectionMetaRoleGuid); }
		}
		#endregion
		#region ExtensionModelErrorCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ModelErrorMoveableCollection ExtensionModelErrorCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.ModelErrorMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError.ExtendedElementMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError.ExtensionModelErrorCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region ORMNamedElement's Generated Constructor Code
	public abstract partial class ORMNamedElement
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ORMNamedElement(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectType")]
	public  partial class ObjectType : Neumont.Tools.ORM.ObjectModel.ORMNamedElement
	{
		#region ObjectType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "910a08ef-e1a5-461a-bebd-150932f12aad";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectType.MetaClassGuidString);
		#endregion

		#region IsExternal's Generated  Field Code
		#region IsExternal's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsExternalMetaAttributeGuidString = "f7ead421-677d-418b-9a87-be7f311973ac";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsExternalMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectType.IsExternalMetaAttributeGuidString);
		#endregion

		#region IsExternal's Generated Property Code

		private System.Boolean isExternalPropertyStorage = false;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ObjectTypeIsExternalFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectType.IsExternalMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectType.IsExternal")]
		public  System.Boolean IsExternal
		{
			get
			{
				return isExternalPropertyStorage;
			}
		
			set
			{
				objectTypeIsExternalFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeIsExternalFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.IsExternal field
		/// </summary>
		private static ObjectTypeIsExternalFieldHandler	objectTypeIsExternalFieldHandler	= ObjectTypeIsExternalFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.IsExternal
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeIsExternalFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.ObjectType,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeIsExternalFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.IsExternal field handler
			/// </summary>
			/// <value>ObjectTypeIsExternalFieldHandler</value>
			public static ObjectTypeIsExternalFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeIsExternalFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeIsExternalFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeIsExternalFieldHandler, so just instantiate one and return it
						return new ObjectTypeIsExternalFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.IsExternal field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ObjectType.IsExternalMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ObjectType</param>
			protected sealed override System.Boolean GetValue(Neumont.Tools.ORM.ObjectModel.ObjectType element)
			{
				return element.isExternalPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.ObjectType element, System.Boolean value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Boolean oldValue)
			{
				oldValue = element.isExternalPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.isExternalPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region NoteText's Generated  Field Code
		#region NoteText's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String NoteTextMetaAttributeGuidString = "2bf41bed-180c-489d-977f-149027b5cbb2";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid NoteTextMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectType.NoteTextMetaAttributeGuidString);
		#endregion

		#region NoteText's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.MergableProperty(false)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ObjectTypeNoteTextFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectType.NoteTextMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectType.NoteText")]
		public  System.String NoteText
		{
			get
			{
				return objectTypeNoteTextFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeNoteTextFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeNoteTextFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.NoteText field
		/// </summary>
		private static ObjectTypeNoteTextFieldHandler	objectTypeNoteTextFieldHandler	= ObjectTypeNoteTextFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.NoteText
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeNoteTextFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.ObjectType,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeNoteTextFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.NoteText field handler
			/// </summary>
			/// <value>ObjectTypeNoteTextFieldHandler</value>
			public static ObjectTypeNoteTextFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeNoteTextFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeNoteTextFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeNoteTextFieldHandler, so just instantiate one and return it
						return new ObjectTypeNoteTextFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.NoteText field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ObjectType.NoteTextMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region IsIndependent's Generated  Field Code
		#region IsIndependent's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsIndependentMetaAttributeGuidString = "9d618c71-7721-41bd-a1f3-dc321a7960ec";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsIndependentMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectType.IsIndependentMetaAttributeGuidString);
		#endregion

		#region IsIndependent's Generated Property Code

		private System.Boolean isIndependentPropertyStorage = false;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ObjectTypeIsIndependentFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectType.IsIndependentMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectType.IsIndependent")]
		public  System.Boolean IsIndependent
		{
			get
			{
				return isIndependentPropertyStorage;
			}
		
			set
			{
				objectTypeIsIndependentFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeIsIndependentFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.IsIndependent field
		/// </summary>
		private static ObjectTypeIsIndependentFieldHandler	objectTypeIsIndependentFieldHandler	= ObjectTypeIsIndependentFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.IsIndependent
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeIsIndependentFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.ObjectType,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeIsIndependentFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.IsIndependent field handler
			/// </summary>
			/// <value>ObjectTypeIsIndependentFieldHandler</value>
			public static ObjectTypeIsIndependentFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeIsIndependentFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeIsIndependentFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeIsIndependentFieldHandler, so just instantiate one and return it
						return new ObjectTypeIsIndependentFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.IsIndependent field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ObjectType.IsIndependentMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ObjectType</param>
			protected sealed override System.Boolean GetValue(Neumont.Tools.ORM.ObjectModel.ObjectType element)
			{
				return element.isIndependentPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.ObjectType element, System.Boolean value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Boolean oldValue)
			{
				oldValue = element.isIndependentPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.isIndependentPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region IsValueType's Generated  Field Code
		#region IsValueType's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsValueTypeMetaAttributeGuidString = "08503b2b-de15-4682-8ac5-972708b73d8a";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsValueTypeMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectType.IsValueTypeMetaAttributeGuidString);
		#endregion

		#region IsValueType's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.ReadOnly(State=Microsoft.VisualStudio.Modeling.ReadOnlyAttributeValue.SometimesUIReadOnlyPreferFalse)]
		[System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)]
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ObjectTypeIsValueTypeFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectType.IsValueTypeMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectType.IsValueType")]
		public  System.Boolean IsValueType
		{
			get
			{
				return objectTypeIsValueTypeFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeIsValueTypeFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeIsValueTypeFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.IsValueType field
		/// </summary>
		private static ObjectTypeIsValueTypeFieldHandler	objectTypeIsValueTypeFieldHandler	= ObjectTypeIsValueTypeFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.IsValueType
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeIsValueTypeFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.ObjectType,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeIsValueTypeFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.IsValueType field handler
			/// </summary>
			/// <value>ObjectTypeIsValueTypeFieldHandler</value>
			public static ObjectTypeIsValueTypeFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeIsValueTypeFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeIsValueTypeFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeIsValueTypeFieldHandler, so just instantiate one and return it
						return new ObjectTypeIsValueTypeFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.IsValueType field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ObjectType.IsValueTypeMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region Scale's Generated  Field Code
		#region Scale's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ScaleMetaAttributeGuidString = "5d7a6975-eff0-4832-bc3c-bc6fb3b0e9cf";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ScaleMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectType.ScaleMetaAttributeGuidString);
		#endregion

		#region Scale's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.IntegerDomainAttribute(MinValue=0)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ObjectTypeScaleFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectType.ScaleMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectType.Scale")]
		public  System.Int32 Scale
		{
			get
			{
				return objectTypeScaleFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeScaleFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeScaleFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.Scale field
		/// </summary>
		private static ObjectTypeScaleFieldHandler	objectTypeScaleFieldHandler	= ObjectTypeScaleFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.Scale
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeScaleFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.ObjectType,System.Int32>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeScaleFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.Scale field handler
			/// </summary>
			/// <value>ObjectTypeScaleFieldHandler</value>
			public static ObjectTypeScaleFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeScaleFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeScaleFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeScaleFieldHandler, so just instantiate one and return it
						return new ObjectTypeScaleFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.Scale field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ObjectType.ScaleMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region Length's Generated  Field Code
		#region Length's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String LengthMetaAttributeGuidString = "f3e0995d-b18e-4c42-aedd-28de749b6abd";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid LengthMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectType.LengthMetaAttributeGuidString);
		#endregion

		#region Length's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.IntegerDomainAttribute(MinValue=0)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ObjectTypeLengthFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectType.LengthMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectType.Length")]
		public  System.Int32 Length
		{
			get
			{
				return objectTypeLengthFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeLengthFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeLengthFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.Length field
		/// </summary>
		private static ObjectTypeLengthFieldHandler	objectTypeLengthFieldHandler	= ObjectTypeLengthFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.Length
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeLengthFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.ObjectType,System.Int32>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeLengthFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.Length field handler
			/// </summary>
			/// <value>ObjectTypeLengthFieldHandler</value>
			public static ObjectTypeLengthFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeLengthFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeLengthFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeLengthFieldHandler, so just instantiate one and return it
						return new ObjectTypeLengthFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.Length field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ObjectType.LengthMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region NestedFactTypeDisplay's Generated  Field Code
		#region NestedFactTypeDisplay's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String NestedFactTypeDisplayMetaAttributeGuidString = "d94fc8f5-22f2-4864-9be1-7eb74ba9193b";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid NestedFactTypeDisplayMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectType.NestedFactTypeDisplayMetaAttributeGuidString);
		#endregion

		#region NestedFactTypeDisplay's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Editor(typeof(Neumont.Tools.ORM.ObjectModel.Editors.NestedFactTypePicker), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.MergableProperty(false)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, AllowNulls=true, FieldHandlerType=typeof(ObjectTypeNestedFactTypeDisplayFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectType.NestedFactTypeDisplayMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectType.NestedFactTypeDisplay")]
		public  Neumont.Tools.ORM.ObjectModel.FactType NestedFactTypeDisplay
		{
			get
			{
				return objectTypeNestedFactTypeDisplayFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeNestedFactTypeDisplayFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeNestedFactTypeDisplayFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.NestedFactTypeDisplay field
		/// </summary>
		private static ObjectTypeNestedFactTypeDisplayFieldHandler	objectTypeNestedFactTypeDisplayFieldHandler	= ObjectTypeNestedFactTypeDisplayFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.NestedFactTypeDisplay
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeNestedFactTypeDisplayFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.ObjectType,Neumont.Tools.ORM.ObjectModel.FactType>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeNestedFactTypeDisplayFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.NestedFactTypeDisplay field handler
			/// </summary>
			/// <value>ObjectTypeNestedFactTypeDisplayFieldHandler</value>
			public static ObjectTypeNestedFactTypeDisplayFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeNestedFactTypeDisplayFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeNestedFactTypeDisplayFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeNestedFactTypeDisplayFieldHandler, so just instantiate one and return it
						return new ObjectTypeNestedFactTypeDisplayFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.NestedFactTypeDisplay field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ObjectType.NestedFactTypeDisplayMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region ReferenceModeDisplay's Generated  Field Code
		#region ReferenceModeDisplay's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ReferenceModeDisplayMetaAttributeGuidString = "4273a21b-afa2-4ba8-bdba-179b578a11b5";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ReferenceModeDisplayMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectType.ReferenceModeDisplayMetaAttributeGuidString);
		#endregion

		#region ReferenceModeDisplay's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Editor(typeof(Neumont.Tools.ORM.ObjectModel.Editors.ReferenceModePicker), typeof(System.Drawing.Design.UITypeEditor))]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, AllowNulls=true, FieldHandlerType=typeof(ObjectTypeReferenceModeDisplayFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectType.ReferenceModeDisplayMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectType.ReferenceModeDisplay")]
		public  System.Object ReferenceModeDisplay
		{
			get
			{
				return objectTypeReferenceModeDisplayFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeReferenceModeDisplayFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeReferenceModeDisplayFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.ReferenceModeDisplay field
		/// </summary>
		private static ObjectTypeReferenceModeDisplayFieldHandler	objectTypeReferenceModeDisplayFieldHandler	= ObjectTypeReferenceModeDisplayFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.ReferenceModeDisplay
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeReferenceModeDisplayFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.ObjectType,System.Object>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeReferenceModeDisplayFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.ReferenceModeDisplay field handler
			/// </summary>
			/// <value>ObjectTypeReferenceModeDisplayFieldHandler</value>
			public static ObjectTypeReferenceModeDisplayFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeDisplayFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeDisplayFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeDisplayFieldHandler, so just instantiate one and return it
						return new ObjectTypeReferenceModeDisplayFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.ReferenceModeDisplay field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ObjectType.ReferenceModeDisplayMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region ReferenceModeString's Generated  Field Code
		#region ReferenceModeString's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ReferenceModeStringMetaAttributeGuidString = "9fe0a63e-fda6-47cb-aa43-2bd5ab99b0a5";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ReferenceModeStringMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectType.ReferenceModeStringMetaAttributeGuidString);
		#endregion

		#region ReferenceModeString's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ObjectTypeReferenceModeStringFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectType.ReferenceModeStringMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectType.ReferenceModeString")]
		public  System.String ReferenceModeString
		{
			get
			{
				return objectTypeReferenceModeStringFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeReferenceModeStringFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeReferenceModeStringFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.ReferenceModeString field
		/// </summary>
		private static ObjectTypeReferenceModeStringFieldHandler	objectTypeReferenceModeStringFieldHandler	= ObjectTypeReferenceModeStringFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.ReferenceModeString
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeReferenceModeStringFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.ObjectType,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeReferenceModeStringFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.ReferenceModeString field handler
			/// </summary>
			/// <value>ObjectTypeReferenceModeStringFieldHandler</value>
			public static ObjectTypeReferenceModeStringFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeStringFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeStringFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeStringFieldHandler, so just instantiate one and return it
						return new ObjectTypeReferenceModeStringFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.ReferenceModeString field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ObjectType.ReferenceModeStringMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region ReferenceMode's Generated  Field Code
		#region ReferenceMode's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ReferenceModeMetaAttributeGuidString = "c33b225e-ba4a-4174-9231-527483fa289e";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ReferenceModeMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectType.ReferenceModeMetaAttributeGuidString);
		#endregion

		#region ReferenceMode's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, AllowNulls=true, FieldHandlerType=typeof(ObjectTypeReferenceModeFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectType.ReferenceModeMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectType.ReferenceMode")]
		public  Neumont.Tools.ORM.ObjectModel.ReferenceMode ReferenceMode
		{
			get
			{
				return objectTypeReferenceModeFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeReferenceModeFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeReferenceModeFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.ReferenceMode field
		/// </summary>
		private static ObjectTypeReferenceModeFieldHandler	objectTypeReferenceModeFieldHandler	= ObjectTypeReferenceModeFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.ReferenceMode
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeReferenceModeFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.ObjectType,Neumont.Tools.ORM.ObjectModel.ReferenceMode>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeReferenceModeFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.ReferenceMode field handler
			/// </summary>
			/// <value>ObjectTypeReferenceModeFieldHandler</value>
			public static ObjectTypeReferenceModeFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeReferenceModeFieldHandler, so just instantiate one and return it
						return new ObjectTypeReferenceModeFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.ReferenceMode field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ObjectType.ReferenceModeMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region DataTypeDisplay's Generated  Field Code
		#region DataTypeDisplay's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String DataTypeDisplayMetaAttributeGuidString = "23bccbcf-4eff-4ae5-a32b-36cf2267957e";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid DataTypeDisplayMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectType.DataTypeDisplayMetaAttributeGuidString);
		#endregion

		#region DataTypeDisplay's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Editor(typeof(Neumont.Tools.ORM.ObjectModel.Editors.DataTypePicker), typeof(System.Drawing.Design.UITypeEditor))]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, AllowNulls=true, FieldHandlerType=typeof(ObjectTypeDataTypeDisplayFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectType.DataTypeDisplayMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectType.DataTypeDisplay")]
		public  Neumont.Tools.ORM.ObjectModel.DataType DataTypeDisplay
		{
			get
			{
				return objectTypeDataTypeDisplayFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeDataTypeDisplayFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeDataTypeDisplayFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.DataTypeDisplay field
		/// </summary>
		private static ObjectTypeDataTypeDisplayFieldHandler	objectTypeDataTypeDisplayFieldHandler	= ObjectTypeDataTypeDisplayFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.DataTypeDisplay
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeDataTypeDisplayFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.ObjectType,Neumont.Tools.ORM.ObjectModel.DataType>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeDataTypeDisplayFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.DataTypeDisplay field handler
			/// </summary>
			/// <value>ObjectTypeDataTypeDisplayFieldHandler</value>
			public static ObjectTypeDataTypeDisplayFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeDataTypeDisplayFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeDataTypeDisplayFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeDataTypeDisplayFieldHandler, so just instantiate one and return it
						return new ObjectTypeDataTypeDisplayFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.DataTypeDisplay field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ObjectType.DataTypeDisplayMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region ValueRangeText's Generated  Field Code
		#region ValueRangeText's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ValueRangeTextMetaAttributeGuidString = "6a594927-309d-48be-b52a-d600ae118131";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ValueRangeTextMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectType.ValueRangeTextMetaAttributeGuidString);
		#endregion

		#region ValueRangeText's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.ReadOnly(State=Microsoft.VisualStudio.Modeling.ReadOnlyAttributeValue.SometimesUIReadOnlyPreferTrue)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ObjectTypeValueRangeTextFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectType.ValueRangeTextMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectType.ValueRangeText")]
		public  System.String ValueRangeText
		{
			get
			{
				return objectTypeValueRangeTextFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeValueRangeTextFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeValueRangeTextFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.ValueRangeText field
		/// </summary>
		private static ObjectTypeValueRangeTextFieldHandler	objectTypeValueRangeTextFieldHandler	= ObjectTypeValueRangeTextFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.ValueRangeText
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeValueRangeTextFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.ObjectType,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeValueRangeTextFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.ValueRangeText field handler
			/// </summary>
			/// <value>ObjectTypeValueRangeTextFieldHandler</value>
			public static ObjectTypeValueRangeTextFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeValueRangeTextFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeValueRangeTextFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeValueRangeTextFieldHandler, so just instantiate one and return it
						return new ObjectTypeValueRangeTextFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.ValueRangeText field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ObjectType.ValueRangeTextMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region IsPersonal's Generated  Field Code
		#region IsPersonal's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsPersonalMetaAttributeGuidString = "f5e0ff79-cd3b-47b3-b876-2b598f01b3be";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsPersonalMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectType.IsPersonalMetaAttributeGuidString);
		#endregion

		#region IsPersonal's Generated Property Code

		private System.Boolean isPersonalPropertyStorage = false;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ObjectTypeIsPersonalFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectType.IsPersonalMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectType.IsPersonal")]
		public  System.Boolean IsPersonal
		{
			get
			{
				return isPersonalPropertyStorage;
			}
		
			set
			{
				objectTypeIsPersonalFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeIsPersonalFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectType.IsPersonal field
		/// </summary>
		private static ObjectTypeIsPersonalFieldHandler	objectTypeIsPersonalFieldHandler	= ObjectTypeIsPersonalFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectType.IsPersonal
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeIsPersonalFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.ObjectType,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeIsPersonalFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectType.IsPersonal field handler
			/// </summary>
			/// <value>ObjectTypeIsPersonalFieldHandler</value>
			public static ObjectTypeIsPersonalFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeIsPersonalFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeIsPersonalFieldHandler;
					}
					else
					{
						// The static constructor in ObjectType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ObjectType.objectTypeIsPersonalFieldHandler, so just instantiate one and return it
						return new ObjectTypeIsPersonalFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectType.IsPersonal field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ObjectType.IsPersonalMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ObjectType</param>
			protected sealed override System.Boolean GetValue(Neumont.Tools.ORM.ObjectModel.ObjectType element)
			{
				return element.isPersonalPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.ObjectType element, System.Boolean value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Boolean oldValue)
			{
				oldValue = element.isPersonalPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.isPersonalPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region DataType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.DataType DataType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.DataType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.DataType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.DataType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType), newRoles);
				}
			}
		}
		#endregion
		#region NestedFactType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FactType NestedFactType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.Objectification.NestingTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.Objectification.NestedFactTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.FactType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.Objectification.NestingTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.Objectification.NestedFactTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.FactType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.FactType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.Objectification.NestedFactTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.Objectification.NestingTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.Objectification), newRoles);
				}
			}
		}
		#endregion
		#region PlayedRoleCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.RoleMoveableCollection PlayedRoleCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.RoleMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayerMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuid); }
		}
		#endregion
		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ORMModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ModelMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ORMModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ORMModel counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ORMModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasObjectType), newRoles);
				}
			}
		}
		#endregion
		#region DuplicateNameError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError DuplicateNameError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError), newRoles);
				}
			}
		}
		#endregion
		#region ValueConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraint ValueConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint), newRoles);
				}
			}
		}
		#endregion
		#region ReferenceSchemeError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeError ReferenceSchemeError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError), newRoles);
				}
			}
		}
		#endregion
		#region ObjectTypeRequiresPrimarySupertypeError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeError ObjectTypeRequiresPrimarySupertypeError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError), newRoles);
				}
			}
		}
		#endregion
		#region Note's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.Note Note
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.NoteMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.Note;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.NoteMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.Note counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.Note;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.NoteMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote), newRoles);
				}
			}
		}
		#endregion
		#region CompatibleSupertypesError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesError CompatibleSupertypesError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError), newRoles);
				}
			}
		}
		#endregion
		#region PreferredIdentifierRequiresMandatoryError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryError PreferredIdentifierRequiresMandatoryError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for ObjectType
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.ObjectType Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ObjectTypeMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ObjectTypeMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ObjectType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ObjectType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ObjectType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ObjectType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ObjectType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ObjectType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ObjectType) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ObjectType) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.ObjectType[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.ObjectType at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.ObjectType this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ObjectType)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ObjectType to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.ObjectType value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ObjectType to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.ObjectType value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ObjectType to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.ObjectType value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ObjectType to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.ObjectType value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ObjectType to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.ObjectType value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.ObjectType rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.ObjectType rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ObjectType's Generated Constructor Code
	public  partial class ObjectType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectType CreateObjectType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateObjectType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectType CreateAndInitializeObjectType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectType CreateObjectType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ObjectType)partition.ElementFactory.CreateElement(typeof(ObjectType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectType CreateAndInitializeObjectType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectType)partition.ElementFactory.CreateElement(typeof(ObjectType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectType
	/// <summary>
	/// ObjectType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType))]
	public sealed class ObjectTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ObjectType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectTypeElementFactoryCreator Instance
		{
			get
			{
				return new ObjectTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint")]
	public abstract partial class SetComparisonConstraint : Neumont.Tools.ORM.ObjectModel.ORMNamedElement
	{
		#region SetComparisonConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "0d75242d-1462-4936-ad30-e1ce61a6ba3f";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint.MetaClassGuidString);
		#endregion

		#region Modality's Generated  Field Code
		#region Modality's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ModalityMetaAttributeGuidString = "b007b1c6-5ff2-4926-a0f3-9f5deef69df3";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ModalityMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint.ModalityMetaAttributeGuidString);
		#endregion

		#region Modality's Generated Property Code

		private Neumont.Tools.ORM.ObjectModel.ConstraintModality modalityPropertyStorage = Neumont.Tools.ORM.ObjectModel.ConstraintModality.Alethic;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(Neumont.Tools.ORM.ObjectModel.ConstraintModality),DefaultEnumerationValueName="Alethic")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(SetComparisonConstraintModalityFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint.ModalityMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint.Modality")]
		public  Neumont.Tools.ORM.ObjectModel.ConstraintModality Modality
		{
			get
			{
				return modalityPropertyStorage;
			}
		
			set
			{
				setComparisonConstraintModalityFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region SetComparisonConstraintModalityFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for SetComparisonConstraint.Modality field
		/// </summary>
		private static SetComparisonConstraintModalityFieldHandler	setComparisonConstraintModalityFieldHandler	= SetComparisonConstraintModalityFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for SetComparisonConstraint.Modality
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class SetComparisonConstraintModalityFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint,Neumont.Tools.ORM.ObjectModel.ConstraintModality>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private SetComparisonConstraintModalityFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the SetComparisonConstraint.Modality field handler
			/// </summary>
			/// <value>SetComparisonConstraintModalityFieldHandler</value>
			public static SetComparisonConstraintModalityFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint.setComparisonConstraintModalityFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint.setComparisonConstraintModalityFieldHandler;
					}
					else
					{
						// The static constructor in SetComparisonConstraint will assign this value to
						// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint.setComparisonConstraintModalityFieldHandler, so just instantiate one and return it
						return new SetComparisonConstraintModalityFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the SetComparisonConstraint.Modality field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint.ModalityMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the SetComparisonConstraint</param>
			protected sealed override Neumont.Tools.ORM.ObjectModel.ConstraintModality GetValue(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint element)
			{
				return element.modalityPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint element, Neumont.Tools.ORM.ObjectModel.ConstraintModality value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref Neumont.Tools.ORM.ObjectModel.ConstraintModality oldValue)
			{
				oldValue = element.modalityPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.modalityPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region FactTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FactTypeMoveableCollection FactTypeCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.FactTypeMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.SetComparisonConstraintCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.FactTypeCollectionMetaRoleGuid); }
		}
		#endregion
		#region RoleSequenceCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequenceMoveableCollection RoleSequenceCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequenceMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuid); }
		}
		#endregion
		#region TooFewRoleSequencesError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError TooFewRoleSequencesError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError), newRoles);
				}
			}
		}
		#endregion
		#region TooManyRoleSequencesError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError TooManyRoleSequencesError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError), newRoles);
				}
			}
		}
		#endregion
		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ORMModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.ModelMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ORMModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ORMModel counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ORMModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint), newRoles);
				}
			}
		}
		#endregion
		#region DuplicateNameError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError DuplicateNameError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError), newRoles);
				}
			}
		}
		#endregion
		#region ArityMismatchError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError ArityMismatchError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError), newRoles);
				}
			}
		}
		#endregion
		#region CompatibleRolePlayerTypeErrorCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeErrorMoveableCollection CompatibleRolePlayerTypeErrorCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeErrorMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region Collection Classes for SetComparisonConstraint
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class SetComparisonConstraintMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public SetComparisonConstraintMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region SetComparisonConstraint's Generated Constructor Code
	public abstract partial class SetComparisonConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected SetComparisonConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.EqualityConstraint.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.EqualityConstraint")]
	public  partial class EqualityConstraint : Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint
	{
		#region EqualityConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "1bee2436-cd79-45be-b484-9c1dc5cb81ab";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.EqualityConstraint.MetaClassGuidString);
		#endregion

		#region EqualityImpliedByMandatoryError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryError EqualityImpliedByMandatoryError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError), newRoles);
				}
			}
		}
		#endregion
	}
	#region EqualityConstraint's Generated Constructor Code
	public  partial class EqualityConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EqualityConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityConstraint CreateEqualityConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateEqualityConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityConstraint CreateAndInitializeEqualityConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeEqualityConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public EqualityConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityConstraint CreateEqualityConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (EqualityConstraint)partition.ElementFactory.CreateElement(typeof(EqualityConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityConstraint CreateAndInitializeEqualityConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (EqualityConstraint)partition.ElementFactory.CreateElement(typeof(EqualityConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for EqualityConstraint
	/// <summary>
	/// EqualityConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.EqualityConstraint))]
	public sealed class EqualityConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EqualityConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.EqualityConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static EqualityConstraintElementFactoryCreator Instance
		{
			get
			{
				return new EqualityConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ExclusionConstraint.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ExclusionConstraint")]
	public  partial class ExclusionConstraint : Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint
	{
		#region ExclusionConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "5373783f-9ddd-4ffb-95d8-8e28cd73b98a";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ExclusionConstraint.MetaClassGuidString);
		#endregion

	}
	#region ExclusionConstraint's Generated Constructor Code
	public  partial class ExclusionConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExclusionConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExclusionConstraint CreateExclusionConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateExclusionConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExclusionConstraint CreateAndInitializeExclusionConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeExclusionConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ExclusionConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExclusionConstraint CreateExclusionConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ExclusionConstraint)partition.ElementFactory.CreateElement(typeof(ExclusionConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExclusionConstraint CreateAndInitializeExclusionConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ExclusionConstraint)partition.ElementFactory.CreateElement(typeof(ExclusionConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ExclusionConstraint
	/// <summary>
	/// ExclusionConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ExclusionConstraint))]
	public sealed class ExclusionConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExclusionConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ExclusionConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ExclusionConstraintElementFactoryCreator Instance
		{
			get
			{
				return new ExclusionConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SubsetConstraint.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.SubsetConstraint")]
	public  partial class SubsetConstraint : Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint
	{
		#region SubsetConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "7ac282bf-98d2-4ad1-9bf0-5ec0cdb17d95";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SubsetConstraint.MetaClassGuidString);
		#endregion

	}
	#region SubsetConstraint's Generated Constructor Code
	public  partial class SubsetConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubsetConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraint CreateSubsetConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateSubsetConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraint CreateAndInitializeSubsetConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSubsetConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SubsetConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraint CreateSubsetConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (SubsetConstraint)partition.ElementFactory.CreateElement(typeof(SubsetConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubsetConstraint CreateAndInitializeSubsetConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SubsetConstraint)partition.ElementFactory.CreateElement(typeof(SubsetConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SubsetConstraint
	/// <summary>
	/// SubsetConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.SubsetConstraint))]
	public sealed class SubsetConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubsetConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.SubsetConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SubsetConstraintElementFactoryCreator Instance
		{
			get
			{
				return new SubsetConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence")]
	public abstract partial class ConstraintRoleSequence : Neumont.Tools.ORM.ObjectModel.ORMNamedElement
	{
		#region ConstraintRoleSequence's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "d9ab8420-8604-4016-8827-0d59c77b47f8";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence.MetaClassGuidString);
		#endregion

		#region RoleCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.RoleMoveableCollection RoleCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.RoleMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region Collection Classes for ConstraintRoleSequence
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ConstraintRoleSequenceMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ConstraintRoleSequenceMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ConstraintRoleSequence's Generated Constructor Code
	public abstract partial class ConstraintRoleSequence
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ConstraintRoleSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence")]
	public  partial class SetComparisonConstraintRoleSequence : Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence
	{
		#region SetComparisonConstraintRoleSequence's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "34a3c709-1021-4afe-80db-6302f4c681ea";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence.MetaClassGuidString);
		#endregion

		#region ExternalConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint ExternalConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for SetComparisonConstraintRoleSequence
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class SetComparisonConstraintRoleSequenceMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public SetComparisonConstraintRoleSequenceMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region SetComparisonConstraintRoleSequence's Generated Constructor Code
	public  partial class SetComparisonConstraintRoleSequence
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintRoleSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintRoleSequence CreateSetComparisonConstraintRoleSequence(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateSetComparisonConstraintRoleSequence(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintRoleSequence CreateAndInitializeSetComparisonConstraintRoleSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSetComparisonConstraintRoleSequence(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintRoleSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintRoleSequence CreateSetComparisonConstraintRoleSequence(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (SetComparisonConstraintRoleSequence)partition.ElementFactory.CreateElement(typeof(SetComparisonConstraintRoleSequence));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintRoleSequence CreateAndInitializeSetComparisonConstraintRoleSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SetComparisonConstraintRoleSequence)partition.ElementFactory.CreateElement(typeof(SetComparisonConstraintRoleSequence), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SetComparisonConstraintRoleSequence
	/// <summary>
	/// SetComparisonConstraintRoleSequence Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence))]
	public sealed class SetComparisonConstraintRoleSequenceElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintRoleSequenceElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SetComparisonConstraintRoleSequenceElementFactoryCreator Instance
		{
			get
			{
				return new SetComparisonConstraintRoleSequenceElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetConstraint.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.SetConstraint")]
	public abstract partial class SetConstraint : Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence
	{
		#region SetConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "5b304d59-8d34-45c5-80fc-4a0fe122aa0a";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetConstraint.MetaClassGuidString);
		#endregion

		#region Modality's Generated  Field Code
		#region Modality's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ModalityMetaAttributeGuidString = "3841d4c3-d8a0-4c3e-8ebc-964420b5ff90";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ModalityMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetConstraint.ModalityMetaAttributeGuidString);
		#endregion

		#region Modality's Generated Property Code

		private Neumont.Tools.ORM.ObjectModel.ConstraintModality modalityPropertyStorage = Neumont.Tools.ORM.ObjectModel.ConstraintModality.Alethic;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(Neumont.Tools.ORM.ObjectModel.ConstraintModality),DefaultEnumerationValueName="Alethic")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(SetConstraintModalityFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetConstraint.ModalityMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.SetConstraint.Modality")]
		public  Neumont.Tools.ORM.ObjectModel.ConstraintModality Modality
		{
			get
			{
				return modalityPropertyStorage;
			}
		
			set
			{
				setConstraintModalityFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region SetConstraintModalityFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for SetConstraint.Modality field
		/// </summary>
		private static SetConstraintModalityFieldHandler	setConstraintModalityFieldHandler	= SetConstraintModalityFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for SetConstraint.Modality
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class SetConstraintModalityFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.SetConstraint,Neumont.Tools.ORM.ObjectModel.ConstraintModality>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private SetConstraintModalityFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the SetConstraint.Modality field handler
			/// </summary>
			/// <value>SetConstraintModalityFieldHandler</value>
			public static SetConstraintModalityFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.SetConstraint.setConstraintModalityFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.SetConstraint.setConstraintModalityFieldHandler;
					}
					else
					{
						// The static constructor in SetConstraint will assign this value to
						// Neumont.Tools.ORM.ObjectModel.SetConstraint.setConstraintModalityFieldHandler, so just instantiate one and return it
						return new SetConstraintModalityFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the SetConstraint.Modality field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.SetConstraint.ModalityMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the SetConstraint</param>
			protected sealed override Neumont.Tools.ORM.ObjectModel.ConstraintModality GetValue(Neumont.Tools.ORM.ObjectModel.SetConstraint element)
			{
				return element.modalityPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.SetConstraint element, Neumont.Tools.ORM.ObjectModel.ConstraintModality value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref Neumont.Tools.ORM.ObjectModel.ConstraintModality oldValue)
			{
				oldValue = element.modalityPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.modalityPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region FactTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FactTypeMoveableCollection FactTypeCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.FactTypeMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.FactSetConstraint.SetConstraintCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactSetConstraint.FactTypeCollectionMetaRoleGuid); }
		}
		#endregion
		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ORMModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.SetConstraintCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.ModelMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ORMModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.SetConstraintCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ORMModel counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ORMModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.SetConstraintCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint), newRoles);
				}
			}
		}
		#endregion
		#region DuplicateNameError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError DuplicateNameError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError), newRoles);
				}
			}
		}
		#endregion
		#region CompatibleRolePlayerTypeError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError CompatibleRolePlayerTypeError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError), newRoles);
				}
			}
		}
		#endregion
		#region TooFewRoleSequencesError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError TooFewRoleSequencesError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError), newRoles);
				}
			}
		}
		#endregion
		#region TooManyRoleSequencesError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError TooManyRoleSequencesError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for SetConstraint
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.SetConstraint Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class SetConstraintMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public SetConstraintMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.SetConstraint[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.SetConstraint at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.SetConstraint this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetConstraint)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.SetConstraint to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.SetConstraint value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.SetConstraint to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.SetConstraint value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.SetConstraint to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.SetConstraint value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.SetConstraint to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.SetConstraint value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.SetConstraint to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.SetConstraint value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.SetConstraint rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.SetConstraint rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region SetConstraint's Generated Constructor Code
	public abstract partial class SetConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected SetConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RingConstraint.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.RingConstraint")]
	public  partial class RingConstraint : Neumont.Tools.ORM.ObjectModel.SetConstraint
	{
		#region RingConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c0f29d7a-f057-49a6-87df-7abcbb55d471";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RingConstraint.MetaClassGuidString);
		#endregion

		#region RingType's Generated  Field Code
		#region RingType's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String RingTypeMetaAttributeGuidString = "83d36429-a9c8-405e-aab1-937045b79804";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid RingTypeMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RingConstraint.RingTypeMetaAttributeGuidString);
		#endregion

		#region RingType's Generated Property Code

		private Neumont.Tools.ORM.ObjectModel.RingConstraintType ringTypePropertyStorage = Neumont.Tools.ORM.ObjectModel.RingConstraintType.Undefined;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(Neumont.Tools.ORM.ObjectModel.RingConstraintType),DefaultEnumerationValueName="Undefined")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(RingConstraintRingTypeFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RingConstraint.RingTypeMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.RingConstraint.RingType")]
		public  Neumont.Tools.ORM.ObjectModel.RingConstraintType RingType
		{
			get
			{
				return ringTypePropertyStorage;
			}
		
			set
			{
				ringConstraintRingTypeFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RingConstraintRingTypeFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for RingConstraint.RingType field
		/// </summary>
		private static RingConstraintRingTypeFieldHandler	ringConstraintRingTypeFieldHandler	= RingConstraintRingTypeFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for RingConstraint.RingType
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RingConstraintRingTypeFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.RingConstraint,Neumont.Tools.ORM.ObjectModel.RingConstraintType>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RingConstraintRingTypeFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the RingConstraint.RingType field handler
			/// </summary>
			/// <value>RingConstraintRingTypeFieldHandler</value>
			public static RingConstraintRingTypeFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.RingConstraint.ringConstraintRingTypeFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.RingConstraint.ringConstraintRingTypeFieldHandler;
					}
					else
					{
						// The static constructor in RingConstraint will assign this value to
						// Neumont.Tools.ORM.ObjectModel.RingConstraint.ringConstraintRingTypeFieldHandler, so just instantiate one and return it
						return new RingConstraintRingTypeFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the RingConstraint.RingType field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.RingConstraint.RingTypeMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the RingConstraint</param>
			protected sealed override Neumont.Tools.ORM.ObjectModel.RingConstraintType GetValue(Neumont.Tools.ORM.ObjectModel.RingConstraint element)
			{
				return element.ringTypePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.RingConstraint element, Neumont.Tools.ORM.ObjectModel.RingConstraintType value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref Neumont.Tools.ORM.ObjectModel.RingConstraintType oldValue)
			{
				oldValue = element.ringTypePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.ringTypePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region RingConstraintTypeNotSpecifiedError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedError RingConstraintTypeNotSpecifiedError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError), newRoles);
				}
			}
		}
		#endregion
	}
	#region RingConstraint's Generated Constructor Code
	public  partial class RingConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraint CreateRingConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateRingConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraint CreateAndInitializeRingConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRingConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraint CreateRingConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (RingConstraint)partition.ElementFactory.CreateElement(typeof(RingConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraint CreateAndInitializeRingConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RingConstraint)partition.ElementFactory.CreateElement(typeof(RingConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RingConstraint
	/// <summary>
	/// RingConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.RingConstraint))]
	public sealed class RingConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.RingConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RingConstraintElementFactoryCreator Instance
		{
			get
			{
				return new RingConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.FrequencyConstraint")]
	public  partial class FrequencyConstraint : Neumont.Tools.ORM.ObjectModel.SetConstraint
	{
		#region FrequencyConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "cee1eaf8-155f-4646-acb3-bf2e87be032a";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.MetaClassGuidString);
		#endregion

		#region MinFrequency's Generated  Field Code
		#region MinFrequency's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MinFrequencyMetaAttributeGuidString = "473b1d1e-6848-45ed-83dd-3def2334cf79";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MinFrequencyMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.MinFrequencyMetaAttributeGuidString);
		#endregion

		#region MinFrequency's Generated Property Code

		private System.Int32 minFrequencyPropertyStorage = 1;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.IntegerDomainAttribute(MinValue=1,DefaultInt=1)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(FrequencyConstraintMinFrequencyFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.MinFrequencyMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.MinFrequency")]
		public  System.Int32 MinFrequency
		{
			get
			{
				return minFrequencyPropertyStorage;
			}
		
			set
			{
				frequencyConstraintMinFrequencyFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FrequencyConstraintMinFrequencyFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FrequencyConstraint.MinFrequency field
		/// </summary>
		private static FrequencyConstraintMinFrequencyFieldHandler	frequencyConstraintMinFrequencyFieldHandler	= FrequencyConstraintMinFrequencyFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FrequencyConstraint.MinFrequency
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FrequencyConstraintMinFrequencyFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.FrequencyConstraint,System.Int32>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FrequencyConstraintMinFrequencyFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FrequencyConstraint.MinFrequency field handler
			/// </summary>
			/// <value>FrequencyConstraintMinFrequencyFieldHandler</value>
			public static FrequencyConstraintMinFrequencyFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.frequencyConstraintMinFrequencyFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.frequencyConstraintMinFrequencyFieldHandler;
					}
					else
					{
						// The static constructor in FrequencyConstraint will assign this value to
						// Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.frequencyConstraintMinFrequencyFieldHandler, so just instantiate one and return it
						return new FrequencyConstraintMinFrequencyFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FrequencyConstraint.MinFrequency field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.MinFrequencyMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the FrequencyConstraint</param>
			protected sealed override System.Int32 GetValue(Neumont.Tools.ORM.ObjectModel.FrequencyConstraint element)
			{
				return element.minFrequencyPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.FrequencyConstraint element, System.Int32 value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Int32 oldValue)
			{
				oldValue = element.minFrequencyPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.minFrequencyPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region MaxFrequency's Generated  Field Code
		#region MaxFrequency's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MaxFrequencyMetaAttributeGuidString = "7c65f145-1e17-4ea6-8863-2c3c6974b22c";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MaxFrequencyMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.MaxFrequencyMetaAttributeGuidString);
		#endregion

		#region MaxFrequency's Generated Property Code

		private System.Int32 maxFrequencyPropertyStorage = 2;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.IntegerDomainAttribute(MinValue=0,DefaultInt=2)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(FrequencyConstraintMaxFrequencyFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.MaxFrequencyMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.MaxFrequency")]
		public  System.Int32 MaxFrequency
		{
			get
			{
				return maxFrequencyPropertyStorage;
			}
		
			set
			{
				frequencyConstraintMaxFrequencyFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FrequencyConstraintMaxFrequencyFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FrequencyConstraint.MaxFrequency field
		/// </summary>
		private static FrequencyConstraintMaxFrequencyFieldHandler	frequencyConstraintMaxFrequencyFieldHandler	= FrequencyConstraintMaxFrequencyFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FrequencyConstraint.MaxFrequency
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FrequencyConstraintMaxFrequencyFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.FrequencyConstraint,System.Int32>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FrequencyConstraintMaxFrequencyFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FrequencyConstraint.MaxFrequency field handler
			/// </summary>
			/// <value>FrequencyConstraintMaxFrequencyFieldHandler</value>
			public static FrequencyConstraintMaxFrequencyFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.frequencyConstraintMaxFrequencyFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.frequencyConstraintMaxFrequencyFieldHandler;
					}
					else
					{
						// The static constructor in FrequencyConstraint will assign this value to
						// Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.frequencyConstraintMaxFrequencyFieldHandler, so just instantiate one and return it
						return new FrequencyConstraintMaxFrequencyFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FrequencyConstraint.MaxFrequency field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.MaxFrequencyMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the FrequencyConstraint</param>
			protected sealed override System.Int32 GetValue(Neumont.Tools.ORM.ObjectModel.FrequencyConstraint element)
			{
				return element.maxFrequencyPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.FrequencyConstraint element, System.Int32 value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Int32 oldValue)
			{
				oldValue = element.maxFrequencyPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.maxFrequencyPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region FrequencyConstraintMinMaxError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxError FrequencyConstraintMinMaxError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError), newRoles);
				}
			}
		}
		#endregion
		#region FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintErrorMoveableCollection FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintErrorMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region FrequencyConstraint's Generated Constructor Code
	public  partial class FrequencyConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraint CreateFrequencyConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFrequencyConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraint CreateAndInitializeFrequencyConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFrequencyConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraint CreateFrequencyConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FrequencyConstraint)partition.ElementFactory.CreateElement(typeof(FrequencyConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraint CreateAndInitializeFrequencyConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FrequencyConstraint)partition.ElementFactory.CreateElement(typeof(FrequencyConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FrequencyConstraint
	/// <summary>
	/// FrequencyConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraint))]
	public sealed class FrequencyConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FrequencyConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FrequencyConstraintElementFactoryCreator Instance
		{
			get
			{
				return new FrequencyConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.UniquenessConstraint")]
	public  partial class UniquenessConstraint : Neumont.Tools.ORM.ObjectModel.SetConstraint
	{
		#region UniquenessConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c50782de-5fd3-4076-a062-dd8983367363";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.MetaClassGuidString);
		#endregion

		#region IsPreferred's Generated  Field Code
		#region IsPreferred's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsPreferredMetaAttributeGuidString = "81ceefc5-e227-4a8e-be95-1a63066bc9b7";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsPreferredMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.IsPreferredMetaAttributeGuidString);
		#endregion

		#region IsPreferred's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.ReadOnly(State=Microsoft.VisualStudio.Modeling.ReadOnlyAttributeValue.SometimesUIReadOnlyPreferTrue)]
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(UniquenessConstraintIsPreferredFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.IsPreferredMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.IsPreferred")]
		public  System.Boolean IsPreferred
		{
			get
			{
				return uniquenessConstraintIsPreferredFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				uniquenessConstraintIsPreferredFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region UniquenessConstraintIsPreferredFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for UniquenessConstraint.IsPreferred field
		/// </summary>
		private static UniquenessConstraintIsPreferredFieldHandler	uniquenessConstraintIsPreferredFieldHandler	= UniquenessConstraintIsPreferredFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for UniquenessConstraint.IsPreferred
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class UniquenessConstraintIsPreferredFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.UniquenessConstraint,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private UniquenessConstraintIsPreferredFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the UniquenessConstraint.IsPreferred field handler
			/// </summary>
			/// <value>UniquenessConstraintIsPreferredFieldHandler</value>
			public static UniquenessConstraintIsPreferredFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.uniquenessConstraintIsPreferredFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.uniquenessConstraintIsPreferredFieldHandler;
					}
					else
					{
						// The static constructor in UniquenessConstraint will assign this value to
						// Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.uniquenessConstraintIsPreferredFieldHandler, so just instantiate one and return it
						return new UniquenessConstraintIsPreferredFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the UniquenessConstraint.IsPreferred field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.IsPreferredMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region IsInternal's Generated  Field Code
		#region IsInternal's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsInternalMetaAttributeGuidString = "11fe2070-97fb-4a06-a198-8ed3311edc4f";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsInternalMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.IsInternalMetaAttributeGuidString);
		#endregion

		#region IsInternal's Generated Property Code

		private System.Boolean isInternalPropertyStorage = false;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.ReadOnly(State=Microsoft.VisualStudio.Modeling.ReadOnlyAttributeValue.SometimesUIReadOnlyPreferTrue)]
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(UniquenessConstraintIsInternalFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.IsInternalMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.IsInternal")]
		public  System.Boolean IsInternal
		{
			get
			{
				return isInternalPropertyStorage;
			}
		
			set
			{
				uniquenessConstraintIsInternalFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region UniquenessConstraintIsInternalFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for UniquenessConstraint.IsInternal field
		/// </summary>
		private static UniquenessConstraintIsInternalFieldHandler	uniquenessConstraintIsInternalFieldHandler	= UniquenessConstraintIsInternalFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for UniquenessConstraint.IsInternal
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class UniquenessConstraintIsInternalFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.UniquenessConstraint,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private UniquenessConstraintIsInternalFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the UniquenessConstraint.IsInternal field handler
			/// </summary>
			/// <value>UniquenessConstraintIsInternalFieldHandler</value>
			public static UniquenessConstraintIsInternalFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.uniquenessConstraintIsInternalFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.uniquenessConstraintIsInternalFieldHandler;
					}
					else
					{
						// The static constructor in UniquenessConstraint will assign this value to
						// Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.uniquenessConstraintIsInternalFieldHandler, so just instantiate one and return it
						return new UniquenessConstraintIsInternalFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the UniquenessConstraint.IsInternal field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.IsInternalMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the UniquenessConstraint</param>
			protected sealed override System.Boolean GetValue(Neumont.Tools.ORM.ObjectModel.UniquenessConstraint element)
			{
				return element.isInternalPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.UniquenessConstraint element, System.Boolean value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Boolean oldValue)
			{
				oldValue = element.isInternalPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.isInternalPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region NMinusOneError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.NMinusOneError NMinusOneError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.NMinusOneError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.NMinusOneError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.NMinusOneError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError), newRoles);
				}
			}
		}
		#endregion
		#region ImpliedByUniquenessError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.UniquenessImpliedByUniquenessError ImpliedByUniquenessError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.UniquenessConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.ImpliedByUniquenessErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.UniquenessImpliedByUniquenessError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.UniquenessConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.ImpliedByUniquenessErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.UniquenessImpliedByUniquenessError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.UniquenessImpliedByUniquenessError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.ImpliedByUniquenessErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.UniquenessConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError), newRoles);
				}
			}
		}
		#endregion
	}
	#region UniquenessConstraint's Generated Constructor Code
	public  partial class UniquenessConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public UniquenessConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UniquenessConstraint CreateUniquenessConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateUniquenessConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UniquenessConstraint CreateAndInitializeUniquenessConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeUniquenessConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public UniquenessConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UniquenessConstraint CreateUniquenessConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (UniquenessConstraint)partition.ElementFactory.CreateElement(typeof(UniquenessConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UniquenessConstraint CreateAndInitializeUniquenessConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (UniquenessConstraint)partition.ElementFactory.CreateElement(typeof(UniquenessConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for UniquenessConstraint
	/// <summary>
	/// UniquenessConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraint))]
	public sealed class UniquenessConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public UniquenessConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.UniquenessConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static UniquenessConstraintElementFactoryCreator Instance
		{
			get
			{
				return new UniquenessConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.MandatoryConstraint.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.MandatoryConstraint")]
	public  partial class MandatoryConstraint : Neumont.Tools.ORM.ObjectModel.SetConstraint
	{
		#region MandatoryConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "749901ac-66bb-4d86-a42c-127456eb5451";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.MandatoryConstraint.MetaClassGuidString);
		#endregion

		#region IsSimple's Generated  Field Code
		#region IsSimple's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsSimpleMetaAttributeGuidString = "b60c5d91-f076-4a46-819b-81001acecfdb";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsSimpleMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.MandatoryConstraint.IsSimpleMetaAttributeGuidString);
		#endregion

		#region IsSimple's Generated Property Code

		private System.Boolean isSimplePropertyStorage = false;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.ReadOnly(State=Microsoft.VisualStudio.Modeling.ReadOnlyAttributeValue.SometimesUIReadOnlyPreferTrue)]
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(MandatoryConstraintIsSimpleFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.MandatoryConstraint.IsSimpleMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.MandatoryConstraint.IsSimple")]
		public  System.Boolean IsSimple
		{
			get
			{
				return isSimplePropertyStorage;
			}
		
			set
			{
				mandatoryConstraintIsSimpleFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region MandatoryConstraintIsSimpleFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for MandatoryConstraint.IsSimple field
		/// </summary>
		private static MandatoryConstraintIsSimpleFieldHandler	mandatoryConstraintIsSimpleFieldHandler	= MandatoryConstraintIsSimpleFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for MandatoryConstraint.IsSimple
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class MandatoryConstraintIsSimpleFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.MandatoryConstraint,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private MandatoryConstraintIsSimpleFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the MandatoryConstraint.IsSimple field handler
			/// </summary>
			/// <value>MandatoryConstraintIsSimpleFieldHandler</value>
			public static MandatoryConstraintIsSimpleFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.MandatoryConstraint.mandatoryConstraintIsSimpleFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.MandatoryConstraint.mandatoryConstraintIsSimpleFieldHandler;
					}
					else
					{
						// The static constructor in MandatoryConstraint will assign this value to
						// Neumont.Tools.ORM.ObjectModel.MandatoryConstraint.mandatoryConstraintIsSimpleFieldHandler, so just instantiate one and return it
						return new MandatoryConstraintIsSimpleFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the MandatoryConstraint.IsSimple field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.MandatoryConstraint.IsSimpleMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the MandatoryConstraint</param>
			protected sealed override System.Boolean GetValue(Neumont.Tools.ORM.ObjectModel.MandatoryConstraint element)
			{
				return element.isSimplePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.MandatoryConstraint element, System.Boolean value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Boolean oldValue)
			{
				oldValue = element.isSimplePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.isSimplePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region ImpliedByMandatoryError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.MandatoryImpliedByMandatoryError ImpliedByMandatoryError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.MandatoryConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.ImpliedByMandatoryErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.MandatoryImpliedByMandatoryError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.MandatoryConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.ImpliedByMandatoryErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.MandatoryImpliedByMandatoryError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.MandatoryImpliedByMandatoryError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.ImpliedByMandatoryErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.MandatoryConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError), newRoles);
				}
			}
		}
		#endregion
	}
	#region MandatoryConstraint's Generated Constructor Code
	public  partial class MandatoryConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MandatoryConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MandatoryConstraint CreateMandatoryConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateMandatoryConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MandatoryConstraint CreateAndInitializeMandatoryConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeMandatoryConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public MandatoryConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MandatoryConstraint CreateMandatoryConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (MandatoryConstraint)partition.ElementFactory.CreateElement(typeof(MandatoryConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MandatoryConstraint CreateAndInitializeMandatoryConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (MandatoryConstraint)partition.ElementFactory.CreateElement(typeof(MandatoryConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for MandatoryConstraint
	/// <summary>
	/// MandatoryConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.MandatoryConstraint))]
	public sealed class MandatoryConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MandatoryConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.MandatoryConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static MandatoryConstraintElementFactoryCreator Instance
		{
			get
			{
				return new MandatoryConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ModelError")]
	public abstract partial class ModelError : Neumont.Tools.ORM.ObjectModel.ORMNamedElement
	{
		#region ModelError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "50b3feea-fa3a-4c87-bb8c-74b26c12b330";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelError.MetaClassGuidString);
		#endregion

		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ORMModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ModelHasError.ErrorCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasError.ModelMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ORMModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ModelHasError.ErrorCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ModelHasError.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ORMModel counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ORMModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ModelHasError.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ModelHasError.ErrorCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasError), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for ModelError
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.ModelError Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ModelErrorMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ModelErrorMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ModelError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ModelError))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ModelError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ModelError))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ModelError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ModelError))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ModelError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ModelError))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ModelError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ModelError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ModelError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ModelError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ModelError) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ModelError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ModelError) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ModelError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.ModelError[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.ModelError at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.ModelError this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ModelError)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ModelError to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.ModelError value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ModelError to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.ModelError value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ModelError to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.ModelError value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ModelError to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.ModelError value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ModelError to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.ModelError value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.ModelError rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.ModelError rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ModelError's Generated Constructor Code
	public abstract partial class ModelError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ModelError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError")]
	public  partial class TooFewRoleSequencesError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region TooFewRoleSequencesError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "a2f137b4-5973-4e4f-90aa-6bc936bf8e79";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError.MetaClassGuidString);
		#endregion

		#region SetComparisonConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint SetComparisonConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError), newRoles);
				}
			}
		}
		#endregion
		#region SetConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.SetConstraint SetConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.SetConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.SetConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.SetConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError), newRoles);
				}
			}
		}
		#endregion
	}
	#region TooFewRoleSequencesError's Generated Constructor Code
	public  partial class TooFewRoleSequencesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooFewRoleSequencesError CreateTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateTooFewRoleSequencesError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooFewRoleSequencesError CreateAndInitializeTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeTooFewRoleSequencesError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public TooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooFewRoleSequencesError CreateTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (TooFewRoleSequencesError)partition.ElementFactory.CreateElement(typeof(TooFewRoleSequencesError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooFewRoleSequencesError CreateAndInitializeTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (TooFewRoleSequencesError)partition.ElementFactory.CreateElement(typeof(TooFewRoleSequencesError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for TooFewRoleSequencesError
	/// <summary>
	/// TooFewRoleSequencesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError))]
	public sealed class TooFewRoleSequencesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TooFewRoleSequencesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static TooFewRoleSequencesErrorElementFactoryCreator Instance
		{
			get
			{
				return new TooFewRoleSequencesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError")]
	public  partial class TooManyRoleSequencesError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region TooManyRoleSequencesError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c0e9f4b2-c8e8-4126-bde2-ec5de62d2b58";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError.MetaClassGuidString);
		#endregion

		#region SetComparisonConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint SetComparisonConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError), newRoles);
				}
			}
		}
		#endregion
		#region SetConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.SetConstraint SetConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.SetConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.SetConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.SetConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError), newRoles);
				}
			}
		}
		#endregion
	}
	#region TooManyRoleSequencesError's Generated Constructor Code
	public  partial class TooManyRoleSequencesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooManyRoleSequencesError CreateTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateTooManyRoleSequencesError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooManyRoleSequencesError CreateAndInitializeTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeTooManyRoleSequencesError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public TooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooManyRoleSequencesError CreateTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (TooManyRoleSequencesError)partition.ElementFactory.CreateElement(typeof(TooManyRoleSequencesError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooManyRoleSequencesError CreateAndInitializeTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (TooManyRoleSequencesError)partition.ElementFactory.CreateElement(typeof(TooManyRoleSequencesError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for TooManyRoleSequencesError
	/// <summary>
	/// TooManyRoleSequencesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError))]
	public sealed class TooManyRoleSequencesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TooManyRoleSequencesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static TooManyRoleSequencesErrorElementFactoryCreator Instance
		{
			get
			{
				return new TooManyRoleSequencesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.DuplicateNameError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.DuplicateNameError")]
	public abstract partial class DuplicateNameError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region DuplicateNameError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "cbd2724e-6199-4f12-a3aa-7522187bea20";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.DuplicateNameError.MetaClassGuidString);
		#endregion

	}
	#region DuplicateNameError's Generated Constructor Code
	public abstract partial class DuplicateNameError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected DuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError")]
	public  partial class ObjectTypeDuplicateNameError : Neumont.Tools.ORM.ObjectModel.DuplicateNameError
	{
		#region ObjectTypeDuplicateNameError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "29be74c2-24cc-4b4b-ab61-7750ca7ec339";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError.MetaClassGuidString);
		#endregion

		#region ObjectTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ObjectTypeMoveableCollection ObjectTypeCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.ObjectTypeMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region ObjectTypeDuplicateNameError's Generated Constructor Code
	public  partial class ObjectTypeDuplicateNameError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeDuplicateNameError CreateObjectTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateObjectTypeDuplicateNameError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeDuplicateNameError CreateAndInitializeObjectTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectTypeDuplicateNameError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeDuplicateNameError CreateObjectTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ObjectTypeDuplicateNameError)partition.ElementFactory.CreateElement(typeof(ObjectTypeDuplicateNameError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeDuplicateNameError CreateAndInitializeObjectTypeDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectTypeDuplicateNameError)partition.ElementFactory.CreateElement(typeof(ObjectTypeDuplicateNameError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectTypeDuplicateNameError
	/// <summary>
	/// ObjectTypeDuplicateNameError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError))]
	public sealed class ObjectTypeDuplicateNameErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeDuplicateNameErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectTypeDuplicateNameErrorElementFactoryCreator Instance
		{
			get
			{
				return new ObjectTypeDuplicateNameErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError")]
	public  partial class ConstraintDuplicateNameError : Neumont.Tools.ORM.ObjectModel.DuplicateNameError
	{
		#region ConstraintDuplicateNameError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "0ecf0d2d-b3a3-4652-9e77-48fa7765d08f";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError.MetaClassGuidString);
		#endregion

		#region SetConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.SetConstraintMoveableCollection SetConstraintCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.SetConstraintMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintCollectionMetaRoleGuid); }
		}
		#endregion
		#region SetComparisonConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintMoveableCollection SetComparisonConstraintCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintCollectionMetaRoleGuid); }
		}
		#endregion
		#region ValueConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ValueConstraintMoveableCollection ValueConstraintCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.ValueConstraintMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region ConstraintDuplicateNameError's Generated Constructor Code
	public  partial class ConstraintDuplicateNameError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConstraintDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConstraintDuplicateNameError CreateConstraintDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateConstraintDuplicateNameError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConstraintDuplicateNameError CreateAndInitializeConstraintDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeConstraintDuplicateNameError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ConstraintDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConstraintDuplicateNameError CreateConstraintDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ConstraintDuplicateNameError)partition.ElementFactory.CreateElement(typeof(ConstraintDuplicateNameError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConstraintDuplicateNameError CreateAndInitializeConstraintDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ConstraintDuplicateNameError)partition.ElementFactory.CreateElement(typeof(ConstraintDuplicateNameError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ConstraintDuplicateNameError
	/// <summary>
	/// ConstraintDuplicateNameError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError))]
	public sealed class ConstraintDuplicateNameErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConstraintDuplicateNameErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ConstraintDuplicateNameErrorElementFactoryCreator Instance
		{
			get
			{
				return new ConstraintDuplicateNameErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesError")]
	public  partial class TooFewReadingRolesError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region TooFewReadingRolesError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "55d96499-dc85-4a2a-b999-5a34afa800e5";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesError.MetaClassGuidString);
		#endregion

		#region Reading's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.Reading Reading
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.Reading;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.Reading counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.Reading;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError), newRoles);
				}
			}
		}
		#endregion
	}
	#region TooFewReadingRolesError's Generated Constructor Code
	public  partial class TooFewReadingRolesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TooFewReadingRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooFewReadingRolesError CreateTooFewReadingRolesError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateTooFewReadingRolesError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooFewReadingRolesError CreateAndInitializeTooFewReadingRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeTooFewReadingRolesError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public TooFewReadingRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooFewReadingRolesError CreateTooFewReadingRolesError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (TooFewReadingRolesError)partition.ElementFactory.CreateElement(typeof(TooFewReadingRolesError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooFewReadingRolesError CreateAndInitializeTooFewReadingRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (TooFewReadingRolesError)partition.ElementFactory.CreateElement(typeof(TooFewReadingRolesError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for TooFewReadingRolesError
	/// <summary>
	/// TooFewReadingRolesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesError))]
	public sealed class TooFewReadingRolesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TooFewReadingRolesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static TooFewReadingRolesErrorElementFactoryCreator Instance
		{
			get
			{
				return new TooFewReadingRolesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesError")]
	public  partial class TooManyReadingRolesError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region TooManyReadingRolesError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "9422c67e-b405-4897-bb0c-bcce18d98537";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesError.MetaClassGuidString);
		#endregion

		#region Reading's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.Reading Reading
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.Reading;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.Reading counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.Reading;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError), newRoles);
				}
			}
		}
		#endregion
	}
	#region TooManyReadingRolesError's Generated Constructor Code
	public  partial class TooManyReadingRolesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TooManyReadingRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooManyReadingRolesError CreateTooManyReadingRolesError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateTooManyReadingRolesError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooManyReadingRolesError CreateAndInitializeTooManyReadingRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeTooManyReadingRolesError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public TooManyReadingRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooManyReadingRolesError CreateTooManyReadingRolesError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (TooManyReadingRolesError)partition.ElementFactory.CreateElement(typeof(TooManyReadingRolesError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TooManyReadingRolesError CreateAndInitializeTooManyReadingRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (TooManyReadingRolesError)partition.ElementFactory.CreateElement(typeof(TooManyReadingRolesError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for TooManyReadingRolesError
	/// <summary>
	/// TooManyReadingRolesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesError))]
	public sealed class TooManyReadingRolesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TooManyReadingRolesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static TooManyReadingRolesErrorElementFactoryCreator Instance
		{
			get
			{
				return new TooManyReadingRolesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError")]
	public  partial class ExternalConstraintRoleSequenceArityMismatchError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region ExternalConstraintRoleSequenceArityMismatchError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "e7a403dd-6e87-4ae3-b985-6438fff37379";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError.MetaClassGuidString);
		#endregion

		#region Constraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint Constraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError), newRoles);
				}
			}
		}
		#endregion
	}
	#region ExternalConstraintRoleSequenceArityMismatchError's Generated Constructor Code
	public  partial class ExternalConstraintRoleSequenceArityMismatchError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintRoleSequenceArityMismatchError CreateExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateExternalConstraintRoleSequenceArityMismatchError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintRoleSequenceArityMismatchError CreateAndInitializeExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeExternalConstraintRoleSequenceArityMismatchError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintRoleSequenceArityMismatchError CreateExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ExternalConstraintRoleSequenceArityMismatchError)partition.ElementFactory.CreateElement(typeof(ExternalConstraintRoleSequenceArityMismatchError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintRoleSequenceArityMismatchError CreateAndInitializeExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ExternalConstraintRoleSequenceArityMismatchError)partition.ElementFactory.CreateElement(typeof(ExternalConstraintRoleSequenceArityMismatchError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ExternalConstraintRoleSequenceArityMismatchError
	/// <summary>
	/// ExternalConstraintRoleSequenceArityMismatchError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError))]
	public sealed class ExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator Instance
		{
			get
			{
				return new ExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingError")]
	public  partial class FactTypeRequiresReadingError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region FactTypeRequiresReadingError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "81bf4cab-ab44-4a83-9d4e-1399dbcb4719";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingError.MetaClassGuidString);
		#endregion

		#region FactType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FactType FactType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.FactType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.FactType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.FactType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError), newRoles);
				}
			}
		}
		#endregion
	}
	#region FactTypeRequiresReadingError's Generated Constructor Code
	public  partial class FactTypeRequiresReadingError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeRequiresReadingError CreateFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFactTypeRequiresReadingError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeRequiresReadingError CreateAndInitializeFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeRequiresReadingError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeRequiresReadingError CreateFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FactTypeRequiresReadingError)partition.ElementFactory.CreateElement(typeof(FactTypeRequiresReadingError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeRequiresReadingError CreateAndInitializeFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeRequiresReadingError)partition.ElementFactory.CreateElement(typeof(FactTypeRequiresReadingError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeRequiresReadingError
	/// <summary>
	/// FactTypeRequiresReadingError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingError))]
	public sealed class FactTypeRequiresReadingErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeRequiresReadingErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeRequiresReadingErrorElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeRequiresReadingErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError")]
	public  partial class FactTypeRequiresInternalUniquenessConstraintError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region FactTypeRequiresInternalUniquenessConstraintError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c0ede09d-e8cd-49d2-9cb6-cd1071e799f9";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError.MetaClassGuidString);
		#endregion

		#region FactType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FactType FactType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.FactType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.FactType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.FactType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), newRoles);
				}
			}
		}
		#endregion
	}
	#region FactTypeRequiresInternalUniquenessConstraintError's Generated Constructor Code
	public  partial class FactTypeRequiresInternalUniquenessConstraintError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeRequiresInternalUniquenessConstraintError CreateFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFactTypeRequiresInternalUniquenessConstraintError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeRequiresInternalUniquenessConstraintError CreateAndInitializeFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeRequiresInternalUniquenessConstraintError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeRequiresInternalUniquenessConstraintError CreateFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FactTypeRequiresInternalUniquenessConstraintError)partition.ElementFactory.CreateElement(typeof(FactTypeRequiresInternalUniquenessConstraintError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeRequiresInternalUniquenessConstraintError CreateAndInitializeFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeRequiresInternalUniquenessConstraintError)partition.ElementFactory.CreateElement(typeof(FactTypeRequiresInternalUniquenessConstraintError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeRequiresInternalUniquenessConstraintError
	/// <summary>
	/// FactTypeRequiresInternalUniquenessConstraintError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError))]
	public sealed class FactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError")]
	public  partial class DataTypeNotSpecifiedError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region DataTypeNotSpecifiedError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "d28dadd0-133b-419a-927b-c7189f4344f1";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError.MetaClassGuidString);
		#endregion

		#region ValueTypeHasDataType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType ValueTypeHasDataType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError), newRoles);
				}
			}
		}
		#endregion
	}
	#region DataTypeNotSpecifiedError's Generated Constructor Code
	public  partial class DataTypeNotSpecifiedError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DataTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DataTypeNotSpecifiedError CreateDataTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateDataTypeNotSpecifiedError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DataTypeNotSpecifiedError CreateAndInitializeDataTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeDataTypeNotSpecifiedError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public DataTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DataTypeNotSpecifiedError CreateDataTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (DataTypeNotSpecifiedError)partition.ElementFactory.CreateElement(typeof(DataTypeNotSpecifiedError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DataTypeNotSpecifiedError CreateAndInitializeDataTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (DataTypeNotSpecifiedError)partition.ElementFactory.CreateElement(typeof(DataTypeNotSpecifiedError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for DataTypeNotSpecifiedError
	/// <summary>
	/// DataTypeNotSpecifiedError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError))]
	public sealed class DataTypeNotSpecifiedErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DataTypeNotSpecifiedErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static DataTypeNotSpecifiedErrorElementFactoryCreator Instance
		{
			get
			{
				return new DataTypeNotSpecifiedErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.NMinusOneError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.NMinusOneError")]
	public  partial class NMinusOneError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region NMinusOneError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c47f58f9-5d4d-442f-ad88-fefc94d63250";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.NMinusOneError.MetaClassGuidString);
		#endregion

		#region Constraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.UniquenessConstraint Constraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.UniquenessConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.UniquenessConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.UniquenessConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError), newRoles);
				}
			}
		}
		#endregion
	}
	#region NMinusOneError's Generated Constructor Code
	public  partial class NMinusOneError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public NMinusOneError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static NMinusOneError CreateNMinusOneError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateNMinusOneError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static NMinusOneError CreateAndInitializeNMinusOneError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeNMinusOneError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public NMinusOneError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static NMinusOneError CreateNMinusOneError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (NMinusOneError)partition.ElementFactory.CreateElement(typeof(NMinusOneError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static NMinusOneError CreateAndInitializeNMinusOneError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (NMinusOneError)partition.ElementFactory.CreateElement(typeof(NMinusOneError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for NMinusOneError
	/// <summary>
	/// NMinusOneError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.NMinusOneError))]
	public sealed class NMinusOneErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public NMinusOneErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.NMinusOneError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static NMinusOneErrorElementFactoryCreator Instance
		{
			get
			{
				return new NMinusOneErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError")]
	public  partial class CompatibleRolePlayerTypeError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region CompatibleRolePlayerTypeError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "edfc4b63-9538-4ae4-9dc3-0e8d0594bf35";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.MetaClassGuidString);
		#endregion

		#region Column's Generated  Field Code
		#region Column's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ColumnMetaAttributeGuidString = "236436ed-1514-470f-97a4-6c7285723fc4";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ColumnMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.ColumnMetaAttributeGuidString);
		#endregion

		#region Column's Generated Property Code

		private System.Int32 columnPropertyStorage = 0;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.IntegerDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(CompatibleRolePlayerTypeErrorColumnFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.ColumnMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.Column")]
		public  System.Int32 Column
		{
			get
			{
				return columnPropertyStorage;
			}
		
			set
			{
				compatibleRolePlayerTypeErrorColumnFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region CompatibleRolePlayerTypeErrorColumnFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for CompatibleRolePlayerTypeError.Column field
		/// </summary>
		private static CompatibleRolePlayerTypeErrorColumnFieldHandler	compatibleRolePlayerTypeErrorColumnFieldHandler	= CompatibleRolePlayerTypeErrorColumnFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for CompatibleRolePlayerTypeError.Column
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class CompatibleRolePlayerTypeErrorColumnFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError,System.Int32>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private CompatibleRolePlayerTypeErrorColumnFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the CompatibleRolePlayerTypeError.Column field handler
			/// </summary>
			/// <value>CompatibleRolePlayerTypeErrorColumnFieldHandler</value>
			public static CompatibleRolePlayerTypeErrorColumnFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.compatibleRolePlayerTypeErrorColumnFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.compatibleRolePlayerTypeErrorColumnFieldHandler;
					}
					else
					{
						// The static constructor in CompatibleRolePlayerTypeError will assign this value to
						// Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.compatibleRolePlayerTypeErrorColumnFieldHandler, so just instantiate one and return it
						return new CompatibleRolePlayerTypeErrorColumnFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the CompatibleRolePlayerTypeError.Column field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.ColumnMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the CompatibleRolePlayerTypeError</param>
			protected sealed override System.Int32 GetValue(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError element)
			{
				return element.columnPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError element, System.Int32 value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Int32 oldValue)
			{
				oldValue = element.columnPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.columnPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region SetComparisonConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint SetComparisonConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError), newRoles);
				}
			}
		}
		#endregion
		#region SetConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.SetConstraint SetConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.SetConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.SetConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.SetConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for CompatibleRolePlayerTypeError
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class CompatibleRolePlayerTypeErrorMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public CompatibleRolePlayerTypeErrorMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region CompatibleRolePlayerTypeError's Generated Constructor Code
	public  partial class CompatibleRolePlayerTypeError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CompatibleRolePlayerTypeError CreateCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateCompatibleRolePlayerTypeError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CompatibleRolePlayerTypeError CreateAndInitializeCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeCompatibleRolePlayerTypeError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public CompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CompatibleRolePlayerTypeError CreateCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (CompatibleRolePlayerTypeError)partition.ElementFactory.CreateElement(typeof(CompatibleRolePlayerTypeError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CompatibleRolePlayerTypeError CreateAndInitializeCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (CompatibleRolePlayerTypeError)partition.ElementFactory.CreateElement(typeof(CompatibleRolePlayerTypeError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for CompatibleRolePlayerTypeError
	/// <summary>
	/// CompatibleRolePlayerTypeError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError))]
	public sealed class CompatibleRolePlayerTypeErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CompatibleRolePlayerTypeErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static CompatibleRolePlayerTypeErrorElementFactoryCreator Instance
		{
			get
			{
				return new CompatibleRolePlayerTypeErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredError")]
	public  partial class RolePlayerRequiredError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region RolePlayerRequiredError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "11a3fe3f-7986-4c12-9c6a-d89b56db29a0";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredError.MetaClassGuidString);
		#endregion

		#region Role's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.Role Role
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.Role;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.Role counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.Role;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError), newRoles);
				}
			}
		}
		#endregion
	}
	#region RolePlayerRequiredError's Generated Constructor Code
	public  partial class RolePlayerRequiredError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RolePlayerRequiredError CreateRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateRolePlayerRequiredError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RolePlayerRequiredError CreateAndInitializeRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRolePlayerRequiredError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RolePlayerRequiredError CreateRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (RolePlayerRequiredError)partition.ElementFactory.CreateElement(typeof(RolePlayerRequiredError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RolePlayerRequiredError CreateAndInitializeRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RolePlayerRequiredError)partition.ElementFactory.CreateElement(typeof(RolePlayerRequiredError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RolePlayerRequiredError
	/// <summary>
	/// RolePlayerRequiredError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredError))]
	public sealed class RolePlayerRequiredErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RolePlayerRequiredErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RolePlayerRequiredErrorElementFactoryCreator Instance
		{
			get
			{
				return new RolePlayerRequiredErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryError")]
	public  partial class EqualityImpliedByMandatoryError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region EqualityImpliedByMandatoryError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "47f92ff5-0183-4a60-96ee-8528565f4b67";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryError.MetaClassGuidString);
		#endregion

		#region EqualityConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.EqualityConstraint EqualityConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.EqualityConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.EqualityConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.EqualityConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError), newRoles);
				}
			}
		}
		#endregion
	}
	#region EqualityImpliedByMandatoryError's Generated Constructor Code
	public  partial class EqualityImpliedByMandatoryError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EqualityImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityImpliedByMandatoryError CreateEqualityImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateEqualityImpliedByMandatoryError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityImpliedByMandatoryError CreateAndInitializeEqualityImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeEqualityImpliedByMandatoryError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public EqualityImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityImpliedByMandatoryError CreateEqualityImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (EqualityImpliedByMandatoryError)partition.ElementFactory.CreateElement(typeof(EqualityImpliedByMandatoryError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityImpliedByMandatoryError CreateAndInitializeEqualityImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (EqualityImpliedByMandatoryError)partition.ElementFactory.CreateElement(typeof(EqualityImpliedByMandatoryError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for EqualityImpliedByMandatoryError
	/// <summary>
	/// EqualityImpliedByMandatoryError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryError))]
	public sealed class EqualityImpliedByMandatoryErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EqualityImpliedByMandatoryErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static EqualityImpliedByMandatoryErrorElementFactoryCreator Instance
		{
			get
			{
				return new EqualityImpliedByMandatoryErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeError")]
	public  partial class EntityTypeRequiresReferenceSchemeError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region EntityTypeRequiresReferenceSchemeError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3c7be87d-db77-4269-8372-33664b89c558";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeError.MetaClassGuidString);
		#endregion

		#region ObjectType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ObjectType ObjectType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ObjectType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ObjectType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ObjectType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError), newRoles);
				}
			}
		}
		#endregion
	}
	#region EntityTypeRequiresReferenceSchemeError's Generated Constructor Code
	public  partial class EntityTypeRequiresReferenceSchemeError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EntityTypeRequiresReferenceSchemeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EntityTypeRequiresReferenceSchemeError CreateEntityTypeRequiresReferenceSchemeError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateEntityTypeRequiresReferenceSchemeError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EntityTypeRequiresReferenceSchemeError CreateAndInitializeEntityTypeRequiresReferenceSchemeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeEntityTypeRequiresReferenceSchemeError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public EntityTypeRequiresReferenceSchemeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EntityTypeRequiresReferenceSchemeError CreateEntityTypeRequiresReferenceSchemeError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (EntityTypeRequiresReferenceSchemeError)partition.ElementFactory.CreateElement(typeof(EntityTypeRequiresReferenceSchemeError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EntityTypeRequiresReferenceSchemeError CreateAndInitializeEntityTypeRequiresReferenceSchemeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (EntityTypeRequiresReferenceSchemeError)partition.ElementFactory.CreateElement(typeof(EntityTypeRequiresReferenceSchemeError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for EntityTypeRequiresReferenceSchemeError
	/// <summary>
	/// EntityTypeRequiresReferenceSchemeError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeError))]
	public sealed class EntityTypeRequiresReferenceSchemeErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EntityTypeRequiresReferenceSchemeErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static EntityTypeRequiresReferenceSchemeErrorElementFactoryCreator Instance
		{
			get
			{
				return new EntityTypeRequiresReferenceSchemeErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.MandatoryImpliedByMandatoryError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.MandatoryImpliedByMandatoryError")]
	public  partial class MandatoryImpliedByMandatoryError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region MandatoryImpliedByMandatoryError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "35071ae7-35b9-462d-91af-8d19e4bf6c30";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.MandatoryImpliedByMandatoryError.MetaClassGuidString);
		#endregion

		#region MandatoryConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.MandatoryConstraint MandatoryConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.ImpliedByMandatoryErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.MandatoryConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.MandatoryConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.ImpliedByMandatoryErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.MandatoryConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.MandatoryConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.MandatoryConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.MandatoryConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.ImpliedByMandatoryErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError), newRoles);
				}
			}
		}
		#endregion
	}
	#region MandatoryImpliedByMandatoryError's Generated Constructor Code
	public  partial class MandatoryImpliedByMandatoryError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MandatoryImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MandatoryImpliedByMandatoryError CreateMandatoryImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateMandatoryImpliedByMandatoryError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MandatoryImpliedByMandatoryError CreateAndInitializeMandatoryImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeMandatoryImpliedByMandatoryError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public MandatoryImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MandatoryImpliedByMandatoryError CreateMandatoryImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (MandatoryImpliedByMandatoryError)partition.ElementFactory.CreateElement(typeof(MandatoryImpliedByMandatoryError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MandatoryImpliedByMandatoryError CreateAndInitializeMandatoryImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (MandatoryImpliedByMandatoryError)partition.ElementFactory.CreateElement(typeof(MandatoryImpliedByMandatoryError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for MandatoryImpliedByMandatoryError
	/// <summary>
	/// MandatoryImpliedByMandatoryError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.MandatoryImpliedByMandatoryError))]
	public sealed class MandatoryImpliedByMandatoryErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MandatoryImpliedByMandatoryErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.MandatoryImpliedByMandatoryError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static MandatoryImpliedByMandatoryErrorElementFactoryCreator Instance
		{
			get
			{
				return new MandatoryImpliedByMandatoryErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxError")]
	public  partial class FrequencyConstraintMinMaxError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region FrequencyConstraintMinMaxError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "d63cebc9-d0e6-48bf-a614-5e1944a9f1ea";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxError.MetaClassGuidString);
		#endregion

		#region FrequencyConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FrequencyConstraint FrequencyConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.FrequencyConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.FrequencyConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.FrequencyConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError), newRoles);
				}
			}
		}
		#endregion
	}
	#region FrequencyConstraintMinMaxError's Generated Constructor Code
	public  partial class FrequencyConstraintMinMaxError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraintMinMaxError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintMinMaxError CreateFrequencyConstraintMinMaxError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFrequencyConstraintMinMaxError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintMinMaxError CreateAndInitializeFrequencyConstraintMinMaxError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFrequencyConstraintMinMaxError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraintMinMaxError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintMinMaxError CreateFrequencyConstraintMinMaxError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FrequencyConstraintMinMaxError)partition.ElementFactory.CreateElement(typeof(FrequencyConstraintMinMaxError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintMinMaxError CreateAndInitializeFrequencyConstraintMinMaxError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FrequencyConstraintMinMaxError)partition.ElementFactory.CreateElement(typeof(FrequencyConstraintMinMaxError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FrequencyConstraintMinMaxError
	/// <summary>
	/// FrequencyConstraintMinMaxError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxError))]
	public sealed class FrequencyConstraintMinMaxErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraintMinMaxErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FrequencyConstraintMinMaxErrorElementFactoryCreator Instance
		{
			get
			{
				return new FrequencyConstraintMinMaxErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueMismatchError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ValueMismatchError")]
	public abstract partial class ValueMismatchError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region ValueMismatchError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "e226c582-3ce1-4e29-9040-25243f9f33f9";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueMismatchError.MetaClassGuidString);
		#endregion

	}
	#region ValueMismatchError's Generated Constructor Code
	public abstract partial class ValueMismatchError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ValueMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.MinValueMismatchError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.MinValueMismatchError")]
	public  partial class MinValueMismatchError : Neumont.Tools.ORM.ObjectModel.ValueMismatchError
	{
		#region MinValueMismatchError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "d5ce5234-63a1-4de8-a2f6-d2ae66197020";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.MinValueMismatchError.MetaClassGuidString);
		#endregion

		#region ValueRange's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ValueRange ValueRange
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ValueRange;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ValueRange counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ValueRange;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError), newRoles);
				}
			}
		}
		#endregion
	}
	#region MinValueMismatchError's Generated Constructor Code
	public  partial class MinValueMismatchError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MinValueMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MinValueMismatchError CreateMinValueMismatchError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateMinValueMismatchError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MinValueMismatchError CreateAndInitializeMinValueMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeMinValueMismatchError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public MinValueMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MinValueMismatchError CreateMinValueMismatchError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (MinValueMismatchError)partition.ElementFactory.CreateElement(typeof(MinValueMismatchError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MinValueMismatchError CreateAndInitializeMinValueMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (MinValueMismatchError)partition.ElementFactory.CreateElement(typeof(MinValueMismatchError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for MinValueMismatchError
	/// <summary>
	/// MinValueMismatchError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.MinValueMismatchError))]
	public sealed class MinValueMismatchErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MinValueMismatchErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.MinValueMismatchError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static MinValueMismatchErrorElementFactoryCreator Instance
		{
			get
			{
				return new MinValueMismatchErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.MaxValueMismatchError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.MaxValueMismatchError")]
	public  partial class MaxValueMismatchError : Neumont.Tools.ORM.ObjectModel.ValueMismatchError
	{
		#region MaxValueMismatchError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "daeea7cc-93d4-49fc-ad4b-22159963d7f3";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.MaxValueMismatchError.MetaClassGuidString);
		#endregion

		#region ValueRange's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ValueRange ValueRange
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ValueRange;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ValueRange counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ValueRange;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError), newRoles);
				}
			}
		}
		#endregion
	}
	#region MaxValueMismatchError's Generated Constructor Code
	public  partial class MaxValueMismatchError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MaxValueMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MaxValueMismatchError CreateMaxValueMismatchError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateMaxValueMismatchError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MaxValueMismatchError CreateAndInitializeMaxValueMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeMaxValueMismatchError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public MaxValueMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MaxValueMismatchError CreateMaxValueMismatchError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (MaxValueMismatchError)partition.ElementFactory.CreateElement(typeof(MaxValueMismatchError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MaxValueMismatchError CreateAndInitializeMaxValueMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (MaxValueMismatchError)partition.ElementFactory.CreateElement(typeof(MaxValueMismatchError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for MaxValueMismatchError
	/// <summary>
	/// MaxValueMismatchError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.MaxValueMismatchError))]
	public sealed class MaxValueMismatchErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MaxValueMismatchErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.MaxValueMismatchError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static MaxValueMismatchErrorElementFactoryCreator Instance
		{
			get
			{
				return new MaxValueMismatchErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintError")]
	public  partial class ImpliedInternalUniquenessConstraintError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region ImpliedInternalUniquenessConstraintError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "adc762df-377e-4d2a-85a3-a9e051e07f81";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintError.MetaClassGuidString);
		#endregion

		#region FactType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FactType FactType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.FactType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.FactType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.FactType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError), newRoles);
				}
			}
		}
		#endregion
	}
	#region ImpliedInternalUniquenessConstraintError's Generated Constructor Code
	public  partial class ImpliedInternalUniquenessConstraintError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ImpliedInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ImpliedInternalUniquenessConstraintError CreateImpliedInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateImpliedInternalUniquenessConstraintError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ImpliedInternalUniquenessConstraintError CreateAndInitializeImpliedInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeImpliedInternalUniquenessConstraintError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ImpliedInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ImpliedInternalUniquenessConstraintError CreateImpliedInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ImpliedInternalUniquenessConstraintError)partition.ElementFactory.CreateElement(typeof(ImpliedInternalUniquenessConstraintError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ImpliedInternalUniquenessConstraintError CreateAndInitializeImpliedInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ImpliedInternalUniquenessConstraintError)partition.ElementFactory.CreateElement(typeof(ImpliedInternalUniquenessConstraintError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ImpliedInternalUniquenessConstraintError
	/// <summary>
	/// ImpliedInternalUniquenessConstraintError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintError))]
	public sealed class ImpliedInternalUniquenessConstraintErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ImpliedInternalUniquenessConstraintErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ImpliedInternalUniquenessConstraintErrorElementFactoryCreator Instance
		{
			get
			{
				return new ImpliedInternalUniquenessConstraintErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError")]
	public  partial class FrequencyConstraintContradictsInternalUniquenessConstraintError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region FrequencyConstraintContradictsInternalUniquenessConstraintError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "877dd3ea-b59e-4ef1-9546-5435780b0b1c";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError.MetaClassGuidString);
		#endregion

		#region FrequencyConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FrequencyConstraint FrequencyConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.FrequencyConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.FrequencyConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.FrequencyConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError), newRoles);
				}
			}
		}
		#endregion
		#region FactType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FactType FactType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FactTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.FactType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FactTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.FactType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.FactType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FactTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for FrequencyConstraintContradictsInternalUniquenessConstraintError
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class FrequencyConstraintContradictsInternalUniquenessConstraintErrorMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public FrequencyConstraintContradictsInternalUniquenessConstraintErrorMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region FrequencyConstraintContradictsInternalUniquenessConstraintError's Generated Constructor Code
	public  partial class FrequencyConstraintContradictsInternalUniquenessConstraintError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraintContradictsInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintContradictsInternalUniquenessConstraintError CreateFrequencyConstraintContradictsInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFrequencyConstraintContradictsInternalUniquenessConstraintError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintContradictsInternalUniquenessConstraintError CreateAndInitializeFrequencyConstraintContradictsInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFrequencyConstraintContradictsInternalUniquenessConstraintError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraintContradictsInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintContradictsInternalUniquenessConstraintError CreateFrequencyConstraintContradictsInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FrequencyConstraintContradictsInternalUniquenessConstraintError)partition.ElementFactory.CreateElement(typeof(FrequencyConstraintContradictsInternalUniquenessConstraintError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintContradictsInternalUniquenessConstraintError CreateAndInitializeFrequencyConstraintContradictsInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FrequencyConstraintContradictsInternalUniquenessConstraintError)partition.ElementFactory.CreateElement(typeof(FrequencyConstraintContradictsInternalUniquenessConstraintError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FrequencyConstraintContradictsInternalUniquenessConstraintError
	/// <summary>
	/// FrequencyConstraintContradictsInternalUniquenessConstraintError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError))]
	public sealed class FrequencyConstraintContradictsInternalUniquenessConstraintErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraintContradictsInternalUniquenessConstraintErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FrequencyConstraintContradictsInternalUniquenessConstraintErrorElementFactoryCreator Instance
		{
			get
			{
				return new FrequencyConstraintContradictsInternalUniquenessConstraintErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedError")]
	public  partial class RingConstraintTypeNotSpecifiedError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region RingConstraintTypeNotSpecifiedError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "5c7caee2-7993-44fd-9ea3-d57cfd445757";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedError.MetaClassGuidString);
		#endregion

		#region RingConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.RingConstraint RingConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.RingConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.RingConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.RingConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError), newRoles);
				}
			}
		}
		#endregion
	}
	#region RingConstraintTypeNotSpecifiedError's Generated Constructor Code
	public  partial class RingConstraintTypeNotSpecifiedError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraintTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraintTypeNotSpecifiedError CreateRingConstraintTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateRingConstraintTypeNotSpecifiedError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraintTypeNotSpecifiedError CreateAndInitializeRingConstraintTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRingConstraintTypeNotSpecifiedError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraintTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraintTypeNotSpecifiedError CreateRingConstraintTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (RingConstraintTypeNotSpecifiedError)partition.ElementFactory.CreateElement(typeof(RingConstraintTypeNotSpecifiedError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraintTypeNotSpecifiedError CreateAndInitializeRingConstraintTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RingConstraintTypeNotSpecifiedError)partition.ElementFactory.CreateElement(typeof(RingConstraintTypeNotSpecifiedError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RingConstraintTypeNotSpecifiedError
	/// <summary>
	/// RingConstraintTypeNotSpecifiedError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedError))]
	public sealed class RingConstraintTypeNotSpecifiedErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraintTypeNotSpecifiedErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RingConstraintTypeNotSpecifiedErrorElementFactoryCreator Instance
		{
			get
			{
				return new RingConstraintTypeNotSpecifiedErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeError")]
	public  partial class ObjectTypeRequiresPrimarySupertypeError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region ObjectTypeRequiresPrimarySupertypeError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "24f4068f-8eea-4ced-b5f7-ddff7838cab4";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeError.MetaClassGuidString);
		#endregion

		#region ObjectType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ObjectType ObjectType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ObjectType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ObjectType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ObjectType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError), newRoles);
				}
			}
		}
		#endregion
	}
	#region ObjectTypeRequiresPrimarySupertypeError's Generated Constructor Code
	public  partial class ObjectTypeRequiresPrimarySupertypeError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeRequiresPrimarySupertypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeRequiresPrimarySupertypeError CreateObjectTypeRequiresPrimarySupertypeError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateObjectTypeRequiresPrimarySupertypeError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeRequiresPrimarySupertypeError CreateAndInitializeObjectTypeRequiresPrimarySupertypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectTypeRequiresPrimarySupertypeError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeRequiresPrimarySupertypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeRequiresPrimarySupertypeError CreateObjectTypeRequiresPrimarySupertypeError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ObjectTypeRequiresPrimarySupertypeError)partition.ElementFactory.CreateElement(typeof(ObjectTypeRequiresPrimarySupertypeError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeRequiresPrimarySupertypeError CreateAndInitializeObjectTypeRequiresPrimarySupertypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectTypeRequiresPrimarySupertypeError)partition.ElementFactory.CreateElement(typeof(ObjectTypeRequiresPrimarySupertypeError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectTypeRequiresPrimarySupertypeError
	/// <summary>
	/// ObjectTypeRequiresPrimarySupertypeError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeError))]
	public sealed class ObjectTypeRequiresPrimarySupertypeErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeRequiresPrimarySupertypeErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectTypeRequiresPrimarySupertypeErrorElementFactoryCreator Instance
		{
			get
			{
				return new ObjectTypeRequiresPrimarySupertypeErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesError")]
	public  partial class CompatibleSupertypesError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region CompatibleSupertypesError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "5face1ee-692d-4371-8638-2553d49aee10";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesError.MetaClassGuidString);
		#endregion

		#region ObjectType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ObjectType ObjectType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ObjectType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ObjectType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ObjectType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError), newRoles);
				}
			}
		}
		#endregion
	}
	#region CompatibleSupertypesError's Generated Constructor Code
	public  partial class CompatibleSupertypesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CompatibleSupertypesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CompatibleSupertypesError CreateCompatibleSupertypesError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateCompatibleSupertypesError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CompatibleSupertypesError CreateAndInitializeCompatibleSupertypesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeCompatibleSupertypesError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public CompatibleSupertypesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CompatibleSupertypesError CreateCompatibleSupertypesError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (CompatibleSupertypesError)partition.ElementFactory.CreateElement(typeof(CompatibleSupertypesError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CompatibleSupertypesError CreateAndInitializeCompatibleSupertypesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (CompatibleSupertypesError)partition.ElementFactory.CreateElement(typeof(CompatibleSupertypesError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for CompatibleSupertypesError
	/// <summary>
	/// CompatibleSupertypesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesError))]
	public sealed class CompatibleSupertypesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CompatibleSupertypesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static CompatibleSupertypesErrorElementFactoryCreator Instance
		{
			get
			{
				return new CompatibleSupertypesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.UniquenessImpliedByUniquenessError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.UniquenessImpliedByUniquenessError")]
	public  partial class UniquenessImpliedByUniquenessError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region UniquenessImpliedByUniquenessError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "2bee7b88-2833-49a2-92c1-91d2716000e5";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.UniquenessImpliedByUniquenessError.MetaClassGuidString);
		#endregion

		#region UniquenessConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.UniquenessConstraint UniquenessConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.ImpliedByUniquenessErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.UniquenessConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.UniquenessConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.ImpliedByUniquenessErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.UniquenessConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.UniquenessConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.UniquenessConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.UniquenessConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.ImpliedByUniquenessErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError), newRoles);
				}
			}
		}
		#endregion
	}
	#region UniquenessImpliedByUniquenessError's Generated Constructor Code
	public  partial class UniquenessImpliedByUniquenessError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public UniquenessImpliedByUniquenessError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UniquenessImpliedByUniquenessError CreateUniquenessImpliedByUniquenessError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateUniquenessImpliedByUniquenessError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UniquenessImpliedByUniquenessError CreateAndInitializeUniquenessImpliedByUniquenessError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeUniquenessImpliedByUniquenessError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public UniquenessImpliedByUniquenessError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UniquenessImpliedByUniquenessError CreateUniquenessImpliedByUniquenessError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (UniquenessImpliedByUniquenessError)partition.ElementFactory.CreateElement(typeof(UniquenessImpliedByUniquenessError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UniquenessImpliedByUniquenessError CreateAndInitializeUniquenessImpliedByUniquenessError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (UniquenessImpliedByUniquenessError)partition.ElementFactory.CreateElement(typeof(UniquenessImpliedByUniquenessError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for UniquenessImpliedByUniquenessError
	/// <summary>
	/// UniquenessImpliedByUniquenessError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.UniquenessImpliedByUniquenessError))]
	public sealed class UniquenessImpliedByUniquenessErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public UniquenessImpliedByUniquenessErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.UniquenessImpliedByUniquenessError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static UniquenessImpliedByUniquenessErrorElementFactoryCreator Instance
		{
			get
			{
				return new UniquenessImpliedByUniquenessErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryError")]
	public  partial class PreferredIdentifierRequiresMandatoryError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region PreferredIdentifierRequiresMandatoryError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "90b39c97-af3f-4b28-8657-6a5fba74a2ee";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryError.MetaClassGuidString);
		#endregion

		#region ObjectType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ObjectType ObjectType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ObjectType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ObjectType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ObjectType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError), newRoles);
				}
			}
		}
		#endregion
	}
	#region PreferredIdentifierRequiresMandatoryError's Generated Constructor Code
	public  partial class PreferredIdentifierRequiresMandatoryError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public PreferredIdentifierRequiresMandatoryError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static PreferredIdentifierRequiresMandatoryError CreatePreferredIdentifierRequiresMandatoryError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreatePreferredIdentifierRequiresMandatoryError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static PreferredIdentifierRequiresMandatoryError CreateAndInitializePreferredIdentifierRequiresMandatoryError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializePreferredIdentifierRequiresMandatoryError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public PreferredIdentifierRequiresMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static PreferredIdentifierRequiresMandatoryError CreatePreferredIdentifierRequiresMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (PreferredIdentifierRequiresMandatoryError)partition.ElementFactory.CreateElement(typeof(PreferredIdentifierRequiresMandatoryError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static PreferredIdentifierRequiresMandatoryError CreateAndInitializePreferredIdentifierRequiresMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (PreferredIdentifierRequiresMandatoryError)partition.ElementFactory.CreateElement(typeof(PreferredIdentifierRequiresMandatoryError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for PreferredIdentifierRequiresMandatoryError
	/// <summary>
	/// PreferredIdentifierRequiresMandatoryError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryError))]
	public sealed class PreferredIdentifierRequiresMandatoryErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public PreferredIdentifierRequiresMandatoryErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static PreferredIdentifierRequiresMandatoryErrorElementFactoryCreator Instance
		{
			get
			{
				return new PreferredIdentifierRequiresMandatoryErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapError.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapError")]
	public  partial class ValueRangeOverlapError : Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region ValueRangeOverlapError's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "bb07b502-6a9f-4c25-8712-5bdbae3750f3";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapError.MetaClassGuidString);
		#endregion

		#region ValueConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ValueConstraint ValueConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ValueConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ValueConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ValueConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError), newRoles);
				}
			}
		}
		#endregion
	}
	#region ValueRangeOverlapError's Generated Constructor Code
	public  partial class ValueRangeOverlapError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRangeOverlapError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeOverlapError CreateValueRangeOverlapError(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateValueRangeOverlapError(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeOverlapError CreateAndInitializeValueRangeOverlapError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueRangeOverlapError(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRangeOverlapError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeOverlapError CreateValueRangeOverlapError(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ValueRangeOverlapError)partition.ElementFactory.CreateElement(typeof(ValueRangeOverlapError));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeOverlapError CreateAndInitializeValueRangeOverlapError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueRangeOverlapError)partition.ElementFactory.CreateElement(typeof(ValueRangeOverlapError), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueRangeOverlapError
	/// <summary>
	/// ValueRangeOverlapError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapError))]
	public sealed class ValueRangeOverlapErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRangeOverlapErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueRangeOverlapErrorElementFactoryCreator Instance
		{
			get
			{
				return new ValueRangeOverlapErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ReferenceModeKind")]
	public  partial class ReferenceModeKind : Neumont.Tools.ORM.ObjectModel.ORMNamedElement
	{
		#region ReferenceModeKind's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3fc5ec28-7c78-49e7-955c-4c54536c8d21";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.MetaClassGuidString);
		#endregion

		#region FormatString's Generated  Field Code
		#region FormatString's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String FormatStringMetaAttributeGuidString = "76827916-449c-4e9a-ab21-01ac01cc5817";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid FormatStringMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.FormatStringMetaAttributeGuidString);
		#endregion

		#region FormatString's Generated Property Code

		private System.String formatStringPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ReferenceModeKindFormatStringFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.FormatStringMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.FormatString")]
		public  System.String FormatString
		{
			get
			{
				return formatStringPropertyStorage;
			}
		
			set
			{
				referenceModeKindFormatStringFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ReferenceModeKindFormatStringFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ReferenceModeKind.FormatString field
		/// </summary>
		private static ReferenceModeKindFormatStringFieldHandler	referenceModeKindFormatStringFieldHandler	= ReferenceModeKindFormatStringFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ReferenceModeKind.FormatString
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ReferenceModeKindFormatStringFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.ReferenceModeKind,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ReferenceModeKindFormatStringFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ReferenceModeKind.FormatString field handler
			/// </summary>
			/// <value>ReferenceModeKindFormatStringFieldHandler</value>
			public static ReferenceModeKindFormatStringFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.referenceModeKindFormatStringFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.referenceModeKindFormatStringFieldHandler;
					}
					else
					{
						// The static constructor in ReferenceModeKind will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.referenceModeKindFormatStringFieldHandler, so just instantiate one and return it
						return new ReferenceModeKindFormatStringFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ReferenceModeKind.FormatString field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.FormatStringMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ReferenceModeKind</param>
			protected sealed override System.String GetValue(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind element)
			{
				return element.formatStringPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.formatStringPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.formatStringPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region ReferenceModeType's Generated  Field Code
		#region ReferenceModeType's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ReferenceModeTypeMetaAttributeGuidString = "ccb8e858-ddf2-4810-8231-99ccabc73142";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ReferenceModeTypeMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.ReferenceModeTypeMetaAttributeGuidString);
		#endregion

		#region ReferenceModeType's Generated Property Code

		private Neumont.Tools.ORM.ObjectModel.ReferenceModeType referenceModeTypePropertyStorage = Neumont.Tools.ORM.ObjectModel.ReferenceModeType.General;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeType),DefaultEnumerationValueName="General")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ReferenceModeKindReferenceModeTypeFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.ReferenceModeTypeMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.ReferenceModeType")]
		public  Neumont.Tools.ORM.ObjectModel.ReferenceModeType ReferenceModeType
		{
			get
			{
				return referenceModeTypePropertyStorage;
			}
		
			set
			{
				referenceModeKindReferenceModeTypeFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ReferenceModeKindReferenceModeTypeFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ReferenceModeKind.ReferenceModeType field
		/// </summary>
		private static ReferenceModeKindReferenceModeTypeFieldHandler	referenceModeKindReferenceModeTypeFieldHandler	= ReferenceModeKindReferenceModeTypeFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ReferenceModeKind.ReferenceModeType
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ReferenceModeKindReferenceModeTypeFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.ReferenceModeKind,Neumont.Tools.ORM.ObjectModel.ReferenceModeType>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ReferenceModeKindReferenceModeTypeFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ReferenceModeKind.ReferenceModeType field handler
			/// </summary>
			/// <value>ReferenceModeKindReferenceModeTypeFieldHandler</value>
			public static ReferenceModeKindReferenceModeTypeFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.referenceModeKindReferenceModeTypeFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.referenceModeKindReferenceModeTypeFieldHandler;
					}
					else
					{
						// The static constructor in ReferenceModeKind will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.referenceModeKindReferenceModeTypeFieldHandler, so just instantiate one and return it
						return new ReferenceModeKindReferenceModeTypeFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ReferenceModeKind.ReferenceModeType field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.ReferenceModeTypeMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ReferenceModeKind</param>
			protected sealed override Neumont.Tools.ORM.ObjectModel.ReferenceModeType GetValue(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind element)
			{
				return element.referenceModeTypePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind element, Neumont.Tools.ORM.ObjectModel.ReferenceModeType value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref Neumont.Tools.ORM.ObjectModel.ReferenceModeType oldValue)
			{
				oldValue = element.referenceModeTypePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.referenceModeTypePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ORMModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ORMModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ORMModel counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ORMModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind), newRoles);
				}
			}
		}
		#endregion
		#region ReferenceModeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ReferenceModeMoveableCollection ReferenceModeCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.ReferenceModeMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.KindMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region Collection Classes for ReferenceModeKind
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.ReferenceModeKind Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ReferenceModeKindMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ReferenceModeKindMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.ReferenceModeKind at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.ReferenceModeKind this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ReferenceModeKind)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ReferenceModeKind to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ReferenceModeKind to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ReferenceModeKind to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ReferenceModeKind to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.ReferenceModeKind value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ReferenceModeKind to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.ReferenceModeKind rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ReferenceModeKind's Generated Constructor Code
	public  partial class ReferenceModeKind
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReferenceModeKind CreateReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateReferenceModeKind(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReferenceModeKind CreateAndInitializeReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReferenceModeKind(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReferenceModeKind CreateReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ReferenceModeKind)partition.ElementFactory.CreateElement(typeof(ReferenceModeKind));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReferenceModeKind CreateAndInitializeReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ReferenceModeKind)partition.ElementFactory.CreateElement(typeof(ReferenceModeKind), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ReferenceModeKind
	/// <summary>
	/// ReferenceModeKind Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeKind))]
	public sealed class ReferenceModeKindElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReferenceModeKindElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ReferenceModeKind( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReferenceModeKindElementFactoryCreator Instance
		{
			get
			{
				return new ReferenceModeKindElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReferenceMode.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ReferenceMode")]
	public abstract partial class ReferenceMode : Neumont.Tools.ORM.ObjectModel.ORMNamedElement
	{
		#region ReferenceMode's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "f6388323-e223-4e06-bbc8-055339c5bedb";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReferenceMode.MetaClassGuidString);
		#endregion

		#region KindDisplay's Generated  Field Code
		#region KindDisplay's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String KindDisplayMetaAttributeGuidString = "0212a64d-baf9-42a1-890f-92b8d6b5ee2d";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid KindDisplayMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReferenceMode.KindDisplayMetaAttributeGuidString);
		#endregion

		#region KindDisplay's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Editor(typeof(Neumont.Tools.ORM.ObjectModel.Editors.ReferenceModeKindPicker), typeof(System.Drawing.Design.UITypeEditor))]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, AllowNulls=true, FieldHandlerType=typeof(ReferenceModeKindDisplayFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReferenceMode.KindDisplayMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ReferenceMode.KindDisplay")]
		public  Neumont.Tools.ORM.ObjectModel.ReferenceModeKind KindDisplay
		{
			get
			{
				return referenceModeKindDisplayFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				referenceModeKindDisplayFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ReferenceModeKindDisplayFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ReferenceMode.KindDisplay field
		/// </summary>
		private static ReferenceModeKindDisplayFieldHandler	referenceModeKindDisplayFieldHandler	= ReferenceModeKindDisplayFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ReferenceMode.KindDisplay
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ReferenceModeKindDisplayFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.ReferenceMode,Neumont.Tools.ORM.ObjectModel.ReferenceModeKind>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ReferenceModeKindDisplayFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ReferenceMode.KindDisplay field handler
			/// </summary>
			/// <value>ReferenceModeKindDisplayFieldHandler</value>
			public static ReferenceModeKindDisplayFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ReferenceMode.referenceModeKindDisplayFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ReferenceMode.referenceModeKindDisplayFieldHandler;
					}
					else
					{
						// The static constructor in ReferenceMode will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ReferenceMode.referenceModeKindDisplayFieldHandler, so just instantiate one and return it
						return new ReferenceModeKindDisplayFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ReferenceMode.KindDisplay field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ReferenceMode.KindDisplayMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ORMModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ORMModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ORMModel counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ORMModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for ReferenceMode
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.ReferenceMode Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ReferenceModeMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ReferenceModeMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceMode))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.ReferenceMode[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.ReferenceMode at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.ReferenceMode this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ReferenceMode)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ReferenceMode to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.ReferenceMode value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ReferenceMode to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.ReferenceMode value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ReferenceMode to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.ReferenceMode value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ReferenceMode to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.ReferenceMode value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ReferenceMode to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.ReferenceMode value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.ReferenceMode rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.ReferenceMode rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ReferenceMode's Generated Constructor Code
	public abstract partial class ReferenceMode
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.IntrinsicReferenceMode.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.IntrinsicReferenceMode")]
	public  partial class IntrinsicReferenceMode : Neumont.Tools.ORM.ObjectModel.ReferenceMode
	{
		#region IntrinsicReferenceMode's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3e08027c-e2c5-4237-a640-2a22a6f534af";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.IntrinsicReferenceMode.MetaClassGuidString);
		#endregion

	}
	#region IntrinsicReferenceMode's Generated Constructor Code
	public  partial class IntrinsicReferenceMode
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public IntrinsicReferenceMode(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static IntrinsicReferenceMode CreateIntrinsicReferenceMode(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateIntrinsicReferenceMode(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static IntrinsicReferenceMode CreateAndInitializeIntrinsicReferenceMode(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeIntrinsicReferenceMode(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public IntrinsicReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static IntrinsicReferenceMode CreateIntrinsicReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (IntrinsicReferenceMode)partition.ElementFactory.CreateElement(typeof(IntrinsicReferenceMode));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static IntrinsicReferenceMode CreateAndInitializeIntrinsicReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (IntrinsicReferenceMode)partition.ElementFactory.CreateElement(typeof(IntrinsicReferenceMode), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for IntrinsicReferenceMode
	/// <summary>
	/// IntrinsicReferenceMode Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.IntrinsicReferenceMode))]
	public sealed class IntrinsicReferenceModeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public IntrinsicReferenceModeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.IntrinsicReferenceMode( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static IntrinsicReferenceModeElementFactoryCreator Instance
		{
			get
			{
				return new IntrinsicReferenceModeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.CustomReferenceMode.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.CustomReferenceMode")]
	public  partial class CustomReferenceMode : Neumont.Tools.ORM.ObjectModel.ReferenceMode
	{
		#region CustomReferenceMode's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "6c7bae68-81a4-4bfa-b75b-c231cc77a3b3";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.CustomReferenceMode.MetaClassGuidString);
		#endregion

		#region CustomFormatString's Generated  Field Code
		#region CustomFormatString's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String CustomFormatStringMetaAttributeGuidString = "92e785d7-3457-4e91-b99b-17a8bb46e65b";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid CustomFormatStringMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.CustomReferenceMode.CustomFormatStringMetaAttributeGuidString);
		#endregion

		#region CustomFormatString's Generated Property Code

		private System.String customFormatStringPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(CustomReferenceModeCustomFormatStringFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.CustomReferenceMode.CustomFormatStringMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.CustomReferenceMode.CustomFormatString")]
		public  System.String CustomFormatString
		{
			get
			{
				return customFormatStringPropertyStorage;
			}
		
			set
			{
				customReferenceModeCustomFormatStringFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region CustomReferenceModeCustomFormatStringFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for CustomReferenceMode.CustomFormatString field
		/// </summary>
		private static CustomReferenceModeCustomFormatStringFieldHandler	customReferenceModeCustomFormatStringFieldHandler	= CustomReferenceModeCustomFormatStringFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for CustomReferenceMode.CustomFormatString
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class CustomReferenceModeCustomFormatStringFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.CustomReferenceMode,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private CustomReferenceModeCustomFormatStringFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the CustomReferenceMode.CustomFormatString field handler
			/// </summary>
			/// <value>CustomReferenceModeCustomFormatStringFieldHandler</value>
			public static CustomReferenceModeCustomFormatStringFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.CustomReferenceMode.customReferenceModeCustomFormatStringFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.CustomReferenceMode.customReferenceModeCustomFormatStringFieldHandler;
					}
					else
					{
						// The static constructor in CustomReferenceMode will assign this value to
						// Neumont.Tools.ORM.ObjectModel.CustomReferenceMode.customReferenceModeCustomFormatStringFieldHandler, so just instantiate one and return it
						return new CustomReferenceModeCustomFormatStringFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the CustomReferenceMode.CustomFormatString field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.CustomReferenceMode.CustomFormatStringMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the CustomReferenceMode</param>
			protected sealed override System.String GetValue(Neumont.Tools.ORM.ObjectModel.CustomReferenceMode element)
			{
				return element.customFormatStringPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.CustomReferenceMode element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.customFormatStringPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.customFormatStringPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
	}
	#region CustomReferenceMode's Generated Constructor Code
	public  partial class CustomReferenceMode
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CustomReferenceMode(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CustomReferenceMode CreateCustomReferenceMode(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateCustomReferenceMode(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CustomReferenceMode CreateAndInitializeCustomReferenceMode(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeCustomReferenceMode(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public CustomReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CustomReferenceMode CreateCustomReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (CustomReferenceMode)partition.ElementFactory.CreateElement(typeof(CustomReferenceMode));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static CustomReferenceMode CreateAndInitializeCustomReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (CustomReferenceMode)partition.ElementFactory.CreateElement(typeof(CustomReferenceMode), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for CustomReferenceMode
	/// <summary>
	/// CustomReferenceMode Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.CustomReferenceMode))]
	public sealed class CustomReferenceModeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CustomReferenceModeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.CustomReferenceMode( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static CustomReferenceModeElementFactoryCreator Instance
		{
			get
			{
				return new CustomReferenceModeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMModel.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ORMModel")]
	public  partial class ORMModel : Neumont.Tools.ORM.ObjectModel.ORMNamedElement
	{
		#region ORMModel's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3f4ba8fa-355b-4a49-a42c-9c56f6e5f242";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMModel.MetaClassGuidString);
		#endregion

		#region ObjectTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ObjectTypeMoveableCollection ObjectTypeCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.ObjectTypeMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ModelMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid); }
		}
		#endregion
		#region FactTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FactTypeMoveableCollection FactTypeCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.FactTypeMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ModelHasFactType.ModelMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuid); }
		}
		#endregion
		#region ReferenceModeKindCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ReferenceModeKindMoveableCollection ReferenceModeKindCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.ReferenceModeKindMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuid); }
		}
		#endregion
		#region ReferenceModeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ReferenceModeMoveableCollection ReferenceModeCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.ReferenceModeMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuid); }
		}
		#endregion
		#region SetConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.SetConstraintMoveableCollection SetConstraintCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.SetConstraintMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.ModelMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.SetConstraintCollectionMetaRoleGuid); }
		}
		#endregion
		#region SetComparisonConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintMoveableCollection SetComparisonConstraintCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.ModelMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintCollectionMetaRoleGuid); }
		}
		#endregion
		#region DataTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.DataTypeMoveableCollection DataTypeCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.DataTypeMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ModelHasDataType.ModelMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region ORMModel's Generated Constructor Code
	public  partial class ORMModel
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMModel(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMModel CreateORMModel(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateORMModel(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMModel CreateAndInitializeORMModel(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeORMModel(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMModel(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMModel CreateORMModel(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ORMModel)partition.ElementFactory.CreateElement(typeof(ORMModel));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMModel CreateAndInitializeORMModel(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ORMModel)partition.ElementFactory.CreateElement(typeof(ORMModel), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ORMModel
	/// <summary>
	/// ORMModel Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ORMModel))]
	public sealed class ORMModelElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMModelElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ORMModel( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ORMModelElementFactoryCreator Instance
		{
			get
			{
				return new ORMModelElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueConstraint.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ValueConstraint")]
	public abstract partial class ValueConstraint : Neumont.Tools.ORM.ObjectModel.ORMNamedElement
	{
		#region ValueConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "48ce9fde-500d-4066-bdcb-bb3cf7fb72f1";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueConstraint.MetaClassGuidString);
		#endregion

		#region Text's Generated  Field Code
		#region Text's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String TextMetaAttributeGuidString = "bcb9afd4-188c-4d98-9429-88544e85adaf";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid TextMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueConstraint.TextMetaAttributeGuidString);
		#endregion

		#region Text's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ValueConstraintTextFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueConstraint.TextMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ValueConstraint.Text")]
		public  System.String Text
		{
			get
			{
				return valueConstraintTextFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				valueConstraintTextFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ValueConstraintTextFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ValueConstraint.Text field
		/// </summary>
		private static ValueConstraintTextFieldHandler	valueConstraintTextFieldHandler	= ValueConstraintTextFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ValueConstraint.Text
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ValueConstraintTextFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.ValueConstraint,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ValueConstraintTextFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ValueConstraint.Text field handler
			/// </summary>
			/// <value>ValueConstraintTextFieldHandler</value>
			public static ValueConstraintTextFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ValueConstraint.valueConstraintTextFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ValueConstraint.valueConstraintTextFieldHandler;
					}
					else
					{
						// The static constructor in ValueConstraint will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ValueConstraint.valueConstraintTextFieldHandler, so just instantiate one and return it
						return new ValueConstraintTextFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ValueConstraint.Text field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ValueConstraint.TextMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region ValueRangeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ValueRangeMoveableCollection ValueRangeCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.ValueRangeMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueRangeCollectionMetaRoleGuid); }
		}
		#endregion
		#region ValueRangeOverlapError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapError ValueRangeOverlapError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError), newRoles);
				}
			}
		}
		#endregion
		#region DuplicateNameError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError DuplicateNameError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for ValueConstraint
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.ValueConstraint Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ValueConstraintMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ValueConstraintMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.ValueConstraint[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.ValueConstraint at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.ValueConstraint this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ValueConstraint)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ValueConstraint to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.ValueConstraint value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ValueConstraint to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.ValueConstraint value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ValueConstraint to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.ValueConstraint value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ValueConstraint to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.ValueConstraint value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ValueConstraint to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.ValueConstraint value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.ValueConstraint rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.ValueConstraint rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ValueConstraint's Generated Constructor Code
	public abstract partial class ValueConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ValueConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraint.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraint")]
	public  partial class ValueTypeValueConstraint : Neumont.Tools.ORM.ObjectModel.ValueConstraint
	{
		#region ValueTypeValueConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "05587b6c-d9e7-4717-b20c-93b4c0f60c38";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraint.MetaClassGuidString);
		#endregion

		#region ValueType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ObjectType ValueType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ObjectType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ObjectType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ObjectType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint), newRoles);
				}
			}
		}
		#endregion
	}
	#region ValueTypeValueConstraint's Generated Constructor Code
	public  partial class ValueTypeValueConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeValueConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeValueConstraint CreateValueTypeValueConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateValueTypeValueConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeValueConstraint CreateAndInitializeValueTypeValueConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueTypeValueConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeValueConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeValueConstraint CreateValueTypeValueConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ValueTypeValueConstraint)partition.ElementFactory.CreateElement(typeof(ValueTypeValueConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeValueConstraint CreateAndInitializeValueTypeValueConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueTypeValueConstraint)partition.ElementFactory.CreateElement(typeof(ValueTypeValueConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueTypeValueConstraint
	/// <summary>
	/// ValueTypeValueConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraint))]
	public sealed class ValueTypeValueConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeValueConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueTypeValueConstraintElementFactoryCreator Instance
		{
			get
			{
				return new ValueTypeValueConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RoleValueConstraint.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.RoleValueConstraint")]
	public  partial class RoleValueConstraint : Neumont.Tools.ORM.ObjectModel.ValueConstraint
	{
		#region RoleValueConstraint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "588ce2ce-1025-4a7a-8964-6d99ccb2d2aa";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RoleValueConstraint.MetaClassGuidString);
		#endregion

		#region Role's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.Role Role
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraintMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.RoleMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.Role;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraintMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.RoleMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.Role counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.Role;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.RoleMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraintMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint), newRoles);
				}
			}
		}
		#endregion
	}
	#region RoleValueConstraint's Generated Constructor Code
	public  partial class RoleValueConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleValueConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleValueConstraint CreateRoleValueConstraint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateRoleValueConstraint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleValueConstraint CreateAndInitializeRoleValueConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRoleValueConstraint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleValueConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleValueConstraint CreateRoleValueConstraint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (RoleValueConstraint)partition.ElementFactory.CreateElement(typeof(RoleValueConstraint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleValueConstraint CreateAndInitializeRoleValueConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RoleValueConstraint)partition.ElementFactory.CreateElement(typeof(RoleValueConstraint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RoleValueConstraint
	/// <summary>
	/// RoleValueConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.RoleValueConstraint))]
	public sealed class RoleValueConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleValueConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.RoleValueConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RoleValueConstraintElementFactoryCreator Instance
		{
			get
			{
				return new RoleValueConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMModelElement.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ORMModelElement")]
	public abstract partial class ORMModelElement : Microsoft.VisualStudio.Modeling.ModelElement
	{
		#region ORMModelElement's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "b5e86643-b849-47f8-afc8-70ace49cc51a";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMModelElement.MetaClassGuidString);
		#endregion

		#region ExtensionCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElementMoveableCollection ExtensionCollection
		{
			get { return new Microsoft.VisualStudio.Modeling.ModelElementMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtendedElementMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtensionCollectionMetaRoleGuid); }
		}
		#endregion
		#region ExtensionModelErrorCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ModelErrorMoveableCollection ExtensionModelErrorCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.ModelErrorMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtendedElementMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtensionModelErrorCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region ORMModelElement's Generated Constructor Code
	public abstract partial class ORMModelElement
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ORMModelElement(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.FactType")]
	public  partial class FactType : Neumont.Tools.ORM.ObjectModel.ORMModelElement
	{
		#region FactType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "a3acc35a-ce71-4cb8-8770-b87fbfa462d8";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactType.MetaClassGuidString);
		#endregion

		#region IsExternal's Generated  Field Code
		#region IsExternal's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsExternalMetaAttributeGuidString = "b62dffb1-d93c-4b77-901a-ad7f0920141a";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsExternalMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactType.IsExternalMetaAttributeGuidString);
		#endregion

		#region IsExternal's Generated Property Code

		private System.Boolean isExternalPropertyStorage = false;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(FactTypeIsExternalFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactType.IsExternalMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.FactType.IsExternal")]
		public  System.Boolean IsExternal
		{
			get
			{
				return isExternalPropertyStorage;
			}
		
			set
			{
				factTypeIsExternalFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FactTypeIsExternalFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FactType.IsExternal field
		/// </summary>
		private static FactTypeIsExternalFieldHandler	factTypeIsExternalFieldHandler	= FactTypeIsExternalFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FactType.IsExternal
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FactTypeIsExternalFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.FactType,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FactTypeIsExternalFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FactType.IsExternal field handler
			/// </summary>
			/// <value>FactTypeIsExternalFieldHandler</value>
			public static FactTypeIsExternalFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.FactType.factTypeIsExternalFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.FactType.factTypeIsExternalFieldHandler;
					}
					else
					{
						// The static constructor in FactType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.FactType.factTypeIsExternalFieldHandler, so just instantiate one and return it
						return new FactTypeIsExternalFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FactType.IsExternal field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.FactType.IsExternalMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the FactType</param>
			protected sealed override System.Boolean GetValue(Neumont.Tools.ORM.ObjectModel.FactType element)
			{
				return element.isExternalPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.FactType element, System.Boolean value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Boolean oldValue)
			{
				oldValue = element.isExternalPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.isExternalPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region NoteText's Generated  Field Code
		#region NoteText's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String NoteTextMetaAttributeGuidString = "449f9dde-4857-4ef4-a0cf-d4659d131da3";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid NoteTextMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactType.NoteTextMetaAttributeGuidString);
		#endregion

		#region NoteText's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.MergableProperty(false)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(FactTypeNoteTextFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactType.NoteTextMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.FactType.NoteText")]
		public  System.String NoteText
		{
			get
			{
				return factTypeNoteTextFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				factTypeNoteTextFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FactTypeNoteTextFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FactType.NoteText field
		/// </summary>
		private static FactTypeNoteTextFieldHandler	factTypeNoteTextFieldHandler	= FactTypeNoteTextFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FactType.NoteText
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FactTypeNoteTextFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.FactType,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FactTypeNoteTextFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FactType.NoteText field handler
			/// </summary>
			/// <value>FactTypeNoteTextFieldHandler</value>
			public static FactTypeNoteTextFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.FactType.factTypeNoteTextFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.FactType.factTypeNoteTextFieldHandler;
					}
					else
					{
						// The static constructor in FactType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.FactType.factTypeNoteTextFieldHandler, so just instantiate one and return it
						return new FactTypeNoteTextFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FactType.NoteText field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.FactType.NoteTextMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region Name's Generated  Field Code
		#region Name's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String NameMetaAttributeGuidString = "9ff2bd50-e9dd-4271-8b89-bf998ad1e17d";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid NameMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactType.NameMetaAttributeGuidString);
		#endregion

		#region Name's Generated Property Code

		/// <summary>
		/// Transitional Property
		/// </summary>
		[Microsoft.VisualStudio.Modeling.ReadOnly(State=Microsoft.VisualStudio.Modeling.ReadOnlyAttributeValue.SometimesUIReadOnlyPreferTrue)]
		[System.ComponentModel.MergableProperty(false)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(FactTypeNameFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactType.NameMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.FactType.Name")]
		public  System.String Name
		{
			get
			{
				return factTypeNameFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				factTypeNameFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FactTypeNameFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FactType.Name field
		/// </summary>
		private static FactTypeNameFieldHandler	factTypeNameFieldHandler	= FactTypeNameFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FactType.Name
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FactTypeNameFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.FactType,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FactTypeNameFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FactType.Name field handler
			/// </summary>
			/// <value>FactTypeNameFieldHandler</value>
			public static FactTypeNameFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.FactType.factTypeNameFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.FactType.factTypeNameFieldHandler;
					}
					else
					{
						// The static constructor in FactType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.FactType.factTypeNameFieldHandler, so just instantiate one and return it
						return new FactTypeNameFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FactType.Name field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.FactType.NameMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region NestingTypeDisplay's Generated  Field Code
		#region NestingTypeDisplay's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String NestingTypeDisplayMetaAttributeGuidString = "b4a12078-45aa-4cab-a6d9-da2317ddc64a";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid NestingTypeDisplayMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactType.NestingTypeDisplayMetaAttributeGuidString);
		#endregion

		#region NestingTypeDisplay's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Editor(typeof(Neumont.Tools.ORM.ObjectModel.Editors.NestingTypePicker), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.MergableProperty(false)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, AllowNulls=true, FieldHandlerType=typeof(FactTypeNestingTypeDisplayFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactType.NestingTypeDisplayMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.FactType.NestingTypeDisplay")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectType NestingTypeDisplay
		{
			get
			{
				return factTypeNestingTypeDisplayFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				factTypeNestingTypeDisplayFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FactTypeNestingTypeDisplayFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FactType.NestingTypeDisplay field
		/// </summary>
		private static FactTypeNestingTypeDisplayFieldHandler	factTypeNestingTypeDisplayFieldHandler	= FactTypeNestingTypeDisplayFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FactType.NestingTypeDisplay
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FactTypeNestingTypeDisplayFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.FactType,Neumont.Tools.ORM.ObjectModel.ObjectType>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FactTypeNestingTypeDisplayFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FactType.NestingTypeDisplay field handler
			/// </summary>
			/// <value>FactTypeNestingTypeDisplayFieldHandler</value>
			public static FactTypeNestingTypeDisplayFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.FactType.factTypeNestingTypeDisplayFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.FactType.factTypeNestingTypeDisplayFieldHandler;
					}
					else
					{
						// The static constructor in FactType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.FactType.factTypeNestingTypeDisplayFieldHandler, so just instantiate one and return it
						return new FactTypeNestingTypeDisplayFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FactType.NestingTypeDisplay field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.FactType.NestingTypeDisplayMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region DerivationRuleDisplay's Generated  Field Code
		#region DerivationRuleDisplay's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String DerivationRuleDisplayMetaAttributeGuidString = "b0af5a04-cfb5-4f3f-9ef5-1df00c4a180f";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid DerivationRuleDisplayMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactType.DerivationRuleDisplayMetaAttributeGuidString);
		#endregion

		#region DerivationRuleDisplay's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, AllowNulls=true, FieldHandlerType=typeof(FactTypeDerivationRuleDisplayFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactType.DerivationRuleDisplayMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.FactType.DerivationRuleDisplay")]
		public  System.String DerivationRuleDisplay
		{
			get
			{
				return factTypeDerivationRuleDisplayFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				factTypeDerivationRuleDisplayFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FactTypeDerivationRuleDisplayFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FactType.DerivationRuleDisplay field
		/// </summary>
		private static FactTypeDerivationRuleDisplayFieldHandler	factTypeDerivationRuleDisplayFieldHandler	= FactTypeDerivationRuleDisplayFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FactType.DerivationRuleDisplay
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FactTypeDerivationRuleDisplayFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.FactType,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FactTypeDerivationRuleDisplayFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FactType.DerivationRuleDisplay field handler
			/// </summary>
			/// <value>FactTypeDerivationRuleDisplayFieldHandler</value>
			public static FactTypeDerivationRuleDisplayFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.FactType.factTypeDerivationRuleDisplayFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.FactType.factTypeDerivationRuleDisplayFieldHandler;
					}
					else
					{
						// The static constructor in FactType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.FactType.factTypeDerivationRuleDisplayFieldHandler, so just instantiate one and return it
						return new FactTypeDerivationRuleDisplayFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FactType.DerivationRuleDisplay field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.FactType.DerivationRuleDisplayMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region DerivationStorageDisplay's Generated  Field Code
		#region DerivationStorageDisplay's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String DerivationStorageDisplayMetaAttributeGuidString = "e794eb0c-a7e6-4df7-826c-f021718747ed";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid DerivationStorageDisplayMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactType.DerivationStorageDisplayMetaAttributeGuidString);
		#endregion

		#region DerivationStorageDisplay's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(Neumont.Tools.ORM.ObjectModel.DerivationStorageType),DefaultEnumerationValueName="")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(FactTypeDerivationStorageDisplayFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactType.DerivationStorageDisplayMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.FactType.DerivationStorageDisplay")]
		public  Neumont.Tools.ORM.ObjectModel.DerivationStorageType DerivationStorageDisplay
		{
			get
			{
				return factTypeDerivationStorageDisplayFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				factTypeDerivationStorageDisplayFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FactTypeDerivationStorageDisplayFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FactType.DerivationStorageDisplay field
		/// </summary>
		private static FactTypeDerivationStorageDisplayFieldHandler	factTypeDerivationStorageDisplayFieldHandler	= FactTypeDerivationStorageDisplayFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FactType.DerivationStorageDisplay
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FactTypeDerivationStorageDisplayFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.FactType,Neumont.Tools.ORM.ObjectModel.DerivationStorageType>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FactTypeDerivationStorageDisplayFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FactType.DerivationStorageDisplay field handler
			/// </summary>
			/// <value>FactTypeDerivationStorageDisplayFieldHandler</value>
			public static FactTypeDerivationStorageDisplayFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.FactType.factTypeDerivationStorageDisplayFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.FactType.factTypeDerivationStorageDisplayFieldHandler;
					}
					else
					{
						// The static constructor in FactType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.FactType.factTypeDerivationStorageDisplayFieldHandler, so just instantiate one and return it
						return new FactTypeDerivationStorageDisplayFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FactType.DerivationStorageDisplay field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.FactType.DerivationStorageDisplayMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region NestingType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ObjectType NestingType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.Objectification.NestedFactTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.Objectification.NestingTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ObjectType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.Objectification.NestedFactTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.Objectification.NestingTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ObjectType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ObjectType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.Objectification.NestingTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.Objectification.NestedFactTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.Objectification), newRoles);
				}
			}
		}
		#endregion
		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ORMModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasFactType.ModelMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ORMModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ModelHasFactType.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ORMModel counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ORMModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ModelHasFactType.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasFactType), newRoles);
				}
			}
		}
		#endregion
		#region SetComparisonConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintMoveableCollection SetComparisonConstraintCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.FactTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.SetComparisonConstraintCollectionMetaRoleGuid); }
		}
		#endregion
		#region SetConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.SetConstraintMoveableCollection SetConstraintCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.SetConstraintMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.FactSetConstraint.FactTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactSetConstraint.SetConstraintCollectionMetaRoleGuid); }
		}
		#endregion
		#region ReadingOrderCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ReadingOrderMoveableCollection ReadingOrderCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.ReadingOrderMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid); }
		}
		#endregion
		#region ReadingRequiredError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingError ReadingRequiredError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError), newRoles);
				}
			}
		}
		#endregion
		#region InternalUniquenessConstraintRequiredError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError InternalUniquenessConstraintRequiredError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), newRoles);
				}
			}
		}
		#endregion
		#region ImpliedByObjectification's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.Objectification ImpliedByObjectification
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectificationMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.Objectification;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectificationMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.Objectification counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.Objectification;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectificationMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType), newRoles);
				}
			}
		}
		#endregion
		#region ImpliedInternalUniquenessConstraintError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintError ImpliedInternalUniquenessConstraintError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError), newRoles);
				}
			}
		}
		#endregion
		#region Note's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.Note Note
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.NoteMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.Note;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.NoteMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.Note counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.Note;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.NoteMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote), newRoles);
				}
			}
		}
		#endregion
		#region FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintErrorMoveableCollection FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintErrorMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FactTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid); }
		}
		#endregion
		#region RoleCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.RoleBaseMoveableCollection RoleCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.RoleBaseMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuid); }
		}
		#endregion
		#region DerivationRule's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression DerivationRule
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for FactType
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.FactType Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class FactTypeMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public FactTypeMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FactType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FactType))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FactType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FactType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FactType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FactType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FactType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FactType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FactType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FactType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FactType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FactType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FactType) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FactType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FactType) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FactType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.FactType[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.FactType at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.FactType this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactType)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.FactType to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.FactType value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.FactType to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.FactType value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.FactType to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.FactType value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.FactType to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.FactType value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.FactType to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.FactType value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.FactType rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.FactType rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region FactType's Generated Constructor Code
	public  partial class FactType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactType CreateFactType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFactType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactType CreateAndInitializeFactType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactType CreateFactType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FactType)partition.ElementFactory.CreateElement(typeof(FactType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactType CreateAndInitializeFactType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactType)partition.ElementFactory.CreateElement(typeof(FactType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactType
	/// <summary>
	/// FactType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FactType))]
	public sealed class FactTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FactType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SubtypeFact.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.SubtypeFact")]
	public  partial class SubtypeFact : Neumont.Tools.ORM.ObjectModel.FactType
	{
		#region SubtypeFact's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "012ad46d-6e3e-4ca2-97e8-44ea4f27ca75";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SubtypeFact.MetaClassGuidString);
		#endregion

		#region IsPrimary's Generated  Field Code
		#region IsPrimary's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsPrimaryMetaAttributeGuidString = "2d2a56ce-c311-49b5-b375-e6cecab3ea00";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsPrimaryMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SubtypeFact.IsPrimaryMetaAttributeGuidString);
		#endregion

		#region IsPrimary's Generated Property Code

		private System.Boolean isPrimaryPropertyStorage = false;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.ReadOnly(State=Microsoft.VisualStudio.Modeling.ReadOnlyAttributeValue.SometimesUIReadOnlyPreferFalse)]
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(SubtypeFactIsPrimaryFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SubtypeFact.IsPrimaryMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.SubtypeFact.IsPrimary")]
		public  System.Boolean IsPrimary
		{
			get
			{
				return isPrimaryPropertyStorage;
			}
		
			set
			{
				subtypeFactIsPrimaryFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region SubtypeFactIsPrimaryFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for SubtypeFact.IsPrimary field
		/// </summary>
		private static SubtypeFactIsPrimaryFieldHandler	subtypeFactIsPrimaryFieldHandler	= SubtypeFactIsPrimaryFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for SubtypeFact.IsPrimary
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class SubtypeFactIsPrimaryFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.SubtypeFact,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private SubtypeFactIsPrimaryFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the SubtypeFact.IsPrimary field handler
			/// </summary>
			/// <value>SubtypeFactIsPrimaryFieldHandler</value>
			public static SubtypeFactIsPrimaryFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.SubtypeFact.subtypeFactIsPrimaryFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.SubtypeFact.subtypeFactIsPrimaryFieldHandler;
					}
					else
					{
						// The static constructor in SubtypeFact will assign this value to
						// Neumont.Tools.ORM.ObjectModel.SubtypeFact.subtypeFactIsPrimaryFieldHandler, so just instantiate one and return it
						return new SubtypeFactIsPrimaryFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the SubtypeFact.IsPrimary field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.SubtypeFact.IsPrimaryMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the SubtypeFact</param>
			protected sealed override System.Boolean GetValue(Neumont.Tools.ORM.ObjectModel.SubtypeFact element)
			{
				return element.isPrimaryPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.SubtypeFact element, System.Boolean value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Boolean oldValue)
			{
				oldValue = element.isPrimaryPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.isPrimaryPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
	}
	#region SubtypeFact's Generated Constructor Code
	public  partial class SubtypeFact
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubtypeFact(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubtypeFact CreateSubtypeFact(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateSubtypeFact(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubtypeFact CreateAndInitializeSubtypeFact(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSubtypeFact(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SubtypeFact(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubtypeFact CreateSubtypeFact(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (SubtypeFact)partition.ElementFactory.CreateElement(typeof(SubtypeFact));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubtypeFact CreateAndInitializeSubtypeFact(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SubtypeFact)partition.ElementFactory.CreateElement(typeof(SubtypeFact), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SubtypeFact
	/// <summary>
	/// SubtypeFact Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.SubtypeFact))]
	public sealed class SubtypeFactElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubtypeFactElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.SubtypeFact( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SubtypeFactElementFactoryCreator Instance
		{
			get
			{
				return new SubtypeFactElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Expression.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.Expression")]
	public abstract partial class Expression : Neumont.Tools.ORM.ObjectModel.ORMModelElement
	{
		#region Expression's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "ddc5ef24-70bb-48aa-8481-2a76021581a3";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Expression.MetaClassGuidString);
		#endregion

		#region Body's Generated  Field Code
		#region Body's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String BodyMetaAttributeGuidString = "75d72ae2-bc07-493b-a4d1-9b9b1f2e1dd1";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid BodyMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Expression.BodyMetaAttributeGuidString);
		#endregion

		#region Body's Generated Property Code

		private System.String bodyPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ExpressionBodyFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Expression.BodyMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.Expression.Body")]
		public  System.String Body
		{
			get
			{
				return bodyPropertyStorage;
			}
		
			set
			{
				expressionBodyFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ExpressionBodyFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Expression.Body field
		/// </summary>
		private static ExpressionBodyFieldHandler	expressionBodyFieldHandler	= ExpressionBodyFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Expression.Body
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ExpressionBodyFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.Expression,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ExpressionBodyFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Expression.Body field handler
			/// </summary>
			/// <value>ExpressionBodyFieldHandler</value>
			public static ExpressionBodyFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.Expression.expressionBodyFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.Expression.expressionBodyFieldHandler;
					}
					else
					{
						// The static constructor in Expression will assign this value to
						// Neumont.Tools.ORM.ObjectModel.Expression.expressionBodyFieldHandler, so just instantiate one and return it
						return new ExpressionBodyFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Expression.Body field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.Expression.BodyMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Expression</param>
			protected sealed override System.String GetValue(Neumont.Tools.ORM.ObjectModel.Expression element)
			{
				return element.bodyPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.Expression element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.bodyPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.bodyPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Language's Generated  Field Code
		#region Language's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String LanguageMetaAttributeGuidString = "a1dc9629-53d7-48fe-84e2-98423f1d292e";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid LanguageMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Expression.LanguageMetaAttributeGuidString);
		#endregion

		#region Language's Generated Property Code

		private System.String languagePropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ExpressionLanguageFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Expression.LanguageMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.Expression.Language")]
		public  System.String Language
		{
			get
			{
				return languagePropertyStorage;
			}
		
			set
			{
				expressionLanguageFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ExpressionLanguageFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Expression.Language field
		/// </summary>
		private static ExpressionLanguageFieldHandler	expressionLanguageFieldHandler	= ExpressionLanguageFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Expression.Language
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ExpressionLanguageFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.Expression,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ExpressionLanguageFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Expression.Language field handler
			/// </summary>
			/// <value>ExpressionLanguageFieldHandler</value>
			public static ExpressionLanguageFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.Expression.expressionLanguageFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.Expression.expressionLanguageFieldHandler;
					}
					else
					{
						// The static constructor in Expression will assign this value to
						// Neumont.Tools.ORM.ObjectModel.Expression.expressionLanguageFieldHandler, so just instantiate one and return it
						return new ExpressionLanguageFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Expression.Language field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.Expression.LanguageMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Expression</param>
			protected sealed override System.String GetValue(Neumont.Tools.ORM.ObjectModel.Expression element)
			{
				return element.languagePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.Expression element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.languagePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.languagePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
	}
	#region Expression's Generated Constructor Code
	public abstract partial class Expression
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected Expression(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression")]
	public  partial class FactTypeDerivationExpression : Neumont.Tools.ORM.ObjectModel.Expression
	{
		#region FactTypeDerivationExpression's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "5e6300e5-7172-407f-af82-a5f87fa94d9b";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression.MetaClassGuidString);
		#endregion

		#region DerivationStorage's Generated  Field Code
		#region DerivationStorage's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String DerivationStorageMetaAttributeGuidString = "61d3cbf3-575b-4248-83d9-f748892f98da";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid DerivationStorageMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression.DerivationStorageMetaAttributeGuidString);
		#endregion

		#region DerivationStorage's Generated Property Code

		private Neumont.Tools.ORM.ObjectModel.DerivationStorageType derivationStoragePropertyStorage = Neumont.Tools.ORM.ObjectModel.DerivationStorageType.Derived;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(Neumont.Tools.ORM.ObjectModel.DerivationStorageType),DefaultEnumerationValueName="Derived")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(FactTypeDerivationExpressionDerivationStorageFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression.DerivationStorageMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression.DerivationStorage")]
		public  Neumont.Tools.ORM.ObjectModel.DerivationStorageType DerivationStorage
		{
			get
			{
				return derivationStoragePropertyStorage;
			}
		
			set
			{
				factTypeDerivationExpressionDerivationStorageFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FactTypeDerivationExpressionDerivationStorageFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FactTypeDerivationExpression.DerivationStorage field
		/// </summary>
		private static FactTypeDerivationExpressionDerivationStorageFieldHandler	factTypeDerivationExpressionDerivationStorageFieldHandler	= FactTypeDerivationExpressionDerivationStorageFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FactTypeDerivationExpression.DerivationStorage
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FactTypeDerivationExpressionDerivationStorageFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression,Neumont.Tools.ORM.ObjectModel.DerivationStorageType>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FactTypeDerivationExpressionDerivationStorageFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FactTypeDerivationExpression.DerivationStorage field handler
			/// </summary>
			/// <value>FactTypeDerivationExpressionDerivationStorageFieldHandler</value>
			public static FactTypeDerivationExpressionDerivationStorageFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression.factTypeDerivationExpressionDerivationStorageFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression.factTypeDerivationExpressionDerivationStorageFieldHandler;
					}
					else
					{
						// The static constructor in FactTypeDerivationExpression will assign this value to
						// Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression.factTypeDerivationExpressionDerivationStorageFieldHandler, so just instantiate one and return it
						return new FactTypeDerivationExpressionDerivationStorageFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FactTypeDerivationExpression.DerivationStorage field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression.DerivationStorageMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the FactTypeDerivationExpression</param>
			protected sealed override Neumont.Tools.ORM.ObjectModel.DerivationStorageType GetValue(Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression element)
			{
				return element.derivationStoragePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression element, Neumont.Tools.ORM.ObjectModel.DerivationStorageType value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref Neumont.Tools.ORM.ObjectModel.DerivationStorageType oldValue)
			{
				oldValue = element.derivationStoragePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.derivationStoragePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region FactType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FactType FactType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.FactType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.FactType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.FactType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression), newRoles);
				}
			}
		}
		#endregion
	}
	#region FactTypeDerivationExpression's Generated Constructor Code
	public  partial class FactTypeDerivationExpression
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeDerivationExpression(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeDerivationExpression CreateFactTypeDerivationExpression(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFactTypeDerivationExpression(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeDerivationExpression CreateAndInitializeFactTypeDerivationExpression(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeDerivationExpression(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeDerivationExpression(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeDerivationExpression CreateFactTypeDerivationExpression(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FactTypeDerivationExpression)partition.ElementFactory.CreateElement(typeof(FactTypeDerivationExpression));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeDerivationExpression CreateAndInitializeFactTypeDerivationExpression(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeDerivationExpression)partition.ElementFactory.CreateElement(typeof(FactTypeDerivationExpression), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeDerivationExpression
	/// <summary>
	/// FactTypeDerivationExpression Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression))]
	public sealed class FactTypeDerivationExpressionElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeDerivationExpressionElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeDerivationExpressionElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeDerivationExpressionElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.DataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.DataType")]
	public abstract partial class DataType : Neumont.Tools.ORM.ObjectModel.ORMModelElement
	{
		#region DataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "547d17bb-3dc9-4869-b280-ff6be0f7dca9";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.DataType.MetaClassGuidString);
		#endregion

		#region ValueTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ObjectTypeMoveableCollection ValueTypeCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.ObjectTypeMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeCollectionMetaRoleGuid); }
		}
		#endregion
		#region Model's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ORMModel Model
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ModelHasDataType.ModelMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ORMModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ModelHasDataType.ModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ORMModel counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ORMModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ModelHasDataType.ModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasDataType), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for DataType
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.DataType Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class DataTypeMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public DataTypeMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.DataType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.DataType))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.DataType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.DataType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.DataType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.DataType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.DataType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.DataType))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.DataType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.DataType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.DataType) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.DataType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.DataType) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.DataType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.DataType) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.DataType))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.DataType[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.DataType at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.DataType this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.DataType)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.DataType to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.DataType value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.DataType to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.DataType value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.DataType to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.DataType value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.DataType to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.DataType value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.DataType to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.DataType value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.DataType rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.DataType rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region DataType's Generated Constructor Code
	public abstract partial class DataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected DataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.UnspecifiedDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.UnspecifiedDataType")]
	public  partial class UnspecifiedDataType : Neumont.Tools.ORM.ObjectModel.DataType
	{
		#region UnspecifiedDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "12a11e3f-7daf-4ced-8ca2-34d3250ad125";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.UnspecifiedDataType.MetaClassGuidString);
		#endregion

	}
	#region UnspecifiedDataType's Generated Constructor Code
	public  partial class UnspecifiedDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public UnspecifiedDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UnspecifiedDataType CreateUnspecifiedDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateUnspecifiedDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UnspecifiedDataType CreateAndInitializeUnspecifiedDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeUnspecifiedDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public UnspecifiedDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UnspecifiedDataType CreateUnspecifiedDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (UnspecifiedDataType)partition.ElementFactory.CreateElement(typeof(UnspecifiedDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UnspecifiedDataType CreateAndInitializeUnspecifiedDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (UnspecifiedDataType)partition.ElementFactory.CreateElement(typeof(UnspecifiedDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for UnspecifiedDataType
	/// <summary>
	/// UnspecifiedDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.UnspecifiedDataType))]
	public sealed class UnspecifiedDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public UnspecifiedDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.UnspecifiedDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static UnspecifiedDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new UnspecifiedDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.TextDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.TextDataType")]
	public abstract partial class TextDataType : Neumont.Tools.ORM.ObjectModel.DataType
	{
		#region TextDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "8590bbf5-92b9-4a9d-98a0-7b7a0d01c450";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.TextDataType.MetaClassGuidString);
		#endregion

	}
	#region TextDataType's Generated Constructor Code
	public abstract partial class TextDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected TextDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FixedLengthTextDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.FixedLengthTextDataType")]
	public  partial class FixedLengthTextDataType : Neumont.Tools.ORM.ObjectModel.TextDataType
	{
		#region FixedLengthTextDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "9de7b056-3e4d-4344-a00c-a9e81da805f6";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FixedLengthTextDataType.MetaClassGuidString);
		#endregion

	}
	#region FixedLengthTextDataType's Generated Constructor Code
	public  partial class FixedLengthTextDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FixedLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FixedLengthTextDataType CreateFixedLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFixedLengthTextDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FixedLengthTextDataType CreateAndInitializeFixedLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFixedLengthTextDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FixedLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FixedLengthTextDataType CreateFixedLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FixedLengthTextDataType)partition.ElementFactory.CreateElement(typeof(FixedLengthTextDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FixedLengthTextDataType CreateAndInitializeFixedLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FixedLengthTextDataType)partition.ElementFactory.CreateElement(typeof(FixedLengthTextDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FixedLengthTextDataType
	/// <summary>
	/// FixedLengthTextDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FixedLengthTextDataType))]
	public sealed class FixedLengthTextDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FixedLengthTextDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FixedLengthTextDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FixedLengthTextDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new FixedLengthTextDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.VariableLengthTextDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.VariableLengthTextDataType")]
	public  partial class VariableLengthTextDataType : Neumont.Tools.ORM.ObjectModel.TextDataType
	{
		#region VariableLengthTextDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "4498d0d4-f386-46c5-a7ef-6ee9abc14611";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.VariableLengthTextDataType.MetaClassGuidString);
		#endregion

	}
	#region VariableLengthTextDataType's Generated Constructor Code
	public  partial class VariableLengthTextDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public VariableLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static VariableLengthTextDataType CreateVariableLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateVariableLengthTextDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static VariableLengthTextDataType CreateAndInitializeVariableLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeVariableLengthTextDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public VariableLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static VariableLengthTextDataType CreateVariableLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (VariableLengthTextDataType)partition.ElementFactory.CreateElement(typeof(VariableLengthTextDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static VariableLengthTextDataType CreateAndInitializeVariableLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (VariableLengthTextDataType)partition.ElementFactory.CreateElement(typeof(VariableLengthTextDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for VariableLengthTextDataType
	/// <summary>
	/// VariableLengthTextDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.VariableLengthTextDataType))]
	public sealed class VariableLengthTextDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public VariableLengthTextDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.VariableLengthTextDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static VariableLengthTextDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new VariableLengthTextDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.LargeLengthTextDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.LargeLengthTextDataType")]
	public  partial class LargeLengthTextDataType : Neumont.Tools.ORM.ObjectModel.TextDataType
	{
		#region LargeLengthTextDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "42b4206d-7766-41f0-87d6-6ff23b10756e";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.LargeLengthTextDataType.MetaClassGuidString);
		#endregion

	}
	#region LargeLengthTextDataType's Generated Constructor Code
	public  partial class LargeLengthTextDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public LargeLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LargeLengthTextDataType CreateLargeLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateLargeLengthTextDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LargeLengthTextDataType CreateAndInitializeLargeLengthTextDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeLargeLengthTextDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public LargeLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LargeLengthTextDataType CreateLargeLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (LargeLengthTextDataType)partition.ElementFactory.CreateElement(typeof(LargeLengthTextDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LargeLengthTextDataType CreateAndInitializeLargeLengthTextDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (LargeLengthTextDataType)partition.ElementFactory.CreateElement(typeof(LargeLengthTextDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for LargeLengthTextDataType
	/// <summary>
	/// LargeLengthTextDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.LargeLengthTextDataType))]
	public sealed class LargeLengthTextDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public LargeLengthTextDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.LargeLengthTextDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static LargeLengthTextDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new LargeLengthTextDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.NumericDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.NumericDataType")]
	public abstract partial class NumericDataType : Neumont.Tools.ORM.ObjectModel.DataType
	{
		#region NumericDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "5d6c8146-073b-4f54-ae4e-e97620c42b2c";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.NumericDataType.MetaClassGuidString);
		#endregion

	}
	#region NumericDataType's Generated Constructor Code
	public abstract partial class NumericDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected NumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SignedIntegerNumericDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.SignedIntegerNumericDataType")]
	public  partial class SignedIntegerNumericDataType : Neumont.Tools.ORM.ObjectModel.NumericDataType
	{
		#region SignedIntegerNumericDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "0a1d30c1-a7cb-47bb-ab4a-36a89522e12a";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SignedIntegerNumericDataType.MetaClassGuidString);
		#endregion

	}
	#region SignedIntegerNumericDataType's Generated Constructor Code
	public  partial class SignedIntegerNumericDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SignedIntegerNumericDataType CreateSignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateSignedIntegerNumericDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SignedIntegerNumericDataType CreateAndInitializeSignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSignedIntegerNumericDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SignedIntegerNumericDataType CreateSignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (SignedIntegerNumericDataType)partition.ElementFactory.CreateElement(typeof(SignedIntegerNumericDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SignedIntegerNumericDataType CreateAndInitializeSignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SignedIntegerNumericDataType)partition.ElementFactory.CreateElement(typeof(SignedIntegerNumericDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SignedIntegerNumericDataType
	/// <summary>
	/// SignedIntegerNumericDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.SignedIntegerNumericDataType))]
	public sealed class SignedIntegerNumericDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SignedIntegerNumericDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.SignedIntegerNumericDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SignedIntegerNumericDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new SignedIntegerNumericDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.UnsignedIntegerNumericDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.UnsignedIntegerNumericDataType")]
	public  partial class UnsignedIntegerNumericDataType : Neumont.Tools.ORM.ObjectModel.NumericDataType
	{
		#region UnsignedIntegerNumericDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "773798cc-73bb-49b0-ad72-cb145d0a5f14";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.UnsignedIntegerNumericDataType.MetaClassGuidString);
		#endregion

	}
	#region UnsignedIntegerNumericDataType's Generated Constructor Code
	public  partial class UnsignedIntegerNumericDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public UnsignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UnsignedIntegerNumericDataType CreateUnsignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateUnsignedIntegerNumericDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UnsignedIntegerNumericDataType CreateAndInitializeUnsignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeUnsignedIntegerNumericDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public UnsignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UnsignedIntegerNumericDataType CreateUnsignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (UnsignedIntegerNumericDataType)partition.ElementFactory.CreateElement(typeof(UnsignedIntegerNumericDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UnsignedIntegerNumericDataType CreateAndInitializeUnsignedIntegerNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (UnsignedIntegerNumericDataType)partition.ElementFactory.CreateElement(typeof(UnsignedIntegerNumericDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for UnsignedIntegerNumericDataType
	/// <summary>
	/// UnsignedIntegerNumericDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.UnsignedIntegerNumericDataType))]
	public sealed class UnsignedIntegerNumericDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public UnsignedIntegerNumericDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.UnsignedIntegerNumericDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static UnsignedIntegerNumericDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new UnsignedIntegerNumericDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.AutoCounterNumericDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.AutoCounterNumericDataType")]
	public  partial class AutoCounterNumericDataType : Neumont.Tools.ORM.ObjectModel.NumericDataType
	{
		#region AutoCounterNumericDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "ff1b07d5-e8fc-44cb-acec-cb93f6e6e37a";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.AutoCounterNumericDataType.MetaClassGuidString);
		#endregion

	}
	#region AutoCounterNumericDataType's Generated Constructor Code
	public  partial class AutoCounterNumericDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public AutoCounterNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static AutoCounterNumericDataType CreateAutoCounterNumericDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateAutoCounterNumericDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static AutoCounterNumericDataType CreateAndInitializeAutoCounterNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeAutoCounterNumericDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public AutoCounterNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static AutoCounterNumericDataType CreateAutoCounterNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (AutoCounterNumericDataType)partition.ElementFactory.CreateElement(typeof(AutoCounterNumericDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static AutoCounterNumericDataType CreateAndInitializeAutoCounterNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (AutoCounterNumericDataType)partition.ElementFactory.CreateElement(typeof(AutoCounterNumericDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for AutoCounterNumericDataType
	/// <summary>
	/// AutoCounterNumericDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.AutoCounterNumericDataType))]
	public sealed class AutoCounterNumericDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public AutoCounterNumericDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.AutoCounterNumericDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static AutoCounterNumericDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new AutoCounterNumericDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FloatingPointNumericDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.FloatingPointNumericDataType")]
	public  partial class FloatingPointNumericDataType : Neumont.Tools.ORM.ObjectModel.NumericDataType
	{
		#region FloatingPointNumericDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "2ead05d6-d343-43ea-8130-fc226751b1cf";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FloatingPointNumericDataType.MetaClassGuidString);
		#endregion

	}
	#region FloatingPointNumericDataType's Generated Constructor Code
	public  partial class FloatingPointNumericDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FloatingPointNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FloatingPointNumericDataType CreateFloatingPointNumericDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFloatingPointNumericDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FloatingPointNumericDataType CreateAndInitializeFloatingPointNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFloatingPointNumericDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FloatingPointNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FloatingPointNumericDataType CreateFloatingPointNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FloatingPointNumericDataType)partition.ElementFactory.CreateElement(typeof(FloatingPointNumericDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FloatingPointNumericDataType CreateAndInitializeFloatingPointNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FloatingPointNumericDataType)partition.ElementFactory.CreateElement(typeof(FloatingPointNumericDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FloatingPointNumericDataType
	/// <summary>
	/// FloatingPointNumericDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FloatingPointNumericDataType))]
	public sealed class FloatingPointNumericDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FloatingPointNumericDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FloatingPointNumericDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FloatingPointNumericDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new FloatingPointNumericDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.DecimalNumericDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.DecimalNumericDataType")]
	public  partial class DecimalNumericDataType : Neumont.Tools.ORM.ObjectModel.NumericDataType
	{
		#region DecimalNumericDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "8e7c90d2-8c42-4932-8275-ad4fed9227bb";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.DecimalNumericDataType.MetaClassGuidString);
		#endregion

	}
	#region DecimalNumericDataType's Generated Constructor Code
	public  partial class DecimalNumericDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DecimalNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DecimalNumericDataType CreateDecimalNumericDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateDecimalNumericDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DecimalNumericDataType CreateAndInitializeDecimalNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeDecimalNumericDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public DecimalNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DecimalNumericDataType CreateDecimalNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (DecimalNumericDataType)partition.ElementFactory.CreateElement(typeof(DecimalNumericDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DecimalNumericDataType CreateAndInitializeDecimalNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (DecimalNumericDataType)partition.ElementFactory.CreateElement(typeof(DecimalNumericDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for DecimalNumericDataType
	/// <summary>
	/// DecimalNumericDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.DecimalNumericDataType))]
	public sealed class DecimalNumericDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DecimalNumericDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.DecimalNumericDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static DecimalNumericDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new DecimalNumericDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.MoneyNumericDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.MoneyNumericDataType")]
	public  partial class MoneyNumericDataType : Neumont.Tools.ORM.ObjectModel.NumericDataType
	{
		#region MoneyNumericDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "67f4fed3-53a4-462f-a050-c3de3055620f";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.MoneyNumericDataType.MetaClassGuidString);
		#endregion

	}
	#region MoneyNumericDataType's Generated Constructor Code
	public  partial class MoneyNumericDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MoneyNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MoneyNumericDataType CreateMoneyNumericDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateMoneyNumericDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MoneyNumericDataType CreateAndInitializeMoneyNumericDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeMoneyNumericDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public MoneyNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MoneyNumericDataType CreateMoneyNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (MoneyNumericDataType)partition.ElementFactory.CreateElement(typeof(MoneyNumericDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MoneyNumericDataType CreateAndInitializeMoneyNumericDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (MoneyNumericDataType)partition.ElementFactory.CreateElement(typeof(MoneyNumericDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for MoneyNumericDataType
	/// <summary>
	/// MoneyNumericDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.MoneyNumericDataType))]
	public sealed class MoneyNumericDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MoneyNumericDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.MoneyNumericDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static MoneyNumericDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new MoneyNumericDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RawDataDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.RawDataDataType")]
	public abstract partial class RawDataDataType : Neumont.Tools.ORM.ObjectModel.DataType
	{
		#region RawDataDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "fdd0f0c5-33fe-408e-92ea-7fe3e17f80dd";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RawDataDataType.MetaClassGuidString);
		#endregion

	}
	#region RawDataDataType's Generated Constructor Code
	public abstract partial class RawDataDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected RawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FixedLengthRawDataDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.FixedLengthRawDataDataType")]
	public  partial class FixedLengthRawDataDataType : Neumont.Tools.ORM.ObjectModel.RawDataDataType
	{
		#region FixedLengthRawDataDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "44a46583-e878-4f70-90ac-ca08f37feba6";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FixedLengthRawDataDataType.MetaClassGuidString);
		#endregion

	}
	#region FixedLengthRawDataDataType's Generated Constructor Code
	public  partial class FixedLengthRawDataDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FixedLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FixedLengthRawDataDataType CreateFixedLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFixedLengthRawDataDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FixedLengthRawDataDataType CreateAndInitializeFixedLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFixedLengthRawDataDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FixedLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FixedLengthRawDataDataType CreateFixedLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FixedLengthRawDataDataType)partition.ElementFactory.CreateElement(typeof(FixedLengthRawDataDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FixedLengthRawDataDataType CreateAndInitializeFixedLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FixedLengthRawDataDataType)partition.ElementFactory.CreateElement(typeof(FixedLengthRawDataDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FixedLengthRawDataDataType
	/// <summary>
	/// FixedLengthRawDataDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FixedLengthRawDataDataType))]
	public sealed class FixedLengthRawDataDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FixedLengthRawDataDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FixedLengthRawDataDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FixedLengthRawDataDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new FixedLengthRawDataDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.VariableLengthRawDataDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.VariableLengthRawDataDataType")]
	public  partial class VariableLengthRawDataDataType : Neumont.Tools.ORM.ObjectModel.RawDataDataType
	{
		#region VariableLengthRawDataDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "ac252d1e-c491-495f-988c-3e9649d00720";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.VariableLengthRawDataDataType.MetaClassGuidString);
		#endregion

	}
	#region VariableLengthRawDataDataType's Generated Constructor Code
	public  partial class VariableLengthRawDataDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public VariableLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static VariableLengthRawDataDataType CreateVariableLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateVariableLengthRawDataDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static VariableLengthRawDataDataType CreateAndInitializeVariableLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeVariableLengthRawDataDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public VariableLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static VariableLengthRawDataDataType CreateVariableLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (VariableLengthRawDataDataType)partition.ElementFactory.CreateElement(typeof(VariableLengthRawDataDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static VariableLengthRawDataDataType CreateAndInitializeVariableLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (VariableLengthRawDataDataType)partition.ElementFactory.CreateElement(typeof(VariableLengthRawDataDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for VariableLengthRawDataDataType
	/// <summary>
	/// VariableLengthRawDataDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.VariableLengthRawDataDataType))]
	public sealed class VariableLengthRawDataDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public VariableLengthRawDataDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.VariableLengthRawDataDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static VariableLengthRawDataDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new VariableLengthRawDataDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.LargeLengthRawDataDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.LargeLengthRawDataDataType")]
	public  partial class LargeLengthRawDataDataType : Neumont.Tools.ORM.ObjectModel.RawDataDataType
	{
		#region LargeLengthRawDataDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "4133fda1-45bf-48c5-b3ce-4f4a9d891066";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.LargeLengthRawDataDataType.MetaClassGuidString);
		#endregion

	}
	#region LargeLengthRawDataDataType's Generated Constructor Code
	public  partial class LargeLengthRawDataDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public LargeLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LargeLengthRawDataDataType CreateLargeLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateLargeLengthRawDataDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LargeLengthRawDataDataType CreateAndInitializeLargeLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeLargeLengthRawDataDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public LargeLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LargeLengthRawDataDataType CreateLargeLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (LargeLengthRawDataDataType)partition.ElementFactory.CreateElement(typeof(LargeLengthRawDataDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LargeLengthRawDataDataType CreateAndInitializeLargeLengthRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (LargeLengthRawDataDataType)partition.ElementFactory.CreateElement(typeof(LargeLengthRawDataDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for LargeLengthRawDataDataType
	/// <summary>
	/// LargeLengthRawDataDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.LargeLengthRawDataDataType))]
	public sealed class LargeLengthRawDataDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public LargeLengthRawDataDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.LargeLengthRawDataDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static LargeLengthRawDataDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new LargeLengthRawDataDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.PictureRawDataDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.PictureRawDataDataType")]
	public  partial class PictureRawDataDataType : Neumont.Tools.ORM.ObjectModel.RawDataDataType
	{
		#region PictureRawDataDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "7e172f50-433b-4d89-acfa-5f1022c379a5";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.PictureRawDataDataType.MetaClassGuidString);
		#endregion

	}
	#region PictureRawDataDataType's Generated Constructor Code
	public  partial class PictureRawDataDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public PictureRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static PictureRawDataDataType CreatePictureRawDataDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreatePictureRawDataDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static PictureRawDataDataType CreateAndInitializePictureRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializePictureRawDataDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public PictureRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static PictureRawDataDataType CreatePictureRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (PictureRawDataDataType)partition.ElementFactory.CreateElement(typeof(PictureRawDataDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static PictureRawDataDataType CreateAndInitializePictureRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (PictureRawDataDataType)partition.ElementFactory.CreateElement(typeof(PictureRawDataDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for PictureRawDataDataType
	/// <summary>
	/// PictureRawDataDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.PictureRawDataDataType))]
	public sealed class PictureRawDataDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public PictureRawDataDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.PictureRawDataDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static PictureRawDataDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new PictureRawDataDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.OleObjectRawDataDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.OleObjectRawDataDataType")]
	public  partial class OleObjectRawDataDataType : Neumont.Tools.ORM.ObjectModel.RawDataDataType
	{
		#region OleObjectRawDataDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "560297d3-6e91-4090-8daa-54784f85990d";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.OleObjectRawDataDataType.MetaClassGuidString);
		#endregion

	}
	#region OleObjectRawDataDataType's Generated Constructor Code
	public  partial class OleObjectRawDataDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public OleObjectRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OleObjectRawDataDataType CreateOleObjectRawDataDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateOleObjectRawDataDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OleObjectRawDataDataType CreateAndInitializeOleObjectRawDataDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeOleObjectRawDataDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public OleObjectRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OleObjectRawDataDataType CreateOleObjectRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (OleObjectRawDataDataType)partition.ElementFactory.CreateElement(typeof(OleObjectRawDataDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static OleObjectRawDataDataType CreateAndInitializeOleObjectRawDataDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (OleObjectRawDataDataType)partition.ElementFactory.CreateElement(typeof(OleObjectRawDataDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for OleObjectRawDataDataType
	/// <summary>
	/// OleObjectRawDataDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.OleObjectRawDataDataType))]
	public sealed class OleObjectRawDataDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public OleObjectRawDataDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.OleObjectRawDataDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static OleObjectRawDataDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new OleObjectRawDataDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.TemporalDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.TemporalDataType")]
	public abstract partial class TemporalDataType : Neumont.Tools.ORM.ObjectModel.DataType
	{
		#region TemporalDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "10027217-5978-4286-bf21-80738dc9a877";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.TemporalDataType.MetaClassGuidString);
		#endregion

	}
	#region TemporalDataType's Generated Constructor Code
	public abstract partial class TemporalDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected TemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.AutoTimestampTemporalDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.AutoTimestampTemporalDataType")]
	public  partial class AutoTimestampTemporalDataType : Neumont.Tools.ORM.ObjectModel.TemporalDataType
	{
		#region AutoTimestampTemporalDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "d3c4e6b2-79cc-4f09-8080-62ce74090fd1";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.AutoTimestampTemporalDataType.MetaClassGuidString);
		#endregion

	}
	#region AutoTimestampTemporalDataType's Generated Constructor Code
	public  partial class AutoTimestampTemporalDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public AutoTimestampTemporalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static AutoTimestampTemporalDataType CreateAutoTimestampTemporalDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateAutoTimestampTemporalDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static AutoTimestampTemporalDataType CreateAndInitializeAutoTimestampTemporalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeAutoTimestampTemporalDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public AutoTimestampTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static AutoTimestampTemporalDataType CreateAutoTimestampTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (AutoTimestampTemporalDataType)partition.ElementFactory.CreateElement(typeof(AutoTimestampTemporalDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static AutoTimestampTemporalDataType CreateAndInitializeAutoTimestampTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (AutoTimestampTemporalDataType)partition.ElementFactory.CreateElement(typeof(AutoTimestampTemporalDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for AutoTimestampTemporalDataType
	/// <summary>
	/// AutoTimestampTemporalDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.AutoTimestampTemporalDataType))]
	public sealed class AutoTimestampTemporalDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public AutoTimestampTemporalDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.AutoTimestampTemporalDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static AutoTimestampTemporalDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new AutoTimestampTemporalDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.TimeTemporalDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.TimeTemporalDataType")]
	public  partial class TimeTemporalDataType : Neumont.Tools.ORM.ObjectModel.TemporalDataType
	{
		#region TimeTemporalDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "4677814b-958d-4176-a54e-8f70b7ca0d56";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.TimeTemporalDataType.MetaClassGuidString);
		#endregion

	}
	#region TimeTemporalDataType's Generated Constructor Code
	public  partial class TimeTemporalDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TimeTemporalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TimeTemporalDataType CreateTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateTimeTemporalDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TimeTemporalDataType CreateAndInitializeTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeTimeTemporalDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public TimeTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TimeTemporalDataType CreateTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (TimeTemporalDataType)partition.ElementFactory.CreateElement(typeof(TimeTemporalDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TimeTemporalDataType CreateAndInitializeTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (TimeTemporalDataType)partition.ElementFactory.CreateElement(typeof(TimeTemporalDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for TimeTemporalDataType
	/// <summary>
	/// TimeTemporalDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.TimeTemporalDataType))]
	public sealed class TimeTemporalDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TimeTemporalDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.TimeTemporalDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static TimeTemporalDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new TimeTemporalDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.DateTemporalDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.DateTemporalDataType")]
	public  partial class DateTemporalDataType : Neumont.Tools.ORM.ObjectModel.TemporalDataType
	{
		#region DateTemporalDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "905b8a13-7c5e-430f-8d7b-03e63356439b";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.DateTemporalDataType.MetaClassGuidString);
		#endregion

	}
	#region DateTemporalDataType's Generated Constructor Code
	public  partial class DateTemporalDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DateTemporalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DateTemporalDataType CreateDateTemporalDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateDateTemporalDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DateTemporalDataType CreateAndInitializeDateTemporalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeDateTemporalDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public DateTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DateTemporalDataType CreateDateTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (DateTemporalDataType)partition.ElementFactory.CreateElement(typeof(DateTemporalDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DateTemporalDataType CreateAndInitializeDateTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (DateTemporalDataType)partition.ElementFactory.CreateElement(typeof(DateTemporalDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for DateTemporalDataType
	/// <summary>
	/// DateTemporalDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.DateTemporalDataType))]
	public sealed class DateTemporalDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DateTemporalDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.DateTemporalDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static DateTemporalDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new DateTemporalDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.DateAndTimeTemporalDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.DateAndTimeTemporalDataType")]
	public  partial class DateAndTimeTemporalDataType : Neumont.Tools.ORM.ObjectModel.TemporalDataType
	{
		#region DateAndTimeTemporalDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "facd55e1-c5a2-4d3d-93d2-7b651c05e7a2";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.DateAndTimeTemporalDataType.MetaClassGuidString);
		#endregion

	}
	#region DateAndTimeTemporalDataType's Generated Constructor Code
	public  partial class DateAndTimeTemporalDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DateAndTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DateAndTimeTemporalDataType CreateDateAndTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateDateAndTimeTemporalDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DateAndTimeTemporalDataType CreateAndInitializeDateAndTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeDateAndTimeTemporalDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public DateAndTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DateAndTimeTemporalDataType CreateDateAndTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (DateAndTimeTemporalDataType)partition.ElementFactory.CreateElement(typeof(DateAndTimeTemporalDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static DateAndTimeTemporalDataType CreateAndInitializeDateAndTimeTemporalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (DateAndTimeTemporalDataType)partition.ElementFactory.CreateElement(typeof(DateAndTimeTemporalDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for DateAndTimeTemporalDataType
	/// <summary>
	/// DateAndTimeTemporalDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.DateAndTimeTemporalDataType))]
	public sealed class DateAndTimeTemporalDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DateAndTimeTemporalDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.DateAndTimeTemporalDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static DateAndTimeTemporalDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new DateAndTimeTemporalDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.LogicalDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.LogicalDataType")]
	public abstract partial class LogicalDataType : Neumont.Tools.ORM.ObjectModel.DataType
	{
		#region LogicalDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "85881c27-24d8-4a89-a81d-6031128ae967";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.LogicalDataType.MetaClassGuidString);
		#endregion

	}
	#region LogicalDataType's Generated Constructor Code
	public abstract partial class LogicalDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected LogicalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.TrueOrFalseLogicalDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.TrueOrFalseLogicalDataType")]
	public  partial class TrueOrFalseLogicalDataType : Neumont.Tools.ORM.ObjectModel.LogicalDataType
	{
		#region TrueOrFalseLogicalDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "a4c50357-f789-472c-a94e-93af109f1056";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.TrueOrFalseLogicalDataType.MetaClassGuidString);
		#endregion

	}
	#region TrueOrFalseLogicalDataType's Generated Constructor Code
	public  partial class TrueOrFalseLogicalDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TrueOrFalseLogicalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TrueOrFalseLogicalDataType CreateTrueOrFalseLogicalDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateTrueOrFalseLogicalDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TrueOrFalseLogicalDataType CreateAndInitializeTrueOrFalseLogicalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeTrueOrFalseLogicalDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public TrueOrFalseLogicalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TrueOrFalseLogicalDataType CreateTrueOrFalseLogicalDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (TrueOrFalseLogicalDataType)partition.ElementFactory.CreateElement(typeof(TrueOrFalseLogicalDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static TrueOrFalseLogicalDataType CreateAndInitializeTrueOrFalseLogicalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (TrueOrFalseLogicalDataType)partition.ElementFactory.CreateElement(typeof(TrueOrFalseLogicalDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for TrueOrFalseLogicalDataType
	/// <summary>
	/// TrueOrFalseLogicalDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.TrueOrFalseLogicalDataType))]
	public sealed class TrueOrFalseLogicalDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TrueOrFalseLogicalDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.TrueOrFalseLogicalDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static TrueOrFalseLogicalDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new TrueOrFalseLogicalDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.YesOrNoLogicalDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.YesOrNoLogicalDataType")]
	public  partial class YesOrNoLogicalDataType : Neumont.Tools.ORM.ObjectModel.LogicalDataType
	{
		#region YesOrNoLogicalDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "f6d6b7e4-c22b-47e1-8f30-2bcaee1d3c17";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.YesOrNoLogicalDataType.MetaClassGuidString);
		#endregion

	}
	#region YesOrNoLogicalDataType's Generated Constructor Code
	public  partial class YesOrNoLogicalDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public YesOrNoLogicalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static YesOrNoLogicalDataType CreateYesOrNoLogicalDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateYesOrNoLogicalDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static YesOrNoLogicalDataType CreateAndInitializeYesOrNoLogicalDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeYesOrNoLogicalDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public YesOrNoLogicalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static YesOrNoLogicalDataType CreateYesOrNoLogicalDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (YesOrNoLogicalDataType)partition.ElementFactory.CreateElement(typeof(YesOrNoLogicalDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static YesOrNoLogicalDataType CreateAndInitializeYesOrNoLogicalDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (YesOrNoLogicalDataType)partition.ElementFactory.CreateElement(typeof(YesOrNoLogicalDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for YesOrNoLogicalDataType
	/// <summary>
	/// YesOrNoLogicalDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.YesOrNoLogicalDataType))]
	public sealed class YesOrNoLogicalDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public YesOrNoLogicalDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.YesOrNoLogicalDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static YesOrNoLogicalDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new YesOrNoLogicalDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.OtherDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.OtherDataType")]
	public abstract partial class OtherDataType : Neumont.Tools.ORM.ObjectModel.DataType
	{
		#region OtherDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3efdcece-b2e0-45f0-aab1-ca085144b933";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.OtherDataType.MetaClassGuidString);
		#endregion

	}
	#region OtherDataType's Generated Constructor Code
	public abstract partial class OtherDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected OtherDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RowIdOtherDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.RowIdOtherDataType")]
	public  partial class RowIdOtherDataType : Neumont.Tools.ORM.ObjectModel.OtherDataType
	{
		#region RowIdOtherDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "ccdd5096-8948-45cc-835b-321af2c8b656";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RowIdOtherDataType.MetaClassGuidString);
		#endregion

	}
	#region RowIdOtherDataType's Generated Constructor Code
	public  partial class RowIdOtherDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RowIdOtherDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RowIdOtherDataType CreateRowIdOtherDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateRowIdOtherDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RowIdOtherDataType CreateAndInitializeRowIdOtherDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRowIdOtherDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RowIdOtherDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RowIdOtherDataType CreateRowIdOtherDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (RowIdOtherDataType)partition.ElementFactory.CreateElement(typeof(RowIdOtherDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RowIdOtherDataType CreateAndInitializeRowIdOtherDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RowIdOtherDataType)partition.ElementFactory.CreateElement(typeof(RowIdOtherDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RowIdOtherDataType
	/// <summary>
	/// RowIdOtherDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.RowIdOtherDataType))]
	public sealed class RowIdOtherDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RowIdOtherDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.RowIdOtherDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RowIdOtherDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new RowIdOtherDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectIdOtherDataType.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectIdOtherDataType")]
	public  partial class ObjectIdOtherDataType : Neumont.Tools.ORM.ObjectModel.OtherDataType
	{
		#region ObjectIdOtherDataType's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "2ce276c0-607d-43f3-ae1e-162be0c853ec";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectIdOtherDataType.MetaClassGuidString);
		#endregion

	}
	#region ObjectIdOtherDataType's Generated Constructor Code
	public  partial class ObjectIdOtherDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectIdOtherDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectIdOtherDataType CreateObjectIdOtherDataType(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateObjectIdOtherDataType(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectIdOtherDataType CreateAndInitializeObjectIdOtherDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectIdOtherDataType(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectIdOtherDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectIdOtherDataType CreateObjectIdOtherDataType(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ObjectIdOtherDataType)partition.ElementFactory.CreateElement(typeof(ObjectIdOtherDataType));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectIdOtherDataType CreateAndInitializeObjectIdOtherDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectIdOtherDataType)partition.ElementFactory.CreateElement(typeof(ObjectIdOtherDataType), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectIdOtherDataType
	/// <summary>
	/// ObjectIdOtherDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ObjectIdOtherDataType))]
	public sealed class ObjectIdOtherDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectIdOtherDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ObjectIdOtherDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectIdOtherDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new ObjectIdOtherDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Reading.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.Reading")]
	public  partial class Reading : Neumont.Tools.ORM.ObjectModel.ORMModelElement
	{
		#region Reading's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "cef616d5-3fe8-489e-bd60-3333921b675e";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Reading.MetaClassGuidString);
		#endregion

		#region Text's Generated  Field Code
		#region Text's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String TextMetaAttributeGuidString = "deb9d5ff-64f8-4887-b41a-8ea3689efa4d";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid TextMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Reading.TextMetaAttributeGuidString);
		#endregion

		#region Text's Generated Property Code

		private System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ReadingTextFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Reading.TextMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.Reading.Text")]
		public  System.String Text
		{
			get
			{
				return textPropertyStorage;
			}
		
			set
			{
				readingTextFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ReadingTextFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Reading.Text field
		/// </summary>
		private static ReadingTextFieldHandler	readingTextFieldHandler	= ReadingTextFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Reading.Text
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ReadingTextFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.Reading,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ReadingTextFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Reading.Text field handler
			/// </summary>
			/// <value>ReadingTextFieldHandler</value>
			public static ReadingTextFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.Reading.readingTextFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.Reading.readingTextFieldHandler;
					}
					else
					{
						// The static constructor in Reading will assign this value to
						// Neumont.Tools.ORM.ObjectModel.Reading.readingTextFieldHandler, so just instantiate one and return it
						return new ReadingTextFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Reading.Text field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.Reading.TextMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Reading</param>
			protected sealed override System.String GetValue(Neumont.Tools.ORM.ObjectModel.Reading element)
			{
				return element.textPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.Reading element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.textPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.textPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region IsPrimary's Generated  Field Code
		#region IsPrimary's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsPrimaryMetaAttributeGuidString = "fb40e877-7171-473d-88b5-bea06782e468";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsPrimaryMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Reading.IsPrimaryMetaAttributeGuidString);
		#endregion

		#region IsPrimary's Generated Property Code

		private System.Boolean isPrimaryPropertyStorage = false;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.ReadOnly(State=Microsoft.VisualStudio.Modeling.ReadOnlyAttributeValue.SometimesUIReadOnlyPreferFalse)]
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ReadingIsPrimaryFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Reading.IsPrimaryMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.Reading.IsPrimary")]
		public  System.Boolean IsPrimary
		{
			get
			{
				return isPrimaryPropertyStorage;
			}
		
			set
			{
				readingIsPrimaryFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ReadingIsPrimaryFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Reading.IsPrimary field
		/// </summary>
		private static ReadingIsPrimaryFieldHandler	readingIsPrimaryFieldHandler	= ReadingIsPrimaryFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Reading.IsPrimary
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ReadingIsPrimaryFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.Reading,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ReadingIsPrimaryFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Reading.IsPrimary field handler
			/// </summary>
			/// <value>ReadingIsPrimaryFieldHandler</value>
			public static ReadingIsPrimaryFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.Reading.readingIsPrimaryFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.Reading.readingIsPrimaryFieldHandler;
					}
					else
					{
						// The static constructor in Reading will assign this value to
						// Neumont.Tools.ORM.ObjectModel.Reading.readingIsPrimaryFieldHandler, so just instantiate one and return it
						return new ReadingIsPrimaryFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Reading.IsPrimary field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.Reading.IsPrimaryMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Reading</param>
			protected sealed override System.Boolean GetValue(Neumont.Tools.ORM.ObjectModel.Reading element)
			{
				return element.isPrimaryPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.Reading element, System.Boolean value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Boolean oldValue)
			{
				oldValue = element.isPrimaryPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.isPrimaryPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Language's Generated  Field Code
		#region Language's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String LanguageMetaAttributeGuidString = "28f89850-a91e-4b64-a917-43a97cfb192e";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid LanguageMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Reading.LanguageMetaAttributeGuidString);
		#endregion

		#region Language's Generated Property Code

		private System.String languagePropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ReadingLanguageFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Reading.LanguageMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.Reading.Language")]
		public  System.String Language
		{
			get
			{
				return languagePropertyStorage;
			}
		
			set
			{
				readingLanguageFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ReadingLanguageFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Reading.Language field
		/// </summary>
		private static ReadingLanguageFieldHandler	readingLanguageFieldHandler	= ReadingLanguageFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Reading.Language
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ReadingLanguageFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.Reading,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ReadingLanguageFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Reading.Language field handler
			/// </summary>
			/// <value>ReadingLanguageFieldHandler</value>
			public static ReadingLanguageFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.Reading.readingLanguageFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.Reading.readingLanguageFieldHandler;
					}
					else
					{
						// The static constructor in Reading will assign this value to
						// Neumont.Tools.ORM.ObjectModel.Reading.readingLanguageFieldHandler, so just instantiate one and return it
						return new ReadingLanguageFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Reading.Language field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.Reading.LanguageMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Reading</param>
			protected sealed override System.String GetValue(Neumont.Tools.ORM.ObjectModel.Reading element)
			{
				return element.languagePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.Reading element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.languagePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.languagePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region ReadingOrder's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ReadingOrder ReadingOrder
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ReadingOrder;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ReadingOrder counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ReadingOrder;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading), newRoles);
				}
			}
		}
		#endregion
		#region TooManyRolesError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesError TooManyRolesError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError), newRoles);
				}
			}
		}
		#endregion
		#region TooFewRolesError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesError TooFewRolesError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for Reading
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.Reading Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ReadingMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ReadingMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.Reading) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.Reading))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.Reading) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.Reading))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.Reading) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.Reading))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.Reading) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.Reading))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.Reading) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.Reading))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.Reading) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.Reading))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.Reading) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.Reading))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.Reading) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.Reading))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.Reading[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.Reading at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.Reading this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.Reading)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.Reading to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.Reading value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.Reading to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.Reading value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.Reading to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.Reading value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.Reading to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.Reading value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.Reading to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.Reading value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.Reading rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.Reading rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region Reading's Generated Constructor Code
	public  partial class Reading
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public Reading(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Reading CreateReading(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateReading(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Reading CreateAndInitializeReading(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReading(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public Reading(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Reading CreateReading(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (Reading)partition.ElementFactory.CreateElement(typeof(Reading));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Reading CreateAndInitializeReading(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (Reading)partition.ElementFactory.CreateElement(typeof(Reading), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for Reading
	/// <summary>
	/// Reading Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.Reading))]
	public sealed class ReadingElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.Reading( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReadingElementFactoryCreator Instance
		{
			get
			{
				return new ReadingElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReadingOrder.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ReadingOrder")]
	public  partial class ReadingOrder : Neumont.Tools.ORM.ObjectModel.ORMModelElement
	{
		#region ReadingOrder's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "624a498e-0659-4c34-ab74-7fe43b4c8fa1";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReadingOrder.MetaClassGuidString);
		#endregion

		#region ReadingText's Generated  Field Code
		#region ReadingText's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ReadingTextMetaAttributeGuidString = "b426931f-9232-4e42-b384-61c60d331aae";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ReadingTextMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReadingOrder.ReadingTextMetaAttributeGuidString);
		#endregion

		#region ReadingText's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Editor(typeof(Neumont.Tools.ORM.ObjectModel.Editors.ReadingTextEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ReadingOrderReadingTextFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReadingOrder.ReadingTextMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ReadingOrder.ReadingText")]
		public  System.String ReadingText
		{
			get
			{
				return readingOrderReadingTextFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				readingOrderReadingTextFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ReadingOrderReadingTextFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ReadingOrder.ReadingText field
		/// </summary>
		private static ReadingOrderReadingTextFieldHandler	readingOrderReadingTextFieldHandler	= ReadingOrderReadingTextFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ReadingOrder.ReadingText
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ReadingOrderReadingTextFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.ReadingOrder,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ReadingOrderReadingTextFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ReadingOrder.ReadingText field handler
			/// </summary>
			/// <value>ReadingOrderReadingTextFieldHandler</value>
			public static ReadingOrderReadingTextFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ReadingOrder.readingOrderReadingTextFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ReadingOrder.readingOrderReadingTextFieldHandler;
					}
					else
					{
						// The static constructor in ReadingOrder will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ReadingOrder.readingOrderReadingTextFieldHandler, so just instantiate one and return it
						return new ReadingOrderReadingTextFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ReadingOrder.ReadingText field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ReadingOrder.ReadingTextMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region ReadingCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ReadingMoveableCollection ReadingCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.ReadingMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuid); }
		}
		#endregion
		#region FactType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FactType FactType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.FactType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.FactType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.FactType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder), newRoles);
				}
			}
		}
		#endregion
		#region RoleCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.RoleBaseMoveableCollection RoleCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.RoleBaseMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.ReadingOrderMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.RoleCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region Collection Classes for ReadingOrder
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.ReadingOrder Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ReadingOrderMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ReadingOrderMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.ReadingOrder[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.ReadingOrder at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.ReadingOrder this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ReadingOrder)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ReadingOrder to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.ReadingOrder value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ReadingOrder to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.ReadingOrder value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ReadingOrder to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.ReadingOrder value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ReadingOrder to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.ReadingOrder value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ReadingOrder to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.ReadingOrder value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.ReadingOrder rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.ReadingOrder rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ReadingOrder's Generated Constructor Code
	public  partial class ReadingOrder
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrder CreateReadingOrder(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateReadingOrder(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrder CreateAndInitializeReadingOrder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReadingOrder(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrder CreateReadingOrder(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ReadingOrder)partition.ElementFactory.CreateElement(typeof(ReadingOrder));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrder CreateAndInitializeReadingOrder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ReadingOrder)partition.ElementFactory.CreateElement(typeof(ReadingOrder), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ReadingOrder
	/// <summary>
	/// ReadingOrder Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder))]
	public sealed class ReadingOrderElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrderElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ReadingOrder( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReadingOrderElementFactoryCreator Instance
		{
			get
			{
				return new ReadingOrderElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueRange.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.ValueRange")]
	public  partial class ValueRange : Neumont.Tools.ORM.ObjectModel.ORMModelElement
	{
		#region ValueRange's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "1d6eaad6-7c7f-4762-8e61-2755a063b2c2";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueRange.MetaClassGuidString);
		#endregion

		#region MinValue's Generated  Field Code
		#region MinValue's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MinValueMetaAttributeGuidString = "56a75fd4-b0e5-4744-afb6-00b4ae09b284";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MinValueMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueRange.MinValueMetaAttributeGuidString);
		#endregion

		#region MinValue's Generated Property Code

		private System.String minValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ValueRangeMinValueFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueRange.MinValueMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ValueRange.MinValue")]
		public  System.String MinValue
		{
			get
			{
				return minValuePropertyStorage;
			}
		
			set
			{
				valueRangeMinValueFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ValueRangeMinValueFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ValueRange.MinValue field
		/// </summary>
		private static ValueRangeMinValueFieldHandler	valueRangeMinValueFieldHandler	= ValueRangeMinValueFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ValueRange.MinValue
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ValueRangeMinValueFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.ValueRange,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ValueRangeMinValueFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ValueRange.MinValue field handler
			/// </summary>
			/// <value>ValueRangeMinValueFieldHandler</value>
			public static ValueRangeMinValueFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ValueRange.valueRangeMinValueFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ValueRange.valueRangeMinValueFieldHandler;
					}
					else
					{
						// The static constructor in ValueRange will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ValueRange.valueRangeMinValueFieldHandler, so just instantiate one and return it
						return new ValueRangeMinValueFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ValueRange.MinValue field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ValueRange.MinValueMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ValueRange</param>
			protected sealed override System.String GetValue(Neumont.Tools.ORM.ObjectModel.ValueRange element)
			{
				return element.minValuePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.ValueRange element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.minValuePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.minValuePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region MaxValue's Generated  Field Code
		#region MaxValue's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MaxValueMetaAttributeGuidString = "cf33a7ff-00d6-4c2c-9eac-30969ea6da0f";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MaxValueMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueRange.MaxValueMetaAttributeGuidString);
		#endregion

		#region MaxValue's Generated Property Code

		private System.String maxValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ValueRangeMaxValueFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueRange.MaxValueMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ValueRange.MaxValue")]
		public  System.String MaxValue
		{
			get
			{
				return maxValuePropertyStorage;
			}
		
			set
			{
				valueRangeMaxValueFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ValueRangeMaxValueFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ValueRange.MaxValue field
		/// </summary>
		private static ValueRangeMaxValueFieldHandler	valueRangeMaxValueFieldHandler	= ValueRangeMaxValueFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ValueRange.MaxValue
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ValueRangeMaxValueFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.ValueRange,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ValueRangeMaxValueFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ValueRange.MaxValue field handler
			/// </summary>
			/// <value>ValueRangeMaxValueFieldHandler</value>
			public static ValueRangeMaxValueFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ValueRange.valueRangeMaxValueFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ValueRange.valueRangeMaxValueFieldHandler;
					}
					else
					{
						// The static constructor in ValueRange will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ValueRange.valueRangeMaxValueFieldHandler, so just instantiate one and return it
						return new ValueRangeMaxValueFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ValueRange.MaxValue field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ValueRange.MaxValueMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ValueRange</param>
			protected sealed override System.String GetValue(Neumont.Tools.ORM.ObjectModel.ValueRange element)
			{
				return element.maxValuePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.ValueRange element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.maxValuePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.maxValuePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Text's Generated  Field Code
		#region Text's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String TextMetaAttributeGuidString = "acfc1745-a76b-4955-9157-71ba6e4f5446";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid TextMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueRange.TextMetaAttributeGuidString);
		#endregion

		#region Text's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ValueRangeTextFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueRange.TextMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ValueRange.Text")]
		public  System.String Text
		{
			get
			{
				return valueRangeTextFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				valueRangeTextFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ValueRangeTextFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ValueRange.Text field
		/// </summary>
		private static ValueRangeTextFieldHandler	valueRangeTextFieldHandler	= ValueRangeTextFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ValueRange.Text
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ValueRangeTextFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.ValueRange,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ValueRangeTextFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ValueRange.Text field handler
			/// </summary>
			/// <value>ValueRangeTextFieldHandler</value>
			public static ValueRangeTextFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ValueRange.valueRangeTextFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ValueRange.valueRangeTextFieldHandler;
					}
					else
					{
						// The static constructor in ValueRange will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ValueRange.valueRangeTextFieldHandler, so just instantiate one and return it
						return new ValueRangeTextFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ValueRange.Text field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ValueRange.TextMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region MinInclusion's Generated  Field Code
		#region MinInclusion's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MinInclusionMetaAttributeGuidString = "25c82411-21b3-4d03-9511-736479d5d487";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MinInclusionMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueRange.MinInclusionMetaAttributeGuidString);
		#endregion

		#region MinInclusion's Generated Property Code

		private Neumont.Tools.ORM.ObjectModel.RangeInclusion minInclusionPropertyStorage = Neumont.Tools.ORM.ObjectModel.RangeInclusion.NotSet;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(Neumont.Tools.ORM.ObjectModel.RangeInclusion),DefaultEnumerationValueName="NotSet")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ValueRangeMinInclusionFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueRange.MinInclusionMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ValueRange.MinInclusion")]
		public  Neumont.Tools.ORM.ObjectModel.RangeInclusion MinInclusion
		{
			get
			{
				return minInclusionPropertyStorage;
			}
		
			set
			{
				valueRangeMinInclusionFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ValueRangeMinInclusionFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ValueRange.MinInclusion field
		/// </summary>
		private static ValueRangeMinInclusionFieldHandler	valueRangeMinInclusionFieldHandler	= ValueRangeMinInclusionFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ValueRange.MinInclusion
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ValueRangeMinInclusionFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.ValueRange,Neumont.Tools.ORM.ObjectModel.RangeInclusion>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ValueRangeMinInclusionFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ValueRange.MinInclusion field handler
			/// </summary>
			/// <value>ValueRangeMinInclusionFieldHandler</value>
			public static ValueRangeMinInclusionFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ValueRange.valueRangeMinInclusionFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ValueRange.valueRangeMinInclusionFieldHandler;
					}
					else
					{
						// The static constructor in ValueRange will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ValueRange.valueRangeMinInclusionFieldHandler, so just instantiate one and return it
						return new ValueRangeMinInclusionFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ValueRange.MinInclusion field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ValueRange.MinInclusionMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ValueRange</param>
			protected sealed override Neumont.Tools.ORM.ObjectModel.RangeInclusion GetValue(Neumont.Tools.ORM.ObjectModel.ValueRange element)
			{
				return element.minInclusionPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.ValueRange element, Neumont.Tools.ORM.ObjectModel.RangeInclusion value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref Neumont.Tools.ORM.ObjectModel.RangeInclusion oldValue)
			{
				oldValue = element.minInclusionPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.minInclusionPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region MaxInclusion's Generated  Field Code
		#region MaxInclusion's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MaxInclusionMetaAttributeGuidString = "ac948ffb-8da6-4aff-ad60-40472c3cc868";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MaxInclusionMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueRange.MaxInclusionMetaAttributeGuidString);
		#endregion

		#region MaxInclusion's Generated Property Code

		private Neumont.Tools.ORM.ObjectModel.RangeInclusion maxInclusionPropertyStorage = Neumont.Tools.ORM.ObjectModel.RangeInclusion.NotSet;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(Neumont.Tools.ORM.ObjectModel.RangeInclusion),DefaultEnumerationValueName="NotSet")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ValueRangeMaxInclusionFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueRange.MaxInclusionMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ValueRange.MaxInclusion")]
		public  Neumont.Tools.ORM.ObjectModel.RangeInclusion MaxInclusion
		{
			get
			{
				return maxInclusionPropertyStorage;
			}
		
			set
			{
				valueRangeMaxInclusionFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ValueRangeMaxInclusionFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ValueRange.MaxInclusion field
		/// </summary>
		private static ValueRangeMaxInclusionFieldHandler	valueRangeMaxInclusionFieldHandler	= ValueRangeMaxInclusionFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ValueRange.MaxInclusion
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ValueRangeMaxInclusionFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.ValueRange,Neumont.Tools.ORM.ObjectModel.RangeInclusion>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ValueRangeMaxInclusionFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ValueRange.MaxInclusion field handler
			/// </summary>
			/// <value>ValueRangeMaxInclusionFieldHandler</value>
			public static ValueRangeMaxInclusionFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ValueRange.valueRangeMaxInclusionFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ValueRange.valueRangeMaxInclusionFieldHandler;
					}
					else
					{
						// The static constructor in ValueRange will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ValueRange.valueRangeMaxInclusionFieldHandler, so just instantiate one and return it
						return new ValueRangeMaxInclusionFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ValueRange.MaxInclusion field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ValueRange.MaxInclusionMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ValueRange</param>
			protected sealed override Neumont.Tools.ORM.ObjectModel.RangeInclusion GetValue(Neumont.Tools.ORM.ObjectModel.ValueRange element)
			{
				return element.maxInclusionPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.ValueRange element, Neumont.Tools.ORM.ObjectModel.RangeInclusion value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref Neumont.Tools.ORM.ObjectModel.RangeInclusion oldValue)
			{
				oldValue = element.maxInclusionPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.maxInclusionPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region ValueConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ValueConstraint ValueConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueRangeCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ValueConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueRangeCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ValueConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ValueConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueRangeCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange), newRoles);
				}
			}
		}
		#endregion
		#region MaxValueMismatchError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.MaxValueMismatchError MaxValueMismatchError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.MaxValueMismatchError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.MaxValueMismatchError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.MaxValueMismatchError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError), newRoles);
				}
			}
		}
		#endregion
		#region MinValueMismatchError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.MinValueMismatchError MinValueMismatchError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.MinValueMismatchError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.MinValueMismatchError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.MinValueMismatchError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for ValueRange
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.ValueRange Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ValueRangeMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ValueRangeMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ValueRange) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ValueRange))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ValueRange) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ValueRange))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ValueRange) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ValueRange))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ValueRange) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ValueRange))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ValueRange) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ValueRange))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ValueRange) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ValueRange))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ValueRange) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ValueRange))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ValueRange) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ValueRange))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.ValueRange[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.ValueRange at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.ValueRange this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ValueRange)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ValueRange to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.ValueRange value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ValueRange to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.ValueRange value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ValueRange to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.ValueRange value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ValueRange to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.ValueRange value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ValueRange to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.ValueRange value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.ValueRange rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.ValueRange rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ValueRange's Generated Constructor Code
	public  partial class ValueRange
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRange(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRange CreateValueRange(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateValueRange(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRange CreateAndInitializeValueRange(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueRange(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRange(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRange CreateValueRange(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ValueRange)partition.ElementFactory.CreateElement(typeof(ValueRange));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRange CreateAndInitializeValueRange(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueRange)partition.ElementFactory.CreateElement(typeof(ValueRange), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueRange
	/// <summary>
	/// ValueRange Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ValueRange))]
	public sealed class ValueRangeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRangeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ValueRange( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueRangeElementFactoryCreator Instance
		{
			get
			{
				return new ValueRangeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Note.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.Note")]
	public  partial class Note : Neumont.Tools.ORM.ObjectModel.ORMModelElement
	{
		#region Note's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "87e59167-ed64-4b0c-9d96-a3fa9a44a8de";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Note.MetaClassGuidString);
		#endregion

		#region Text's Generated  Field Code
		#region Text's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String TextMetaAttributeGuidString = "610ac093-f914-4e67-a753-774ff69b4e3f";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid TextMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Note.TextMetaAttributeGuidString);
		#endregion

		#region Text's Generated Property Code

		private System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(NoteTextFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Note.TextMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.Note.Text")]
		public  System.String Text
		{
			get
			{
				return textPropertyStorage;
			}
		
			set
			{
				noteTextFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region NoteTextFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Note.Text field
		/// </summary>
		private static NoteTextFieldHandler	noteTextFieldHandler	= NoteTextFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Note.Text
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class NoteTextFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.Note,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private NoteTextFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Note.Text field handler
			/// </summary>
			/// <value>NoteTextFieldHandler</value>
			public static NoteTextFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.Note.noteTextFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.Note.noteTextFieldHandler;
					}
					else
					{
						// The static constructor in Note will assign this value to
						// Neumont.Tools.ORM.ObjectModel.Note.noteTextFieldHandler, so just instantiate one and return it
						return new NoteTextFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Note.Text field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.Note.TextMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Note</param>
			protected sealed override System.String GetValue(Neumont.Tools.ORM.ObjectModel.Note element)
			{
				return element.textPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.Note element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.textPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.textPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region FactType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FactType FactType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.NoteMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.FactType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.NoteMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.FactType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.FactType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.NoteMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote), newRoles);
				}
			}
		}
		#endregion
		#region ObjectType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ObjectType ObjectType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.NoteMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ObjectType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.NoteMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ObjectType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ObjectType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.NoteMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote), newRoles);
				}
			}
		}
		#endregion
	}
	#region Note's Generated Constructor Code
	public  partial class Note
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public Note(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Note CreateNote(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateNote(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Note CreateAndInitializeNote(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeNote(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public Note(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Note CreateNote(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (Note)partition.ElementFactory.CreateElement(typeof(Note));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Note CreateAndInitializeNote(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (Note)partition.ElementFactory.CreateElement(typeof(Note), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for Note
	/// <summary>
	/// Note Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.Note))]
	public sealed class NoteElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public NoteElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.Note( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static NoteElementFactoryCreator Instance
		{
			get
			{
				return new NoteElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RoleBase.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.RoleBase")]
	public abstract partial class RoleBase : Neumont.Tools.ORM.ObjectModel.ORMModelElement
	{
		#region RoleBase's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "17d21f82-c90d-4508-bbce-b0e6a0dfc4f0";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RoleBase.MetaClassGuidString);
		#endregion

		#region FactType's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FactType FactType
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.FactType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.FactType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.FactType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasRole), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for RoleBase
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.RoleBase Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class RoleBaseMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public RoleBaseMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.RoleBase) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.RoleBase))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.RoleBase) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.RoleBase))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.RoleBase) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.RoleBase))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.RoleBase) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.RoleBase))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.RoleBase) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.RoleBase))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.RoleBase) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.RoleBase))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.RoleBase) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.RoleBase))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.RoleBase) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.RoleBase))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.RoleBase[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.RoleBase at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.RoleBase this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.RoleBase)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.RoleBase to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.RoleBase value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.RoleBase to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.RoleBase value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.RoleBase to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.RoleBase value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.RoleBase to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.RoleBase value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.RoleBase to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.RoleBase value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.RoleBase rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.RoleBase rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region RoleBase's Generated Constructor Code
	public abstract partial class RoleBase
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected RoleBase(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Role.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.Role")]
	public  partial class Role : Neumont.Tools.ORM.ObjectModel.RoleBase
	{
		#region Role's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "393d854f-34c5-4dc5-86c6-56816581b957";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Role.MetaClassGuidString);
		#endregion

		#region RolePlayerDisplay's Generated  Field Code
		#region RolePlayerDisplay's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String RolePlayerDisplayMetaAttributeGuidString = "b892ba33-3d6d-41e0-98a1-54ef51a7ed57";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid RolePlayerDisplayMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Role.RolePlayerDisplayMetaAttributeGuidString);
		#endregion

		#region RolePlayerDisplay's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Editor(typeof(Neumont.Tools.ORM.ObjectModel.Editors.RolePlayerPicker), typeof(System.Drawing.Design.UITypeEditor))]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, AllowNulls=true, FieldHandlerType=typeof(RoleRolePlayerDisplayFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Role.RolePlayerDisplayMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.Role.RolePlayerDisplay")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectType RolePlayerDisplay
		{
			get
			{
				return roleRolePlayerDisplayFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				roleRolePlayerDisplayFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RoleRolePlayerDisplayFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Role.RolePlayerDisplay field
		/// </summary>
		private static RoleRolePlayerDisplayFieldHandler	roleRolePlayerDisplayFieldHandler	= RoleRolePlayerDisplayFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Role.RolePlayerDisplay
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RoleRolePlayerDisplayFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.Role,Neumont.Tools.ORM.ObjectModel.ObjectType>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RoleRolePlayerDisplayFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Role.RolePlayerDisplay field handler
			/// </summary>
			/// <value>RoleRolePlayerDisplayFieldHandler</value>
			public static RoleRolePlayerDisplayFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.Role.roleRolePlayerDisplayFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.Role.roleRolePlayerDisplayFieldHandler;
					}
					else
					{
						// The static constructor in Role will assign this value to
						// Neumont.Tools.ORM.ObjectModel.Role.roleRolePlayerDisplayFieldHandler, so just instantiate one and return it
						return new RoleRolePlayerDisplayFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Role.RolePlayerDisplay field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.Role.RolePlayerDisplayMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region IsMandatory's Generated  Field Code
		#region IsMandatory's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsMandatoryMetaAttributeGuidString = "d2d267cb-547f-441e-94ab-730d1138672c";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsMandatoryMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Role.IsMandatoryMetaAttributeGuidString);
		#endregion

		#region IsMandatory's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(RoleIsMandatoryFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Role.IsMandatoryMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.Role.IsMandatory")]
		public  System.Boolean IsMandatory
		{
			get
			{
				return roleIsMandatoryFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				roleIsMandatoryFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RoleIsMandatoryFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Role.IsMandatory field
		/// </summary>
		private static RoleIsMandatoryFieldHandler	roleIsMandatoryFieldHandler	= RoleIsMandatoryFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Role.IsMandatory
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RoleIsMandatoryFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.Role,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RoleIsMandatoryFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Role.IsMandatory field handler
			/// </summary>
			/// <value>RoleIsMandatoryFieldHandler</value>
			public static RoleIsMandatoryFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.Role.roleIsMandatoryFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.Role.roleIsMandatoryFieldHandler;
					}
					else
					{
						// The static constructor in Role will assign this value to
						// Neumont.Tools.ORM.ObjectModel.Role.roleIsMandatoryFieldHandler, so just instantiate one and return it
						return new RoleIsMandatoryFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Role.IsMandatory field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.Role.IsMandatoryMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region Multiplicity's Generated  Field Code
		#region Multiplicity's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MultiplicityMetaAttributeGuidString = "91159767-f6ce-4591-aeb2-ff0ab25f1b44";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MultiplicityMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Role.MultiplicityMetaAttributeGuidString);
		#endregion

		#region Multiplicity's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.MergableProperty(false)]
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(Neumont.Tools.ORM.ObjectModel.RoleMultiplicity),DefaultEnumerationValueName="Unspecified")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(RoleMultiplicityFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Role.MultiplicityMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.Role.Multiplicity")]
		public  Neumont.Tools.ORM.ObjectModel.RoleMultiplicity Multiplicity
		{
			get
			{
				return roleMultiplicityFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				roleMultiplicityFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RoleMultiplicityFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Role.Multiplicity field
		/// </summary>
		private static RoleMultiplicityFieldHandler	roleMultiplicityFieldHandler	= RoleMultiplicityFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Role.Multiplicity
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RoleMultiplicityFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.Role,Neumont.Tools.ORM.ObjectModel.RoleMultiplicity>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RoleMultiplicityFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Role.Multiplicity field handler
			/// </summary>
			/// <value>RoleMultiplicityFieldHandler</value>
			public static RoleMultiplicityFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.Role.roleMultiplicityFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.Role.roleMultiplicityFieldHandler;
					}
					else
					{
						// The static constructor in Role will assign this value to
						// Neumont.Tools.ORM.ObjectModel.Role.roleMultiplicityFieldHandler, so just instantiate one and return it
						return new RoleMultiplicityFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Role.Multiplicity field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.Role.MultiplicityMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region ValueRangeText's Generated  Field Code
		#region ValueRangeText's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ValueRangeTextMetaAttributeGuidString = "cd66def6-4feb-4791-917d-e71ba634b2cd";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ValueRangeTextMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Role.ValueRangeTextMetaAttributeGuidString);
		#endregion

		#region ValueRangeText's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.ReadOnly(State=Microsoft.VisualStudio.Modeling.ReadOnlyAttributeValue.SometimesUIReadOnlyPreferTrue)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(RoleValueRangeTextFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Role.ValueRangeTextMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.Role.ValueRangeText")]
		public  System.String ValueRangeText
		{
			get
			{
				return roleValueRangeTextFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				roleValueRangeTextFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RoleValueRangeTextFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Role.ValueRangeText field
		/// </summary>
		private static RoleValueRangeTextFieldHandler	roleValueRangeTextFieldHandler	= RoleValueRangeTextFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Role.ValueRangeText
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RoleValueRangeTextFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.Role,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RoleValueRangeTextFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Role.ValueRangeText field handler
			/// </summary>
			/// <value>RoleValueRangeTextFieldHandler</value>
			public static RoleValueRangeTextFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.Role.roleValueRangeTextFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.Role.roleValueRangeTextFieldHandler;
					}
					else
					{
						// The static constructor in Role will assign this value to
						// Neumont.Tools.ORM.ObjectModel.Role.roleValueRangeTextFieldHandler, so just instantiate one and return it
						return new RoleValueRangeTextFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Role.ValueRangeText field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.Role.ValueRangeTextMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region MandatoryConstraintName's Generated  Field Code
		#region MandatoryConstraintName's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MandatoryConstraintNameMetaAttributeGuidString = "67caac51-2528-40b8-b215-bd3f2a443e48";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MandatoryConstraintNameMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Role.MandatoryConstraintNameMetaAttributeGuidString);
		#endregion

		#region MandatoryConstraintName's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(RoleMandatoryConstraintNameFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Role.MandatoryConstraintNameMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.Role.MandatoryConstraintName")]
		public  System.String MandatoryConstraintName
		{
			get
			{
				return roleMandatoryConstraintNameFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				roleMandatoryConstraintNameFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RoleMandatoryConstraintNameFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Role.MandatoryConstraintName field
		/// </summary>
		private static RoleMandatoryConstraintNameFieldHandler	roleMandatoryConstraintNameFieldHandler	= RoleMandatoryConstraintNameFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Role.MandatoryConstraintName
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RoleMandatoryConstraintNameFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.Role,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RoleMandatoryConstraintNameFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Role.MandatoryConstraintName field handler
			/// </summary>
			/// <value>RoleMandatoryConstraintNameFieldHandler</value>
			public static RoleMandatoryConstraintNameFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.Role.roleMandatoryConstraintNameFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.Role.roleMandatoryConstraintNameFieldHandler;
					}
					else
					{
						// The static constructor in Role will assign this value to
						// Neumont.Tools.ORM.ObjectModel.Role.roleMandatoryConstraintNameFieldHandler, so just instantiate one and return it
						return new RoleMandatoryConstraintNameFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Role.MandatoryConstraintName field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.Role.MandatoryConstraintNameMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region MandatoryConstraintModality's Generated  Field Code
		#region MandatoryConstraintModality's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MandatoryConstraintModalityMetaAttributeGuidString = "0218851c-9d99-480b-80fa-b69c6b6cb045";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MandatoryConstraintModalityMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Role.MandatoryConstraintModalityMetaAttributeGuidString);
		#endregion

		#region MandatoryConstraintModality's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(Neumont.Tools.ORM.ObjectModel.ConstraintModality),DefaultEnumerationValueName="")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(RoleMandatoryConstraintModalityFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Role.MandatoryConstraintModalityMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.Role.MandatoryConstraintModality")]
		public  Neumont.Tools.ORM.ObjectModel.ConstraintModality MandatoryConstraintModality
		{
			get
			{
				return roleMandatoryConstraintModalityFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				roleMandatoryConstraintModalityFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RoleMandatoryConstraintModalityFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Role.MandatoryConstraintModality field
		/// </summary>
		private static RoleMandatoryConstraintModalityFieldHandler	roleMandatoryConstraintModalityFieldHandler	= RoleMandatoryConstraintModalityFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Role.MandatoryConstraintModality
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RoleMandatoryConstraintModalityFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ObjectModel.Role,Neumont.Tools.ORM.ObjectModel.ConstraintModality>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RoleMandatoryConstraintModalityFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Role.MandatoryConstraintModality field handler
			/// </summary>
			/// <value>RoleMandatoryConstraintModalityFieldHandler</value>
			public static RoleMandatoryConstraintModalityFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.Role.roleMandatoryConstraintModalityFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.Role.roleMandatoryConstraintModalityFieldHandler;
					}
					else
					{
						// The static constructor in Role will assign this value to
						// Neumont.Tools.ORM.ObjectModel.Role.roleMandatoryConstraintModalityFieldHandler, so just instantiate one and return it
						return new RoleMandatoryConstraintModalityFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Role.MandatoryConstraintModality field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.Role.MandatoryConstraintModalityMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region Name's Generated  Field Code
		#region Name's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String NameMetaAttributeGuidString = "1b677404-c9d0-40ea-b6d4-88d9fb32139d";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid NameMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Role.NameMetaAttributeGuidString);
		#endregion

		#region Name's Generated Property Code

		private System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(RoleNameFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Role.NameMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.Role.Name")]
		public  System.String Name
		{
			get
			{
				return namePropertyStorage;
			}
		
			set
			{
				roleNameFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RoleNameFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Role.Name field
		/// </summary>
		private static RoleNameFieldHandler	roleNameFieldHandler	= RoleNameFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Role.Name
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RoleNameFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.Role,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RoleNameFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Role.Name field handler
			/// </summary>
			/// <value>RoleNameFieldHandler</value>
			public static RoleNameFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.Role.roleNameFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.Role.roleNameFieldHandler;
					}
					else
					{
						// The static constructor in Role will assign this value to
						// Neumont.Tools.ORM.ObjectModel.Role.roleNameFieldHandler, so just instantiate one and return it
						return new RoleNameFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Role.Name field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.Role.NameMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Role</param>
			protected sealed override System.String GetValue(Neumont.Tools.ORM.ObjectModel.Role element)
			{
				return element.namePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.Role element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.namePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.namePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region RolePlayer's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ObjectType RolePlayer
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayerMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.ObjectType;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayerMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.ObjectType counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.ObjectType;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayerMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole), newRoles);
				}
			}
		}
		#endregion
		#region ConstraintRoleSequenceCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceMoveableCollection ConstraintRoleSequenceCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceCollectionMetaRoleGuid); }
		}
		#endregion
		#region ValueConstraint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.RoleValueConstraint ValueConstraint
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.RoleMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraintMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.RoleValueConstraint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.RoleMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraintMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.RoleValueConstraint counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.RoleValueConstraint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraintMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.RoleMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint), newRoles);
				}
			}
		}
		#endregion
		#region RolePlayerRequiredError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredError RolePlayerRequiredError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError), newRoles);
				}
			}
		}
		#endregion
		#region Proxy's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.RoleProxy Proxy
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.TargetRoleMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.RoleProxy;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.TargetRoleMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.RoleProxy counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.RoleProxy;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.TargetRoleMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for Role
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.Role Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class RoleMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public RoleMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.Role) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.Role))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.Role) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.Role))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.Role) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.Role))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.Role) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.Role))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.Role) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.Role))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.Role) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.Role))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.Role) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.Role))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.Role) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.Role))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.Role[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.Role at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.Role this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.Role)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.Role to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.Role value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.Role to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.Role value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.Role to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.Role value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.Role to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.Role value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.Role to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.Role value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.Role rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.Role rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region Role's Generated Constructor Code
	public  partial class Role
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public Role(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Role CreateRole(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateRole(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Role CreateAndInitializeRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRole(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public Role(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Role CreateRole(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (Role)partition.ElementFactory.CreateElement(typeof(Role));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Role CreateAndInitializeRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (Role)partition.ElementFactory.CreateElement(typeof(Role), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for Role
	/// <summary>
	/// Role Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.Role))]
	public sealed class RoleElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.Role( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RoleElementFactoryCreator Instance
		{
			get
			{
				return new RoleElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SubtypeMetaRole.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.SubtypeMetaRole")]
	public  partial class SubtypeMetaRole : Neumont.Tools.ORM.ObjectModel.Role
	{
		#region SubtypeMetaRole's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "d8a4599b-4477-4f41-8eed-1c67f4c02d93";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SubtypeMetaRole.MetaClassGuidString);
		#endregion

	}
	#region SubtypeMetaRole's Generated Constructor Code
	public  partial class SubtypeMetaRole
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubtypeMetaRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubtypeMetaRole CreateSubtypeMetaRole(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateSubtypeMetaRole(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubtypeMetaRole CreateAndInitializeSubtypeMetaRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSubtypeMetaRole(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SubtypeMetaRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubtypeMetaRole CreateSubtypeMetaRole(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (SubtypeMetaRole)partition.ElementFactory.CreateElement(typeof(SubtypeMetaRole));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubtypeMetaRole CreateAndInitializeSubtypeMetaRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SubtypeMetaRole)partition.ElementFactory.CreateElement(typeof(SubtypeMetaRole), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SubtypeMetaRole
	/// <summary>
	/// SubtypeMetaRole Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.SubtypeMetaRole))]
	public sealed class SubtypeMetaRoleElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubtypeMetaRoleElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.SubtypeMetaRole( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SubtypeMetaRoleElementFactoryCreator Instance
		{
			get
			{
				return new SubtypeMetaRoleElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SupertypeMetaRole.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.SupertypeMetaRole")]
	public  partial class SupertypeMetaRole : Neumont.Tools.ORM.ObjectModel.Role
	{
		#region SupertypeMetaRole's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "a1ee563a-1bd4-47e0-9aab-3d82083e4202";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SupertypeMetaRole.MetaClassGuidString);
		#endregion

	}
	#region SupertypeMetaRole's Generated Constructor Code
	public  partial class SupertypeMetaRole
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SupertypeMetaRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SupertypeMetaRole CreateSupertypeMetaRole(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateSupertypeMetaRole(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SupertypeMetaRole CreateAndInitializeSupertypeMetaRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSupertypeMetaRole(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SupertypeMetaRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SupertypeMetaRole CreateSupertypeMetaRole(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (SupertypeMetaRole)partition.ElementFactory.CreateElement(typeof(SupertypeMetaRole));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SupertypeMetaRole CreateAndInitializeSupertypeMetaRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SupertypeMetaRole)partition.ElementFactory.CreateElement(typeof(SupertypeMetaRole), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SupertypeMetaRole
	/// <summary>
	/// SupertypeMetaRole Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.SupertypeMetaRole))]
	public sealed class SupertypeMetaRoleElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SupertypeMetaRoleElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.SupertypeMetaRole( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SupertypeMetaRoleElementFactoryCreator Instance
		{
			get
			{
				return new SupertypeMetaRoleElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RoleProxy.MetaClassGuidString, "Neumont.Tools.ORM.ObjectModel.RoleProxy")]
	public  partial class RoleProxy : Neumont.Tools.ORM.ObjectModel.RoleBase
	{
		#region RoleProxy's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "dc1a038c-e94a-4f61-bab4-aff958cda38e";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RoleProxy.MetaClassGuidString);
		#endregion

		#region TargetRole's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.Role TargetRole
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.TargetRoleMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.Role;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.TargetRoleMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.Role counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.Role;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.TargetRoleMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole), newRoles);
				}
			}
		}
		#endregion
	}
	#region RoleProxy's Generated Constructor Code
	public  partial class RoleProxy
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleProxy(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleProxy CreateRoleProxy(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateRoleProxy(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleProxy CreateAndInitializeRoleProxy(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRoleProxy(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleProxy(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleProxy CreateRoleProxy(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (RoleProxy)partition.ElementFactory.CreateElement(typeof(RoleProxy));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleProxy CreateAndInitializeRoleProxy(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RoleProxy)partition.ElementFactory.CreateElement(typeof(RoleProxy), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RoleProxy
	/// <summary>
	/// RoleProxy Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.RoleProxy))]
	public sealed class RoleProxyElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleProxyElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.RoleProxy( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RoleProxyElementFactoryCreator Instance
		{
			get
			{
				return new RoleProxyElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMElementLink.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ORMElementLink")]
	public abstract partial class ORMElementLink : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ORMElementLink's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "718adac4-a9e2-454d-a700-1c34b6d3bcbf";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMElementLink.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ORMElementLink.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ORMElementLink.MetaClassGuid;
		#endregion

	}
	#region ORMElementLink's Generated Constructor Code
	public abstract partial class ORMElementLink
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ORMElementLink(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType")]
	public  partial class ValueTypeHasDataType : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ValueTypeHasDataType's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "eaf3a24b-8adc-4836-a901-6eaa560946d1";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ValueTypeHasDataType.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ValueTypeHasDataType.MetaClassGuid;
		#endregion

		#region Scale's Generated  Field Code
		#region Scale's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ScaleMetaAttributeGuidString = "927b45e4-e831-43f5-b1af-99e18df739ce";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ScaleMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ScaleMetaAttributeGuidString);
		#endregion

		#region Scale's Generated Property Code

		private System.Int32 scalePropertyStorage = 0;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.IntegerDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ValueTypeHasDataTypeScaleFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ScaleMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.Scale")]
		public  System.Int32 Scale
		{
			get
			{
				return scalePropertyStorage;
			}
		
			set
			{
				valueTypeHasDataTypeScaleFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ValueTypeHasDataTypeScaleFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ValueTypeHasDataType.Scale field
		/// </summary>
		private static ValueTypeHasDataTypeScaleFieldHandler	valueTypeHasDataTypeScaleFieldHandler	= ValueTypeHasDataTypeScaleFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ValueTypeHasDataType.Scale
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ValueTypeHasDataTypeScaleFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType,System.Int32>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ValueTypeHasDataTypeScaleFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ValueTypeHasDataType.Scale field handler
			/// </summary>
			/// <value>ValueTypeHasDataTypeScaleFieldHandler</value>
			public static ValueTypeHasDataTypeScaleFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.valueTypeHasDataTypeScaleFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.valueTypeHasDataTypeScaleFieldHandler;
					}
					else
					{
						// The static constructor in ValueTypeHasDataType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.valueTypeHasDataTypeScaleFieldHandler, so just instantiate one and return it
						return new ValueTypeHasDataTypeScaleFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ValueTypeHasDataType.Scale field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ScaleMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ValueTypeHasDataType</param>
			protected sealed override System.Int32 GetValue(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType element)
			{
				return element.scalePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType element, System.Int32 value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Int32 oldValue)
			{
				oldValue = element.scalePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.scalePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Length's Generated  Field Code
		#region Length's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String LengthMetaAttributeGuidString = "1a220465-c1bc-4736-93e4-e675eb1d1196";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid LengthMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.LengthMetaAttributeGuidString);
		#endregion

		#region Length's Generated Property Code

		private System.Int32 lengthPropertyStorage = 0;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.IntegerDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ValueTypeHasDataTypeLengthFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.LengthMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.Length")]
		public  System.Int32 Length
		{
			get
			{
				return lengthPropertyStorage;
			}
		
			set
			{
				valueTypeHasDataTypeLengthFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ValueTypeHasDataTypeLengthFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ValueTypeHasDataType.Length field
		/// </summary>
		private static ValueTypeHasDataTypeLengthFieldHandler	valueTypeHasDataTypeLengthFieldHandler	= ValueTypeHasDataTypeLengthFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ValueTypeHasDataType.Length
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ValueTypeHasDataTypeLengthFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType,System.Int32>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ValueTypeHasDataTypeLengthFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ValueTypeHasDataType.Length field handler
			/// </summary>
			/// <value>ValueTypeHasDataTypeLengthFieldHandler</value>
			public static ValueTypeHasDataTypeLengthFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.valueTypeHasDataTypeLengthFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.valueTypeHasDataTypeLengthFieldHandler;
					}
					else
					{
						// The static constructor in ValueTypeHasDataType will assign this value to
						// Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.valueTypeHasDataTypeLengthFieldHandler, so just instantiate one and return it
						return new ValueTypeHasDataTypeLengthFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ValueTypeHasDataType.Length field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.LengthMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ValueTypeHasDataType</param>
			protected sealed override System.Int32 GetValue(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType element)
			{
				return element.lengthPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType element, System.Int32 value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Int32 oldValue)
			{
				oldValue = element.lengthPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.lengthPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region DataType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String DataTypeMetaRoleGuidString = "f428f909-8e22-4608-bef3-1f730fd1077f";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid DataTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataType")]
		public  Neumont.Tools.ORM.ObjectModel.DataType DataType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.DataType)this.GetRolePlayer(DataTypeMetaRoleGuid); }
			set { this.SetRolePlayer(DataTypeMetaRoleGuid, value); }
		}
		
		#endregion
		#region ValueTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueTypeCollectionMetaRoleGuidString = "72598bd8-40da-4a90-8005-d7ef2acaf536";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueTypeCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeCollection")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectType ValueTypeCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(ValueTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ValueTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region DataTypeNotSpecifiedError's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError DataTypeNotSpecifiedError
		{
			get
			{
				return this.GetCounterpartRolePlayer(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid, false) as Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError counterpart = link.GetRolePlayer(roleInfo) as Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError), newRoles);
				}
			}
		}
		#endregion
	}
	#region ValueTypeHasDataType's Generated Constructor Code
	public  partial class ValueTypeHasDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasDataType CreateValueTypeHasDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateValueTypeHasDataType(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasDataType CreateAndInitializeValueTypeHasDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueTypeHasDataType(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasDataType CreateValueTypeHasDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ValueTypeHasDataType)partition.ElementFactory.CreateElementLink(typeof(ValueTypeHasDataType), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasDataType CreateAndInitializeValueTypeHasDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueTypeHasDataType)partition.ElementFactory.CreateElementLink(typeof(ValueTypeHasDataType), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueTypeHasDataType
	/// <summary>
	/// ValueTypeHasDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType))]
	public sealed class ValueTypeHasDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueTypeHasDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new ValueTypeHasDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Objectification.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.Objectification")]
	public  partial class Objectification : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region Objectification's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "542e780f-0bd0-4617-9715-935beb73cee9";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Objectification.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = Objectification.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = Objectification.MetaClassGuid;
		#endregion

		#region IsImplied's Generated  Field Code
		#region IsImplied's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String IsImpliedMetaAttributeGuidString = "370e2cc7-69e6-4116-919f-7d1b65390eb7";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid IsImpliedMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Objectification.IsImpliedMetaAttributeGuidString);
		#endregion

		#region IsImplied's Generated Property Code

		private System.Boolean isImpliedPropertyStorage = false;
		
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ObjectificationIsImpliedFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Objectification.IsImpliedMetaAttributeGuidString, "Neumont.Tools.ORM.ObjectModel.Objectification.IsImplied")]
		public  System.Boolean IsImplied
		{
			get
			{
				return isImpliedPropertyStorage;
			}
		
			set
			{
				objectificationIsImpliedFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectificationIsImpliedFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Objectification.IsImplied field
		/// </summary>
		private static ObjectificationIsImpliedFieldHandler	objectificationIsImpliedFieldHandler	= ObjectificationIsImpliedFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Objectification.IsImplied
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectificationIsImpliedFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ObjectModel.Objectification,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectificationIsImpliedFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Objectification.IsImplied field handler
			/// </summary>
			/// <value>ObjectificationIsImpliedFieldHandler</value>
			public static ObjectificationIsImpliedFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ObjectModel.Objectification.objectificationIsImpliedFieldHandler != null)
					{
						return Neumont.Tools.ORM.ObjectModel.Objectification.objectificationIsImpliedFieldHandler;
					}
					else
					{
						// The static constructor in Objectification will assign this value to
						// Neumont.Tools.ORM.ObjectModel.Objectification.objectificationIsImpliedFieldHandler, so just instantiate one and return it
						return new ObjectificationIsImpliedFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Objectification.IsImplied field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ObjectModel.Objectification.IsImpliedMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Objectification</param>
			protected sealed override System.Boolean GetValue(Neumont.Tools.ORM.ObjectModel.Objectification element)
			{
				return element.isImpliedPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ObjectModel.Objectification element, System.Boolean value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Boolean oldValue)
			{
				oldValue = element.isImpliedPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.isImpliedPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region NestedFactType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String NestedFactTypeMetaRoleGuidString = "6743ca8b-70dc-4c77-85ff-acf2f197ef72";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid NestedFactTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Objectification.NestedFactTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Objectification.NestedFactTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.Objectification.NestedFactType")]
		public  Neumont.Tools.ORM.ObjectModel.FactType NestedFactType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(NestedFactTypeMetaRoleGuid); }
			set { this.SetRolePlayer(NestedFactTypeMetaRoleGuid, value); }
		}
		
		#endregion
		#region NestingType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String NestingTypeMetaRoleGuidString = "7a57a47b-772d-4362-898a-572e9e5a7728";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid NestingTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.Objectification.NestingTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.Objectification.NestingTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.Objectification.NestingType")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectType NestingType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(NestingTypeMetaRoleGuid); }
			set { this.SetRolePlayer(NestingTypeMetaRoleGuid, value); }
		}
		
		#endregion
		#region ImpliedFactTypeCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FactTypeMoveableCollection ImpliedFactTypeCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.FactTypeMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectificationMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region Objectification's Generated Constructor Code
	public  partial class Objectification
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public Objectification(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Objectification CreateObjectification(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateObjectification(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Objectification CreateAndInitializeObjectification(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectification(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public Objectification(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Objectification CreateObjectification(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (Objectification)partition.ElementFactory.CreateElementLink(typeof(Objectification), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Objectification CreateAndInitializeObjectification(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (Objectification)partition.ElementFactory.CreateElementLink(typeof(Objectification), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for Objectification
	/// <summary>
	/// Objectification Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.Objectification))]
	public sealed class ObjectificationElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectificationElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.Objectification( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectificationElementFactoryCreator Instance
		{
			get
			{
				return new ObjectificationElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole")]
	public  partial class ObjectTypePlaysRole : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ObjectTypePlaysRole's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "cd3fd3e2-9822-47b3-a158-8bc59b7ef0fc";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ObjectTypePlaysRole.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ObjectTypePlaysRole.MetaClassGuid;
		#endregion

		#region RolePlayer's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RolePlayerMetaRoleGuidString = "8cabe0dc-33de-4332-93fe-c9f4b092004c";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RolePlayerMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayerMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayerMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayer")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectType RolePlayer
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(RolePlayerMetaRoleGuid); }
			set { this.SetRolePlayer(RolePlayerMetaRoleGuid, value); }
		}
		
		#endregion
		#region PlayedRoleCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String PlayedRoleCollectionMetaRoleGuidString = "0f45f22d-a7a7-49a8-9e09-17cf362639d0";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid PlayedRoleCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleCollection")]
		public  Neumont.Tools.ORM.ObjectModel.Role PlayedRoleCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.Role)this.GetRolePlayer(PlayedRoleCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(PlayedRoleCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ObjectTypePlaysRole's Generated Constructor Code
	public  partial class ObjectTypePlaysRole
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypePlaysRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypePlaysRole CreateObjectTypePlaysRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateObjectTypePlaysRole(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypePlaysRole CreateAndInitializeObjectTypePlaysRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectTypePlaysRole(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypePlaysRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypePlaysRole CreateObjectTypePlaysRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ObjectTypePlaysRole)partition.ElementFactory.CreateElementLink(typeof(ObjectTypePlaysRole), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypePlaysRole CreateAndInitializeObjectTypePlaysRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectTypePlaysRole)partition.ElementFactory.CreateElementLink(typeof(ObjectTypePlaysRole), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectTypePlaysRole
	/// <summary>
	/// ObjectTypePlaysRole Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole))]
	public sealed class ObjectTypePlaysRoleElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypePlaysRoleElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectTypePlaysRoleElementFactoryCreator Instance
		{
			get
			{
				return new ObjectTypePlaysRoleElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasObjectType")]
	public  partial class ModelHasObjectType : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ModelHasObjectType's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "7f3a3597-e6e1-487b-a762-378fc79aedba";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ModelHasObjectType.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ModelHasObjectType.MetaClassGuid;
		#endregion

		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "f2e6e473-0a96-4199-9a63-67ce66a8783d";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=true, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ModelMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.Model")]
		public  Neumont.Tools.ORM.ObjectModel.ORMModel Model
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ORMModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
		#region ObjectTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ObjectTypeCollectionMetaRoleGuidString = "d4e2ef09-1187-4d73-b0ce-c3c539e8a708";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ObjectTypeCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeCollection")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectType ObjectTypeCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(ObjectTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ObjectTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ModelHasObjectType's Generated Constructor Code
	public  partial class ModelHasObjectType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasObjectType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasObjectType CreateModelHasObjectType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateModelHasObjectType(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasObjectType CreateAndInitializeModelHasObjectType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeModelHasObjectType(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasObjectType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasObjectType CreateModelHasObjectType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ModelHasObjectType)partition.ElementFactory.CreateElementLink(typeof(ModelHasObjectType), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasObjectType CreateAndInitializeModelHasObjectType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ModelHasObjectType)partition.ElementFactory.CreateElementLink(typeof(ModelHasObjectType), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ModelHasObjectType
	/// <summary>
	/// ModelHasObjectType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasObjectType))]
	public sealed class ModelHasObjectTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasObjectTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ModelHasObjectType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ModelHasObjectTypeElementFactoryCreator Instance
		{
			get
			{
				return new ModelHasObjectTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasFactType.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasFactType")]
	public  partial class ModelHasFactType : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ModelHasFactType's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "4f0bfd84-658b-4bf4-acda-5db1355b1a33";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasFactType.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ModelHasFactType.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ModelHasFactType.MetaClassGuid;
		#endregion

		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "c7885cbd-6e5c-48f3-bb08-80335d82096a";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasFactType.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=true, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasFactType.ModelMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasFactType.Model")]
		public  Neumont.Tools.ORM.ObjectModel.ORMModel Model
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ORMModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeCollectionMetaRoleGuidString = "ba041047-0d0f-45dc-aac3-29d5111ed1b0";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeCollection")]
		public  Neumont.Tools.ORM.ObjectModel.FactType FactTypeCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ModelHasFactType's Generated Constructor Code
	public  partial class ModelHasFactType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasFactType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasFactType CreateModelHasFactType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateModelHasFactType(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasFactType CreateAndInitializeModelHasFactType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeModelHasFactType(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasFactType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasFactType CreateModelHasFactType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ModelHasFactType)partition.ElementFactory.CreateElementLink(typeof(ModelHasFactType), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasFactType CreateAndInitializeModelHasFactType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ModelHasFactType)partition.ElementFactory.CreateElementLink(typeof(ModelHasFactType), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ModelHasFactType
	/// <summary>
	/// ModelHasFactType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasFactType))]
	public sealed class ModelHasFactTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasFactTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ModelHasFactType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ModelHasFactTypeElementFactoryCreator Instance
		{
			get
			{
				return new ModelHasFactTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactConstraint.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.FactConstraint")]
	public abstract partial class FactConstraint : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region FactConstraint's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "2ccd6a09-46be-4d7c-9d8b-b77679074f17";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactConstraint.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactConstraint.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactConstraint.MetaClassGuid;
		#endregion

		#region ConstrainedRoleCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleMoveableCollection ConstrainedRoleCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.FactConstraintCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRoleCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region Collection Classes for FactConstraint
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.FactConstraint Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class FactConstraintMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public FactConstraintMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FactConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FactConstraint))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FactConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FactConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FactConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FactConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FactConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FactConstraint))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FactConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FactConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FactConstraint) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FactConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FactConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FactConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.FactConstraint) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.FactConstraint))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.FactConstraint[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.FactConstraint at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.FactConstraint this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactConstraint)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.FactConstraint to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.FactConstraint value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.FactConstraint to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.FactConstraint value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.FactConstraint to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.FactConstraint value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.FactConstraint to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.FactConstraint value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.FactConstraint to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.FactConstraint value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.FactConstraint rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.FactConstraint rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region FactConstraint's Generated Constructor Code
	public abstract partial class FactConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected FactConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint")]
	public  partial class FactSetComparisonConstraint : Neumont.Tools.ORM.ObjectModel.FactConstraint
	{
		#region FactSetComparisonConstraint's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "6de34bee-23ca-4503-b451-0bf4f9623e88";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactSetComparisonConstraint.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactSetComparisonConstraint.MetaClassGuid;
		#endregion

		#region SetComparisonConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SetComparisonConstraintCollectionMetaRoleGuidString = "00ab3368-d142-4d99-8457-afd56e639f5a";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SetComparisonConstraintCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.SetComparisonConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.SetComparisonConstraintCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.SetComparisonConstraintCollection")]
		public  Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint SetComparisonConstraintCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint)this.GetRolePlayer(SetComparisonConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(SetComparisonConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeCollectionMetaRoleGuidString = "6352e486-6683-4334-8c5c-9601fa3c07d7";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.FactTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.FactTypeCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.FactTypeCollection")]
		public  Neumont.Tools.ORM.ObjectModel.FactType FactTypeCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactSetComparisonConstraint's Generated Constructor Code
	public  partial class FactSetComparisonConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactSetComparisonConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactSetComparisonConstraint CreateFactSetComparisonConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactSetComparisonConstraint(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactSetComparisonConstraint CreateAndInitializeFactSetComparisonConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactSetComparisonConstraint(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactSetComparisonConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactSetComparisonConstraint CreateFactSetComparisonConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactSetComparisonConstraint)partition.ElementFactory.CreateElementLink(typeof(FactSetComparisonConstraint), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactSetComparisonConstraint CreateAndInitializeFactSetComparisonConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactSetComparisonConstraint)partition.ElementFactory.CreateElementLink(typeof(FactSetComparisonConstraint), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactSetComparisonConstraint
	/// <summary>
	/// FactSetComparisonConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint))]
	public sealed class FactSetComparisonConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactSetComparisonConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactSetComparisonConstraintElementFactoryCreator Instance
		{
			get
			{
				return new FactSetComparisonConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactSetConstraint.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.FactSetConstraint")]
	public  partial class FactSetConstraint : Neumont.Tools.ORM.ObjectModel.FactConstraint
	{
		#region FactSetConstraint's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "786eebce-120b-43c0-9622-e799943f4021";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactSetConstraint.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactSetConstraint.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactSetConstraint.MetaClassGuid;
		#endregion

		#region SetConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SetConstraintCollectionMetaRoleGuidString = "6045259d-a85e-40f6-bac3-744f03cef430";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SetConstraintCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactSetConstraint.SetConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactSetConstraint.SetConstraintCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactSetConstraint.SetConstraintCollection")]
		public  Neumont.Tools.ORM.ObjectModel.SetConstraint SetConstraintCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetConstraint)this.GetRolePlayer(SetConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(SetConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeCollectionMetaRoleGuidString = "3330f860-0dd6-4178-b7e8-e89cec558389";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactSetConstraint.FactTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactSetConstraint.FactTypeCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactSetConstraint.FactTypeCollection")]
		public  Neumont.Tools.ORM.ObjectModel.FactType FactTypeCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactSetConstraint's Generated Constructor Code
	public  partial class FactSetConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactSetConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactSetConstraint CreateFactSetConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactSetConstraint(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactSetConstraint CreateAndInitializeFactSetConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactSetConstraint(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactSetConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactSetConstraint CreateFactSetConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactSetConstraint)partition.ElementFactory.CreateElementLink(typeof(FactSetConstraint), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactSetConstraint CreateAndInitializeFactSetConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactSetConstraint)partition.ElementFactory.CreateElementLink(typeof(FactSetConstraint), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactSetConstraint
	/// <summary>
	/// FactSetConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FactSetConstraint))]
	public sealed class FactSetConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactSetConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FactSetConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactSetConstraintElementFactoryCreator Instance
		{
			get
			{
				return new FactSetConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint")]
	public  partial class ExternalRoleConstraint : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ExternalRoleConstraint's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "a075a8fd-feb9-4dec-9852-85b7272a009f";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ExternalRoleConstraint.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ExternalRoleConstraint.MetaClassGuid;
		#endregion

		#region FactConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactConstraintCollectionMetaRoleGuidString = "3b2ebee1-afe8-42cb-a7db-8ad4dc7d8be9";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactConstraintCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.FactConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.FactConstraintCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.FactConstraintCollection")]
		public  Neumont.Tools.ORM.ObjectModel.FactConstraint FactConstraintCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactConstraint)this.GetRolePlayer(FactConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(FactConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ConstrainedRoleCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ConstrainedRoleCollectionMetaRoleGuidString = "c419f56d-c63f-4972-bdeb-86d9264e2de7";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ConstrainedRoleCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRoleCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRoleCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRoleCollection")]
		public  Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole ConstrainedRoleCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole)this.GetRolePlayer(ConstrainedRoleCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ConstrainedRoleCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ExternalRoleConstraint's Generated Constructor Code
	public  partial class ExternalRoleConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalRoleConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalRoleConstraint CreateExternalRoleConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateExternalRoleConstraint(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalRoleConstraint CreateAndInitializeExternalRoleConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeExternalRoleConstraint(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalRoleConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalRoleConstraint CreateExternalRoleConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ExternalRoleConstraint)partition.ElementFactory.CreateElementLink(typeof(ExternalRoleConstraint), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalRoleConstraint CreateAndInitializeExternalRoleConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ExternalRoleConstraint)partition.ElementFactory.CreateElementLink(typeof(ExternalRoleConstraint), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ExternalRoleConstraint
	/// <summary>
	/// ExternalRoleConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint))]
	public sealed class ExternalRoleConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalRoleConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ExternalRoleConstraintElementFactoryCreator Instance
		{
			get
			{
				return new ExternalRoleConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence")]
	public  partial class SetComparisonConstraintHasRoleSequence : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region SetComparisonConstraintHasRoleSequence's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "4d952086-d820-4023-9207-14302e77b703";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SetComparisonConstraintHasRoleSequence.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SetComparisonConstraintHasRoleSequence.MetaClassGuid;
		#endregion

		#region RoleSequenceCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RoleSequenceCollectionMetaRoleGuidString = "152a01ce-3754-4b69-9f9e-036762f25a58";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RoleSequenceCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceCollection")]
		public  Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence RoleSequenceCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence)this.GetRolePlayer(RoleSequenceCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(RoleSequenceCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ExternalConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ExternalConstraintMetaRoleGuidString = "efd54a41-2206-4daa-969a-b85b6a662ca9";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ExternalConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraint")]
		public  Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint ExternalConstraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint)this.GetRolePlayer(ExternalConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(ExternalConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SetComparisonConstraintHasRoleSequence's Generated Constructor Code
	public  partial class SetComparisonConstraintHasRoleSequence
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasRoleSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasRoleSequence CreateSetComparisonConstraintHasRoleSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSetComparisonConstraintHasRoleSequence(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasRoleSequence CreateAndInitializeSetComparisonConstraintHasRoleSequence(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSetComparisonConstraintHasRoleSequence(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasRoleSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasRoleSequence CreateSetComparisonConstraintHasRoleSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SetComparisonConstraintHasRoleSequence)partition.ElementFactory.CreateElementLink(typeof(SetComparisonConstraintHasRoleSequence), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasRoleSequence CreateAndInitializeSetComparisonConstraintHasRoleSequence(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SetComparisonConstraintHasRoleSequence)partition.ElementFactory.CreateElementLink(typeof(SetComparisonConstraintHasRoleSequence), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SetComparisonConstraintHasRoleSequence
	/// <summary>
	/// SetComparisonConstraintHasRoleSequence Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence))]
	public sealed class SetComparisonConstraintHasRoleSequenceElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasRoleSequenceElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SetComparisonConstraintHasRoleSequenceElementFactoryCreator Instance
		{
			get
			{
				return new SetComparisonConstraintHasRoleSequenceElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole")]
	public  partial class ConstraintRoleSequenceHasRole : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ConstraintRoleSequenceHasRole's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "b66ae3b4-c404-486c-933a-fd23eea3c3d7";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ConstraintRoleSequenceHasRole.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ConstraintRoleSequenceHasRole.MetaClassGuid;
		#endregion

		#region ConstraintRoleSequenceCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ConstraintRoleSequenceCollectionMetaRoleGuidString = "dea36a6c-6706-41ee-bb34-61bc9a5416d2";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ConstraintRoleSequenceCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceCollection")]
		public  Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence ConstraintRoleSequenceCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence)this.GetRolePlayer(ConstraintRoleSequenceCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ConstraintRoleSequenceCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region RoleCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RoleCollectionMetaRoleGuidString = "43f43911-662e-480d-b566-8025ccb1f673";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RoleCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.RoleCollection")]
		public  Neumont.Tools.ORM.ObjectModel.Role RoleCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.Role)this.GetRolePlayer(RoleCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(RoleCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactConstraintCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.FactConstraintMoveableCollection FactConstraintCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.FactConstraintMoveableCollection(this, Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRoleCollectionMetaRoleGuid, Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.FactConstraintCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region Collection Classes for ConstraintRoleSequenceHasRole
	/// <summary>
	/// Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class ConstraintRoleSequenceHasRoleMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public ConstraintRoleSequenceHasRoleMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole at that index</returns>
		public Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region ConstraintRoleSequenceHasRole's Generated Constructor Code
	public  partial class ConstraintRoleSequenceHasRole
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConstraintRoleSequenceHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConstraintRoleSequenceHasRole CreateConstraintRoleSequenceHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateConstraintRoleSequenceHasRole(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConstraintRoleSequenceHasRole CreateAndInitializeConstraintRoleSequenceHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeConstraintRoleSequenceHasRole(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ConstraintRoleSequenceHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConstraintRoleSequenceHasRole CreateConstraintRoleSequenceHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ConstraintRoleSequenceHasRole)partition.ElementFactory.CreateElementLink(typeof(ConstraintRoleSequenceHasRole), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ConstraintRoleSequenceHasRole CreateAndInitializeConstraintRoleSequenceHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ConstraintRoleSequenceHasRole)partition.ElementFactory.CreateElementLink(typeof(ConstraintRoleSequenceHasRole), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ConstraintRoleSequenceHasRole
	/// <summary>
	/// ConstraintRoleSequenceHasRole Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole))]
	public sealed class ConstraintRoleSequenceHasRoleElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConstraintRoleSequenceHasRoleElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ConstraintRoleSequenceHasRoleElementFactoryCreator Instance
		{
			get
			{
				return new ConstraintRoleSequenceHasRoleElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasError")]
	public  partial class ModelHasError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ModelHasError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "4389da95-bd9e-4615-ac5f-5a466414c9b0";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ModelHasError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ModelHasError.MetaClassGuid;
		#endregion

		#region ErrorCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ErrorCollectionMetaRoleGuidString = "0cc3a152-c6c3-49f3-97fd-7c97a6fd9657";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ErrorCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasError.ErrorCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasError.ErrorCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasError.ErrorCollection")]
		public  Neumont.Tools.ORM.ObjectModel.ModelError ErrorCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ModelError)this.GetRolePlayer(ErrorCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ErrorCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "a407c3f0-23dc-468a-bc22-568bfcf8a827";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasError.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=true, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasError.ModelMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasError.Model")]
		public  Neumont.Tools.ORM.ObjectModel.ORMModel Model
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ORMModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ModelHasError's Generated Constructor Code
	public  partial class ModelHasError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasError CreateModelHasError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateModelHasError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasError CreateAndInitializeModelHasError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeModelHasError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasError CreateModelHasError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ModelHasError)partition.ElementFactory.CreateElementLink(typeof(ModelHasError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasError CreateAndInitializeModelHasError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ModelHasError)partition.ElementFactory.CreateElementLink(typeof(ModelHasError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ModelHasError
	/// <summary>
	/// ModelHasError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasError))]
	public sealed class ModelHasErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ModelHasError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ModelHasErrorElementFactoryCreator Instance
		{
			get
			{
				return new ModelHasErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError")]
	public  partial class SetComparisonConstraintHasTooFewRoleSequencesError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region SetComparisonConstraintHasTooFewRoleSequencesError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "dcf38e2c-fe6e-4f89-8cb2-44bb1e512856";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SetComparisonConstraintHasTooFewRoleSequencesError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SetComparisonConstraintHasTooFewRoleSequencesError.MetaClassGuid;
		#endregion

		#region TooFewRoleSequencesError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String TooFewRoleSequencesErrorMetaRoleGuidString = "438baa58-0cff-42b2-93f5-38dffa0544a1";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid TooFewRoleSequencesErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesError")]
		public  Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError TooFewRoleSequencesError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError)this.GetRolePlayer(TooFewRoleSequencesErrorMetaRoleGuid); }
			set { this.SetRolePlayer(TooFewRoleSequencesErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region SetComparisonConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SetComparisonConstraintMetaRoleGuidString = "fcb1aaae-a4fb-4eac-943b-af02468061d3";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SetComparisonConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraint")]
		public  Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint SetComparisonConstraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint)this.GetRolePlayer(SetComparisonConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(SetComparisonConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SetComparisonConstraintHasTooFewRoleSequencesError's Generated Constructor Code
	public  partial class SetComparisonConstraintHasTooFewRoleSequencesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasTooFewRoleSequencesError CreateSetComparisonConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSetComparisonConstraintHasTooFewRoleSequencesError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasTooFewRoleSequencesError CreateAndInitializeSetComparisonConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSetComparisonConstraintHasTooFewRoleSequencesError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasTooFewRoleSequencesError CreateSetComparisonConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SetComparisonConstraintHasTooFewRoleSequencesError)partition.ElementFactory.CreateElementLink(typeof(SetComparisonConstraintHasTooFewRoleSequencesError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasTooFewRoleSequencesError CreateAndInitializeSetComparisonConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SetComparisonConstraintHasTooFewRoleSequencesError)partition.ElementFactory.CreateElementLink(typeof(SetComparisonConstraintHasTooFewRoleSequencesError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SetComparisonConstraintHasTooFewRoleSequencesError
	/// <summary>
	/// SetComparisonConstraintHasTooFewRoleSequencesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError))]
	public sealed class SetComparisonConstraintHasTooFewRoleSequencesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasTooFewRoleSequencesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SetComparisonConstraintHasTooFewRoleSequencesErrorElementFactoryCreator Instance
		{
			get
			{
				return new SetComparisonConstraintHasTooFewRoleSequencesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError")]
	public  partial class SetComparisonConstraintHasTooManyRoleSequencesError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region SetComparisonConstraintHasTooManyRoleSequencesError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "5aec6871-993f-4373-8627-fb5eba073edd";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SetComparisonConstraintHasTooManyRoleSequencesError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SetComparisonConstraintHasTooManyRoleSequencesError.MetaClassGuid;
		#endregion

		#region TooManyRoleSequencesError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String TooManyRoleSequencesErrorMetaRoleGuidString = "b65ff045-247b-4890-aa03-44d53c1832ad";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid TooManyRoleSequencesErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesError")]
		public  Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError TooManyRoleSequencesError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError)this.GetRolePlayer(TooManyRoleSequencesErrorMetaRoleGuid); }
			set { this.SetRolePlayer(TooManyRoleSequencesErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region SetComparisonConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SetComparisonConstraintMetaRoleGuidString = "943eb43b-956e-4d97-9917-773386b53025";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SetComparisonConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraint")]
		public  Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint SetComparisonConstraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint)this.GetRolePlayer(SetComparisonConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(SetComparisonConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SetComparisonConstraintHasTooManyRoleSequencesError's Generated Constructor Code
	public  partial class SetComparisonConstraintHasTooManyRoleSequencesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasTooManyRoleSequencesError CreateSetComparisonConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSetComparisonConstraintHasTooManyRoleSequencesError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasTooManyRoleSequencesError CreateAndInitializeSetComparisonConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSetComparisonConstraintHasTooManyRoleSequencesError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasTooManyRoleSequencesError CreateSetComparisonConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SetComparisonConstraintHasTooManyRoleSequencesError)partition.ElementFactory.CreateElementLink(typeof(SetComparisonConstraintHasTooManyRoleSequencesError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasTooManyRoleSequencesError CreateAndInitializeSetComparisonConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SetComparisonConstraintHasTooManyRoleSequencesError)partition.ElementFactory.CreateElementLink(typeof(SetComparisonConstraintHasTooManyRoleSequencesError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SetComparisonConstraintHasTooManyRoleSequencesError
	/// <summary>
	/// SetComparisonConstraintHasTooManyRoleSequencesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError))]
	public sealed class SetComparisonConstraintHasTooManyRoleSequencesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasTooManyRoleSequencesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SetComparisonConstraintHasTooManyRoleSequencesErrorElementFactoryCreator Instance
		{
			get
			{
				return new SetComparisonConstraintHasTooManyRoleSequencesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError")]
	public  partial class ObjectTypeHasDuplicateNameError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ObjectTypeHasDuplicateNameError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3743ce4a-674e-4aeb-8e1c-a195fa76a063";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ObjectTypeHasDuplicateNameError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ObjectTypeHasDuplicateNameError.MetaClassGuid;
		#endregion

		#region DuplicateNameError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String DuplicateNameErrorMetaRoleGuidString = "250dd899-b1d7-40f2-88dc-b0e75c7d94c7";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid DuplicateNameErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameError")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError DuplicateNameError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError)this.GetRolePlayer(DuplicateNameErrorMetaRoleGuid); }
			set { this.SetRolePlayer(DuplicateNameErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region ObjectTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ObjectTypeCollectionMetaRoleGuidString = "532ed9c4-f43f-434f-8fab-f4dd2bad747e";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ObjectTypeCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeCollection")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectType ObjectTypeCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(ObjectTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ObjectTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ObjectTypeHasDuplicateNameError's Generated Constructor Code
	public  partial class ObjectTypeHasDuplicateNameError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasDuplicateNameError CreateObjectTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateObjectTypeHasDuplicateNameError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasDuplicateNameError CreateAndInitializeObjectTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectTypeHasDuplicateNameError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasDuplicateNameError CreateObjectTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ObjectTypeHasDuplicateNameError)partition.ElementFactory.CreateElementLink(typeof(ObjectTypeHasDuplicateNameError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasDuplicateNameError CreateAndInitializeObjectTypeHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectTypeHasDuplicateNameError)partition.ElementFactory.CreateElementLink(typeof(ObjectTypeHasDuplicateNameError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectTypeHasDuplicateNameError
	/// <summary>
	/// ObjectTypeHasDuplicateNameError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError))]
	public sealed class ObjectTypeHasDuplicateNameErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasDuplicateNameErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectTypeHasDuplicateNameErrorElementFactoryCreator Instance
		{
			get
			{
				return new ObjectTypeHasDuplicateNameErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading")]
	public  partial class ReadingOrderHasReading : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ReadingOrderHasReading's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "929ef898-db8d-44cf-b2d2-f1b030752b08";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ReadingOrderHasReading.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ReadingOrderHasReading.MetaClassGuid;
		#endregion

		#region ReadingCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReadingCollectionMetaRoleGuidString = "f09f87e5-bb49-4cc7-be1d-26104769e721";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReadingCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingCollection")]
		public  Neumont.Tools.ORM.ObjectModel.Reading ReadingCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.Reading)this.GetRolePlayer(ReadingCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ReadingCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ReadingOrder's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReadingOrderMetaRoleGuidString = "6d039c34-74fb-47dd-9dbd-19d7754ad67f";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReadingOrderMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrder")]
		public  Neumont.Tools.ORM.ObjectModel.ReadingOrder ReadingOrder
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ReadingOrder)this.GetRolePlayer(ReadingOrderMetaRoleGuid); }
			set { this.SetRolePlayer(ReadingOrderMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ReadingOrderHasReading's Generated Constructor Code
	public  partial class ReadingOrderHasReading
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrderHasReading(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrderHasReading CreateReadingOrderHasReading(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateReadingOrderHasReading(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrderHasReading CreateAndInitializeReadingOrderHasReading(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReadingOrderHasReading(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrderHasReading(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrderHasReading CreateReadingOrderHasReading(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ReadingOrderHasReading)partition.ElementFactory.CreateElementLink(typeof(ReadingOrderHasReading), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrderHasReading CreateAndInitializeReadingOrderHasReading(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ReadingOrderHasReading)partition.ElementFactory.CreateElementLink(typeof(ReadingOrderHasReading), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ReadingOrderHasReading
	/// <summary>
	/// ReadingOrderHasReading Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading))]
	public sealed class ReadingOrderHasReadingElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrderHasReadingElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReadingOrderHasReadingElementFactoryCreator Instance
		{
			get
			{
				return new ReadingOrderHasReadingElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder")]
	public  partial class FactTypeHasReadingOrder : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region FactTypeHasReadingOrder's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "1170285d-5118-4945-81a9-c6ea63863c39";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactTypeHasReadingOrder.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactTypeHasReadingOrder.MetaClassGuid;
		#endregion

		#region ReadingOrderCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReadingOrderCollectionMetaRoleGuidString = "ac5ae124-5cf2-4c0f-9071-11d57cdf6668";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReadingOrderCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderCollection")]
		public  Neumont.Tools.ORM.ObjectModel.ReadingOrder ReadingOrderCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ReadingOrder)this.GetRolePlayer(ReadingOrderCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ReadingOrderCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeMetaRoleGuidString = "b852113d-a2b6-44ff-82a5-5295e69faedb";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactType")]
		public  Neumont.Tools.ORM.ObjectModel.FactType FactType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactTypeHasReadingOrder's Generated Constructor Code
	public  partial class FactTypeHasReadingOrder
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasReadingOrder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasReadingOrder CreateFactTypeHasReadingOrder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactTypeHasReadingOrder(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasReadingOrder CreateAndInitializeFactTypeHasReadingOrder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeHasReadingOrder(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasReadingOrder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasReadingOrder CreateFactTypeHasReadingOrder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactTypeHasReadingOrder)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasReadingOrder), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasReadingOrder CreateAndInitializeFactTypeHasReadingOrder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeHasReadingOrder)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasReadingOrder), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeHasReadingOrder
	/// <summary>
	/// FactTypeHasReadingOrder Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder))]
	public sealed class FactTypeHasReadingOrderElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasReadingOrderElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeHasReadingOrderElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeHasReadingOrderElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind")]
	public  partial class ModelHasReferenceModeKind : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ModelHasReferenceModeKind's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "ecdad33e-fb6f-49a8-84da-abdb9f6d936c";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ModelHasReferenceModeKind.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ModelHasReferenceModeKind.MetaClassGuid;
		#endregion

		#region ReferenceModeKindCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReferenceModeKindCollectionMetaRoleGuidString = "45bfc8c9-bf29-4e6d-81af-89f82a92e126";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReferenceModeKindCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindCollection")]
		public  Neumont.Tools.ORM.ObjectModel.ReferenceModeKind ReferenceModeKindCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ReferenceModeKind)this.GetRolePlayer(ReferenceModeKindCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ReferenceModeKindCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "e7a1e999-7f55-4420-b318-d3be76e3809d";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.Model")]
		public  Neumont.Tools.ORM.ObjectModel.ORMModel Model
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ORMModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ModelHasReferenceModeKind's Generated Constructor Code
	public  partial class ModelHasReferenceModeKind
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasReferenceModeKind CreateModelHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateModelHasReferenceModeKind(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasReferenceModeKind CreateAndInitializeModelHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeModelHasReferenceModeKind(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasReferenceModeKind CreateModelHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ModelHasReferenceModeKind)partition.ElementFactory.CreateElementLink(typeof(ModelHasReferenceModeKind), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasReferenceModeKind CreateAndInitializeModelHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ModelHasReferenceModeKind)partition.ElementFactory.CreateElementLink(typeof(ModelHasReferenceModeKind), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ModelHasReferenceModeKind
	/// <summary>
	/// ModelHasReferenceModeKind Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind))]
	public sealed class ModelHasReferenceModeKindElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasReferenceModeKindElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ModelHasReferenceModeKindElementFactoryCreator Instance
		{
			get
			{
				return new ModelHasReferenceModeKindElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode")]
	public  partial class ModelHasReferenceMode : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ModelHasReferenceMode's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3a05bf70-175f-4dac-9692-ca158806acb2";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ModelHasReferenceMode.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ModelHasReferenceMode.MetaClassGuid;
		#endregion

		#region ReferenceModeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReferenceModeCollectionMetaRoleGuidString = "47a57da0-d5e9-4291-a418-1fc328d668b3";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReferenceModeCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeCollection")]
		public  Neumont.Tools.ORM.ObjectModel.ReferenceMode ReferenceModeCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ReferenceMode)this.GetRolePlayer(ReferenceModeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ReferenceModeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "213e68bd-1cdf-4e91-be12-be0a74d334fb";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.Model")]
		public  Neumont.Tools.ORM.ObjectModel.ORMModel Model
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ORMModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ModelHasReferenceMode's Generated Constructor Code
	public  partial class ModelHasReferenceMode
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasReferenceMode(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasReferenceMode CreateModelHasReferenceMode(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateModelHasReferenceMode(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasReferenceMode CreateAndInitializeModelHasReferenceMode(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeModelHasReferenceMode(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasReferenceMode CreateModelHasReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ModelHasReferenceMode)partition.ElementFactory.CreateElementLink(typeof(ModelHasReferenceMode), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasReferenceMode CreateAndInitializeModelHasReferenceMode(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ModelHasReferenceMode)partition.ElementFactory.CreateElementLink(typeof(ModelHasReferenceMode), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ModelHasReferenceMode
	/// <summary>
	/// ModelHasReferenceMode Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode))]
	public sealed class ModelHasReferenceModeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasReferenceModeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ModelHasReferenceModeElementFactoryCreator Instance
		{
			get
			{
				return new ModelHasReferenceModeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind")]
	public  partial class ReferenceModeHasReferenceModeKind : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ReferenceModeHasReferenceModeKind's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "b82e579e-4d0c-4411-9135-8c8b15979355";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ReferenceModeHasReferenceModeKind.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ReferenceModeHasReferenceModeKind.MetaClassGuid;
		#endregion

		#region Kind's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String KindMetaRoleGuidString = "bfb270b2-dcd7-4637-83af-956b28b9cd83";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid KindMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.KindMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.KindMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.Kind")]
		public  Neumont.Tools.ORM.ObjectModel.ReferenceModeKind Kind
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ReferenceModeKind)this.GetRolePlayer(KindMetaRoleGuid); }
			set { this.SetRolePlayer(KindMetaRoleGuid, value); }
		}
		
		#endregion
		#region ReferenceModeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReferenceModeCollectionMetaRoleGuidString = "babae7a3-71e7-426b-a5c3-d8ec45d12df6";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReferenceModeCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeCollection")]
		public  Neumont.Tools.ORM.ObjectModel.ReferenceMode ReferenceModeCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ReferenceMode)this.GetRolePlayer(ReferenceModeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ReferenceModeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ReferenceModeHasReferenceModeKind's Generated Constructor Code
	public  partial class ReferenceModeHasReferenceModeKind
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReferenceModeHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReferenceModeHasReferenceModeKind CreateReferenceModeHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateReferenceModeHasReferenceModeKind(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReferenceModeHasReferenceModeKind CreateAndInitializeReferenceModeHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReferenceModeHasReferenceModeKind(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ReferenceModeHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReferenceModeHasReferenceModeKind CreateReferenceModeHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ReferenceModeHasReferenceModeKind)partition.ElementFactory.CreateElementLink(typeof(ReferenceModeHasReferenceModeKind), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReferenceModeHasReferenceModeKind CreateAndInitializeReferenceModeHasReferenceModeKind(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ReferenceModeHasReferenceModeKind)partition.ElementFactory.CreateElementLink(typeof(ReferenceModeHasReferenceModeKind), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ReferenceModeHasReferenceModeKind
	/// <summary>
	/// ReferenceModeHasReferenceModeKind Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind))]
	public sealed class ReferenceModeHasReferenceModeKindElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReferenceModeHasReferenceModeKindElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReferenceModeHasReferenceModeKindElementFactoryCreator Instance
		{
			get
			{
				return new ReferenceModeHasReferenceModeKindElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint")]
	public  partial class ModelHasSetConstraint : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ModelHasSetConstraint's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c39ab93e-10fd-4629-a27a-b5560039f36c";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ModelHasSetConstraint.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ModelHasSetConstraint.MetaClassGuid;
		#endregion

		#region SetConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SetConstraintCollectionMetaRoleGuidString = "e5a1060b-13ab-4ab1-8a12-c6aeeef6f8bf";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SetConstraintCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.SetConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.SetConstraintCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.SetConstraintCollection")]
		public  Neumont.Tools.ORM.ObjectModel.SetConstraint SetConstraintCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetConstraint)this.GetRolePlayer(SetConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(SetConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "1769af74-7b45-4b04-b049-ec0b7fded9f0";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.ModelMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.Model")]
		public  Neumont.Tools.ORM.ObjectModel.ORMModel Model
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ORMModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ModelHasSetConstraint's Generated Constructor Code
	public  partial class ModelHasSetConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasSetConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasSetConstraint CreateModelHasSetConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateModelHasSetConstraint(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasSetConstraint CreateAndInitializeModelHasSetConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeModelHasSetConstraint(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasSetConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasSetConstraint CreateModelHasSetConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ModelHasSetConstraint)partition.ElementFactory.CreateElementLink(typeof(ModelHasSetConstraint), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasSetConstraint CreateAndInitializeModelHasSetConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ModelHasSetConstraint)partition.ElementFactory.CreateElementLink(typeof(ModelHasSetConstraint), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ModelHasSetConstraint
	/// <summary>
	/// ModelHasSetConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint))]
	public sealed class ModelHasSetConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasSetConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ModelHasSetConstraintElementFactoryCreator Instance
		{
			get
			{
				return new ModelHasSetConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint")]
	public  partial class ModelHasSetComparisonConstraint : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ModelHasSetComparisonConstraint's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "b4dc9ac8-f3f3-4280-bf70-32bd74695ea3";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ModelHasSetComparisonConstraint.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ModelHasSetComparisonConstraint.MetaClassGuid;
		#endregion

		#region SetComparisonConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SetComparisonConstraintCollectionMetaRoleGuidString = "d1aac147-a429-4d57-a8c7-e658130e1e74";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SetComparisonConstraintCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintCollection")]
		public  Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint SetComparisonConstraintCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint)this.GetRolePlayer(SetComparisonConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(SetComparisonConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "8e41a69c-0797-4882-ac2a-2fd39cef5a18";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.ModelMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.Model")]
		public  Neumont.Tools.ORM.ObjectModel.ORMModel Model
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ORMModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ModelHasSetComparisonConstraint's Generated Constructor Code
	public  partial class ModelHasSetComparisonConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasSetComparisonConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasSetComparisonConstraint CreateModelHasSetComparisonConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateModelHasSetComparisonConstraint(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasSetComparisonConstraint CreateAndInitializeModelHasSetComparisonConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeModelHasSetComparisonConstraint(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasSetComparisonConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasSetComparisonConstraint CreateModelHasSetComparisonConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ModelHasSetComparisonConstraint)partition.ElementFactory.CreateElementLink(typeof(ModelHasSetComparisonConstraint), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasSetComparisonConstraint CreateAndInitializeModelHasSetComparisonConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ModelHasSetComparisonConstraint)partition.ElementFactory.CreateElementLink(typeof(ModelHasSetComparisonConstraint), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ModelHasSetComparisonConstraint
	/// <summary>
	/// ModelHasSetComparisonConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint))]
	public sealed class ModelHasSetComparisonConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasSetComparisonConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ModelHasSetComparisonConstraintElementFactoryCreator Instance
		{
			get
			{
				return new ModelHasSetComparisonConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError")]
	public  partial class SetConstraintHasDuplicateNameError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region SetConstraintHasDuplicateNameError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "36e3a440-8e08-4b01-91cb-9182ec03f621";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SetConstraintHasDuplicateNameError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SetConstraintHasDuplicateNameError.MetaClassGuid;
		#endregion

		#region DuplicateNameError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String DuplicateNameErrorMetaRoleGuidString = "f16cdde1-b246-4528-a9c2-49ba4be7c288";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid DuplicateNameErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.DuplicateNameError")]
		public  Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError DuplicateNameError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError)this.GetRolePlayer(DuplicateNameErrorMetaRoleGuid); }
			set { this.SetRolePlayer(DuplicateNameErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region SetConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SetConstraintCollectionMetaRoleGuidString = "2c19092d-87b2-4b01-90c3-ffac3a8b4828";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SetConstraintCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintCollection")]
		public  Neumont.Tools.ORM.ObjectModel.SetConstraint SetConstraintCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetConstraint)this.GetRolePlayer(SetConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(SetConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SetConstraintHasDuplicateNameError's Generated Constructor Code
	public  partial class SetConstraintHasDuplicateNameError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetConstraintHasDuplicateNameError CreateSetConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSetConstraintHasDuplicateNameError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetConstraintHasDuplicateNameError CreateAndInitializeSetConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSetConstraintHasDuplicateNameError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SetConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetConstraintHasDuplicateNameError CreateSetConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SetConstraintHasDuplicateNameError)partition.ElementFactory.CreateElementLink(typeof(SetConstraintHasDuplicateNameError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetConstraintHasDuplicateNameError CreateAndInitializeSetConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SetConstraintHasDuplicateNameError)partition.ElementFactory.CreateElementLink(typeof(SetConstraintHasDuplicateNameError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SetConstraintHasDuplicateNameError
	/// <summary>
	/// SetConstraintHasDuplicateNameError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError))]
	public sealed class SetConstraintHasDuplicateNameErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetConstraintHasDuplicateNameErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SetConstraintHasDuplicateNameErrorElementFactoryCreator Instance
		{
			get
			{
				return new SetConstraintHasDuplicateNameErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError")]
	public  partial class SetComparisonConstraintHasDuplicateNameError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region SetComparisonConstraintHasDuplicateNameError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "ed53d70d-b151-45bb-a0dd-13f50dc475c1";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SetComparisonConstraintHasDuplicateNameError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SetComparisonConstraintHasDuplicateNameError.MetaClassGuid;
		#endregion

		#region DuplicateNameError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String DuplicateNameErrorMetaRoleGuidString = "83d48411-c26c-4755-a726-76ef2716998a";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid DuplicateNameErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DuplicateNameError")]
		public  Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError DuplicateNameError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError)this.GetRolePlayer(DuplicateNameErrorMetaRoleGuid); }
			set { this.SetRolePlayer(DuplicateNameErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region SetComparisonConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SetComparisonConstraintCollectionMetaRoleGuidString = "f2ee7a71-9202-4dc3-9843-ea3a7c1585e3";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SetComparisonConstraintCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintCollection")]
		public  Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint SetComparisonConstraintCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint)this.GetRolePlayer(SetComparisonConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(SetComparisonConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SetComparisonConstraintHasDuplicateNameError's Generated Constructor Code
	public  partial class SetComparisonConstraintHasDuplicateNameError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasDuplicateNameError CreateSetComparisonConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSetComparisonConstraintHasDuplicateNameError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasDuplicateNameError CreateAndInitializeSetComparisonConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSetComparisonConstraintHasDuplicateNameError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasDuplicateNameError CreateSetComparisonConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SetComparisonConstraintHasDuplicateNameError)partition.ElementFactory.CreateElementLink(typeof(SetComparisonConstraintHasDuplicateNameError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasDuplicateNameError CreateAndInitializeSetComparisonConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SetComparisonConstraintHasDuplicateNameError)partition.ElementFactory.CreateElementLink(typeof(SetComparisonConstraintHasDuplicateNameError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SetComparisonConstraintHasDuplicateNameError
	/// <summary>
	/// SetComparisonConstraintHasDuplicateNameError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError))]
	public sealed class SetComparisonConstraintHasDuplicateNameErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasDuplicateNameErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SetComparisonConstraintHasDuplicateNameErrorElementFactoryCreator Instance
		{
			get
			{
				return new SetComparisonConstraintHasDuplicateNameErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier")]
	public  partial class EntityTypeHasPreferredIdentifier : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region EntityTypeHasPreferredIdentifier's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "4e07ae25-5acd-47b4-b3cd-f92fef621975";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = EntityTypeHasPreferredIdentifier.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = EntityTypeHasPreferredIdentifier.MetaClassGuid;
		#endregion

		#region PreferredIdentifier's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String PreferredIdentifierMetaRoleGuidString = "6d26f6c2-85d7-47e5-8bba-54824fbd5ee2";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid PreferredIdentifierMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifier")]
		public  Neumont.Tools.ORM.ObjectModel.UniquenessConstraint PreferredIdentifier
		{
			get { return (Neumont.Tools.ORM.ObjectModel.UniquenessConstraint)this.GetRolePlayer(PreferredIdentifierMetaRoleGuid); }
			set { this.SetRolePlayer(PreferredIdentifierMetaRoleGuid, value); }
		}
		
		#endregion
		#region PreferredIdentifierFor's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String PreferredIdentifierForMetaRoleGuidString = "2f929a15-e1d5-4486-81de-d43e7df45405";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid PreferredIdentifierForMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierFor")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectType PreferredIdentifierFor
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(PreferredIdentifierForMetaRoleGuid); }
			set { this.SetRolePlayer(PreferredIdentifierForMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region EntityTypeHasPreferredIdentifier's Generated Constructor Code
	public  partial class EntityTypeHasPreferredIdentifier
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EntityTypeHasPreferredIdentifier(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EntityTypeHasPreferredIdentifier CreateEntityTypeHasPreferredIdentifier(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateEntityTypeHasPreferredIdentifier(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EntityTypeHasPreferredIdentifier CreateAndInitializeEntityTypeHasPreferredIdentifier(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeEntityTypeHasPreferredIdentifier(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public EntityTypeHasPreferredIdentifier(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EntityTypeHasPreferredIdentifier CreateEntityTypeHasPreferredIdentifier(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (EntityTypeHasPreferredIdentifier)partition.ElementFactory.CreateElementLink(typeof(EntityTypeHasPreferredIdentifier), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EntityTypeHasPreferredIdentifier CreateAndInitializeEntityTypeHasPreferredIdentifier(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (EntityTypeHasPreferredIdentifier)partition.ElementFactory.CreateElementLink(typeof(EntityTypeHasPreferredIdentifier), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for EntityTypeHasPreferredIdentifier
	/// <summary>
	/// EntityTypeHasPreferredIdentifier Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier))]
	public sealed class EntityTypeHasPreferredIdentifierElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EntityTypeHasPreferredIdentifierElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static EntityTypeHasPreferredIdentifierElementFactoryCreator Instance
		{
			get
			{
				return new EntityTypeHasPreferredIdentifierElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError")]
	public  partial class ReadingHasTooManyRolesError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ReadingHasTooManyRolesError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c5e1a9c2-53c4-4de9-a6ef-b9205463e481";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ReadingHasTooManyRolesError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ReadingHasTooManyRolesError.MetaClassGuid;
		#endregion

		#region TooManyRolesError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String TooManyRolesErrorMetaRoleGuidString = "cda3f679-4425-4e56-92b1-b5eecc6fc459";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid TooManyRolesErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesError")]
		public  Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesError TooManyRolesError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesError)this.GetRolePlayer(TooManyRolesErrorMetaRoleGuid); }
			set { this.SetRolePlayer(TooManyRolesErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region Reading's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReadingMetaRoleGuidString = "45b44737-503c-4264-8062-5a23bb99e1a3";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReadingMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.Reading")]
		public  Neumont.Tools.ORM.ObjectModel.Reading Reading
		{
			get { return (Neumont.Tools.ORM.ObjectModel.Reading)this.GetRolePlayer(ReadingMetaRoleGuid); }
			set { this.SetRolePlayer(ReadingMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ReadingHasTooManyRolesError's Generated Constructor Code
	public  partial class ReadingHasTooManyRolesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingHasTooManyRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasTooManyRolesError CreateReadingHasTooManyRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateReadingHasTooManyRolesError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasTooManyRolesError CreateAndInitializeReadingHasTooManyRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReadingHasTooManyRolesError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingHasTooManyRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasTooManyRolesError CreateReadingHasTooManyRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ReadingHasTooManyRolesError)partition.ElementFactory.CreateElementLink(typeof(ReadingHasTooManyRolesError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasTooManyRolesError CreateAndInitializeReadingHasTooManyRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ReadingHasTooManyRolesError)partition.ElementFactory.CreateElementLink(typeof(ReadingHasTooManyRolesError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ReadingHasTooManyRolesError
	/// <summary>
	/// ReadingHasTooManyRolesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError))]
	public sealed class ReadingHasTooManyRolesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingHasTooManyRolesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReadingHasTooManyRolesErrorElementFactoryCreator Instance
		{
			get
			{
				return new ReadingHasTooManyRolesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError")]
	public  partial class ReadingHasTooFewRolesError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ReadingHasTooFewRolesError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "6eaa9466-7d37-4c73-a92d-3f96b5f06cf3";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ReadingHasTooFewRolesError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ReadingHasTooFewRolesError.MetaClassGuid;
		#endregion

		#region TooFewRolesError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String TooFewRolesErrorMetaRoleGuidString = "b5991c3d-0013-46ab-9f17-9a3c70d69e57";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid TooFewRolesErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesError")]
		public  Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesError TooFewRolesError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesError)this.GetRolePlayer(TooFewRolesErrorMetaRoleGuid); }
			set { this.SetRolePlayer(TooFewRolesErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region Reading's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReadingMetaRoleGuidString = "60e3df7d-cfad-4cf6-9d9b-5569fa68e373";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReadingMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.Reading")]
		public  Neumont.Tools.ORM.ObjectModel.Reading Reading
		{
			get { return (Neumont.Tools.ORM.ObjectModel.Reading)this.GetRolePlayer(ReadingMetaRoleGuid); }
			set { this.SetRolePlayer(ReadingMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ReadingHasTooFewRolesError's Generated Constructor Code
	public  partial class ReadingHasTooFewRolesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingHasTooFewRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasTooFewRolesError CreateReadingHasTooFewRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateReadingHasTooFewRolesError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasTooFewRolesError CreateAndInitializeReadingHasTooFewRolesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReadingHasTooFewRolesError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingHasTooFewRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasTooFewRolesError CreateReadingHasTooFewRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ReadingHasTooFewRolesError)partition.ElementFactory.CreateElementLink(typeof(ReadingHasTooFewRolesError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingHasTooFewRolesError CreateAndInitializeReadingHasTooFewRolesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ReadingHasTooFewRolesError)partition.ElementFactory.CreateElementLink(typeof(ReadingHasTooFewRolesError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ReadingHasTooFewRolesError
	/// <summary>
	/// ReadingHasTooFewRolesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError))]
	public sealed class ReadingHasTooFewRolesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingHasTooFewRolesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReadingHasTooFewRolesErrorElementFactoryCreator Instance
		{
			get
			{
				return new ReadingHasTooFewRolesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError")]
	public  partial class SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "4d0d1805-bcf9-4026-91cc-e6d21b81bf3a";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.MetaClassGuid;
		#endregion

		#region ArityMismatchError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ArityMismatchErrorMetaRoleGuidString = "59b2a377-5b0e-455b-91ea-67be1e4c57ce";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ArityMismatchErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchError")]
		public  Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError ArityMismatchError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError)this.GetRolePlayer(ArityMismatchErrorMetaRoleGuid); }
			set { this.SetRolePlayer(ArityMismatchErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region Constraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ConstraintMetaRoleGuidString = "4d9e7146-6f77-413e-afb4-d885bff9295e";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.Constraint")]
		public  Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint Constraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint)this.GetRolePlayer(ConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(ConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError's Generated Constructor Code
	public  partial class SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError CreateSetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError CreateAndInitializeSetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError CreateSetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError)partition.ElementFactory.CreateElementLink(typeof(SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError CreateAndInitializeSetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError)partition.ElementFactory.CreateElementLink(typeof(SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError
	/// <summary>
	/// SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError))]
	public sealed class SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator Instance
		{
			get
			{
				return new SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError")]
	public  partial class FactTypeHasFactTypeRequiresReadingError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region FactTypeHasFactTypeRequiresReadingError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "91ed8d30-5100-4674-9cd8-9de09e885d5d";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactTypeHasFactTypeRequiresReadingError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactTypeHasFactTypeRequiresReadingError.MetaClassGuid;
		#endregion

		#region ReadingRequiredError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReadingRequiredErrorMetaRoleGuidString = "0726e39d-63eb-4fc5-8828-f40c2e35edaf";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReadingRequiredErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredError")]
		public  Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingError ReadingRequiredError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingError)this.GetRolePlayer(ReadingRequiredErrorMetaRoleGuid); }
			set { this.SetRolePlayer(ReadingRequiredErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeMetaRoleGuidString = "74c01faa-0605-41c6-90db-8a8b5ca8f47d";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactType")]
		public  Neumont.Tools.ORM.ObjectModel.FactType FactType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactTypeHasFactTypeRequiresReadingError's Generated Constructor Code
	public  partial class FactTypeHasFactTypeRequiresReadingError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFactTypeRequiresReadingError CreateFactTypeHasFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactTypeHasFactTypeRequiresReadingError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFactTypeRequiresReadingError CreateAndInitializeFactTypeHasFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeHasFactTypeRequiresReadingError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFactTypeRequiresReadingError CreateFactTypeHasFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactTypeHasFactTypeRequiresReadingError)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasFactTypeRequiresReadingError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFactTypeRequiresReadingError CreateAndInitializeFactTypeHasFactTypeRequiresReadingError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeHasFactTypeRequiresReadingError)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasFactTypeRequiresReadingError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeHasFactTypeRequiresReadingError
	/// <summary>
	/// FactTypeHasFactTypeRequiresReadingError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError))]
	public sealed class FactTypeHasFactTypeRequiresReadingErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasFactTypeRequiresReadingErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeHasFactTypeRequiresReadingErrorElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeHasFactTypeRequiresReadingErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasDataType.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasDataType")]
	public  partial class ModelHasDataType : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ModelHasDataType's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "bdd7a7cc-78b3-4d9d-8fbe-f34e6d97b87f";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasDataType.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ModelHasDataType.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ModelHasDataType.MetaClassGuid;
		#endregion

		#region DataTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String DataTypeCollectionMetaRoleGuidString = "a50a62f1-df7e-42fa-9d3e-9cebb1972892";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid DataTypeCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeCollection")]
		public  Neumont.Tools.ORM.ObjectModel.DataType DataTypeCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.DataType)this.GetRolePlayer(DataTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(DataTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region Model's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ModelMetaRoleGuidString = "02d46f20-fccc-45cf-a958-fb8c785400b8";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ModelMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ModelHasDataType.ModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ModelHasDataType.ModelMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ModelHasDataType.Model")]
		public  Neumont.Tools.ORM.ObjectModel.ORMModel Model
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ORMModel)this.GetRolePlayer(ModelMetaRoleGuid); }
			set { this.SetRolePlayer(ModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ModelHasDataType's Generated Constructor Code
	public  partial class ModelHasDataType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasDataType CreateModelHasDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateModelHasDataType(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasDataType CreateAndInitializeModelHasDataType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeModelHasDataType(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasDataType CreateModelHasDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ModelHasDataType)partition.ElementFactory.CreateElementLink(typeof(ModelHasDataType), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ModelHasDataType CreateAndInitializeModelHasDataType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ModelHasDataType)partition.ElementFactory.CreateElementLink(typeof(ModelHasDataType), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ModelHasDataType
	/// <summary>
	/// ModelHasDataType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ModelHasDataType))]
	public sealed class ModelHasDataTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ModelHasDataTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ModelHasDataType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ModelHasDataTypeElementFactoryCreator Instance
		{
			get
			{
				return new ModelHasDataTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError")]
	public  partial class FactTypeHasFactTypeRequiresInternalUniquenessConstraintError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region FactTypeHasFactTypeRequiresInternalUniquenessConstraintError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c9aaf11f-827f-44bd-9933-ccdbe24c65ee";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.MetaClassGuid;
		#endregion

		#region InternalUniquenessConstraintRequiredError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String InternalUniquenessConstraintRequiredErrorMetaRoleGuidString = "ee6e1fa4-7bcf-44a0-a3fa-57f7cc1deea9";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid InternalUniquenessConstraintRequiredErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredError")]
		public  Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError InternalUniquenessConstraintRequiredError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError)this.GetRolePlayer(InternalUniquenessConstraintRequiredErrorMetaRoleGuid); }
			set { this.SetRolePlayer(InternalUniquenessConstraintRequiredErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeMetaRoleGuidString = "ad65ad56-50e9-4485-8997-efbe76216174";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactType")]
		public  Neumont.Tools.ORM.ObjectModel.FactType FactType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactTypeHasFactTypeRequiresInternalUniquenessConstraintError's Generated Constructor Code
	public  partial class FactTypeHasFactTypeRequiresInternalUniquenessConstraintError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFactTypeRequiresInternalUniquenessConstraintError CreateFactTypeHasFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactTypeHasFactTypeRequiresInternalUniquenessConstraintError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFactTypeRequiresInternalUniquenessConstraintError CreateAndInitializeFactTypeHasFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeHasFactTypeRequiresInternalUniquenessConstraintError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFactTypeRequiresInternalUniquenessConstraintError CreateFactTypeHasFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactTypeHasFactTypeRequiresInternalUniquenessConstraintError)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFactTypeRequiresInternalUniquenessConstraintError CreateAndInitializeFactTypeHasFactTypeRequiresInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeHasFactTypeRequiresInternalUniquenessConstraintError)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeHasFactTypeRequiresInternalUniquenessConstraintError
	/// <summary>
	/// FactTypeHasFactTypeRequiresInternalUniquenessConstraintError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError))]
	public sealed class FactTypeHasFactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasFactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeHasFactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeHasFactTypeRequiresInternalUniquenessConstraintErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint")]
	public  partial class ValueTypeHasValueConstraint : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ValueTypeHasValueConstraint's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "1fa7d98b-ef7e-4dad-b5e7-94097daeb0f8";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ValueTypeHasValueConstraint.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ValueTypeHasValueConstraint.MetaClassGuid;
		#endregion

		#region ValueConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueConstraintMetaRoleGuidString = "e96a260b-3621-44e6-ba61-9f1b8f929489";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraint")]
		public  Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraint ValueConstraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraint)this.GetRolePlayer(ValueConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(ValueConstraintMetaRoleGuid, value); }
		}
		
		#endregion
		#region ValueType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueTypeMetaRoleGuidString = "46c627dd-36f8-4223-b6ff-8a7f015e77ac";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueType")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectType ValueType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(ValueTypeMetaRoleGuid); }
			set { this.SetRolePlayer(ValueTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ValueTypeHasValueConstraint's Generated Constructor Code
	public  partial class ValueTypeHasValueConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasValueConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasValueConstraint CreateValueTypeHasValueConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateValueTypeHasValueConstraint(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasValueConstraint CreateAndInitializeValueTypeHasValueConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueTypeHasValueConstraint(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasValueConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasValueConstraint CreateValueTypeHasValueConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ValueTypeHasValueConstraint)partition.ElementFactory.CreateElementLink(typeof(ValueTypeHasValueConstraint), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasValueConstraint CreateAndInitializeValueTypeHasValueConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueTypeHasValueConstraint)partition.ElementFactory.CreateElementLink(typeof(ValueTypeHasValueConstraint), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueTypeHasValueConstraint
	/// <summary>
	/// ValueTypeHasValueConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint))]
	public sealed class ValueTypeHasValueConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasValueConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueTypeHasValueConstraintElementFactoryCreator Instance
		{
			get
			{
				return new ValueTypeHasValueConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint")]
	public  partial class RoleHasValueConstraint : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region RoleHasValueConstraint's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "45bc2557-b58c-44d6-81d1-f0f7ed6f524e";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = RoleHasValueConstraint.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = RoleHasValueConstraint.MetaClassGuid;
		#endregion

		#region ValueConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueConstraintMetaRoleGuidString = "a58e8573-d27a-4529-83d0-cb9a9cbb6f71";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraint")]
		public  Neumont.Tools.ORM.ObjectModel.RoleValueConstraint ValueConstraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.RoleValueConstraint)this.GetRolePlayer(ValueConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(ValueConstraintMetaRoleGuid, value); }
		}
		
		#endregion
		#region Role's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RoleMetaRoleGuidString = "18050dbe-6c56-4fe3-8427-14219ffec899";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RoleMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.RoleMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.RoleMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.Role")]
		public  Neumont.Tools.ORM.ObjectModel.Role Role
		{
			get { return (Neumont.Tools.ORM.ObjectModel.Role)this.GetRolePlayer(RoleMetaRoleGuid); }
			set { this.SetRolePlayer(RoleMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region RoleHasValueConstraint's Generated Constructor Code
	public  partial class RoleHasValueConstraint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleHasValueConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleHasValueConstraint CreateRoleHasValueConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateRoleHasValueConstraint(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleHasValueConstraint CreateAndInitializeRoleHasValueConstraint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRoleHasValueConstraint(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleHasValueConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleHasValueConstraint CreateRoleHasValueConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (RoleHasValueConstraint)partition.ElementFactory.CreateElementLink(typeof(RoleHasValueConstraint), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleHasValueConstraint CreateAndInitializeRoleHasValueConstraint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RoleHasValueConstraint)partition.ElementFactory.CreateElementLink(typeof(RoleHasValueConstraint), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RoleHasValueConstraint
	/// <summary>
	/// RoleHasValueConstraint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint))]
	public sealed class RoleHasValueConstraintElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleHasValueConstraintElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RoleHasValueConstraintElementFactoryCreator Instance
		{
			get
			{
				return new RoleHasValueConstraintElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange")]
	public  partial class ValueConstraintHasValueRange : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ValueConstraintHasValueRange's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "26e66737-a802-457e-bb69-f19005fca896";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ValueConstraintHasValueRange.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ValueConstraintHasValueRange.MetaClassGuid;
		#endregion

		#region ValueRangeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueRangeCollectionMetaRoleGuidString = "ca257569-ac45-47eb-b670-2efcbe637104";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueRangeCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueRangeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueRangeCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueRangeCollection")]
		public  Neumont.Tools.ORM.ObjectModel.ValueRange ValueRangeCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ValueRange)this.GetRolePlayer(ValueRangeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ValueRangeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ValueConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueConstraintMetaRoleGuidString = "f406b051-c206-4535-8334-f39187e3362f";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueConstraint")]
		public  Neumont.Tools.ORM.ObjectModel.ValueConstraint ValueConstraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ValueConstraint)this.GetRolePlayer(ValueConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(ValueConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ValueConstraintHasValueRange's Generated Constructor Code
	public  partial class ValueConstraintHasValueRange
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueConstraintHasValueRange(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraintHasValueRange CreateValueConstraintHasValueRange(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateValueConstraintHasValueRange(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraintHasValueRange CreateAndInitializeValueConstraintHasValueRange(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueConstraintHasValueRange(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueConstraintHasValueRange(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraintHasValueRange CreateValueConstraintHasValueRange(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ValueConstraintHasValueRange)partition.ElementFactory.CreateElementLink(typeof(ValueConstraintHasValueRange), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraintHasValueRange CreateAndInitializeValueConstraintHasValueRange(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueConstraintHasValueRange)partition.ElementFactory.CreateElementLink(typeof(ValueConstraintHasValueRange), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueConstraintHasValueRange
	/// <summary>
	/// ValueConstraintHasValueRange Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange))]
	public sealed class ValueConstraintHasValueRangeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueConstraintHasValueRangeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueConstraintHasValueRangeElementFactoryCreator Instance
		{
			get
			{
				return new ValueConstraintHasValueRangeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError")]
	public  partial class ValueTypeHasUnspecifiedDataTypeError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ValueTypeHasUnspecifiedDataTypeError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "8bba1a0e-d440-4952-858e-d98be57a86a5";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ValueTypeHasUnspecifiedDataTypeError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ValueTypeHasUnspecifiedDataTypeError.MetaClassGuid;
		#endregion

		#region DataTypeNotSpecifiedError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String DataTypeNotSpecifiedErrorMetaRoleGuidString = "4260983a-5da6-4598-b6fb-f0e015c431a6";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid DataTypeNotSpecifiedErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedError")]
		public  Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError DataTypeNotSpecifiedError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError)this.GetRolePlayer(DataTypeNotSpecifiedErrorMetaRoleGuid); }
			set { this.SetRolePlayer(DataTypeNotSpecifiedErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region ValueTypeHasDataType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueTypeHasDataTypeMetaRoleGuidString = "18a22f2c-e949-4384-be3e-6c5684f47358";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueTypeHasDataTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataType")]
		public  Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType ValueTypeHasDataType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType)this.GetRolePlayer(ValueTypeHasDataTypeMetaRoleGuid); }
			set { this.SetRolePlayer(ValueTypeHasDataTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ValueTypeHasUnspecifiedDataTypeError's Generated Constructor Code
	public  partial class ValueTypeHasUnspecifiedDataTypeError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasUnspecifiedDataTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasUnspecifiedDataTypeError CreateValueTypeHasUnspecifiedDataTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateValueTypeHasUnspecifiedDataTypeError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasUnspecifiedDataTypeError CreateAndInitializeValueTypeHasUnspecifiedDataTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueTypeHasUnspecifiedDataTypeError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasUnspecifiedDataTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasUnspecifiedDataTypeError CreateValueTypeHasUnspecifiedDataTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ValueTypeHasUnspecifiedDataTypeError)partition.ElementFactory.CreateElementLink(typeof(ValueTypeHasUnspecifiedDataTypeError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueTypeHasUnspecifiedDataTypeError CreateAndInitializeValueTypeHasUnspecifiedDataTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueTypeHasUnspecifiedDataTypeError)partition.ElementFactory.CreateElementLink(typeof(ValueTypeHasUnspecifiedDataTypeError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueTypeHasUnspecifiedDataTypeError
	/// <summary>
	/// ValueTypeHasUnspecifiedDataTypeError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError))]
	public sealed class ValueTypeHasUnspecifiedDataTypeErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueTypeHasUnspecifiedDataTypeErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueTypeHasUnspecifiedDataTypeErrorElementFactoryCreator Instance
		{
			get
			{
				return new ValueTypeHasUnspecifiedDataTypeErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError")]
	public  partial class SetComparisonConstraintHasCompatibleRolePlayerTypeError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region SetComparisonConstraintHasCompatibleRolePlayerTypeError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "f9f003bb-7296-4ae9-9dde-08d0018f8aed";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SetComparisonConstraintHasCompatibleRolePlayerTypeError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SetComparisonConstraintHasCompatibleRolePlayerTypeError.MetaClassGuid;
		#endregion

		#region CompatibleRolePlayerTypeErrorCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String CompatibleRolePlayerTypeErrorCollectionMetaRoleGuidString = "dc5071d8-d878-4821-990e-3bb8792e5a3a";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollection")]
		public  Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError CompatibleRolePlayerTypeErrorCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError)this.GetRolePlayer(CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region SetComparisonConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SetComparisonConstraintMetaRoleGuidString = "0730fc3b-4254-4546-b607-0cd96a428a3e";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SetComparisonConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraint")]
		public  Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint SetComparisonConstraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint)this.GetRolePlayer(SetComparisonConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(SetComparisonConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SetComparisonConstraintHasCompatibleRolePlayerTypeError's Generated Constructor Code
	public  partial class SetComparisonConstraintHasCompatibleRolePlayerTypeError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasCompatibleRolePlayerTypeError CreateSetComparisonConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSetComparisonConstraintHasCompatibleRolePlayerTypeError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasCompatibleRolePlayerTypeError CreateAndInitializeSetComparisonConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSetComparisonConstraintHasCompatibleRolePlayerTypeError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasCompatibleRolePlayerTypeError CreateSetComparisonConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SetComparisonConstraintHasCompatibleRolePlayerTypeError)partition.ElementFactory.CreateElementLink(typeof(SetComparisonConstraintHasCompatibleRolePlayerTypeError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetComparisonConstraintHasCompatibleRolePlayerTypeError CreateAndInitializeSetComparisonConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SetComparisonConstraintHasCompatibleRolePlayerTypeError)partition.ElementFactory.CreateElementLink(typeof(SetComparisonConstraintHasCompatibleRolePlayerTypeError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SetComparisonConstraintHasCompatibleRolePlayerTypeError
	/// <summary>
	/// SetComparisonConstraintHasCompatibleRolePlayerTypeError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError))]
	public sealed class SetComparisonConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetComparisonConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SetComparisonConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator Instance
		{
			get
			{
				return new SetComparisonConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError")]
	public  partial class SetConstraintHasCompatibleRolePlayerTypeError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region SetConstraintHasCompatibleRolePlayerTypeError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "be96de91-b789-468a-8140-fc083adc13b7";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SetConstraintHasCompatibleRolePlayerTypeError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SetConstraintHasCompatibleRolePlayerTypeError.MetaClassGuid;
		#endregion

		#region CompatibleRolePlayerTypeError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String CompatibleRolePlayerTypeErrorMetaRoleGuidString = "0fa1d625-2370-4adc-b0af-57266b0370c6";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid CompatibleRolePlayerTypeErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeError")]
		public  Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError CompatibleRolePlayerTypeError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError)this.GetRolePlayer(CompatibleRolePlayerTypeErrorMetaRoleGuid); }
			set { this.SetRolePlayer(CompatibleRolePlayerTypeErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region SetConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SetConstraintMetaRoleGuidString = "d8a3c296-8f3f-4a14-b198-ade11de6a48a";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SetConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraint")]
		public  Neumont.Tools.ORM.ObjectModel.SetConstraint SetConstraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetConstraint)this.GetRolePlayer(SetConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(SetConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SetConstraintHasCompatibleRolePlayerTypeError's Generated Constructor Code
	public  partial class SetConstraintHasCompatibleRolePlayerTypeError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetConstraintHasCompatibleRolePlayerTypeError CreateSetConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSetConstraintHasCompatibleRolePlayerTypeError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetConstraintHasCompatibleRolePlayerTypeError CreateAndInitializeSetConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSetConstraintHasCompatibleRolePlayerTypeError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SetConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetConstraintHasCompatibleRolePlayerTypeError CreateSetConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SetConstraintHasCompatibleRolePlayerTypeError)partition.ElementFactory.CreateElementLink(typeof(SetConstraintHasCompatibleRolePlayerTypeError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetConstraintHasCompatibleRolePlayerTypeError CreateAndInitializeSetConstraintHasCompatibleRolePlayerTypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SetConstraintHasCompatibleRolePlayerTypeError)partition.ElementFactory.CreateElementLink(typeof(SetConstraintHasCompatibleRolePlayerTypeError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SetConstraintHasCompatibleRolePlayerTypeError
	/// <summary>
	/// SetConstraintHasCompatibleRolePlayerTypeError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError))]
	public sealed class SetConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SetConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator Instance
		{
			get
			{
				return new SetConstraintHasCompatibleRolePlayerTypeErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError")]
	public  partial class UniquenessConstraintHasNMinusOneError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region UniquenessConstraintHasNMinusOneError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3813d2d2-a6cc-4f26-a5ff-24b6c05e0cc5";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = UniquenessConstraintHasNMinusOneError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = UniquenessConstraintHasNMinusOneError.MetaClassGuid;
		#endregion

		#region NMinusOneError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String NMinusOneErrorMetaRoleGuidString = "c5b85dae-aaba-40b1-b300-a9c2cf03e91e";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid NMinusOneErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneError")]
		public  Neumont.Tools.ORM.ObjectModel.NMinusOneError NMinusOneError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.NMinusOneError)this.GetRolePlayer(NMinusOneErrorMetaRoleGuid); }
			set { this.SetRolePlayer(NMinusOneErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region Constraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ConstraintMetaRoleGuidString = "df179dfc-8827-46b7-a19a-b3428ceb09ce";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.Constraint")]
		public  Neumont.Tools.ORM.ObjectModel.UniquenessConstraint Constraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.UniquenessConstraint)this.GetRolePlayer(ConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(ConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region UniquenessConstraintHasNMinusOneError's Generated Constructor Code
	public  partial class UniquenessConstraintHasNMinusOneError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public UniquenessConstraintHasNMinusOneError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UniquenessConstraintHasNMinusOneError CreateUniquenessConstraintHasNMinusOneError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateUniquenessConstraintHasNMinusOneError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UniquenessConstraintHasNMinusOneError CreateAndInitializeUniquenessConstraintHasNMinusOneError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeUniquenessConstraintHasNMinusOneError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public UniquenessConstraintHasNMinusOneError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UniquenessConstraintHasNMinusOneError CreateUniquenessConstraintHasNMinusOneError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (UniquenessConstraintHasNMinusOneError)partition.ElementFactory.CreateElementLink(typeof(UniquenessConstraintHasNMinusOneError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UniquenessConstraintHasNMinusOneError CreateAndInitializeUniquenessConstraintHasNMinusOneError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (UniquenessConstraintHasNMinusOneError)partition.ElementFactory.CreateElementLink(typeof(UniquenessConstraintHasNMinusOneError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for UniquenessConstraintHasNMinusOneError
	/// <summary>
	/// UniquenessConstraintHasNMinusOneError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError))]
	public sealed class UniquenessConstraintHasNMinusOneErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public UniquenessConstraintHasNMinusOneErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static UniquenessConstraintHasNMinusOneErrorElementFactoryCreator Instance
		{
			get
			{
				return new UniquenessConstraintHasNMinusOneErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError")]
	public  partial class RoleHasRolePlayerRequiredError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region RoleHasRolePlayerRequiredError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3d930f60-df77-482d-b522-aed091f46349";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = RoleHasRolePlayerRequiredError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = RoleHasRolePlayerRequiredError.MetaClassGuid;
		#endregion

		#region RolePlayerRequiredError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RolePlayerRequiredErrorMetaRoleGuidString = "35e5a908-dc07-4971-95a3-6f998ad80b5b";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RolePlayerRequiredErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredError")]
		public  Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredError RolePlayerRequiredError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredError)this.GetRolePlayer(RolePlayerRequiredErrorMetaRoleGuid); }
			set { this.SetRolePlayer(RolePlayerRequiredErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region Role's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RoleMetaRoleGuidString = "5a789e61-2569-4f9b-9186-fa4b575d39cf";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RoleMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.Role")]
		public  Neumont.Tools.ORM.ObjectModel.Role Role
		{
			get { return (Neumont.Tools.ORM.ObjectModel.Role)this.GetRolePlayer(RoleMetaRoleGuid); }
			set { this.SetRolePlayer(RoleMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region RoleHasRolePlayerRequiredError's Generated Constructor Code
	public  partial class RoleHasRolePlayerRequiredError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleHasRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleHasRolePlayerRequiredError CreateRoleHasRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateRoleHasRolePlayerRequiredError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleHasRolePlayerRequiredError CreateAndInitializeRoleHasRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRoleHasRolePlayerRequiredError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleHasRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleHasRolePlayerRequiredError CreateRoleHasRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (RoleHasRolePlayerRequiredError)partition.ElementFactory.CreateElementLink(typeof(RoleHasRolePlayerRequiredError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleHasRolePlayerRequiredError CreateAndInitializeRoleHasRolePlayerRequiredError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RoleHasRolePlayerRequiredError)partition.ElementFactory.CreateElementLink(typeof(RoleHasRolePlayerRequiredError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RoleHasRolePlayerRequiredError
	/// <summary>
	/// RoleHasRolePlayerRequiredError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError))]
	public sealed class RoleHasRolePlayerRequiredErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleHasRolePlayerRequiredErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RoleHasRolePlayerRequiredErrorElementFactoryCreator Instance
		{
			get
			{
				return new RoleHasRolePlayerRequiredErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError")]
	public  partial class EqualityConstraintHasEqualityImpliedByMandatoryError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region EqualityConstraintHasEqualityImpliedByMandatoryError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "80308cb5-fdf0-44dd-8a03-d8bb64dde146";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = EqualityConstraintHasEqualityImpliedByMandatoryError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = EqualityConstraintHasEqualityImpliedByMandatoryError.MetaClassGuid;
		#endregion

		#region EqualityImpliedByMandatoryError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String EqualityImpliedByMandatoryErrorMetaRoleGuidString = "4108fc75-346e-4ebc-a012-2e3e7692a6af";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid EqualityImpliedByMandatoryErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryError")]
		public  Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryError EqualityImpliedByMandatoryError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryError)this.GetRolePlayer(EqualityImpliedByMandatoryErrorMetaRoleGuid); }
			set { this.SetRolePlayer(EqualityImpliedByMandatoryErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region EqualityConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String EqualityConstraintMetaRoleGuidString = "fdf5af22-719b-47fb-ac2a-ef9bbe68e61e";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid EqualityConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraint")]
		public  Neumont.Tools.ORM.ObjectModel.EqualityConstraint EqualityConstraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.EqualityConstraint)this.GetRolePlayer(EqualityConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(EqualityConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region EqualityConstraintHasEqualityImpliedByMandatoryError's Generated Constructor Code
	public  partial class EqualityConstraintHasEqualityImpliedByMandatoryError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EqualityConstraintHasEqualityImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityConstraintHasEqualityImpliedByMandatoryError CreateEqualityConstraintHasEqualityImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateEqualityConstraintHasEqualityImpliedByMandatoryError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityConstraintHasEqualityImpliedByMandatoryError CreateAndInitializeEqualityConstraintHasEqualityImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeEqualityConstraintHasEqualityImpliedByMandatoryError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public EqualityConstraintHasEqualityImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityConstraintHasEqualityImpliedByMandatoryError CreateEqualityConstraintHasEqualityImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (EqualityConstraintHasEqualityImpliedByMandatoryError)partition.ElementFactory.CreateElementLink(typeof(EqualityConstraintHasEqualityImpliedByMandatoryError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static EqualityConstraintHasEqualityImpliedByMandatoryError CreateAndInitializeEqualityConstraintHasEqualityImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (EqualityConstraintHasEqualityImpliedByMandatoryError)partition.ElementFactory.CreateElementLink(typeof(EqualityConstraintHasEqualityImpliedByMandatoryError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for EqualityConstraintHasEqualityImpliedByMandatoryError
	/// <summary>
	/// EqualityConstraintHasEqualityImpliedByMandatoryError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError))]
	public sealed class EqualityConstraintHasEqualityImpliedByMandatoryErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EqualityConstraintHasEqualityImpliedByMandatoryErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static EqualityConstraintHasEqualityImpliedByMandatoryErrorElementFactoryCreator Instance
		{
			get
			{
				return new EqualityConstraintHasEqualityImpliedByMandatoryErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError")]
	public  partial class ObjectTypeHasEntityTypeRequiresReferenceSchemeError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ObjectTypeHasEntityTypeRequiresReferenceSchemeError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "92e220d3-1ff5-487d-bb01-9343fa460cf2";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ObjectTypeHasEntityTypeRequiresReferenceSchemeError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ObjectTypeHasEntityTypeRequiresReferenceSchemeError.MetaClassGuid;
		#endregion

		#region ReferenceSchemeError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReferenceSchemeErrorMetaRoleGuidString = "c4ac92c4-08b5-4d06-b2af-24a9c1bd9b89";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReferenceSchemeErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeError")]
		public  Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeError ReferenceSchemeError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeError)this.GetRolePlayer(ReferenceSchemeErrorMetaRoleGuid); }
			set { this.SetRolePlayer(ReferenceSchemeErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region ObjectType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ObjectTypeMetaRoleGuidString = "6c31dffd-3f72-434f-98ea-82a98e06bce6";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ObjectTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectType")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectType ObjectType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(ObjectTypeMetaRoleGuid); }
			set { this.SetRolePlayer(ObjectTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ObjectTypeHasEntityTypeRequiresReferenceSchemeError's Generated Constructor Code
	public  partial class ObjectTypeHasEntityTypeRequiresReferenceSchemeError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasEntityTypeRequiresReferenceSchemeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasEntityTypeRequiresReferenceSchemeError CreateObjectTypeHasEntityTypeRequiresReferenceSchemeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateObjectTypeHasEntityTypeRequiresReferenceSchemeError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasEntityTypeRequiresReferenceSchemeError CreateAndInitializeObjectTypeHasEntityTypeRequiresReferenceSchemeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectTypeHasEntityTypeRequiresReferenceSchemeError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasEntityTypeRequiresReferenceSchemeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasEntityTypeRequiresReferenceSchemeError CreateObjectTypeHasEntityTypeRequiresReferenceSchemeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ObjectTypeHasEntityTypeRequiresReferenceSchemeError)partition.ElementFactory.CreateElementLink(typeof(ObjectTypeHasEntityTypeRequiresReferenceSchemeError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasEntityTypeRequiresReferenceSchemeError CreateAndInitializeObjectTypeHasEntityTypeRequiresReferenceSchemeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectTypeHasEntityTypeRequiresReferenceSchemeError)partition.ElementFactory.CreateElementLink(typeof(ObjectTypeHasEntityTypeRequiresReferenceSchemeError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectTypeHasEntityTypeRequiresReferenceSchemeError
	/// <summary>
	/// ObjectTypeHasEntityTypeRequiresReferenceSchemeError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError))]
	public sealed class ObjectTypeHasEntityTypeRequiresReferenceSchemeErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasEntityTypeRequiresReferenceSchemeErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectTypeHasEntityTypeRequiresReferenceSchemeErrorElementFactoryCreator Instance
		{
			get
			{
				return new ObjectTypeHasEntityTypeRequiresReferenceSchemeErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError")]
	public  partial class MandatoryConstraintHasMandatoryImpliedByMandatoryError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region MandatoryConstraintHasMandatoryImpliedByMandatoryError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "24765452-d1f9-48e5-b2d2-c222703a93cd";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = MandatoryConstraintHasMandatoryImpliedByMandatoryError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = MandatoryConstraintHasMandatoryImpliedByMandatoryError.MetaClassGuid;
		#endregion

		#region ImpliedByMandatoryError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ImpliedByMandatoryErrorMetaRoleGuidString = "3e6d6499-cad9-4764-8387-4f8a4d4ecf05";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ImpliedByMandatoryErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.ImpliedByMandatoryErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.ImpliedByMandatoryErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.ImpliedByMandatoryError")]
		public  Neumont.Tools.ORM.ObjectModel.MandatoryImpliedByMandatoryError ImpliedByMandatoryError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.MandatoryImpliedByMandatoryError)this.GetRolePlayer(ImpliedByMandatoryErrorMetaRoleGuid); }
			set { this.SetRolePlayer(ImpliedByMandatoryErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region MandatoryConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String MandatoryConstraintMetaRoleGuidString = "cf3b1ba2-1ae9-4481-b437-12939e2df798";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid MandatoryConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.MandatoryConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.MandatoryConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError.MandatoryConstraint")]
		public  Neumont.Tools.ORM.ObjectModel.MandatoryConstraint MandatoryConstraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.MandatoryConstraint)this.GetRolePlayer(MandatoryConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(MandatoryConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region MandatoryConstraintHasMandatoryImpliedByMandatoryError's Generated Constructor Code
	public  partial class MandatoryConstraintHasMandatoryImpliedByMandatoryError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MandatoryConstraintHasMandatoryImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MandatoryConstraintHasMandatoryImpliedByMandatoryError CreateMandatoryConstraintHasMandatoryImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateMandatoryConstraintHasMandatoryImpliedByMandatoryError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MandatoryConstraintHasMandatoryImpliedByMandatoryError CreateAndInitializeMandatoryConstraintHasMandatoryImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeMandatoryConstraintHasMandatoryImpliedByMandatoryError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public MandatoryConstraintHasMandatoryImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MandatoryConstraintHasMandatoryImpliedByMandatoryError CreateMandatoryConstraintHasMandatoryImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (MandatoryConstraintHasMandatoryImpliedByMandatoryError)partition.ElementFactory.CreateElementLink(typeof(MandatoryConstraintHasMandatoryImpliedByMandatoryError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static MandatoryConstraintHasMandatoryImpliedByMandatoryError CreateAndInitializeMandatoryConstraintHasMandatoryImpliedByMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (MandatoryConstraintHasMandatoryImpliedByMandatoryError)partition.ElementFactory.CreateElementLink(typeof(MandatoryConstraintHasMandatoryImpliedByMandatoryError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for MandatoryConstraintHasMandatoryImpliedByMandatoryError
	/// <summary>
	/// MandatoryConstraintHasMandatoryImpliedByMandatoryError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError))]
	public sealed class MandatoryConstraintHasMandatoryImpliedByMandatoryErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MandatoryConstraintHasMandatoryImpliedByMandatoryErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasMandatoryImpliedByMandatoryError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static MandatoryConstraintHasMandatoryImpliedByMandatoryErrorElementFactoryCreator Instance
		{
			get
			{
				return new MandatoryConstraintHasMandatoryImpliedByMandatoryErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError")]
	public  partial class FrequencyConstraintHasFrequencyConstraintMinMaxError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region FrequencyConstraintHasFrequencyConstraintMinMaxError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "48db4517-59eb-4fc7-b9d7-522d76a299fd";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FrequencyConstraintHasFrequencyConstraintMinMaxError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FrequencyConstraintHasFrequencyConstraintMinMaxError.MetaClassGuid;
		#endregion

		#region FrequencyConstraintMinMaxError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FrequencyConstraintMinMaxErrorMetaRoleGuidString = "4cb15135-7033-4a3c-ad60-57996b2819fe";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FrequencyConstraintMinMaxErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxError")]
		public  Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxError FrequencyConstraintMinMaxError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxError)this.GetRolePlayer(FrequencyConstraintMinMaxErrorMetaRoleGuid); }
			set { this.SetRolePlayer(FrequencyConstraintMinMaxErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region FrequencyConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FrequencyConstraintMetaRoleGuidString = "fe6ddbaf-145d-4a9f-b659-fbf7af4a98b8";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FrequencyConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraint")]
		public  Neumont.Tools.ORM.ObjectModel.FrequencyConstraint FrequencyConstraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FrequencyConstraint)this.GetRolePlayer(FrequencyConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(FrequencyConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FrequencyConstraintHasFrequencyConstraintMinMaxError's Generated Constructor Code
	public  partial class FrequencyConstraintHasFrequencyConstraintMinMaxError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraintHasFrequencyConstraintMinMaxError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintHasFrequencyConstraintMinMaxError CreateFrequencyConstraintHasFrequencyConstraintMinMaxError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFrequencyConstraintHasFrequencyConstraintMinMaxError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintHasFrequencyConstraintMinMaxError CreateAndInitializeFrequencyConstraintHasFrequencyConstraintMinMaxError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFrequencyConstraintHasFrequencyConstraintMinMaxError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraintHasFrequencyConstraintMinMaxError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintHasFrequencyConstraintMinMaxError CreateFrequencyConstraintHasFrequencyConstraintMinMaxError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FrequencyConstraintHasFrequencyConstraintMinMaxError)partition.ElementFactory.CreateElementLink(typeof(FrequencyConstraintHasFrequencyConstraintMinMaxError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintHasFrequencyConstraintMinMaxError CreateAndInitializeFrequencyConstraintHasFrequencyConstraintMinMaxError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FrequencyConstraintHasFrequencyConstraintMinMaxError)partition.ElementFactory.CreateElementLink(typeof(FrequencyConstraintHasFrequencyConstraintMinMaxError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FrequencyConstraintHasFrequencyConstraintMinMaxError
	/// <summary>
	/// FrequencyConstraintHasFrequencyConstraintMinMaxError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError))]
	public sealed class FrequencyConstraintHasFrequencyConstraintMinMaxErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraintHasFrequencyConstraintMinMaxErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FrequencyConstraintHasFrequencyConstraintMinMaxErrorElementFactoryCreator Instance
		{
			get
			{
				return new FrequencyConstraintHasFrequencyConstraintMinMaxErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMExtendableElementHasExtensionElement.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ORMExtendableElementHasExtensionElement")]
	public abstract partial class ORMExtendableElementHasExtensionElement : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ORMExtendableElementHasExtensionElement's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "780a6c20-d6e6-4b6e-b3ac-5715a2537b6e";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMExtendableElementHasExtensionElement.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ORMExtendableElementHasExtensionElement.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ORMExtendableElementHasExtensionElement.MetaClassGuid;
		#endregion

	}
	#region ORMExtendableElementHasExtensionElement's Generated Constructor Code
	public abstract partial class ORMExtendableElementHasExtensionElement
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ORMExtendableElementHasExtensionElement(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement")]
	public  partial class ORMNamedElementHasExtensionElement : Neumont.Tools.ORM.ObjectModel.ORMExtendableElementHasExtensionElement
	{
		#region ORMNamedElementHasExtensionElement's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "279023be-e4f2-427c-a7c4-43b0b16d5aac";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ORMNamedElementHasExtensionElement.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ORMNamedElementHasExtensionElement.MetaClassGuid;
		#endregion

		#region ExtensionCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ExtensionCollectionMetaRoleGuidString = "bfa5f7fb-d2f3-4444-a76a-c1cfc00293a3";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ExtensionCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement.ExtensionCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement.ExtensionCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement.ExtensionCollection")]
		public  Microsoft.VisualStudio.Modeling.ModelElement ExtensionCollection
		{
			get { return (Microsoft.VisualStudio.Modeling.ModelElement)this.GetRolePlayer(ExtensionCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ExtensionCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ExtendedElement's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ExtendedElementMetaRoleGuidString = "e9ef89d1-bc6d-4348-9966-2a24093a3798";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ExtendedElementMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement.ExtendedElementMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement.ExtendedElementMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement.ExtendedElement")]
		public  Neumont.Tools.ORM.ObjectModel.ORMNamedElement ExtendedElement
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ORMNamedElement)this.GetRolePlayer(ExtendedElementMetaRoleGuid); }
			set { this.SetRolePlayer(ExtendedElementMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ORMNamedElementHasExtensionElement's Generated Constructor Code
	public  partial class ORMNamedElementHasExtensionElement
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMNamedElementHasExtensionElement(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMNamedElementHasExtensionElement CreateORMNamedElementHasExtensionElement(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateORMNamedElementHasExtensionElement(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMNamedElementHasExtensionElement CreateAndInitializeORMNamedElementHasExtensionElement(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeORMNamedElementHasExtensionElement(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMNamedElementHasExtensionElement(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMNamedElementHasExtensionElement CreateORMNamedElementHasExtensionElement(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ORMNamedElementHasExtensionElement)partition.ElementFactory.CreateElementLink(typeof(ORMNamedElementHasExtensionElement), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMNamedElementHasExtensionElement CreateAndInitializeORMNamedElementHasExtensionElement(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ORMNamedElementHasExtensionElement)partition.ElementFactory.CreateElementLink(typeof(ORMNamedElementHasExtensionElement), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ORMNamedElementHasExtensionElement
	/// <summary>
	/// ORMNamedElementHasExtensionElement Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement))]
	public sealed class ORMNamedElementHasExtensionElementElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMNamedElementHasExtensionElementElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionElement( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ORMNamedElementHasExtensionElementElementFactoryCreator Instance
		{
			get
			{
				return new ORMNamedElementHasExtensionElementElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement")]
	public  partial class ORMModelElementHasExtensionElement : Neumont.Tools.ORM.ObjectModel.ORMExtendableElementHasExtensionElement
	{
		#region ORMModelElementHasExtensionElement's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "ef78e4b4-d4e5-4209-b050-2c64adb89e9f";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ORMModelElementHasExtensionElement.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ORMModelElementHasExtensionElement.MetaClassGuid;
		#endregion

		#region ExtensionCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ExtensionCollectionMetaRoleGuidString = "1d5b9d81-3a3a-4282-8d89-19ce9b29b2e5";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ExtensionCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtensionCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtensionCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtensionCollection")]
		public  Microsoft.VisualStudio.Modeling.ModelElement ExtensionCollection
		{
			get { return (Microsoft.VisualStudio.Modeling.ModelElement)this.GetRolePlayer(ExtensionCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ExtensionCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ExtendedElement's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ExtendedElementMetaRoleGuidString = "669fdd3d-065c-47cd-89c5-36774280c2c3";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ExtendedElementMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtendedElementMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtendedElementMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtendedElement")]
		public  Neumont.Tools.ORM.ObjectModel.ORMModelElement ExtendedElement
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ORMModelElement)this.GetRolePlayer(ExtendedElementMetaRoleGuid); }
			set { this.SetRolePlayer(ExtendedElementMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ORMModelElementHasExtensionElement's Generated Constructor Code
	public  partial class ORMModelElementHasExtensionElement
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMModelElementHasExtensionElement(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMModelElementHasExtensionElement CreateORMModelElementHasExtensionElement(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateORMModelElementHasExtensionElement(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMModelElementHasExtensionElement CreateAndInitializeORMModelElementHasExtensionElement(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeORMModelElementHasExtensionElement(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMModelElementHasExtensionElement(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMModelElementHasExtensionElement CreateORMModelElementHasExtensionElement(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ORMModelElementHasExtensionElement)partition.ElementFactory.CreateElementLink(typeof(ORMModelElementHasExtensionElement), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMModelElementHasExtensionElement CreateAndInitializeORMModelElementHasExtensionElement(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ORMModelElementHasExtensionElement)partition.ElementFactory.CreateElementLink(typeof(ORMModelElementHasExtensionElement), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ORMModelElementHasExtensionElement
	/// <summary>
	/// ORMModelElementHasExtensionElement Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement))]
	public sealed class ORMModelElementHasExtensionElementElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMModelElementHasExtensionElementElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ORMModelElementHasExtensionElementElementFactoryCreator Instance
		{
			get
			{
				return new ORMModelElementHasExtensionElementElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMExtendableElementHasExtensionModelError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ORMExtendableElementHasExtensionModelError")]
	public abstract partial class ORMExtendableElementHasExtensionModelError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ORMExtendableElementHasExtensionModelError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "b06c6e97-c334-49e2-812a-352b5efe49bc";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMExtendableElementHasExtensionModelError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ORMExtendableElementHasExtensionModelError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ORMExtendableElementHasExtensionModelError.MetaClassGuid;
		#endregion

	}
	#region ORMExtendableElementHasExtensionModelError's Generated Constructor Code
	public abstract partial class ORMExtendableElementHasExtensionModelError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ORMExtendableElementHasExtensionModelError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError")]
	public  partial class ORMNamedElementHasExtensionModelError : Neumont.Tools.ORM.ObjectModel.ORMExtendableElementHasExtensionModelError
	{
		#region ORMNamedElementHasExtensionModelError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "0004ccc3-0998-432e-9403-afcc981a7adb";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ORMNamedElementHasExtensionModelError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ORMNamedElementHasExtensionModelError.MetaClassGuid;
		#endregion

		#region ExtensionModelErrorCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ExtensionModelErrorCollectionMetaRoleGuidString = "7b7d344e-0676-4397-a15e-dfe7c66edc9c";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ExtensionModelErrorCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError.ExtensionModelErrorCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError.ExtensionModelErrorCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError.ExtensionModelErrorCollection")]
		public  Neumont.Tools.ORM.ObjectModel.ModelError ExtensionModelErrorCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ModelError)this.GetRolePlayer(ExtensionModelErrorCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ExtensionModelErrorCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ExtendedElement's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ExtendedElementMetaRoleGuidString = "1d7b4e73-9873-4021-8c88-bb7e74b7b9f6";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ExtendedElementMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError.ExtendedElementMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError.ExtendedElementMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError.ExtendedElement")]
		public  Neumont.Tools.ORM.ObjectModel.ORMNamedElement ExtendedElement
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ORMNamedElement)this.GetRolePlayer(ExtendedElementMetaRoleGuid); }
			set { this.SetRolePlayer(ExtendedElementMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ORMNamedElementHasExtensionModelError's Generated Constructor Code
	public  partial class ORMNamedElementHasExtensionModelError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMNamedElementHasExtensionModelError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMNamedElementHasExtensionModelError CreateORMNamedElementHasExtensionModelError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateORMNamedElementHasExtensionModelError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMNamedElementHasExtensionModelError CreateAndInitializeORMNamedElementHasExtensionModelError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeORMNamedElementHasExtensionModelError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMNamedElementHasExtensionModelError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMNamedElementHasExtensionModelError CreateORMNamedElementHasExtensionModelError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ORMNamedElementHasExtensionModelError)partition.ElementFactory.CreateElementLink(typeof(ORMNamedElementHasExtensionModelError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMNamedElementHasExtensionModelError CreateAndInitializeORMNamedElementHasExtensionModelError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ORMNamedElementHasExtensionModelError)partition.ElementFactory.CreateElementLink(typeof(ORMNamedElementHasExtensionModelError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ORMNamedElementHasExtensionModelError
	/// <summary>
	/// ORMNamedElementHasExtensionModelError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError))]
	public sealed class ORMNamedElementHasExtensionModelErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMNamedElementHasExtensionModelErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ORMNamedElementHasExtensionModelError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ORMNamedElementHasExtensionModelErrorElementFactoryCreator Instance
		{
			get
			{
				return new ORMNamedElementHasExtensionModelErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError")]
	public  partial class ORMModelElementHasExtensionModelError : Neumont.Tools.ORM.ObjectModel.ORMExtendableElementHasExtensionModelError
	{
		#region ORMModelElementHasExtensionModelError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c3ed4bff-c606-49d5-bf41-cd5c1bff17b8";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ORMModelElementHasExtensionModelError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ORMModelElementHasExtensionModelError.MetaClassGuid;
		#endregion

		#region ExtensionModelErrorCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ExtensionModelErrorCollectionMetaRoleGuidString = "ed7ce168-e200-4f9b-9176-85a195ff386d";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ExtensionModelErrorCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtensionModelErrorCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtensionModelErrorCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtensionModelErrorCollection")]
		public  Neumont.Tools.ORM.ObjectModel.ModelError ExtensionModelErrorCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ModelError)this.GetRolePlayer(ExtensionModelErrorCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ExtensionModelErrorCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ExtendedElement's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ExtendedElementMetaRoleGuidString = "08e186c3-ce0d-4591-a514-6131f86866a9";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ExtendedElementMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtendedElementMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtendedElementMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtendedElement")]
		public  Neumont.Tools.ORM.ObjectModel.ORMModelElement ExtendedElement
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ORMModelElement)this.GetRolePlayer(ExtendedElementMetaRoleGuid); }
			set { this.SetRolePlayer(ExtendedElementMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ORMModelElementHasExtensionModelError's Generated Constructor Code
	public  partial class ORMModelElementHasExtensionModelError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMModelElementHasExtensionModelError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMModelElementHasExtensionModelError CreateORMModelElementHasExtensionModelError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateORMModelElementHasExtensionModelError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMModelElementHasExtensionModelError CreateAndInitializeORMModelElementHasExtensionModelError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeORMModelElementHasExtensionModelError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMModelElementHasExtensionModelError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMModelElementHasExtensionModelError CreateORMModelElementHasExtensionModelError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ORMModelElementHasExtensionModelError)partition.ElementFactory.CreateElementLink(typeof(ORMModelElementHasExtensionModelError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMModelElementHasExtensionModelError CreateAndInitializeORMModelElementHasExtensionModelError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ORMModelElementHasExtensionModelError)partition.ElementFactory.CreateElementLink(typeof(ORMModelElementHasExtensionModelError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ORMModelElementHasExtensionModelError
	/// <summary>
	/// ORMModelElementHasExtensionModelError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError))]
	public sealed class ORMModelElementHasExtensionModelErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMModelElementHasExtensionModelErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ORMModelElementHasExtensionModelErrorElementFactoryCreator Instance
		{
			get
			{
				return new ORMModelElementHasExtensionModelErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType")]
	public  partial class ObjectificationImpliesFactType : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ObjectificationImpliesFactType's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "8bc2a4f5-890a-45c9-8600-1424c1371322";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ObjectificationImpliesFactType.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ObjectificationImpliesFactType.MetaClassGuid;
		#endregion

		#region ImpliedFactTypeCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ImpliedFactTypeCollectionMetaRoleGuidString = "8b431735-2115-42b4-bd0d-d8956238a480";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ImpliedFactTypeCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeCollection")]
		public  Neumont.Tools.ORM.ObjectModel.FactType ImpliedFactTypeCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(ImpliedFactTypeCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ImpliedFactTypeCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ImpliedByObjectification's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ImpliedByObjectificationMetaRoleGuidString = "56a35a2f-83bc-4124-b161-5f1357ab91ed";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ImpliedByObjectificationMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectificationMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectificationMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectification")]
		public  Neumont.Tools.ORM.ObjectModel.Objectification ImpliedByObjectification
		{
			get { return (Neumont.Tools.ORM.ObjectModel.Objectification)this.GetRolePlayer(ImpliedByObjectificationMetaRoleGuid); }
			set { this.SetRolePlayer(ImpliedByObjectificationMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ObjectificationImpliesFactType's Generated Constructor Code
	public  partial class ObjectificationImpliesFactType
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectificationImpliesFactType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectificationImpliesFactType CreateObjectificationImpliesFactType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateObjectificationImpliesFactType(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectificationImpliesFactType CreateAndInitializeObjectificationImpliesFactType(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectificationImpliesFactType(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectificationImpliesFactType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectificationImpliesFactType CreateObjectificationImpliesFactType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ObjectificationImpliesFactType)partition.ElementFactory.CreateElementLink(typeof(ObjectificationImpliesFactType), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectificationImpliesFactType CreateAndInitializeObjectificationImpliesFactType(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectificationImpliesFactType)partition.ElementFactory.CreateElementLink(typeof(ObjectificationImpliesFactType), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectificationImpliesFactType
	/// <summary>
	/// ObjectificationImpliesFactType Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType))]
	public sealed class ObjectificationImpliesFactTypeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectificationImpliesFactTypeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectificationImpliesFactTypeElementFactoryCreator Instance
		{
			get
			{
				return new ObjectificationImpliesFactTypeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError")]
	public  partial class ValueRangeHasMaxValueMismatchError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ValueRangeHasMaxValueMismatchError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "463c130a-b81b-4000-8a77-9b1d3e8ac213";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ValueRangeHasMaxValueMismatchError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ValueRangeHasMaxValueMismatchError.MetaClassGuid;
		#endregion

		#region MaxValueMismatchError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String MaxValueMismatchErrorMetaRoleGuidString = "e1106d80-3da0-455c-b95b-5b06552da7e3";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid MaxValueMismatchErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchError")]
		public  Neumont.Tools.ORM.ObjectModel.MaxValueMismatchError MaxValueMismatchError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.MaxValueMismatchError)this.GetRolePlayer(MaxValueMismatchErrorMetaRoleGuid); }
			set { this.SetRolePlayer(MaxValueMismatchErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region ValueRange's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueRangeMetaRoleGuidString = "f9b3976a-149b-484d-a8aa-779d25f096a9";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueRangeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRange")]
		public  Neumont.Tools.ORM.ObjectModel.ValueRange ValueRange
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ValueRange)this.GetRolePlayer(ValueRangeMetaRoleGuid); }
			set { this.SetRolePlayer(ValueRangeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ValueRangeHasMaxValueMismatchError's Generated Constructor Code
	public  partial class ValueRangeHasMaxValueMismatchError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRangeHasMaxValueMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeHasMaxValueMismatchError CreateValueRangeHasMaxValueMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateValueRangeHasMaxValueMismatchError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeHasMaxValueMismatchError CreateAndInitializeValueRangeHasMaxValueMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueRangeHasMaxValueMismatchError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRangeHasMaxValueMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeHasMaxValueMismatchError CreateValueRangeHasMaxValueMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ValueRangeHasMaxValueMismatchError)partition.ElementFactory.CreateElementLink(typeof(ValueRangeHasMaxValueMismatchError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeHasMaxValueMismatchError CreateAndInitializeValueRangeHasMaxValueMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueRangeHasMaxValueMismatchError)partition.ElementFactory.CreateElementLink(typeof(ValueRangeHasMaxValueMismatchError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueRangeHasMaxValueMismatchError
	/// <summary>
	/// ValueRangeHasMaxValueMismatchError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError))]
	public sealed class ValueRangeHasMaxValueMismatchErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRangeHasMaxValueMismatchErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueRangeHasMaxValueMismatchErrorElementFactoryCreator Instance
		{
			get
			{
				return new ValueRangeHasMaxValueMismatchErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError")]
	public  partial class FactTypeHasImpliedInternalUniquenessConstraintError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region FactTypeHasImpliedInternalUniquenessConstraintError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c570ff8d-3cdf-45b4-8782-6025bd4350fb";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactTypeHasImpliedInternalUniquenessConstraintError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactTypeHasImpliedInternalUniquenessConstraintError.MetaClassGuid;
		#endregion

		#region ImpliedInternalUniquenessConstraintError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ImpliedInternalUniquenessConstraintErrorMetaRoleGuidString = "0b8bc62e-210d-4722-b277-ea53bbf77a65";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ImpliedInternalUniquenessConstraintErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintError")]
		public  Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintError ImpliedInternalUniquenessConstraintError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintError)this.GetRolePlayer(ImpliedInternalUniquenessConstraintErrorMetaRoleGuid); }
			set { this.SetRolePlayer(ImpliedInternalUniquenessConstraintErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeMetaRoleGuidString = "149d8a9d-2e40-40d4-a409-e0434f57f939";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactType")]
		public  Neumont.Tools.ORM.ObjectModel.FactType FactType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactTypeHasImpliedInternalUniquenessConstraintError's Generated Constructor Code
	public  partial class FactTypeHasImpliedInternalUniquenessConstraintError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasImpliedInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasImpliedInternalUniquenessConstraintError CreateFactTypeHasImpliedInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactTypeHasImpliedInternalUniquenessConstraintError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasImpliedInternalUniquenessConstraintError CreateAndInitializeFactTypeHasImpliedInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeHasImpliedInternalUniquenessConstraintError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasImpliedInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasImpliedInternalUniquenessConstraintError CreateFactTypeHasImpliedInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactTypeHasImpliedInternalUniquenessConstraintError)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasImpliedInternalUniquenessConstraintError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasImpliedInternalUniquenessConstraintError CreateAndInitializeFactTypeHasImpliedInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeHasImpliedInternalUniquenessConstraintError)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasImpliedInternalUniquenessConstraintError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeHasImpliedInternalUniquenessConstraintError
	/// <summary>
	/// FactTypeHasImpliedInternalUniquenessConstraintError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError))]
	public sealed class FactTypeHasImpliedInternalUniquenessConstraintErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasImpliedInternalUniquenessConstraintErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeHasImpliedInternalUniquenessConstraintErrorElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeHasImpliedInternalUniquenessConstraintErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError")]
	public  partial class SetConstraintHasTooFewRoleSequencesError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region SetConstraintHasTooFewRoleSequencesError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "354d6ef5-c948-4917-a0ac-c510efa34633";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SetConstraintHasTooFewRoleSequencesError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SetConstraintHasTooFewRoleSequencesError.MetaClassGuid;
		#endregion

		#region TooFewRoleSequencesError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String TooFewRoleSequencesErrorMetaRoleGuidString = "8b5fdab2-57ed-4b17-a5a0-8bd667e31b26";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid TooFewRoleSequencesErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesError")]
		public  Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError TooFewRoleSequencesError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError)this.GetRolePlayer(TooFewRoleSequencesErrorMetaRoleGuid); }
			set { this.SetRolePlayer(TooFewRoleSequencesErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region SetConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SetConstraintMetaRoleGuidString = "3060f3ea-ceae-42dc-93bf-866a8f1c3010";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SetConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraint")]
		public  Neumont.Tools.ORM.ObjectModel.SetConstraint SetConstraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetConstraint)this.GetRolePlayer(SetConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(SetConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SetConstraintHasTooFewRoleSequencesError's Generated Constructor Code
	public  partial class SetConstraintHasTooFewRoleSequencesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetConstraintHasTooFewRoleSequencesError CreateSetConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSetConstraintHasTooFewRoleSequencesError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetConstraintHasTooFewRoleSequencesError CreateAndInitializeSetConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSetConstraintHasTooFewRoleSequencesError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SetConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetConstraintHasTooFewRoleSequencesError CreateSetConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SetConstraintHasTooFewRoleSequencesError)partition.ElementFactory.CreateElementLink(typeof(SetConstraintHasTooFewRoleSequencesError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetConstraintHasTooFewRoleSequencesError CreateAndInitializeSetConstraintHasTooFewRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SetConstraintHasTooFewRoleSequencesError)partition.ElementFactory.CreateElementLink(typeof(SetConstraintHasTooFewRoleSequencesError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SetConstraintHasTooFewRoleSequencesError
	/// <summary>
	/// SetConstraintHasTooFewRoleSequencesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError))]
	public sealed class SetConstraintHasTooFewRoleSequencesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetConstraintHasTooFewRoleSequencesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SetConstraintHasTooFewRoleSequencesErrorElementFactoryCreator Instance
		{
			get
			{
				return new SetConstraintHasTooFewRoleSequencesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError")]
	public  partial class SetConstraintHasTooManyRoleSequencesError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region SetConstraintHasTooManyRoleSequencesError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "f685399f-1245-4cf8-a345-d5fdd84f2585";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SetConstraintHasTooManyRoleSequencesError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SetConstraintHasTooManyRoleSequencesError.MetaClassGuid;
		#endregion

		#region TooManyRoleSequencesError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String TooManyRoleSequencesErrorMetaRoleGuidString = "622c5d2f-e667-4619-a390-0979056e7c70";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid TooManyRoleSequencesErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesError")]
		public  Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError TooManyRoleSequencesError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError)this.GetRolePlayer(TooManyRoleSequencesErrorMetaRoleGuid); }
			set { this.SetRolePlayer(TooManyRoleSequencesErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region SetConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SetConstraintMetaRoleGuidString = "3549c902-5897-41c5-a08b-c50d15573fc7";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SetConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraint")]
		public  Neumont.Tools.ORM.ObjectModel.SetConstraint SetConstraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.SetConstraint)this.GetRolePlayer(SetConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(SetConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SetConstraintHasTooManyRoleSequencesError's Generated Constructor Code
	public  partial class SetConstraintHasTooManyRoleSequencesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetConstraintHasTooManyRoleSequencesError CreateSetConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSetConstraintHasTooManyRoleSequencesError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetConstraintHasTooManyRoleSequencesError CreateAndInitializeSetConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSetConstraintHasTooManyRoleSequencesError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SetConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetConstraintHasTooManyRoleSequencesError CreateSetConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SetConstraintHasTooManyRoleSequencesError)partition.ElementFactory.CreateElementLink(typeof(SetConstraintHasTooManyRoleSequencesError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SetConstraintHasTooManyRoleSequencesError CreateAndInitializeSetConstraintHasTooManyRoleSequencesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SetConstraintHasTooManyRoleSequencesError)partition.ElementFactory.CreateElementLink(typeof(SetConstraintHasTooManyRoleSequencesError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SetConstraintHasTooManyRoleSequencesError
	/// <summary>
	/// SetConstraintHasTooManyRoleSequencesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError))]
	public sealed class SetConstraintHasTooManyRoleSequencesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SetConstraintHasTooManyRoleSequencesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SetConstraintHasTooManyRoleSequencesErrorElementFactoryCreator Instance
		{
			get
			{
				return new SetConstraintHasTooManyRoleSequencesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError")]
	public  partial class FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "5f82fcc3-231f-4466-ace8-ef180d51d463";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.MetaClassGuid;
		#endregion

		#region FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuidString = "03631ada-f0ac-4604-8e54-2ff31615a397";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection")]
		public  Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError)this.GetRolePlayer(FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region FrequencyConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FrequencyConstraintMetaRoleGuidString = "d652b46d-691f-4635-bca2-451407e1312b";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FrequencyConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraint")]
		public  Neumont.Tools.ORM.ObjectModel.FrequencyConstraint FrequencyConstraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FrequencyConstraint)this.GetRolePlayer(FrequencyConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(FrequencyConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError's Generated Constructor Code
	public  partial class FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError CreateFrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError CreateAndInitializeFrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError CreateFrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError)partition.ElementFactory.CreateElementLink(typeof(FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError CreateAndInitializeFrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError)partition.ElementFactory.CreateElementLink(typeof(FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError
	/// <summary>
	/// FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError))]
	public sealed class FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintErrorElementFactoryCreator Instance
		{
			get
			{
				return new FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError")]
	public  partial class RingConstraintHasRingConstraintTypeNotSpecifiedError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region RingConstraintHasRingConstraintTypeNotSpecifiedError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "9e0a3cd0-d451-407d-9611-0fb4cb820365";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = RingConstraintHasRingConstraintTypeNotSpecifiedError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = RingConstraintHasRingConstraintTypeNotSpecifiedError.MetaClassGuid;
		#endregion

		#region RingConstraintTypeNotSpecifiedError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RingConstraintTypeNotSpecifiedErrorMetaRoleGuidString = "98abb08f-429a-4272-840d-32f6c472cf99";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RingConstraintTypeNotSpecifiedErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedError")]
		public  Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedError RingConstraintTypeNotSpecifiedError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedError)this.GetRolePlayer(RingConstraintTypeNotSpecifiedErrorMetaRoleGuid); }
			set { this.SetRolePlayer(RingConstraintTypeNotSpecifiedErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region RingConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RingConstraintMetaRoleGuidString = "7c7dc555-457d-4391-9d6c-a19f2b06c544";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RingConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraint")]
		public  Neumont.Tools.ORM.ObjectModel.RingConstraint RingConstraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.RingConstraint)this.GetRolePlayer(RingConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(RingConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region RingConstraintHasRingConstraintTypeNotSpecifiedError's Generated Constructor Code
	public  partial class RingConstraintHasRingConstraintTypeNotSpecifiedError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraintHasRingConstraintTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraintHasRingConstraintTypeNotSpecifiedError CreateRingConstraintHasRingConstraintTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateRingConstraintHasRingConstraintTypeNotSpecifiedError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraintHasRingConstraintTypeNotSpecifiedError CreateAndInitializeRingConstraintHasRingConstraintTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRingConstraintHasRingConstraintTypeNotSpecifiedError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraintHasRingConstraintTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraintHasRingConstraintTypeNotSpecifiedError CreateRingConstraintHasRingConstraintTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (RingConstraintHasRingConstraintTypeNotSpecifiedError)partition.ElementFactory.CreateElementLink(typeof(RingConstraintHasRingConstraintTypeNotSpecifiedError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraintHasRingConstraintTypeNotSpecifiedError CreateAndInitializeRingConstraintHasRingConstraintTypeNotSpecifiedError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RingConstraintHasRingConstraintTypeNotSpecifiedError)partition.ElementFactory.CreateElementLink(typeof(RingConstraintHasRingConstraintTypeNotSpecifiedError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RingConstraintHasRingConstraintTypeNotSpecifiedError
	/// <summary>
	/// RingConstraintHasRingConstraintTypeNotSpecifiedError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError))]
	public sealed class RingConstraintHasRingConstraintTypeNotSpecifiedErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraintHasRingConstraintTypeNotSpecifiedErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RingConstraintHasRingConstraintTypeNotSpecifiedErrorElementFactoryCreator Instance
		{
			get
			{
				return new RingConstraintHasRingConstraintTypeNotSpecifiedErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError")]
	public  partial class ObjectTypeHasObjectTypeRequiresPrimarySupertypeError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ObjectTypeHasObjectTypeRequiresPrimarySupertypeError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "68e3a5d5-bb3c-4c0c-bb6d-245d5531fcb8";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.MetaClassGuid;
		#endregion

		#region ObjectTypeRequiresPrimarySupertypeError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ObjectTypeRequiresPrimarySupertypeErrorMetaRoleGuidString = "ae7f8f8f-ae73-4a18-bc68-a5138a579f5c";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ObjectTypeRequiresPrimarySupertypeErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeError")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeError ObjectTypeRequiresPrimarySupertypeError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeError)this.GetRolePlayer(ObjectTypeRequiresPrimarySupertypeErrorMetaRoleGuid); }
			set { this.SetRolePlayer(ObjectTypeRequiresPrimarySupertypeErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region ObjectType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ObjectTypeMetaRoleGuidString = "7e7e5ec4-1810-4427-93bd-711e5ac95dc8";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ObjectTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectType")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectType ObjectType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(ObjectTypeMetaRoleGuid); }
			set { this.SetRolePlayer(ObjectTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ObjectTypeHasObjectTypeRequiresPrimarySupertypeError's Generated Constructor Code
	public  partial class ObjectTypeHasObjectTypeRequiresPrimarySupertypeError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasObjectTypeRequiresPrimarySupertypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasObjectTypeRequiresPrimarySupertypeError CreateObjectTypeHasObjectTypeRequiresPrimarySupertypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateObjectTypeHasObjectTypeRequiresPrimarySupertypeError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasObjectTypeRequiresPrimarySupertypeError CreateAndInitializeObjectTypeHasObjectTypeRequiresPrimarySupertypeError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectTypeHasObjectTypeRequiresPrimarySupertypeError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasObjectTypeRequiresPrimarySupertypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasObjectTypeRequiresPrimarySupertypeError CreateObjectTypeHasObjectTypeRequiresPrimarySupertypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ObjectTypeHasObjectTypeRequiresPrimarySupertypeError)partition.ElementFactory.CreateElementLink(typeof(ObjectTypeHasObjectTypeRequiresPrimarySupertypeError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasObjectTypeRequiresPrimarySupertypeError CreateAndInitializeObjectTypeHasObjectTypeRequiresPrimarySupertypeError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectTypeHasObjectTypeRequiresPrimarySupertypeError)partition.ElementFactory.CreateElementLink(typeof(ObjectTypeHasObjectTypeRequiresPrimarySupertypeError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectTypeHasObjectTypeRequiresPrimarySupertypeError
	/// <summary>
	/// ObjectTypeHasObjectTypeRequiresPrimarySupertypeError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError))]
	public sealed class ObjectTypeHasObjectTypeRequiresPrimarySupertypeErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasObjectTypeRequiresPrimarySupertypeErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectTypeHasObjectTypeRequiresPrimarySupertypeErrorElementFactoryCreator Instance
		{
			get
			{
				return new ObjectTypeHasObjectTypeRequiresPrimarySupertypeErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasNote")]
	public  partial class FactTypeHasNote : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region FactTypeHasNote's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "7ad55585-14c6-427d-9147-c3b30bd45716";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactTypeHasNote.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactTypeHasNote.MetaClassGuid;
		#endregion

		#region Note's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String NoteMetaRoleGuidString = "5dd076c8-714e-4f46-a6bc-a14b960ed852";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid NoteMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.NoteMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.NoteMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.Note")]
		public  Neumont.Tools.ORM.ObjectModel.Note Note
		{
			get { return (Neumont.Tools.ORM.ObjectModel.Note)this.GetRolePlayer(NoteMetaRoleGuid); }
			set { this.SetRolePlayer(NoteMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeMetaRoleGuidString = "825b3774-7bb3-4ef5-96db-4d31aeb7202c";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactType")]
		public  Neumont.Tools.ORM.ObjectModel.FactType FactType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactTypeHasNote's Generated Constructor Code
	public  partial class FactTypeHasNote
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasNote(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasNote CreateFactTypeHasNote(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactTypeHasNote(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasNote CreateAndInitializeFactTypeHasNote(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeHasNote(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasNote(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasNote CreateFactTypeHasNote(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactTypeHasNote)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasNote), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasNote CreateAndInitializeFactTypeHasNote(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeHasNote)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasNote), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeHasNote
	/// <summary>
	/// FactTypeHasNote Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasNote))]
	public sealed class FactTypeHasNoteElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasNoteElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FactTypeHasNote( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeHasNoteElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeHasNoteElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote")]
	public  partial class ObjectTypeHasNote : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ObjectTypeHasNote's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "91af1156-2113-4f49-8e3f-b03e9ad9f084";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ObjectTypeHasNote.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ObjectTypeHasNote.MetaClassGuid;
		#endregion

		#region Note's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String NoteMetaRoleGuidString = "6e2d60f2-43fb-427c-b032-4f60f6d3b118";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid NoteMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.NoteMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.NoteMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.Note")]
		public  Neumont.Tools.ORM.ObjectModel.Note Note
		{
			get { return (Neumont.Tools.ORM.ObjectModel.Note)this.GetRolePlayer(NoteMetaRoleGuid); }
			set { this.SetRolePlayer(NoteMetaRoleGuid, value); }
		}
		
		#endregion
		#region ObjectType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ObjectTypeMetaRoleGuidString = "613f5c70-20c5-41df-9ed6-5ad59d5ccf08";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ObjectTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectType")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectType ObjectType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(ObjectTypeMetaRoleGuid); }
			set { this.SetRolePlayer(ObjectTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ObjectTypeHasNote's Generated Constructor Code
	public  partial class ObjectTypeHasNote
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasNote(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasNote CreateObjectTypeHasNote(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateObjectTypeHasNote(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasNote CreateAndInitializeObjectTypeHasNote(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectTypeHasNote(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasNote(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasNote CreateObjectTypeHasNote(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ObjectTypeHasNote)partition.ElementFactory.CreateElementLink(typeof(ObjectTypeHasNote), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasNote CreateAndInitializeObjectTypeHasNote(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectTypeHasNote)partition.ElementFactory.CreateElementLink(typeof(ObjectTypeHasNote), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectTypeHasNote
	/// <summary>
	/// ObjectTypeHasNote Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote))]
	public sealed class ObjectTypeHasNoteElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasNoteElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectTypeHasNoteElementFactoryCreator Instance
		{
			get
			{
				return new ObjectTypeHasNoteElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError")]
	public  partial class ObjectTypeHasCompatibleSupertypesError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ObjectTypeHasCompatibleSupertypesError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "fd77a9a0-997f-4289-8c5d-6dabfb9f75bf";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ObjectTypeHasCompatibleSupertypesError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ObjectTypeHasCompatibleSupertypesError.MetaClassGuid;
		#endregion

		#region CompatibleSupertypesError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String CompatibleSupertypesErrorMetaRoleGuidString = "4c7f5b10-0d8c-4064-ae10-a60759da5496";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid CompatibleSupertypesErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesError")]
		public  Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesError CompatibleSupertypesError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesError)this.GetRolePlayer(CompatibleSupertypesErrorMetaRoleGuid); }
			set { this.SetRolePlayer(CompatibleSupertypesErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region ObjectType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ObjectTypeMetaRoleGuidString = "4403485e-75d5-4e7a-84d2-0f8bf0cd0ab9";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ObjectTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectType")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectType ObjectType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(ObjectTypeMetaRoleGuid); }
			set { this.SetRolePlayer(ObjectTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ObjectTypeHasCompatibleSupertypesError's Generated Constructor Code
	public  partial class ObjectTypeHasCompatibleSupertypesError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasCompatibleSupertypesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasCompatibleSupertypesError CreateObjectTypeHasCompatibleSupertypesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateObjectTypeHasCompatibleSupertypesError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasCompatibleSupertypesError CreateAndInitializeObjectTypeHasCompatibleSupertypesError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectTypeHasCompatibleSupertypesError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasCompatibleSupertypesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasCompatibleSupertypesError CreateObjectTypeHasCompatibleSupertypesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ObjectTypeHasCompatibleSupertypesError)partition.ElementFactory.CreateElementLink(typeof(ObjectTypeHasCompatibleSupertypesError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasCompatibleSupertypesError CreateAndInitializeObjectTypeHasCompatibleSupertypesError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectTypeHasCompatibleSupertypesError)partition.ElementFactory.CreateElementLink(typeof(ObjectTypeHasCompatibleSupertypesError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectTypeHasCompatibleSupertypesError
	/// <summary>
	/// ObjectTypeHasCompatibleSupertypesError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError))]
	public sealed class ObjectTypeHasCompatibleSupertypesErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasCompatibleSupertypesErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectTypeHasCompatibleSupertypesErrorElementFactoryCreator Instance
		{
			get
			{
				return new ObjectTypeHasCompatibleSupertypesErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError")]
	public  partial class UniquenessConstraintHasUniquenessImpliedByUniquenessError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region UniquenessConstraintHasUniquenessImpliedByUniquenessError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "59346b60-b2c5-4942-b32e-744201e5aba9";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = UniquenessConstraintHasUniquenessImpliedByUniquenessError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = UniquenessConstraintHasUniquenessImpliedByUniquenessError.MetaClassGuid;
		#endregion

		#region ImpliedByUniquenessError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ImpliedByUniquenessErrorMetaRoleGuidString = "4d76f7f2-dfce-458f-8003-7745360372b0";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ImpliedByUniquenessErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.ImpliedByUniquenessErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.ImpliedByUniquenessErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.ImpliedByUniquenessError")]
		public  Neumont.Tools.ORM.ObjectModel.UniquenessImpliedByUniquenessError ImpliedByUniquenessError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.UniquenessImpliedByUniquenessError)this.GetRolePlayer(ImpliedByUniquenessErrorMetaRoleGuid); }
			set { this.SetRolePlayer(ImpliedByUniquenessErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region UniquenessConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String UniquenessConstraintMetaRoleGuidString = "3800537a-5acf-41b6-b3be-3a0654cc24ad";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid UniquenessConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.UniquenessConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.UniquenessConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError.UniquenessConstraint")]
		public  Neumont.Tools.ORM.ObjectModel.UniquenessConstraint UniquenessConstraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.UniquenessConstraint)this.GetRolePlayer(UniquenessConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(UniquenessConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region UniquenessConstraintHasUniquenessImpliedByUniquenessError's Generated Constructor Code
	public  partial class UniquenessConstraintHasUniquenessImpliedByUniquenessError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public UniquenessConstraintHasUniquenessImpliedByUniquenessError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UniquenessConstraintHasUniquenessImpliedByUniquenessError CreateUniquenessConstraintHasUniquenessImpliedByUniquenessError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateUniquenessConstraintHasUniquenessImpliedByUniquenessError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UniquenessConstraintHasUniquenessImpliedByUniquenessError CreateAndInitializeUniquenessConstraintHasUniquenessImpliedByUniquenessError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeUniquenessConstraintHasUniquenessImpliedByUniquenessError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public UniquenessConstraintHasUniquenessImpliedByUniquenessError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UniquenessConstraintHasUniquenessImpliedByUniquenessError CreateUniquenessConstraintHasUniquenessImpliedByUniquenessError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (UniquenessConstraintHasUniquenessImpliedByUniquenessError)partition.ElementFactory.CreateElementLink(typeof(UniquenessConstraintHasUniquenessImpliedByUniquenessError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static UniquenessConstraintHasUniquenessImpliedByUniquenessError CreateAndInitializeUniquenessConstraintHasUniquenessImpliedByUniquenessError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (UniquenessConstraintHasUniquenessImpliedByUniquenessError)partition.ElementFactory.CreateElementLink(typeof(UniquenessConstraintHasUniquenessImpliedByUniquenessError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for UniquenessConstraintHasUniquenessImpliedByUniquenessError
	/// <summary>
	/// UniquenessConstraintHasUniquenessImpliedByUniquenessError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError))]
	public sealed class UniquenessConstraintHasUniquenessImpliedByUniquenessErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public UniquenessConstraintHasUniquenessImpliedByUniquenessErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasUniquenessImpliedByUniquenessError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static UniquenessConstraintHasUniquenessImpliedByUniquenessErrorElementFactoryCreator Instance
		{
			get
			{
				return new UniquenessConstraintHasUniquenessImpliedByUniquenessErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError")]
	public  partial class ObjectTypeHasPreferredIdentifierRequiresMandatoryError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ObjectTypeHasPreferredIdentifierRequiresMandatoryError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "15496813-6de5-4d5a-bdb1-1e269b443254";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ObjectTypeHasPreferredIdentifierRequiresMandatoryError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ObjectTypeHasPreferredIdentifierRequiresMandatoryError.MetaClassGuid;
		#endregion

		#region PreferredIdentifierRequiresMandatoryError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String PreferredIdentifierRequiresMandatoryErrorMetaRoleGuidString = "9cf911a9-a36f-440e-9e5d-46d85362e336";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid PreferredIdentifierRequiresMandatoryErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryError")]
		public  Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryError PreferredIdentifierRequiresMandatoryError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryError)this.GetRolePlayer(PreferredIdentifierRequiresMandatoryErrorMetaRoleGuid); }
			set { this.SetRolePlayer(PreferredIdentifierRequiresMandatoryErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region ObjectType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ObjectTypeMetaRoleGuidString = "eb306daf-395f-4418-8143-8cecb4ab7312";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ObjectTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectType")]
		public  Neumont.Tools.ORM.ObjectModel.ObjectType ObjectType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ObjectType)this.GetRolePlayer(ObjectTypeMetaRoleGuid); }
			set { this.SetRolePlayer(ObjectTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ObjectTypeHasPreferredIdentifierRequiresMandatoryError's Generated Constructor Code
	public  partial class ObjectTypeHasPreferredIdentifierRequiresMandatoryError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasPreferredIdentifierRequiresMandatoryError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasPreferredIdentifierRequiresMandatoryError CreateObjectTypeHasPreferredIdentifierRequiresMandatoryError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateObjectTypeHasPreferredIdentifierRequiresMandatoryError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasPreferredIdentifierRequiresMandatoryError CreateAndInitializeObjectTypeHasPreferredIdentifierRequiresMandatoryError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectTypeHasPreferredIdentifierRequiresMandatoryError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasPreferredIdentifierRequiresMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasPreferredIdentifierRequiresMandatoryError CreateObjectTypeHasPreferredIdentifierRequiresMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ObjectTypeHasPreferredIdentifierRequiresMandatoryError)partition.ElementFactory.CreateElementLink(typeof(ObjectTypeHasPreferredIdentifierRequiresMandatoryError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeHasPreferredIdentifierRequiresMandatoryError CreateAndInitializeObjectTypeHasPreferredIdentifierRequiresMandatoryError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectTypeHasPreferredIdentifierRequiresMandatoryError)partition.ElementFactory.CreateElementLink(typeof(ObjectTypeHasPreferredIdentifierRequiresMandatoryError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectTypeHasPreferredIdentifierRequiresMandatoryError
	/// <summary>
	/// ObjectTypeHasPreferredIdentifierRequiresMandatoryError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError))]
	public sealed class ObjectTypeHasPreferredIdentifierRequiresMandatoryErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeHasPreferredIdentifierRequiresMandatoryErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectTypeHasPreferredIdentifierRequiresMandatoryErrorElementFactoryCreator Instance
		{
			get
			{
				return new ObjectTypeHasPreferredIdentifierRequiresMandatoryErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError")]
	public  partial class ValueConstraintHasValueRangeOverlapError : Neumont.Tools.ORM.ObjectModel.ORMElementLink
	{
		#region ValueConstraintHasValueRangeOverlapError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "eb7d2402-a919-4d86-83df-a0089863538c";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ValueConstraintHasValueRangeOverlapError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ValueConstraintHasValueRangeOverlapError.MetaClassGuid;
		#endregion

		#region ValueRangeOverlapError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueRangeOverlapErrorMetaRoleGuidString = "a081a6d9-3318-4ee5-b1a6-7a7abc78340b";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueRangeOverlapErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapError")]
		public  Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapError ValueRangeOverlapError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapError)this.GetRolePlayer(ValueRangeOverlapErrorMetaRoleGuid); }
			set { this.SetRolePlayer(ValueRangeOverlapErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region ValueConstraint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueConstraintMetaRoleGuidString = "09a72a0b-3ad4-45b2-bdc7-1beb3c12230e";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueConstraintMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraint")]
		public  Neumont.Tools.ORM.ObjectModel.ValueConstraint ValueConstraint
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ValueConstraint)this.GetRolePlayer(ValueConstraintMetaRoleGuid); }
			set { this.SetRolePlayer(ValueConstraintMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ValueConstraintHasValueRangeOverlapError's Generated Constructor Code
	public  partial class ValueConstraintHasValueRangeOverlapError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueConstraintHasValueRangeOverlapError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraintHasValueRangeOverlapError CreateValueConstraintHasValueRangeOverlapError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateValueConstraintHasValueRangeOverlapError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraintHasValueRangeOverlapError CreateAndInitializeValueConstraintHasValueRangeOverlapError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueConstraintHasValueRangeOverlapError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueConstraintHasValueRangeOverlapError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraintHasValueRangeOverlapError CreateValueConstraintHasValueRangeOverlapError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ValueConstraintHasValueRangeOverlapError)partition.ElementFactory.CreateElementLink(typeof(ValueConstraintHasValueRangeOverlapError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraintHasValueRangeOverlapError CreateAndInitializeValueConstraintHasValueRangeOverlapError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueConstraintHasValueRangeOverlapError)partition.ElementFactory.CreateElementLink(typeof(ValueConstraintHasValueRangeOverlapError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueConstraintHasValueRangeOverlapError
	/// <summary>
	/// ValueConstraintHasValueRangeOverlapError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError))]
	public sealed class ValueConstraintHasValueRangeOverlapErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueConstraintHasValueRangeOverlapErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueConstraintHasValueRangeOverlapErrorElementFactoryCreator Instance
		{
			get
			{
				return new ValueConstraintHasValueRangeOverlapErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError")]
	public  partial class ValueRangeHasMinValueMismatchError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ValueRangeHasMinValueMismatchError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "df243499-efe7-4e95-a0bf-9c4a6c954a0c";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ValueRangeHasMinValueMismatchError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ValueRangeHasMinValueMismatchError.MetaClassGuid;
		#endregion

		#region MinValueMismatchError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String MinValueMismatchErrorMetaRoleGuidString = "69a9bdbf-8167-4106-a7d4-c4f6199d761e";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid MinValueMismatchErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchError")]
		public  Neumont.Tools.ORM.ObjectModel.MinValueMismatchError MinValueMismatchError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.MinValueMismatchError)this.GetRolePlayer(MinValueMismatchErrorMetaRoleGuid); }
			set { this.SetRolePlayer(MinValueMismatchErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region ValueRange's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueRangeMetaRoleGuidString = "da145584-6a6f-4fd4-8b7f-1f8c61810777";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueRangeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRange")]
		public  Neumont.Tools.ORM.ObjectModel.ValueRange ValueRange
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ValueRange)this.GetRolePlayer(ValueRangeMetaRoleGuid); }
			set { this.SetRolePlayer(ValueRangeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ValueRangeHasMinValueMismatchError's Generated Constructor Code
	public  partial class ValueRangeHasMinValueMismatchError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRangeHasMinValueMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeHasMinValueMismatchError CreateValueRangeHasMinValueMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateValueRangeHasMinValueMismatchError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeHasMinValueMismatchError CreateAndInitializeValueRangeHasMinValueMismatchError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueRangeHasMinValueMismatchError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRangeHasMinValueMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeHasMinValueMismatchError CreateValueRangeHasMinValueMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ValueRangeHasMinValueMismatchError)partition.ElementFactory.CreateElementLink(typeof(ValueRangeHasMinValueMismatchError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeHasMinValueMismatchError CreateAndInitializeValueRangeHasMinValueMismatchError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueRangeHasMinValueMismatchError)partition.ElementFactory.CreateElementLink(typeof(ValueRangeHasMinValueMismatchError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueRangeHasMinValueMismatchError
	/// <summary>
	/// ValueRangeHasMinValueMismatchError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError))]
	public sealed class ValueRangeHasMinValueMismatchErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRangeHasMinValueMismatchErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueRangeHasMinValueMismatchErrorElementFactoryCreator Instance
		{
			get
			{
				return new ValueRangeHasMinValueMismatchErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError")]
	public  partial class FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "d2a1cf9b-b1cd-434b-9c0c-6653b282fdb4";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.MetaClassGuid;
		#endregion

		#region FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuidString = "d8da60bb-53e7-4977-b905-7863cbd8b9ab";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection")]
		public  Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError)this.GetRolePlayer(FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeMetaRoleGuidString = "6e187f8f-3278-4964-8481-ba002caddffd";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FactTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FactTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FactType")]
		public  Neumont.Tools.ORM.ObjectModel.FactType FactType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError's Generated Constructor Code
	public  partial class FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError CreateFactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError CreateAndInitializeFactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError CreateFactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError CreateAndInitializeFactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError
	/// <summary>
	/// FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError))]
	public sealed class FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintErrorElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError")]
	public  partial class ValueConstraintHasDuplicateNameError : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ValueConstraintHasDuplicateNameError's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "6dc7e1a9-206b-4a4e-9cdb-1872036a4025";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ValueConstraintHasDuplicateNameError.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ValueConstraintHasDuplicateNameError.MetaClassGuid;
		#endregion

		#region DuplicateNameError's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String DuplicateNameErrorMetaRoleGuidString = "8d5882fa-60f0-4c5b-8d57-727c5af15d53";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid DuplicateNameErrorMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.DuplicateNameErrorMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.DuplicateNameError")]
		public  Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError DuplicateNameError
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError)this.GetRolePlayer(DuplicateNameErrorMetaRoleGuid); }
			set { this.SetRolePlayer(DuplicateNameErrorMetaRoleGuid, value); }
		}
		
		#endregion
		#region ValueConstraintCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ValueConstraintCollectionMetaRoleGuidString = "49832416-d3dd-4ce0-b930-3802e23d44a1";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ValueConstraintCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintCollection")]
		public  Neumont.Tools.ORM.ObjectModel.ValueConstraint ValueConstraintCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ValueConstraint)this.GetRolePlayer(ValueConstraintCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(ValueConstraintCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ValueConstraintHasDuplicateNameError's Generated Constructor Code
	public  partial class ValueConstraintHasDuplicateNameError
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraintHasDuplicateNameError CreateValueConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateValueConstraintHasDuplicateNameError(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraintHasDuplicateNameError CreateAndInitializeValueConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueConstraintHasDuplicateNameError(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraintHasDuplicateNameError CreateValueConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ValueConstraintHasDuplicateNameError)partition.ElementFactory.CreateElementLink(typeof(ValueConstraintHasDuplicateNameError), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraintHasDuplicateNameError CreateAndInitializeValueConstraintHasDuplicateNameError(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueConstraintHasDuplicateNameError)partition.ElementFactory.CreateElementLink(typeof(ValueConstraintHasDuplicateNameError), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueConstraintHasDuplicateNameError
	/// <summary>
	/// ValueConstraintHasDuplicateNameError Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError))]
	public sealed class ValueConstraintHasDuplicateNameErrorElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueConstraintHasDuplicateNameErrorElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueConstraintHasDuplicateNameErrorElementFactoryCreator Instance
		{
			get
			{
				return new ValueConstraintHasDuplicateNameErrorElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasRole")]
	public  partial class FactTypeHasRole : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region FactTypeHasRole's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "67b8fc97-ca77-4e53-9bbe-8933e12a0c69";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactTypeHasRole.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactTypeHasRole.MetaClassGuid;
		#endregion

		#region RoleCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RoleCollectionMetaRoleGuidString = "ddd1eaad-3b73-423b-a49d-6732b19dedfd";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RoleCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.RoleCollection")]
		public  Neumont.Tools.ORM.ObjectModel.RoleBase RoleCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.RoleBase)this.GetRolePlayer(RoleCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(RoleCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeMetaRoleGuidString = "c6b9a1a7-befb-4d32-b3bc-d1bff7441fff";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.FactType")]
		public  Neumont.Tools.ORM.ObjectModel.FactType FactType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactTypeHasRole's Generated Constructor Code
	public  partial class FactTypeHasRole
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasRole CreateFactTypeHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactTypeHasRole(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasRole CreateAndInitializeFactTypeHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeHasRole(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasRole CreateFactTypeHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactTypeHasRole)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasRole), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasRole CreateAndInitializeFactTypeHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeHasRole)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasRole), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeHasRole
	/// <summary>
	/// FactTypeHasRole Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasRole))]
	public sealed class FactTypeHasRoleElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasRoleElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FactTypeHasRole( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeHasRoleElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeHasRoleElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole")]
	public  partial class ReadingOrderHasRole : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ReadingOrderHasRole's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "145462ba-d79f-476f-8205-276fd648efc5";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ReadingOrderHasRole.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ReadingOrderHasRole.MetaClassGuid;
		#endregion

		#region RoleCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RoleCollectionMetaRoleGuidString = "f0fa23e9-600c-4a0a-9f44-40519538c28b";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RoleCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.RoleCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.RoleCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.RoleCollection")]
		public  Neumont.Tools.ORM.ObjectModel.RoleBase RoleCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.RoleBase)this.GetRolePlayer(RoleCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(RoleCollectionMetaRoleGuid, value); }
		}
		
		#endregion
		#region ReadingOrder's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ReadingOrderMetaRoleGuidString = "8e8e6961-ee1d-4545-ab6e-1288bdeb6554";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ReadingOrderMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.ReadingOrderMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.ReadingOrderMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.ReadingOrder")]
		public  Neumont.Tools.ORM.ObjectModel.ReadingOrder ReadingOrder
		{
			get { return (Neumont.Tools.ORM.ObjectModel.ReadingOrder)this.GetRolePlayer(ReadingOrderMetaRoleGuid); }
			set { this.SetRolePlayer(ReadingOrderMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ReadingOrderHasRole's Generated Constructor Code
	public  partial class ReadingOrderHasRole
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrderHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrderHasRole CreateReadingOrderHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateReadingOrderHasRole(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrderHasRole CreateAndInitializeReadingOrderHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReadingOrderHasRole(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrderHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrderHasRole CreateReadingOrderHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ReadingOrderHasRole)partition.ElementFactory.CreateElementLink(typeof(ReadingOrderHasRole), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingOrderHasRole CreateAndInitializeReadingOrderHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ReadingOrderHasRole)partition.ElementFactory.CreateElementLink(typeof(ReadingOrderHasRole), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ReadingOrderHasRole
	/// <summary>
	/// ReadingOrderHasRole Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole))]
	public sealed class ReadingOrderHasRoleElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingOrderHasRoleElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReadingOrderHasRoleElementFactoryCreator Instance
		{
			get
			{
				return new ReadingOrderHasRoleElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole")]
	public  partial class RoleProxyHasRole : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region RoleProxyHasRole's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "47a6a413-331e-4ad2-93bf-5a91cdcf5e1e";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = RoleProxyHasRole.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = RoleProxyHasRole.MetaClassGuid;
		#endregion

		#region TargetRole's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String TargetRoleMetaRoleGuidString = "faf8d819-616c-42b6-850e-884d1f840b1f";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid TargetRoleMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.TargetRoleMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.TargetRoleMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.TargetRole")]
		public  Neumont.Tools.ORM.ObjectModel.Role TargetRole
		{
			get { return (Neumont.Tools.ORM.ObjectModel.Role)this.GetRolePlayer(TargetRoleMetaRoleGuid); }
			set { this.SetRolePlayer(TargetRoleMetaRoleGuid, value); }
		}
		
		#endregion
		#region Proxy's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ProxyMetaRoleGuidString = "91203748-18ad-4488-b6e5-e014f391b4cb";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ProxyMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.Proxy")]
		public  Neumont.Tools.ORM.ObjectModel.RoleProxy Proxy
		{
			get { return (Neumont.Tools.ORM.ObjectModel.RoleProxy)this.GetRolePlayer(ProxyMetaRoleGuid); }
			set { this.SetRolePlayer(ProxyMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region RoleProxyHasRole's Generated Constructor Code
	public  partial class RoleProxyHasRole
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleProxyHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleProxyHasRole CreateRoleProxyHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateRoleProxyHasRole(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleProxyHasRole CreateAndInitializeRoleProxyHasRole(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRoleProxyHasRole(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleProxyHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleProxyHasRole CreateRoleProxyHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (RoleProxyHasRole)partition.ElementFactory.CreateElementLink(typeof(RoleProxyHasRole), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleProxyHasRole CreateAndInitializeRoleProxyHasRole(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RoleProxyHasRole)partition.ElementFactory.CreateElementLink(typeof(RoleProxyHasRole), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RoleProxyHasRole
	/// <summary>
	/// RoleProxyHasRole Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole))]
	public sealed class RoleProxyHasRoleElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleProxyHasRoleElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RoleProxyHasRoleElementFactoryCreator Instance
		{
			get
			{
				return new RoleProxyHasRoleElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.MetaRelationshipGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression")]
	public  partial class FactTypeHasDerivationExpression : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region FactTypeHasDerivationExpression's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "69b620e6-25a8-443c-860b-4f51a5a77680";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactTypeHasDerivationExpression.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactTypeHasDerivationExpression.MetaClassGuid;
		#endregion

		#region DerivationRule's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String DerivationRuleMetaRoleGuidString = "f81cc212-5dfe-4795-b783-26fb184ef946";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid DerivationRuleMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRule")]
		public  Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression DerivationRule
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression)this.GetRolePlayer(DerivationRuleMetaRoleGuid); }
			set { this.SetRolePlayer(DerivationRuleMetaRoleGuid, value); }
		}
		
		#endregion
		#region FactType's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeMetaRoleGuidString = "406596cf-1065-4192-8ace-f4a02754f3ad";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactTypeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactTypeMetaRoleGuidString, "Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactType")]
		public  Neumont.Tools.ORM.ObjectModel.FactType FactType
		{
			get { return (Neumont.Tools.ORM.ObjectModel.FactType)this.GetRolePlayer(FactTypeMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactTypeHasDerivationExpression's Generated Constructor Code
	public  partial class FactTypeHasDerivationExpression
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasDerivationExpression(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasDerivationExpression CreateFactTypeHasDerivationExpression(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactTypeHasDerivationExpression(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasDerivationExpression CreateAndInitializeFactTypeHasDerivationExpression(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeHasDerivationExpression(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasDerivationExpression(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasDerivationExpression CreateFactTypeHasDerivationExpression(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactTypeHasDerivationExpression)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasDerivationExpression), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeHasDerivationExpression CreateAndInitializeFactTypeHasDerivationExpression(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeHasDerivationExpression)partition.ElementFactory.CreateElementLink(typeof(FactTypeHasDerivationExpression), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeHasDerivationExpression
	/// <summary>
	/// FactTypeHasDerivationExpression Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression))]
	public sealed class FactTypeHasDerivationExpressionElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeHasDerivationExpressionElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeHasDerivationExpressionElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeHasDerivationExpressionElementFactoryCreator();
			}
		}
	}
	#endregion

}


