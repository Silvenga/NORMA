<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="VerbalizationDocumentationHTML.xslt"?>
<snippets>
  <snippet name="AtMostOneQuantifier" replacementCount="1">
    <statement>
							Description: Used for 'at most one' before an object name to signify the quantity may only be zero or one.  Format: at most one {0}
						</statement>
    <unformattedSnippet>at most one {0}</unformattedSnippet>
    <contains />
    <containedIn>
      <snippet name="ForEachCompactQuantifier" />
    </containedIn>
    <usedBy>
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="CloseVerbalizationSentence" replacementCount="0">
    <statement>
							Description: Text used to close a verbalized sentence.  Format: .
						</statement>
    <unformattedSnippet>.</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="CombinationAssociation" replacementCount="2">
    <statement>
							Description: Verbalizes an association of combinations.  Format: {0} combination is associated with {1}
						</statement>
    <unformattedSnippet>{0} combination is associated with {1}</unformattedSnippet>
    <contains>
      <snippet name="IdentityReferenceQuantifier" />
      <snippet name="MoreThanOneQuantifier" />
      <snippet name="OneQuantifier" />
    </contains>
    <containedIn>
      <snippet name="ContextScopeReference" />
      <snippet name="ImpliedModalNecessityOperator" />
      <snippet name="ModalPossibilityOperator" />
      <snippet name="UniversalQuantifier" />
    </containedIn>
    <usedBy>
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="CombinationIdentifier" replacementCount="1">
    <statement>
							Description: Verbalizes a combination.  Format: {0} combination
						</statement>
    <unformattedSnippet>{0} combination</unformattedSnippet>
    <contains>
      <snippet name="IdentityReferenceQuantifier" />
      <snippet name="UniversalQuantifier" />
    </contains>
    <containedIn>
      <snippet name="ImpliedModalNecessityOperator" />
      <snippet name="ModalPossibilityOperator" />
      <snippet name="OccursInPopulation" />
    </containedIn>
    <usedBy>
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="CombinedObjectAndInstance" replacementCount="2">
    <statement>
							Description: Used to combine an object and an instance.
							Format: {0} {1}
						</statement>
    <unformattedSnippet>{0} {1}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="CombinedObjectAndInstanceTypeMissing" replacementCount="1">
    <statement>
							Description: Used to say an object and instance combination is missing.
							Format: Missing {0}
						</statement>
    <unformattedSnippet>Missing {0}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="CompactSimpleListClose" replacementCount="0">
    <statement>
							Description: Text used at the end of a compact simple list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="ImpliedUniqueVerbalizer" />
      <constraint name="RoleValueConstraint" />
      <constraint name="UniquenessConstraint" />
      <constraint name="ValueTypeValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="CompactSimpleListFinalSeparator" replacementCount="0">
    <statement>
							Description: Used to separate the last two items in a compact simple list.  Format: ,
						</statement>
    <unformattedSnippet>, </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="ImpliedUniqueVerbalizer" />
      <constraint name="RoleValueConstraint" />
      <constraint name="UniquenessConstraint" />
      <constraint name="ValueTypeValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="CompactSimpleListOpen" replacementCount="0">
    <statement>
							Description: Text used at the beginning of a compact simple list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="ImpliedUniqueVerbalizer" />
      <constraint name="RoleValueConstraint" />
      <constraint name="UniquenessConstraint" />
      <constraint name="ValueTypeValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="CompactSimpleListPairSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in a compact simple list.  Format: ,
						</statement>
    <unformattedSnippet>, </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="ImpliedUniqueVerbalizer" />
      <constraint name="RoleValueConstraint" />
      <constraint name="UniquenessConstraint" />
      <constraint name="ValueTypeValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="CompactSimpleListSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in a compact simple list.  Format: ,
						</statement>
    <unformattedSnippet>, </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="ImpliedUniqueVerbalizer" />
      <constraint name="RoleValueConstraint" />
      <constraint name="UniquenessConstraint" />
      <constraint name="ValueTypeValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="CompoundListClose" replacementCount="0">
    <statement>
							Description: Text that is at the end of a compound list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="SubsetConstraint" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="CompoundListFinalSeparator" replacementCount="0">
    <statement>
							Description: Used after the last item listed in a compound list.  Format: ;
						</statement>
    <unformattedSnippet>; </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="SubsetConstraint" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="CompoundListOpen" replacementCount="0">
    <statement>
							Description: Text that is at the beginning of a compound list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="SubsetConstraint" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="CompoundListPairSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in a compound list.  Format: ;
						</statement>
    <unformattedSnippet>; </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="SubsetConstraint" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="CompoundListSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in a compound list.  Format: ;
						</statement>
    <unformattedSnippet>; </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="SubsetConstraint" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="Conditional" replacementCount="2">
    <statement>
							Description: Verbalizes a simple conditional statement.
							Format: if {0} then {1}
						</statement>
    <unformattedSnippet>if {0} then {1}</unformattedSnippet>
    <contains>
      <snippet name="DefiniteArticle" />
      <snippet name="ExistentialQuantifier" />
    </contains>
    <containedIn>
      <snippet name="ForEachIndentedQuantifier" />
      <snippet name="ImpliedModalNecessityOperator" />
    </containedIn>
    <usedBy>
      <constraint name="SubsetConstraint" />
    </usedBy>
  </snippet>
  <snippet name="ConstraintProvidesPreferredIdentifier" replacementCount="2">
    <statement>
							Description: Verbalizes the preferred identifier for an object.
							Format: this association with {0}provides the preferred identification scheme for {1}
						</statement>
    <unformattedSnippet>this association with {0} provides the preferred identification scheme for {1}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="ImpliedUniqueVerbalizer" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="ContextScope" replacementCount="1">
    <statement>
							Description: Used to define the context in which the object is used.  Format: context: {0}
						</statement>
    <unformattedSnippet>context: {0}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="ContextScopeReference" replacementCount="1">
    <statement>
							Description: Used to define the context in which the following object will be in.  Format: in this context, {0}
						</statement>
    <unformattedSnippet>in this context, {0}</unformattedSnippet>
    <contains>
      <snippet name="CombinationAssociation" />
      <snippet name="IdentityReferenceQuantifier" />
      <snippet name="ImpliedModalNecessityOperator" />
      <snippet name="ModalPossibilityOperator" />
      <snippet name="MoreThanOneQuantifier" />
      <snippet name="OneQuantifier" />
      <snippet name="UniversalQuantifier" />
    </contains>
    <containedIn />
    <usedBy>
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="DefiniteArticle" replacementCount="1">
    <statement>
							Description: Used for 'that' before an object name to signify the context in which the object is being referred to. 
							Different than ImpersonalPronoun which is used to refer back to an object and is frequently used conditionally with PersonalPronoun.  Format: that
						</statement>
    <unformattedSnippet>that {0}</unformattedSnippet>
    <contains />
    <containedIn>
      <snippet name="Conditional" />
      <snippet name="Equality" />
      <snippet name="EqualityForEachIndentedQuantifier" />
      <snippet name="ExclusionForEachIndentedQuantifier" />
      <snippet name="ForEachCompactQuantifier" />
      <snippet name="ForEachIndentedQuantifier" />
      <snippet name="ImpliedModalNecessityOperator" />
      <snippet name="ModalPossibilityOperator" />
    </containedIn>
    <usedBy>
      <constraint name="CombinedMandatoryUniqueVerbalizer" />
      <constraint name="EqualityConstraint" />
      <constraint name="ExclusionConstraint" />
      <constraint name="ImpliedMandatoryVerbalizer" />
      <constraint name="ImpliedUniqueVerbalizer" />
      <constraint name="MandatoryConstraint" />
      <constraint name="SubsetConstraint" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="EachInstanceQuantifier" replacementCount="1">
    <statement>
							Description: Verbalizes an instance of the specified object may occur at most one time.  Format: each instance of {0} occurs only once
						</statement>
    <unformattedSnippet>each instance of {0} occurs only once</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="EntityTypeVerbalization" replacementCount="1">
    <statement>Description: Verbalizes an object as being an entity type.  Format: {0} is an entity type</statement>
    <unformattedSnippet>{0} is an entity type</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="Equality" replacementCount="2">
    <statement>
							Description: Used to verbalize a simple equality constraint.
							Format: {0} if and only if {1}
						</statement>
    <unformattedSnippet>{0} if and only if {1}</unformattedSnippet>
    <contains>
      <snippet name="DefiniteArticle" />
      <snippet name="ExistentialQuantifier" />
    </contains>
    <containedIn>
      <snippet name="ForEachIndentedQuantifier" />
      <snippet name="ImpliedModalNecessityOperator" />
    </containedIn>
    <usedBy>
      <constraint name="EqualityConstraint" />
    </usedBy>
  </snippet>
  <snippet name="EqualityForEachIndentedQuantifier" replacementCount="2">
    <statement>
							Description: Verbalizes an equality constraint.
							Format alethic: for each {0}, all or none of the following hold:\n {1}  
							Format deontic: it is obligatory that for each {0}, all or none of the following hold:\n {1}
						</statement>
    <unformattedSnippet>for each {0}, all or none of the following hold:{1}</unformattedSnippet>
    <contains>
      <snippet name="DefiniteArticle" />
      <snippet name="ExistentialQuantifier" />
    </contains>
    <containedIn>
      <snippet name="ImpliedModalNecessityOperator" />
    </containedIn>
    <usedBy>
      <constraint name="EqualityConstraint" />
    </usedBy>
  </snippet>
  <snippet name="ErrorClosePrimaryReport" replacementCount="0">
    <statement>
							Description: Close a primary error report opened with ErrorOpenPrimaryReport
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ErrorCloseSecondaryReport" replacementCount="0">
    <statement>
							Description: Close a secondary error report opened with ErrorOpenSecondaryReport.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ErrorOpenPrimaryReport" replacementCount="0">
    <statement>
							Description: Used to open a primary error report. Primary error reports block further verbalization.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ErrorOpenSecondaryReport" replacementCount="0">
    <statement>
							Description: Used to open a secondary error report. Secondary reports contain errors that do not block verbalization.
							Format: Model Error: {0}
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ErrorPrimary" replacementCount="1">
    <statement>
							Description: Used to verbalize a single primary error.
							Format: Model Error: {0}
						</statement>
    <unformattedSnippet>Model Error: {0}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ErrorSecondary" replacementCount="1">
    <statement>
							Description: Used to verbalize a single secondary error.
							Format: Model Error: {0}
						</statement>
    <unformattedSnippet>Model Error: {0}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ExactlyOneQuantifier" replacementCount="1">
    <statement>
							Description: Used for 'exactly one' before an object name to signify the quantity may only be one.  Format: exactly one {0}
						</statement>
    <unformattedSnippet>exactly one {0}</unformattedSnippet>
    <contains />
    <containedIn>
      <snippet name="ForEachCompactQuantifier" />
      <snippet name="ImpliedModalNecessityOperator" />
    </containedIn>
    <usedBy>
      <constraint name="CombinedMandatoryUniqueVerbalizer" />
    </usedBy>
  </snippet>
  <snippet name="ExclusionBinaryLeadReading" replacementCount="2">
    <statement>
							Description: Used to verbalize an exclusion constraint, on a binary lead reading.
							Format: No {0} the same {1}
						</statement>
    <unformattedSnippet>no {0} the same {1}</unformattedSnippet>
    <contains />
    <containedIn>
      <snippet name="ImpliedModalNecessityOperator" />
    </containedIn>
    <usedBy>
      <constraint name="ExclusionConstraint" />
    </usedBy>
  </snippet>
  <snippet name="ExclusionCombined" replacementCount="2">
    <statement>
							Description: Used to combine the first role player and the roles played for an Exclusion constraint (i.e: No Person authored and reviewed). 
							Format: {0} {1}
						</statement>
    <unformattedSnippet>{0} {1}</unformattedSnippet>
    <contains />
    <containedIn>
      <snippet name="ImpliedModalNecessityOperator" />
    </containedIn>
    <usedBy>
      <constraint name="ExclusionConstraint" />
    </usedBy>
  </snippet>
  <snippet name="ExclusionForEachIndentedQuantifier" replacementCount="2">
    <statement>
							Description: Verbalizes an exclusion constraint.
							Format alethic: for each {0}, at most one of the following holds:\n {1}
							Format deontic: it is obligatory that for each {0}, at most one of the following holds:\n {1}
							</statement>
    <unformattedSnippet>for each {0}, at most one of the following holds:{1}</unformattedSnippet>
    <contains>
      <snippet name="DefiniteArticle" />
      <snippet name="ExistentialQuantifier" />
    </contains>
    <containedIn>
      <snippet name="ImpliedModalNecessityOperator" />
    </containedIn>
    <usedBy>
      <constraint name="ExclusionConstraint" />
    </usedBy>
  </snippet>
  <snippet name="ExclusiveOrForEachIndentedQuantifier" replacementCount="2">
    <statement>
							Description: Verbalizes an exclusive-or constraint.
							Format alethic: for each {0}, exactly one of the following holds:\n {1}
							Format deontic: it is obligatory that for each {0}, at most one of the following holds:\n {1}
						</statement>
    <unformattedSnippet>for each {0}, exactly one of the following holds:{1}</unformattedSnippet>
    <contains />
    <containedIn>
      <snippet name="ImpliedModalNecessityOperator" />
    </containedIn>
    <usedBy>
      <constraint name="ExclusionConstraint" />
    </usedBy>
  </snippet>
  <snippet name="ExistentialQuantifier" replacementCount="1">
    <statement>
							Description: Used for 'some' before an object name to signify the context in which the object is being referred to.  Format: some {0}
						</statement>
    <unformattedSnippet>some {0}</unformattedSnippet>
    <contains />
    <containedIn>
      <snippet name="Conditional" />
      <snippet name="Equality" />
      <snippet name="EqualityForEachIndentedQuantifier" />
      <snippet name="ExclusionForEachIndentedQuantifier" />
      <snippet name="ForEachCompactQuantifier" />
      <snippet name="ForEachIndentedQuantifier" />
      <snippet name="ImpliedModalNecessityOperator" />
    </containedIn>
    <usedBy>
      <constraint name="EqualityConstraint" />
      <constraint name="ExclusionConstraint" />
      <constraint name="ImpliedMandatoryVerbalizer" />
      <constraint name="MandatoryConstraint" />
      <constraint name="RingConstraint" />
      <constraint name="SubsetConstraint" />
    </usedBy>
  </snippet>
  <snippet name="FactTypeInstanceBlockEnd" replacementCount="0">
    <statement>
							Description: Formatted used to end a sample population verbalization of fact types block.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="FactTypeInstanceBlockStart" replacementCount="0">
    <statement>
							Description: Text and formatting to begin a sample population verbalization of fact types block.
							Format: Examples:
						</statement>
    <unformattedSnippet>Examples: </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ForEachCompactQuantifier" replacementCount="2">
    <statement>
							Description: Verbalizes for each instance of an object, some rule applies to those instances.  Format: for each {0}, {1}
						</statement>
    <unformattedSnippet>for each {0}, {1}</unformattedSnippet>
    <contains>
      <snippet name="AtMostOneQuantifier" />
      <snippet name="DefiniteArticle" />
      <snippet name="ExactlyOneQuantifier" />
      <snippet name="ExistentialQuantifier" />
      <snippet name="ImpliedModalNecessityOperator" />
      <snippet name="ModalPossibilityOperator" />
      <snippet name="OneQuantifier" />
    </contains>
    <containedIn />
    <usedBy>
      <constraint name="CombinedMandatoryUniqueVerbalizer" />
      <constraint name="ImpliedMandatoryVerbalizer" />
      <constraint name="ImpliedUniqueVerbalizer" />
      <constraint name="MandatoryConstraint" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="ForEachIndentedQuantifier" replacementCount="2">
    <statement>
							Description: Verbalizes for each instance of an object then creates a line break where the rules that apply to those instances are listed.  Format: for each {0}, \n{1}
						</statement>
    <unformattedSnippet>for each {0},{1}</unformattedSnippet>
    <contains>
      <snippet name="Conditional" />
      <snippet name="DefiniteArticle" />
      <snippet name="Equality" />
      <snippet name="ExistentialQuantifier" />
      <snippet name="ImpliedModalNecessityOperator" />
      <snippet name="OneQuantifier" />
    </contains>
    <containedIn>
      <snippet name="ImpliedModalNecessityOperator" />
    </containedIn>
    <usedBy>
      <constraint name="EqualityConstraint" />
      <constraint name="MandatoryConstraint" />
      <constraint name="SubsetConstraint" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="HyphenBoundPredicatePart" replacementCount="2">
    <statement>Description: .  Format: {0}{{0}}{1}</statement>
    <unformattedSnippet>{0}{{0}}{1}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="IdentityEqualityListClose" replacementCount="0">
    <statement>
							Description: Text that is at the end of an identity equality list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="IdentityEqualityListFinalSeparator" replacementCount="0">
    <statement>
							Description: Used between the last two items in an identity equality list.  Format: that is a
						</statement>
    <unformattedSnippet> that is a </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="IdentityEqualityListOpen" replacementCount="0">
    <statement>
							Description: Text that is at the beginning of an identity equality list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="IdentityEqualityListPairSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in an identity equality list.  Format: that is a
						</statement>
    <unformattedSnippet> that is a </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="IdentityEqualityListSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in an identity equality list.  Format: that is a
						</statement>
    <unformattedSnippet> that is a </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="IdentityReferenceQuantifier" replacementCount="1">
    <statement>
							Description: Used for 'the same' before an object name to signify exactly which object is being reference.  Format: the same {0}
						</statement>
    <unformattedSnippet>the same {0}</unformattedSnippet>
    <contains />
    <containedIn>
      <snippet name="CombinationAssociation" />
      <snippet name="CombinationIdentifier" />
      <snippet name="ContextScopeReference" />
      <snippet name="ImpliedModalNecessityOperator" />
      <snippet name="ModalPossibilityOperator" />
      <snippet name="OccursInPopulation" />
    </containedIn>
    <usedBy>
      <constraint name="DefaultBinaryMissingUniquenessVerbalizer" />
      <constraint name="RingConstraint" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="ImpersonalPronoun" replacementCount="1">
    <statement></statement>
    <unformattedSnippet>that {0}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ImpliedModalNecessityOperator" replacementCount="1">
    <statement>
							Description: Used to define the strength of the constraint.  Alethic, positive adds nothing before an object name.  Deontic, positive adds 'it is obligatory that' before an object name.  Alethic, negative adds 'it is impossible that' before an object name.  Deontic, negative adds 'it is forbidden that' before an object name.
							Format for alethic and positive: {0}  Format for deontic and positive: it is obligatory that {0}  Format for alethic and negative: it is impossible that {0}  Format for deontic and negative: it is forbidden that {0}
						</statement>
    <unformattedSnippet>{0}</unformattedSnippet>
    <contains>
      <snippet name="CombinationAssociation" />
      <snippet name="CombinationIdentifier" />
      <snippet name="Conditional" />
      <snippet name="DefiniteArticle" />
      <snippet name="Equality" />
      <snippet name="EqualityForEachIndentedQuantifier" />
      <snippet name="ExactlyOneQuantifier" />
      <snippet name="ExclusionBinaryLeadReading" />
      <snippet name="ExclusionCombined" />
      <snippet name="ExclusionForEachIndentedQuantifier" />
      <snippet name="ExclusiveOrForEachIndentedQuantifier" />
      <snippet name="ExistentialQuantifier" />
      <snippet name="ForEachIndentedQuantifier" />
      <snippet name="IdentityReferenceQuantifier" />
      <snippet name="OccursInPopulation" />
      <snippet name="OneQuantifier" />
      <snippet name="UniversalQuantifier" />
    </contains>
    <containedIn>
      <snippet name="ContextScopeReference" />
      <snippet name="ForEachCompactQuantifier" />
      <snippet name="ForEachIndentedQuantifier" />
    </containedIn>
    <usedBy>
      <constraint name="CombinedMandatoryUniqueVerbalizer" />
      <constraint name="EqualityConstraint" />
      <constraint name="ExclusionConstraint" />
      <constraint name="ImpliedMandatoryVerbalizer" />
      <constraint name="ImpliedUniqueVerbalizer" />
      <constraint name="MandatoryConstraint" />
      <constraint name="RingConstraint" />
      <constraint name="SubsetConstraint" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="IndentedCompoundListClose" replacementCount="0">
    <statement>
							Description: Text that is at the end of an indented compound list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="IndentedCompoundListFinalSeparator" replacementCount="0">
    <statement>
							Description: Used to separate the last two items in an indented compound list.  Format: ;
						</statement>
    <unformattedSnippet>; </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="IndentedCompoundListOpen" replacementCount="0">
    <statement>
							Description: Text that is at the beginning of an indented compound list.  Format: \n
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="IndentedCompoundListPairSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in an indented compound list.  Format: ;
						</statement>
    <unformattedSnippet>; </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="IndentedCompoundListSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in an indented compound list.  Format: ;
						</statement>
    <unformattedSnippet>; </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="IndentedListClose" replacementCount="0">
    <statement>
							Description: Text used at the end of an indented list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="IndentedListFinalSeparator" replacementCount="0">
    <statement>
							Description: Used to separate the last two items in an indented list.  Format: and
						</statement>
    <unformattedSnippet> and </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="IndentedListOpen" replacementCount="0">
    <statement>
							Description: Text used at the beginning of an indented list.  Format: \n
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="IndentedListPairSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in an indented list.  Format: and
						</statement>
    <unformattedSnippet> and </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="IndentedListSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in an indented list.  Format: and
						</statement>
    <unformattedSnippet> and </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="IndentedLogicalAndListClose" replacementCount="0">
    <statement>
							Description: Text used at the end of an indented logical and list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="IndentedLogicalAndListFinalSeparator" replacementCount="0">
    <statement>
							Description: Used to separate the last two items in an indented logical and list.  Format: and that
						</statement>
    <unformattedSnippet>and that </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="IndentedLogicalAndListOpen" replacementCount="0">
    <statement>
							Description: Text used at the beginning of an indented logical and list.  Format: \n
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="IndentedLogicalAndListPairSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in an indented logical and list.  Format: and that
						</statement>
    <unformattedSnippet>and that </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="IndentedLogicalAndListSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in an indented logical and list.  Format: and that
						</statement>
    <unformattedSnippet>and that </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="IndentedLogicalOrListClose" replacementCount="0">
    <statement>
							Description: Text used at the end of an indented logical or list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="IndentedLogicalOrListFinalSeparator" replacementCount="0">
    <statement>
							Description: Used to separate the last two items in an indented logical or list.  Format: or
						</statement>
    <unformattedSnippet>or </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="IndentedLogicalOrListOpen" replacementCount="0">
    <statement>
							Description: Text used at the beginning of an indented logical or list.  Format: \n
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="IndentedLogicalOrListPairSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in an indented logical or list.  Format: or
						</statement>
    <unformattedSnippet>or </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="IndentedLogicalOrListSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in an indented logical or list.  Format: or
						</statement>
    <unformattedSnippet>or </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="IndependentVerbalization" replacementCount="1">
    <statement>Description: Verbalizes an object as being independent.  Format: {0} is independent (it may have instances that play no other roles)</statement>
    <unformattedSnippet>{0} is independent (it may have instances that play no other roles)</unformattedSnippet>
    <contains>
      <snippet name="ObjectType" />
    </contains>
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="InQuantifier" replacementCount="2">
    <statement>
							Description: Used to verbalize [RolePlayer in Fact], e.g. Person in Person has Age.
							Format: {0} in {1}
						</statement>
    <unformattedSnippet>{0} in {1}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="RoleValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="MinClosedMaxClosed" replacementCount="2">
    <statement>
							Description: Used to verbalize a range inclusion with the minimum bound closed and the maximum bound closed.
							Format: at least {0} to at most {1}
						</statement>
    <unformattedSnippet>at least {0} to at most {1}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="RoleValueConstraint" />
      <constraint name="ValueTypeValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="MinClosedMaxOpen" replacementCount="2">
    <statement>
							Description: Used to verbalize a range inclusion with the minimum bound closed and the maximum bound open.
							Format: at least {0} to below {1}
						</statement>
    <unformattedSnippet>at least {0} to below {1}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="RoleValueConstraint" />
      <constraint name="ValueTypeValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="MinClosedMaxUnbounded" replacementCount="1">
    <statement>
							Description: Used to verbalize a range inclusion with the minimum bound closed and the maximum unbounded.
							Format: at least {0}
						</statement>
    <unformattedSnippet>at least {0}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="RoleValueConstraint" />
      <constraint name="ValueTypeValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="MinOpenMaxClosed" replacementCount="2">
    <statement>
							Description: Used to verbalize a range inclusion with the minimum bound open and the maximum bound closed.
							Format: above {0} to at most {1}
						</statement>
    <unformattedSnippet>above {0} to at most {1}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="RoleValueConstraint" />
      <constraint name="ValueTypeValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="MinOpenMaxOpen" replacementCount="2">
    <statement>
							Description: Used to verbalize a range inclusion with the minimum bound open and the maximum bound open.
							Format: above {0} to below {1}
						</statement>
    <unformattedSnippet>above {0} to below {1}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="RoleValueConstraint" />
      <constraint name="ValueTypeValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="MinOpenMaxUnbounded" replacementCount="1">
    <statement>
							Description: Used to verbalize a range inclusion with the minimum bound open and the maximum unbounded.
							Format: above {0}
						</statement>
    <unformattedSnippet>above {0}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="RoleValueConstraint" />
      <constraint name="ValueTypeValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="MinUnboundedMaxClosed" replacementCount="1">
    <statement>
							Description: Used to verbalize a range inclusion with the minimum unbounded and the maximum bound closed.
							Format: at most {1}
						</statement>
    <unformattedSnippet>at most {1}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="RoleValueConstraint" />
      <constraint name="ValueTypeValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="MinUnboundedMaxOpen" replacementCount="1">
    <statement>
							Description: Used to verbalize a range inclusion with the minimum unbounded and the maximum bound open.
							Format: below {1}
						</statement>
    <unformattedSnippet>below {1}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="RoleValueConstraint" />
      <constraint name="ValueTypeValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="ModalNecessityOperator" replacementCount="1">
    <statement>
							Description: Used to define the strength of the constraint.  Alethic adds 'it is necessary that' before  an object name.  Deontic adds 'it is obligatory that' before an object name.
							Format for alethic: it is necessary that {0}  Format for deontic: it is obligatory that {0}
						</statement>
    <unformattedSnippet>it is necessary that {0}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ModalPossibilityOperator" replacementCount="1">
    <statement>
							Description: Used to define the strength of the constraint.  Alethic, positive adds 'it is possible that' before an object name.  Deontic, positive adds 'it is permitted that' before an object name.  Alethic, negative adds 'it is impossible that' before an object name.  Deontic, negative adds 'it is forbidden that' before an object name.
							Format for alethic and positive: it is possible that {0}  Format for deontic and positive: it is permitted that {0}  Format for alethic and negative: it is impossible that {0}  Format for deontic and negative: it is forbidden that {0}
						</statement>
    <unformattedSnippet>it is possible that {0}</unformattedSnippet>
    <contains>
      <snippet name="CombinationAssociation" />
      <snippet name="CombinationIdentifier" />
      <snippet name="DefiniteArticle" />
      <snippet name="IdentityReferenceQuantifier" />
      <snippet name="MoreThanOneQuantifier" />
      <snippet name="NegativeReadingForUnaryOnlyDisjunctiveMandatory" />
      <snippet name="OccursInPopulation" />
      <snippet name="OneQuantifier" />
    </contains>
    <containedIn>
      <snippet name="ContextScopeReference" />
      <snippet name="ForEachCompactQuantifier" />
    </containedIn>
    <usedBy>
      <constraint name="DefaultBinaryMissingUniquenessVerbalizer" />
      <constraint name="ImpliedUniqueVerbalizer" />
      <constraint name="MandatoryConstraint" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="MoreThanOneQuantifier" replacementCount="1">
    <statement>
							Description: Used for 'more than one' before an object name to define quantity as more than one.  Format: more than one {0}
						</statement>
    <unformattedSnippet>more than one {0}</unformattedSnippet>
    <contains />
    <containedIn>
      <snippet name="CombinationAssociation" />
      <snippet name="ContextScopeReference" />
      <snippet name="ModalPossibilityOperator" />
    </containedIn>
    <usedBy>
      <constraint name="DefaultBinaryMissingUniquenessVerbalizer" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="MultiValueValueConstraint" replacementCount="2">
    <statement>
							Description: Used to verbalize a value range constraint with multiple values.
							Format: the possible values of {0} are {1}
						</statement>
    <unformattedSnippet>the possible values of {0} are {1}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="RoleValueConstraint" />
      <constraint name="ValueTypeValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="NegativeReadingForUnaryOnlyDisjunctiveMandatory" replacementCount="2">
    <statement>
							Description: Used to verbalize that an object is not included in a set.  Format: some {0} participates in none of the following:{1}
						</statement>
    <unformattedSnippet>some {0} participates in none of the following:{1}</unformattedSnippet>
    <contains />
    <containedIn>
      <snippet name="ModalPossibilityOperator" />
    </containedIn>
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="NonTextInstanceValue" replacementCount="1">
    <statement>
							Description: Used to output a non-text instance value.
							Format: {0}
						</statement>
    <unformattedSnippet>{0}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="NotesVerbalization" replacementCount="1">
    <statement>Description: Verbalizes the text specified for a model note.  Format: Notes: {0}</statement>
    <unformattedSnippet>Notes: {0}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ObjectifiesFactTypeVerbalization" replacementCount="2">
    <statement>Description: Verbalizes the objectification made for a FactType.  Format: {0} objectifies "{1}"</statement>
    <unformattedSnippet>{0} objectifies "{1}"</unformattedSnippet>
    <contains>
      <snippet name="ObjectType" />
    </contains>
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ObjectType" replacementCount="1">
    <statement>Description: Verbalizes an object.  Format: {0}</statement>
    <unformattedSnippet>{0}</unformattedSnippet>
    <contains />
    <containedIn>
      <snippet name="IndependentVerbalization" />
      <snippet name="ObjectifiesFactTypeVerbalization" />
      <snippet name="SubtypeMetaReading" />
    </containedIn>
    <usedBy>
      <constraint name="ValueTypeValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="ObjectTypeInstanceListClose" replacementCount="0">
    <statement>
							Description: Text used to close the sample population verbalization list.
							Format: .
						</statement>
    <unformattedSnippet>.</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ObjectTypeInstanceListFinalSeparator" replacementCount="0">
    <statement>
							Description: Text used to separate the last two items in a sample population verbalization list, or object types.
							Format: ,
						</statement>
    <unformattedSnippet>, </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ObjectTypeInstanceListOpen" replacementCount="0">
    <statement>
							Description:  Text and formatting to begin a sample population verbalization of object types block.
							Format: Examples:
						</statement>
    <unformattedSnippet>Examples: </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ObjectTypeInstanceListPairSeparator" replacementCount="0">
    <statement>
							Description: Text used to separate items in a sample population verbalization list.
							Format: , </statement>
    <unformattedSnippet>, </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ObjectTypeInstanceListSeparator" replacementCount="0">
    <statement>
							Description: Text used to separate items in a sample population verbalization list.
							Format: ,
						</statement>
    <unformattedSnippet>, </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ObjectTypeMissing" replacementCount="1">
    <statement>Description: Verbalizes an object type as being missing.</statement>
    <unformattedSnippet>Missing{0}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ObjectTypeWithSubscript" replacementCount="2">
    <statement>Description: Verbalizes an object type with a subscript.</statement>
    <unformattedSnippet>{0}{1}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="OccursInPopulation" replacementCount="2">
    <statement>
							Description: Verbalizes that an object occurs at most once or more than once in a given population.
							Format positive: {0} occurs at most once in the population of {1}
							Format negative: {0} occurs more than once in the population of {1}
						</statement>
    <unformattedSnippet>{0} occurs at most once in the population of {1}</unformattedSnippet>
    <contains>
      <snippet name="CombinationIdentifier" />
      <snippet name="IdentityReferenceQuantifier" />
      <snippet name="UniversalQuantifier" />
    </contains>
    <containedIn>
      <snippet name="ImpliedModalNecessityOperator" />
      <snippet name="ModalPossibilityOperator" />
    </containedIn>
    <usedBy>
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="OneQuantifier" replacementCount="1">
    <statement>
							Description: Used for 'at most one' or 'more than one' before an object.
							Format positive: at most one {0}
							Format negative: more than one {0}
						</statement>
    <unformattedSnippet>at most one {0}</unformattedSnippet>
    <contains />
    <containedIn>
      <snippet name="CombinationAssociation" />
      <snippet name="ContextScopeReference" />
      <snippet name="ForEachCompactQuantifier" />
      <snippet name="ForEachIndentedQuantifier" />
      <snippet name="ImpliedModalNecessityOperator" />
      <snippet name="ModalPossibilityOperator" />
      <snippet name="UniversalQuantifier" />
    </containedIn>
    <usedBy>
      <constraint name="ImpliedUniqueVerbalizer" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="PeriodSeparator" replacementCount="2">
    <statement>
							Description: Used to delimit two snippet replacements by a snippet.
							Format:	{0}.{1}
						</statement>
    <unformattedSnippet>{0}.{1}</unformattedSnippet>
    <contains>
      <snippet name="ReferenceScheme" />
    </contains>
    <containedIn />
    <usedBy>
      <constraint name="RoleValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="PersonalPronoun" replacementCount="1">
    <statement></statement>
    <unformattedSnippet>who {0}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="PortableDataTypeVerbalization" replacementCount="1">
    <statement>Description: Verbalizes an object's portable data type.  Format: Portable data type: {0}</statement>
    <unformattedSnippet>Portable data type: {0}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ReferenceModeVerbalization" replacementCount="1">
    <statement>Description: Verbalizes the mode in which an object is referenced.  Format: Reference Mode: {0}</statement>
    <unformattedSnippet>Reference Mode: {0}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="ReferenceScheme" replacementCount="2">
    <statement>
							Description: Used to enclose and format a reference scheme replacement in brackets.
							Format:	{0}({1})
						</statement>
    <unformattedSnippet>{0}({1})</unformattedSnippet>
    <contains />
    <containedIn>
      <snippet name="PeriodSeparator" />
    </containedIn>
    <usedBy>
      <constraint name="RoleValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="ReferenceSchemeVerbalization" replacementCount="1">
    <statement>Description: Verbalizes the way in which an object is referenced.  Format: Reference Scheme: {0}</statement>
    <unformattedSnippet>Reference Scheme: {0}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="SelfReference" replacementCount="1">
    <statement>
							Description: Allows the snippet replacement to verbalize itself.
							Format: {0}
						</statement>
    <unformattedSnippet>{0}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="RoleValueConstraint" />
      <constraint name="ValueTypeValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SemiColonListClose" replacementCount="0">
    <statement>
							Description: Text used at the end of a semi colon list.  Format: .
						</statement>
    <unformattedSnippet>.</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="EqualityConstraint" />
      <constraint name="ExclusionConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SemiColonListFinalSeparator" replacementCount="0">
    <statement>
							Description: Used to separate the last two items in a semi colon list.  Format: ;
						</statement>
    <unformattedSnippet>; </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="EqualityConstraint" />
      <constraint name="ExclusionConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SemiColonListOpen" replacementCount="0">
    <statement>
							Description: Text used at the beginning of a semi colon list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="EqualityConstraint" />
      <constraint name="ExclusionConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SemiColonListPairSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in a semi colon list.  Format: ;
						</statement>
    <unformattedSnippet>; </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="EqualityConstraint" />
      <constraint name="ExclusionConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SemiColonListSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in a semi colon list.  Format: ;
						</statement>
    <unformattedSnippet>; </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="EqualityConstraint" />
      <constraint name="ExclusionConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SimpleListClose" replacementCount="0">
    <statement>

						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="CombinedMandatoryUniqueVerbalizer" />
      <constraint name="ImpliedMandatoryVerbalizer" />
      <constraint name="ImpliedUniqueVerbalizer" />
      <constraint name="MandatoryConstraint" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SimpleListFinalSeparator" replacementCount="0">
    <statement>

						</statement>
    <unformattedSnippet>, and </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="CombinedMandatoryUniqueVerbalizer" />
      <constraint name="ImpliedMandatoryVerbalizer" />
      <constraint name="ImpliedUniqueVerbalizer" />
      <constraint name="MandatoryConstraint" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SimpleListOpen" replacementCount="0">
    <statement>
							
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="CombinedMandatoryUniqueVerbalizer" />
      <constraint name="ImpliedMandatoryVerbalizer" />
      <constraint name="ImpliedUniqueVerbalizer" />
      <constraint name="MandatoryConstraint" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SimpleListPairSeparator" replacementCount="0">
    <statement>
							
						</statement>
    <unformattedSnippet> and </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="CombinedMandatoryUniqueVerbalizer" />
      <constraint name="ImpliedMandatoryVerbalizer" />
      <constraint name="ImpliedUniqueVerbalizer" />
      <constraint name="MandatoryConstraint" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SimpleListSeparator" replacementCount="0">
    <statement>

						</statement>
    <unformattedSnippet>, </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="CombinedMandatoryUniqueVerbalizer" />
      <constraint name="ImpliedMandatoryVerbalizer" />
      <constraint name="ImpliedUniqueVerbalizer" />
      <constraint name="MandatoryConstraint" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SimpleLogicalAndListClose" replacementCount="0">
    <statement>
							Description: Text used at the end of a simple logical and list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="EqualityConstraint" />
      <constraint name="ExclusionConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SimpleLogicalAndListFinalSeparator" replacementCount="0">
    <statement>
							Description: Used to separate the last two items in a simple logical and list.  Format: and
						</statement>
    <unformattedSnippet> and </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="EqualityConstraint" />
      <constraint name="ExclusionConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SimpleLogicalAndListOpen" replacementCount="0">
    <statement>
							Description: Text used at the beginning of a simple logical and list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="EqualityConstraint" />
      <constraint name="ExclusionConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SimpleLogicalAndListPairSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in a simple logical and list.  Format: and
						</statement>
    <unformattedSnippet> and </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="EqualityConstraint" />
      <constraint name="ExclusionConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SimpleLogicalAndListSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in a simple logical and list.  Format: and
						</statement>
    <unformattedSnippet> and </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="EqualityConstraint" />
      <constraint name="ExclusionConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SimpleLogicalOrListClose" replacementCount="0">
    <statement>
							Description:  Text used at the end of a simple logical or list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SimpleLogicalOrListFinalSeparator" replacementCount="0">
    <statement>
							Description:  Used to separate the last two items in a simple logical or list.  Format: or
						</statement>
    <unformattedSnippet> or </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SimpleLogicalOrListOpen" replacementCount="0">
    <statement>
							Description: Text used at the beginning of a simple logical or list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SimpleLogicalOrListPairSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in a simple logical or list.  Format: or
						</statement>
    <unformattedSnippet> or </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SimpleLogicalOrListSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in a simple logical or list.  Format: or
						</statement>
    <unformattedSnippet> or </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SingleValueValueConstraint" replacementCount="2">
    <statement>
							Description: Used to verbalize a value range constraint with one range, where the min value is equal to the max value.
							Format: the possible value of {0} is {1}
						</statement>
    <unformattedSnippet>the possible value of {0} is {1}</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="RoleValueConstraint" />
      <constraint name="ValueTypeValueConstraint" />
    </usedBy>
  </snippet>
  <snippet name="SubtypeMetaReading" replacementCount="2">
    <statement>
							Description: Used to describe the relationship between a Subtype and its Supertype at the meta level (i.e: Each Man is an instance of Person). 
							Format: {0} is a subtype of {1}
						</statement>
    <unformattedSnippet>Each {0} is an instance of {1}</unformattedSnippet>
    <contains>
      <snippet name="ObjectType" />
    </contains>
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="TextInstanceValue" replacementCount="1">
    <statement>
							Description: Used to output a text instance value.
							Format: '{0}'
						</statement>
    <unformattedSnippet>'{0}'</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="TopLevelIndentedLogicalAndListClose" replacementCount="0">
    <statement>
							Description: Text used at the end of a top level indented logical and list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="TopLevelIndentedLogicalAndListFinalSeparator" replacementCount="0">
    <statement>
							Description: Used to separate the last two items in a top level indented logical and list.  Format: \n and that
						</statement>
    <unformattedSnippet>and that </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="TopLevelIndentedLogicalAndListOpen" replacementCount="0">
    <statement>
							Description: Text used at the beginning of a top level indented logical and list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="TopLevelIndentedLogicalAndListPairSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in a top level indented logical and list.  Format: \n and that
						</statement>
    <unformattedSnippet>and that </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="TopLevelIndentedLogicalAndListSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in a top level indented logical and list.  Format: \n and that
						</statement>
    <unformattedSnippet>and that </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="TopLevelIndentedLogicalOrListClose" replacementCount="0">
    <statement>
							Description: Text used at the end of a top level indented logical or list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="TopLevelIndentedLogicalOrListFinalSeparator" replacementCount="0">
    <statement>
							Description: Used to separate the last two items in a top level indented logical or list.  Format: \n or
						</statement>
    <unformattedSnippet>or </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="TopLevelIndentedLogicalOrListOpen" replacementCount="0">
    <statement>
							Description: Text used at the beginning of a top level indented logical or list.
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="TopLevelIndentedLogicalOrListPairSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in a top level indented logical or list.  Format: \n or
						</statement>
    <unformattedSnippet>or </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="TopLevelIndentedLogicalOrListSeparator" replacementCount="0">
    <statement>
							Description: Used to separate items in a top level indented logical or list.  Format: \n or
						</statement>
    <unformattedSnippet>or </unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy>
      <constraint name="MandatoryConstraint" />
    </usedBy>
  </snippet>
  <snippet name="UniversalQuantifier" replacementCount="1">
    <statement>
							Description: Used for 'each' before an object name to signify the quantity associated with the object.  Format: each {0}
						</statement>
    <unformattedSnippet>each {0}</unformattedSnippet>
    <contains>
      <snippet name="CombinationAssociation" />
      <snippet name="OneQuantifier" />
    </contains>
    <containedIn>
      <snippet name="CombinationIdentifier" />
      <snippet name="ContextScopeReference" />
      <snippet name="ImpliedModalNecessityOperator" />
      <snippet name="OccursInPopulation" />
    </containedIn>
    <usedBy>
      <constraint name="CombinedMandatoryUniqueVerbalizer" />
      <constraint name="ImpliedMandatoryVerbalizer" />
      <constraint name="ImpliedUniqueVerbalizer" />
      <constraint name="MandatoryConstraint" />
      <constraint name="UniquenessConstraint" />
    </usedBy>
  </snippet>
  <snippet name="ValueTypeVerbalization" replacementCount="1">
    <statement>Description: Verbalizes an object as being a value type.  Format: {0} is a value type</statement>
    <unformattedSnippet>{0} is a value type</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="VerbalizerCloseVerbalization" replacementCount="0">
    <statement>
							Description: Used by the verbalizer to close a verbalization opened by VerbalizerOpenVerbalization
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="VerbalizerDecreaseIndent" replacementCount="0">
    <statement>
							Description: Used by the verbalizer to close indent opened by VerbalizerIncreaseIndent
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="VerbalizerDocumentFooter" replacementCount="0">
    <statement>
							Description: Used by the verbalizer to close a document
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="VerbalizerDocumentHeader" replacementCount="14">
    <statement>
							Description: Used by the verbalizer to open a document. The document header gets replacement fields in the following order:
							{0} font-family
							{1} font-size
							{2} predicate text color
							{3} predicate text bold
							{4} object name color
							{5} object name bold
							{6} formal item color
							{7} formal item bold
							{8} note color
							{9} note bold
							{10} reference mode color
							{11} reference mode bold
							{12} instance value color
							{13} instance value bold
						</statement>
    <unformattedSnippet>


	ORM2 Verbalization
	
		body {{ font-family: {0}; font-size: {1}pt; padding: .1em; color: {2}; {3} }}
		.objectType {{ color: {4}; {5} }}
		.objectTypeMissing {{ color: {4}; {5} }}
		.referenceMode {{ color: {10}; {11} }}
		.predicateText {{ color: {2}; {3} }}
		.quantifier {{ color: {6}; {7} }}
		.primaryErrorReport {{ color: red; font-weight: bolder; }}
		.secondaryErrorReport {{ color: red; }}
		.verbalization {{ }}
		.indent {{ left: 20px; position: relative; }}
		.smallIndent {{ left: 8px; position: relative;}}
		.listSeparator {{ color: windowtext; font-weight: 200;}}
		.logicalOperator {{ color: {6}; {7}}}
		.note {{ color: {8}; font-style: italic; {9} }}
		.notAvailable {{ font-style: italic; }}
		.instance {{ color: {12}; {13} }}
	

</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="VerbalizerFontWeightBold" replacementCount="0">
    <statement>
							Description: The text to insert to indicate a bold font.
						</statement>
    <unformattedSnippet>font-weight: bold;</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="VerbalizerFontWeightNormal" replacementCount="0">
    <statement>
							Description: The text to insert to indicate a normal font weight.
						</statement>
    <unformattedSnippet>font-weight: normal;</unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="VerbalizerIncreaseIndent" replacementCount="0">
    <statement>
							Description: Used by the verbalizer to indent a child verbalization
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="VerbalizerNewLine" replacementCount="0">
    <statement>
							Description: Used by the verbalizer to enter a new line.
							Format: \n
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
  <snippet name="VerbalizerOpenVerbalization" replacementCount="0">
    <statement>
							Description: Used by the verbalizer around a single verbalization
						</statement>
    <unformattedSnippet></unformattedSnippet>
    <contains />
    <containedIn />
    <usedBy />
  </snippet>
</snippets>