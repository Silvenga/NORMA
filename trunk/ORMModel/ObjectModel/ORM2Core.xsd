<?xml version="1.0" encoding="utf-8"?>
<!-- Todo: Is external on object type?  What am I supposed to do with object shapes and data types? -->
<xs:schema targetNamespace="http://Schemas.Northface.edu/ORM/ORMCore" 
	elementFormDefault="qualified" attributeFormDefault="unqualified" 
	xmlns="http://Schemas.Northface.edu/ORM/ORMCore" 
	xmlns:xs="http://www.w3.org/2001/XMLSchema" 
	xmlns:derived="http://Schemas.Northface.edu/ORM/ORMDerived">

	<!-- <xs:import namespace="http://Schemas.Northface.edu/ORM/ORMDerived" /> -->
	<!--ExtendableElement the thought here is to define all the any's once and then have Extendable Element extend this-->
	<xs:complexType name="ExtendableElement" abstract="true">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:anyAttribute namespace="##other" processContents="lax"/>
	</xs:complexType>
	<!--ExtendableElement-->
	<!--ORMModel-->
	<xs:element name="ORMModel" type="ORMModel"/>
	<xs:complexType name="ORMModel">
		<xs:complexContent>
			<xs:extension base="ExtendableElement">
				<xs:sequence minOccurs="0" maxOccurs="unbounded">
					<xs:element name="Objects" type="Objects" minOccurs="0" maxOccurs="1"/>
					<xs:element name="Facts" type="Facts" minOccurs="0" maxOccurs="1"/>
					<xs:element name="ExternalConstraints" type="ExternalConstraints" minOccurs="0" maxOccurs="1"/>
					<xs:element name="DataTypes" type="DataTypes" minOccurs="0" maxOccurs="1"/>
					<xs:element name="CustomReferenceModes" type="CustomReferenceModes" minOccurs="0" maxOccurs="1"/>
					<xs:element name="ModelErrors" type="ModelErrors" minOccurs="0" maxOccurs="1"/>
					<xs:element name="ReferenceModeKinds" type="ReferenceModeKinds" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="Name" type="xs:string"></xs:attribute>
				<xs:attribute name="id" type="xs:ID"></xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--End ORMModel-->
	<!--Objects and Object Types-->
	<!--ObjectRef and  ObjectRefs define references to constrains and collections of constraints-->
	<xs:complexType name="ObjectRefs">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="Object" type="ObjectRef" minOccurs="1" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ObjectRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<!--end ObjectRef and  ObjectRefs-->
	<xs:complexType name="Objects">
		<xs:complexContent>
			<xs:extension base="ExtendableElement">
				<xs:sequence minOccurs="0" maxOccurs="unbounded">
					<xs:element name="EntityType" type="EntityType" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="ObjectifiedType" type="ObjectifiedType" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="ValueType" type="ValueType" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ObjectType" abstract="true">
		<xs:complexContent>
			<xs:extension base="ExtendableElement">
				<xs:sequence>
					<xs:element name="ObjectNotes" type="Data" minOccurs="0" maxOccurs="1"/>
					<xs:element name="PlayedRoles" type="RoleSequence" minOccurs="0" maxOccurs="unbounded"/>
					<!--Subtypes is derived.-->
					<!--We need to be able to reference elements from the derived schema without introducing ambiguity.-->
					<!--<xs:element ref="derived:test"></xs:element>-->
<!--					<xs:element ref="derived:Subtypes"/>-->
					<!--Supertypes is derived.-->
					<xs:element name="Supertypes" type="ObjectRefs" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="Name" use="required" type="xs:string"/>
				<xs:attribute name="id" use="required" type="xs:ID"/>
				<xs:attribute name="IsIndependent" type="xs:boolean" default="false"/>
				<xs:attribute name="IsExternal" type="xs:boolean" default="false"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="EntityType">
		<xs:complexContent>
			<xs:extension base="ObjectType">
				<xs:sequence>
					<xs:element name="PreferredIdentifier" type="ConstraintRef" minOccurs="0"/>
				</xs:sequence>
				<!--ReferenceMode is derived.-->
				<xs:attribute name="ReferenceMode" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--The fact that an object is an ObjectifiedType is derrived.-->
	<xs:complexType name="ObjectifiedType">
		<xs:complexContent>
			<xs:extension base="ObjectType">
				<xs:sequence>
					<xs:element name="NestedPredicate" type="FactRef" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--The fact that an object is a valuetype is derrived-->
	<xs:complexType name="ValueType">
		<xs:complexContent>
			<xs:extension base="ObjectType">
				<xs:sequence>
					<xs:element name="ConceptualDataType" type="DataTypeRef" minOccurs="0" maxOccurs="1"/>
					<xs:element name="ValueConstraint" type="ValueRangeDefinition" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--End Objects and Object Types-->
	<!--DataType -->
	<!--DataTypeRef indicates a reference to a datatype -->
	<xs:complexType name="DataTypeRef">
		<xs:attribute name="id" type="xs:ID"/>
		<xs:attribute name="ref" type="xs:IDREF"/>
		<xs:attribute name="Scale" type="xs:int"/>
		<xs:attribute name="Length" type="xs:int"/>
	</xs:complexType>
	<xs:complexType name="DataTypeRefRef">
		<xs:attribute name="ref" type="xs:IDREF" />
	</xs:complexType>
	<!--end DataTypeRef-->
	<xs:complexType name="DataTypes">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="UnspecifiedDataType" type="UnspecifiedDataType"/>
			<xs:element name="FixedLengthTextDataType" type="FixedLengthTextDataType"/>
			<xs:element name="VariableLengthTextDataType" type="VariableLengthTextDataType"/>
			<xs:element name="LargeLengthTextDataType" type="LargeLengthTextDataType"/>
			<xs:element name="SignedIntegerNumericDataType" type="SignedIntegerNumericDataType"/>
			<xs:element name="UnsignedIntegerNumericDataType" type="UnsignedIntegerNumericDataType"/>
			<xs:element name="AutoCounterNumericDataType" type="AutoCounterNumericDataType"/>
			<xs:element name="FloatingPointNumericDataType" type="FloatingPointNumericDataType"/>
			<xs:element name="DecimalNumericDataType" type="DecimalNumericDataType"/>
			<xs:element name="MoneyNumericDataType" type="MoneyNumericDataType"/>
			<xs:element name="FixedLengthRawDataDataType" type="FixedLengthRawDataDataType"/>
			<xs:element name="VariableLengthRawDataDataType" type="VariableLengthRawDataDataType"/>
			<xs:element name="LargeLengthRawDataDataType" type="LargeLengthRawDataDataType"/>
			<xs:element name="PictureRawDataDataType" type="PictureRawDataDataType"/>
			<xs:element name="OleObjectRawDataDataType" type="OleObjectRawDataDataType"/>
			<xs:element name="AutoTimestampTemporalDataType" type="AutoTimestampTemporalDataType"/>
			<xs:element name="TimeTemporalDataType" type="TimeTemporalDataType"/>
			<xs:element name="DateTemporalDataType" type="DateTemporalDataType"/>
			<xs:element name="DateAndTimeTemporalDataType" type="DateAndTimeTemporalDataType"/>
			<xs:element name="TrueOrFalseLogicalDataType" type="TrueOrFalseLogicalDataType"/>
			<xs:element name="YesOrNoLogicalDataType" type="YesOrNoLogicalDataType"/>
			<xs:element name="RowIdOtherDataType" type="RowIdOtherDataType"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="DataType" abstract="true">
		<xs:complexContent>
			<xs:extension base="ExtendableElement">
				<xs:attribute name="id" type="xs:ID" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="UnspecifiedDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FixedLengthTextDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="VariableLengthTextDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="LargeLengthTextDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SignedIntegerNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="UnsignedIntegerNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AutoCounterNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FloatingPointNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DecimalNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="MoneyNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FixedLengthRawDataDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="VariableLengthRawDataDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="LargeLengthRawDataDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PictureRawDataDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="OleObjectRawDataDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AutoTimestampTemporalDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TimeTemporalDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DateTemporalDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DateAndTimeTemporalDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TrueOrFalseLogicalDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="YesOrNoLogicalDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RowIdOtherDataType">
		<xs:complexContent>
			<xs:extension base="DataType"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--End DataType -->
	<!--Data is a gereral purpose element wrapper to enclose data.  This helps make the schema more extendable.-->
	<xs:complexType name="Data">
		<xs:complexContent>
			<xs:extension base="ExtendableElement">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="Data" minOccurs="1" maxOccurs="1" type="xs:string"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--end data-->
	<!--Roles-->
	<!-- RoleRef, RoleSequence and  RoleSequences define references to roles and collections of roles and collections of collections of roles-->
	<xs:complexType name="RoleSequences">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="RoleSequence" type="RoleSequence" minOccurs="1" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="RoleSequence">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="Role" type="RoleRef" minOccurs="1" maxOccurs="1"/>
		</xs:sequence>
		<xs:attribute name="id" type="xs:ID" use="optional"/>
		<xs:attribute name="Name" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="RoleRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<!--end RoleRef, RoleSequence and  RoleSequences-->
	<xs:complexType name="Roles">
		<xs:complexContent>
			<xs:extension base="ExtendableElement">
				<xs:sequence>
					<xs:element name="Role" type="Role" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Role">
		<xs:complexContent>
			<xs:extension base="ExtendableElement">
				<xs:sequence>
					<xs:element name="RolePlayer" type="ObjectRef" minOccurs="0" maxOccurs="1"/>
					<xs:element name="ValueConstraint" type="RoleValueRangeDefinition" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="Name" type="xs:string" use="required"/>
				<xs:attribute name="id" type="xs:ID" use="required"/>
				<!--Derived-->
				<xs:attribute name="IsFunctional" type="xs:boolean" default="false"/>
				<!--Derived-->
				<xs:attribute name="IsMandatory" type="xs:boolean" default="false"/>
				<!--Derived-->
				<xs:attribute name="Multiplicity" type="MultiplicityEnum" default="ZeroToOne"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--Look up enum values.-->
	<xs:simpleType name="MultiplicityEnum">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Unspecified"/>
			<xs:enumeration value="Indeterminate"/>
			<xs:enumeration value="ZeroToOne"/>
			<xs:enumeration value="ZeroToMany"/>
			<xs:enumeration value="ExactlyOne"/>
			<xs:enumeration value="OneToMany"/>
		</xs:restriction>
	</xs:simpleType>
	<!--End Roles-->
	<!-- Facts -->
	<!--Fact Ref defines a reference to a fact-->
	<xs:complexType name="FactRefs">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="Fact" type="FactRef" minOccurs="1" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="FactRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<!--end Fact Ref-->
	<xs:complexType name="Facts">
		<xs:complexContent>
			<xs:extension base="ExtendableElement">
				<xs:sequence>
					<xs:element name="Fact" type="Fact" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Fact">
		<xs:complexContent>
			<xs:extension base="ExtendableElement">
				<xs:sequence minOccurs="0" maxOccurs="1">
					<xs:element name="FactNotes" type="Data" minOccurs="0" maxOccurs="1"/>
					<xs:element name="DerivationRule" type="Data" minOccurs="0" maxOccurs="1"/>
					<xs:element name="FactRoles" type="Roles" minOccurs="0" maxOccurs="1"/>
					<xs:element name="ReadingOrders" type="ReadingOrders" minOccurs="0" maxOccurs="1"/>
					<xs:element name="InternalConstraints" type="InternalConstraints" minOccurs="0" maxOccurs="1"/>
					<xs:element name="ExternalConstraints" type="ConstraintRefs" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="Name" use="required" type="xs:string"/>
				<xs:attribute name="id" use="required" type="xs:ID"/>
				<xs:attribute name="IsExternal" type="xs:boolean" default="false"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- End Facts -->
	<!--Constraints-->
	<!--ConstraintRef and  ConstraintRefs define references to constrains and collections of constraints-->
	<xs:complexType name="ConstraintRefs">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="Constraint" type="ConstraintRef" minOccurs="1" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ConstraintRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="EqualityConstraintRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<!--end ConstraintRef and  ConstraintRefs-->
	<xs:complexType name="ExternalConstraints">
		<xs:complexContent>
			<xs:extension base="ExtendableElement">
				<xs:choice minOccurs="0" maxOccurs="unbounded">
					<xs:element name="EqualityConstraint" type="EqualityConstraint"/>
					<xs:element name="ExclusionConstraint" type="ExclusionConstraint"/>
					<xs:element name="SubsetConstraint" type="SubsetConstraint"/>
					<xs:element name="FrequencyConstraint" type="FrequencyConstraint"/>
					<xs:element name="DisjunctiveMandatoryConstraint" type="DisjunctiveMandatoryConstraint"/>
					<xs:element name="ExternalUniquenessConstraint" type="ExternalUniquenessConstraint"/>
					<xs:element name="RingConstraint" type="RingConstraint"/>
				</xs:choice>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Constraint">
		<xs:complexContent>
			<xs:extension base="ExtendableElement">
				<xs:sequence>
					<xs:element name="ConstraintNote" type="Data" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="id" type="xs:ID"></xs:attribute>
				<xs:attribute name="Name" type="xs:string"></xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--Multicolumn constraints-->
	<xs:complexType name="MultiColumnExternalConstraint" abstract="true">
		<xs:complexContent>
			<xs:extension base="Constraint">
				<xs:sequence>
					<xs:element name="RoleSequences" type="RoleSequences"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="EqualityConstraint">
		<xs:complexContent>
			<xs:extension base="MultiColumnExternalConstraint"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ExclusionConstraint">
		<xs:complexContent>
			<xs:extension base="MultiColumnExternalConstraint"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SubsetConstraint">
		<xs:complexContent>
			<xs:extension base="MultiColumnExternalConstraint">
				<xs:attribute name="FromRoleSequence" type="xs:IDREF"/>
				<!-- use="required"/>  should be here-->
				<xs:attribute name="ToRoleSequence" type="xs:IDREF"/>
				<!-- use="required"/>  should be here-->
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="MultiColumnConstraintRef">
		<xs:attribute name="ref" type="xs:IDREF" />
	</xs:complexType>
	<xs:complexType name="SingleColumnConstraintRef">
		<xs:attribute name="ref" type="xs:IDREF" />
	</xs:complexType>
	<!-- end Multicolumn constraints-->
	<!--Singlecolumn constraints-->
	<xs:complexType name="SingleColumnExternalConstraint">
		<xs:complexContent>
			<xs:extension base="Constraint">
				<xs:sequence minOccurs="0" maxOccurs="unbounded">
					<xs:element name="RoleSequence" type="RoleSequence" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FrequencyConstraint">
		<xs:complexContent>
			<xs:extension base="SingleColumnExternalConstraint">
				<xs:attribute name="MinFrequency" type="xs:int"/>
				<xs:attribute name="MaxFrequency" type="xs:int"/>
			</xs:extension >
		</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="DisjunctiveMandatoryConstraint">
			<xs:complexContent>
				<xs:extension base="SingleColumnExternalConstraint"/>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="ExternalUniquenessConstraint">
			<xs:complexContent>
				<xs:extension base="SingleColumnExternalConstraint">
					<xs:sequence>
						<xs:element name="PreferredIdentifierFor" type="ObjectRef" minOccurs="0"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="RingConstraint">
			<xs:complexContent>
				<xs:extension base="SingleColumnExternalConstraint"/>
			</xs:complexContent>
		</xs:complexType>
		<!--End Singlecolumn constraints-->
		<!--InternalConstraint-note these are owned by FactTypes not the model -->
		<xs:complexType name="InternalConstraints">
			<xs:complexContent>
				<xs:extension base="ExtendableElement">
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="InternalUniquenessConstraint" type="InternalUniquenessConstraint" minOccurs="0" maxOccurs="1"/>
						<xs:element name="SimpleMandatoryConstraint" type="SimpleMandatoryConstraint" minOccurs="0" maxOccurs="1"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="InternalConstraint">
			<xs:complexContent>
				<xs:extension base="Constraint">
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="RoleSequence" type="RoleSequence" minOccurs="1" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="InternalUniquenessConstraint">
			<xs:complexContent>
				<xs:extension base="InternalConstraint">
					<xs:sequence>
						<xs:element name="PreferredIdentifierFor" type="ObjectRef" minOccurs="0"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="InternalUniquenessConstraintRef">
			<xs:attribute name="ref" type="xs:IDREF" />
		</xs:complexType>
		<xs:complexType name="SimpleMandatoryConstraint">
			<xs:complexContent>
				<xs:extension base="InternalConstraint"/>
			</xs:complexContent>
		</xs:complexType>
		<!--End InternalConstraint-->
		<!--End Constraints-->
		<!--Fact Readings and reading Orders-->
		<xs:complexType name="ReadingRef">
			<xs:attribute name="ref" type="xs:IDREF"/>
		</xs:complexType>
		<xs:complexType name="ReadingOrders">
			<xs:complexContent>
				<xs:extension base="ExtendableElement">
					<xs:sequence>
						<xs:element name="ReadingOrder" type="ReadingOrder" minOccurs="0" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="ReadingOrder">
			<xs:complexContent>
				<xs:extension base="ExtendableElement">
					<xs:sequence minOccurs="1" maxOccurs="1">
						<xs:element name="Readings" type="Readings" minOccurs="1" maxOccurs="1"/>
						<xs:element name="RoleSequence" type="RoleSequence" minOccurs="0" maxOccurs="unbounded"/>
					</xs:sequence>
					<xs:attribute name="id" type="xs:ID"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="Readings">
			<xs:complexContent>
				<xs:extension base="ExtendableElement">
					<xs:sequence minOccurs="1" maxOccurs="1">
						<xs:element name="Reading" type="Reading" minOccurs="1" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="Reading">
			<xs:complexContent>
				<xs:extension base="Data">
					<xs:attribute name="IsPrimary" type="xs:boolean" default="false"/>
					<xs:attribute name="id" type="xs:ID" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<!--End Fact Readings and reading Orders-->
		<!-- Should Model errors be part of the core schema or in another namespace?-->
		<!--ModelErrors-->
		<xs:complexType name="ModelErrors">
			<xs:complexContent>
				<xs:extension base="ExtendableElement">
					<xs:choice minOccurs="0" maxOccurs="unbounded">
						<xs:element name="ConstraintDuplicateNameError" type="ConstraintDuplicateNameError"/>
						<xs:element name="FactTypeDuplicateNameError" type="FactTypeDuplicateNameError"/>
						<xs:element name="ObjectTypeDuplicateNameError" type="ObjectTypeDuplicateNameError"/>
						<xs:element name="ExternalConstraintRoleSequenceArityMismatchError" type="ExternalConstraintRoleSequenceArityMismatchError"/>
						<xs:element name="FactTypeRequiresInternalUniquenessConstraintError" type="FactTypeRequiresInternalUniquenessConstraintError"/>
						<xs:element name="FactTypeRequiresReadingError" type="FactTypeRequiresReadingError"/>
						<xs:element name="TooFewReadingRolesError" type="TooFewReadingRolesError"/>
						<xs:element name="TooFewRoleSequencesError" type="TooFewRoleSequencesError"/>
						<xs:element name="TooManyReadingRolesError" type="TooManyReadingRolesError"/>
						<xs:element name="TooManyRoleSequencesError" type="TooManyRoleSequencesError"/>
						<xs:element name="DataTypeNotSpecifiedError" type="DataTypeNotSpecifiedError"/>
						<xs:element name="NMinusOneError" type="NMinusOneError"/>
						<xs:element name="CompatibleRolePlayerTypeError" type="CompatibleRolePlayerTypeError"/>
						<xs:element name="RolePlayerRequiredError" type="RolePlayerRequiredError"/>
						<xs:element name="EqualityIsImpliedByMandatoryError" type="EqualityIsImpliedByMandatoryError"/>
						<xs:element name="EntityTypeRequiresReferenceSchemeError" type="EntityTypeRequiresReferenceSchemeError"/>
					</xs:choice>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="ModelError" abstract="true">
			<xs:complexContent>
				<xs:extension base="ExtendableElement">
					<xs:attribute name="id" type="xs:ID" use="required"/>
					<xs:attribute name="Name" type="xs:string" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="DuplicateNameError" abstract="true">
			<xs:complexContent>
				<xs:extension base="ExtendableElement"></xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="ConstraintDuplicateNameError">
			<xs:complexContent>
				<xs:extension base="DuplicateNameError">
					<xs:sequence minOccurs ="0" maxOccurs ="1">
						<xs:element name ="Constraints" type ="ConstraintRefs" minOccurs="1" maxOccurs ="unbounded"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="FactTypeDuplicateNameError">
			<xs:complexContent>
				<xs:extension base="DuplicateNameError">
					<xs:sequence minOccurs ="0" maxOccurs ="1">
						<xs:element name ="Facts" type ="FactRefs" minOccurs="1" maxOccurs ="unbounded"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="ObjectTypeDuplicateNameError">
			<xs:complexContent>
				<xs:extension base="DuplicateNameError">
					<xs:sequence minOccurs ="0" maxOccurs ="1">
						<xs:element name ="Objects" type ="ObjectRefs" minOccurs="1" maxOccurs ="unbounded"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="EntityTypeRequiresReferenceSchemeError">
			<xs:complexContent>
				<xs:extension base="ModelError">
					<xs:sequence minOccurs ="1" maxOccurs ="1">
						<xs:element name="EntityType" type="ObjectRef"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="ExternalConstraintRoleSequenceArityMismatchError">
			<xs:complexContent>
				<xs:extension base="ModelError">
					<xs:sequence minOccurs ="1" maxOccurs ="1">
						<xs:element name ="Constraint" type="ConstraintRef"></xs:element>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="FactTypeRequiresInternalUniquenessConstraintError">
			<xs:complexContent>
				<xs:extension base="ModelError">
					<xs:sequence minOccurs ="1" maxOccurs ="1">
						<xs:element name ="Fact" type="FactRef"></xs:element>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="FactTypeRequiresReadingError">
			<xs:complexContent>
				<xs:extension base="ModelError">
					<xs:sequence minOccurs ="1" maxOccurs ="1">
						<xs:element name ="Fact" type="FactRef"></xs:element>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="TooFewReadingRolesError">
			<xs:complexContent>
				<xs:extension base="ModelError">
					<xs:sequence minOccurs ="1" maxOccurs ="1">
						<xs:element name ="Reading" type="ReadingRef"></xs:element>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="TooFewRoleSequencesError">
			<xs:complexContent>
				<xs:extension base="ModelError">
					<xs:sequence minOccurs ="1" maxOccurs ="1">
						<xs:element name ="Constraint" type="ConstraintRef"></xs:element>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="TooManyReadingRolesError">
			<xs:complexContent>
				<xs:extension base="ModelError">
					<xs:sequence minOccurs ="1" maxOccurs ="1">
						<xs:element name ="Reading" type="ReadingRef"></xs:element>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="DataTypeNotSpecifiedError">
			<xs:complexContent>
				<xs:extension base="ModelError">
					<xs:sequence>
						<xs:element name ="ConceptualDataType" type="DataTypeRefRef"></xs:element>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="TooManyRoleSequencesError">
			<xs:complexContent>
				<xs:extension base="ModelError">
					<xs:sequence minOccurs ="1" maxOccurs ="1">
						<xs:element name ="Constraint" type="ConstraintRef"></xs:element>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="CompatibleRolePlayerTypeError">
			<xs:complexContent>
				<xs:extension base="ModelError">
					<xs:choice>
						<xs:element name="MultiColumnConstraint" type="MultiColumnConstraintRef"></xs:element>
						<xs:element name="SingleColumnConstraint" type="SingleColumnConstraintRef"></xs:element>
					</xs:choice>
				</xs:extension >
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="RolePlayerRequiredError">
			<xs:complexContent>
				<xs:extension base="ModelError">
					<xs:choice>
						<xs:element name="Role" type="RoleRef"></xs:element>
					</xs:choice>
				</xs:extension >
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="EqualityIsImpliedByMandatoryError">
			<xs:complexContent>
				<xs:extension base="ModelError">
					<xs:choice>
						<xs:element name="EqualityConstraint" type="EqualityConstraintRef"></xs:element>
					</xs:choice>
				</xs:extension >
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="NMinusOneError">
			<xs:complexContent>
				<xs:extension base="ModelError">
					<xs:sequence>
						<xs:element name="InternalUniquenessConstraint" type="InternalUniquenessConstraintRef"></xs:element>
					</xs:sequence>
				</xs:extension >
			</xs:complexContent>
		</xs:complexType>
		<!--End ModelErrors-->
		<!--Custrom Reference Modes-->
		<!--Reference Mdoes and Kinds-->
		<xs:complexType name="ReferenceModeKinds">
			<xs:sequence>
				<xs:element maxOccurs="unbounded" name="ReferenceModeKind" type="ReferenceModeKind"/>
			</xs:sequence>
		</xs:complexType>
		<xs:complexType name="ReferenceModeKindRef">
			<xs:attribute name="ref" type="xs:IDREF"/>
		</xs:complexType>
		<xs:complexType name="ReferenceModeKind">
			<xs:attribute name="id" type="xs:ID" use="required"/>
			<xs:attribute name="FormatString" type="xs:string" use="required"/>
			<xs:attribute name="ReferenceModeType" type="xs:string" use="required"/>
		</xs:complexType>
		<xs:simpleType name="ReferenceModeType">
			<xs:restriction base ="xs:string">
				<xs:enumeration value ="General"/>
				<xs:enumeration value ="Popular"/>
				<xs:enumeration value ="UnitBased"/>
			</xs:restriction>
		</xs:simpleType>
		<xs:complexType name="CustomReferenceModeRef">
			<xs:attribute name="ref" type="xs:IDREF"/>
		</xs:complexType>
		<xs:complexType name="ReferenceMode"></xs:complexType>
		<!--Reference Mdoes and Kinds-->
		<xs:complexType name="CustomReferenceModes">
			<xs:complexContent>
				<xs:extension base="ExtendableElement">
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="CustomReferenceMode" type="CustomReferenceMode"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:complexType name="CustomReferenceMode">
			<xs:complexContent>
				<xs:extension base="ExtendableElement">
					<xs:sequence>
						<xs:element name="CustomFormatString" type="xs:string" minOccurs="0" maxOccurs="1"/>
						<xs:element name="Kind" type="ReferenceModeKindRef" minOccurs="0" maxOccurs="1"/>
					</xs:sequence>
					<xs:attribute name="id" type="xs:ID"/>
					<xs:attribute name="Name" type="xs:string" default=""/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<!--End Custom Reference Modes-->
		<xs:complexType name="ValueRangeDefinition">
			<xs:sequence>
				<xs:element name="ValueRangeDefinition">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ValueRanges" type="ValueRangeCollection"/>
						</xs:sequence>
						<xs:attribute name="id" type="xs:ID" use="required" />
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
		<xs:complexType name="RoleValueRangeDefinition">
			<xs:sequence>
				<xs:element name="RoleValueRangeDefinition">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ValueRanges" type="ValueRangeCollection"/>
						</xs:sequence>
						<xs:attribute name="id" type="xs:ID" use="required" />
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
		<xs:complexType name="ValueRangeCollection">
			<xs:sequence maxOccurs="unbounded">
				<xs:element name="ValueRange" type="ValueRange"/>
			</xs:sequence>
		</xs:complexType>
		<xs:simpleType name="RangeInclusion">
			<xs:restriction base="xs:string">
				<xs:enumeration value="NotSet"/>
				<xs:enumeration value="Open"/>
				<xs:enumeration value="Closed"/>
			</xs:restriction>
		</xs:simpleType>
		<xs:complexType name="ValueRange">
			<xs:attribute name="id" type="xs:ID" use="required" />
			<xs:attribute name="MinValue" type="xs:string" use="required" />
			<xs:attribute name="MaxValue" type="xs:string" use="required" />
			<xs:attribute name="MinInclusion" type="RangeInclusion" default="NotSet" />
			<xs:attribute name="MaxInclusion" type="RangeInclusion" default="NotSet" />
		</xs:complexType>
	</xs:schema>
