//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.44
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Neumont.Tools.ORM.ObjectModel
{
	using System;
	using System.IO;
	using System.Text;
	
	/// <summary>
	///</summary>
	public enum VerbalizationTextSnippetType
	{
		/// <summary>
		///</summary>
		AtMostOneQuantifier,
		/// <summary>
		///</summary>
		CloseVerbalizationSentence,
		/// <summary>
		///</summary>
		CombinationIdentifier,
		/// <summary>
		///</summary>
		CompactSimpleListClose,
		/// <summary>
		///</summary>
		CompactSimpleListFinalSeparator,
		/// <summary>
		///</summary>
		CompactSimpleListOpen,
		/// <summary>
		///</summary>
		CompactSimpleListPairSeparator,
		/// <summary>
		///</summary>
		CompactSimpleListSeparator,
		/// <summary>
		///</summary>
		CompoundListClose,
		/// <summary>
		///</summary>
		CompoundListFinalSeparator,
		/// <summary>
		///</summary>
		CompoundListOpen,
		/// <summary>
		///</summary>
		CompoundListPairSeparator,
		/// <summary>
		///</summary>
		CompoundListSeparator,
		/// <summary>
		///</summary>
		EachInstanceQuantifier,
		/// <summary>
		///</summary>
		ExistentialQuantifier,
		/// <summary>
		///</summary>
		ForEachCompactQuantifier,
		/// <summary>
		///</summary>
		ForEachQuantifier,
		/// <summary>
		///</summary>
		IdentityReferenceQuantifier,
		/// <summary>
		///</summary>
		ImpersonalPronoun,
		/// <summary>
		///</summary>
		IndentedListClose,
		/// <summary>
		///</summary>
		IndentedListFinalSeparator,
		/// <summary>
		///</summary>
		IndentedListOpen,
		/// <summary>
		///</summary>
		IndentedListPairSeparator,
		/// <summary>
		///</summary>
		IndentedListSeparator,
		/// <summary>
		///</summary>
		IndentedOrListClose,
		/// <summary>
		///</summary>
		IndentedOrListFinalSeparator,
		/// <summary>
		///</summary>
		IndentedOrListOpen,
		/// <summary>
		///</summary>
		IndentedOrListPairSeparator,
		/// <summary>
		///</summary>
		IndentedOrListSeparator,
		/// <summary>
		///</summary>
		ModalNecessityOperator,
		/// <summary>
		///</summary>
		ModalPossibilityOperator,
		/// <summary>
		///</summary>
		MoreThanOneQuantifier,
		/// <summary>
		///</summary>
		NegativeReadingForUnaryOnlyDisjunctiveMandatory,
		/// <summary>
		///</summary>
		ObjectType,
		/// <summary>
		///</summary>
		ObjectTypeMissing,
		/// <summary>
		///</summary>
		ObjectTypeWithSubscript,
		/// <summary>
		///</summary>
		OccursInPopulation,
		/// <summary>
		///</summary>
		OneQuantifier,
		/// <summary>
		///</summary>
		PersonalPronoun,
		/// <summary>
		///</summary>
		SimpleListClose,
		/// <summary>
		///</summary>
		SimpleListFinalSeparator,
		/// <summary>
		///</summary>
		SimpleListOpen,
		/// <summary>
		///</summary>
		SimpleListPairSeparator,
		/// <summary>
		///</summary>
		SimpleListSeparator,
		/// <summary>
		///</summary>
		TopLevelIndentedOrListClose,
		/// <summary>
		///</summary>
		TopLevelIndentedOrListFinalSeparator,
		/// <summary>
		///</summary>
		TopLevelIndentedOrListOpen,
		/// <summary>
		///</summary>
		TopLevelIndentedOrListPairSeparator,
		/// <summary>
		///</summary>
		TopLevelIndentedOrListSeparator,
		/// <summary>
		///</summary>
		UniversalQuantifier,
	}
	/// <summary>
	///</summary>
	public struct VerbalizationSet
	{
		private string[] mySnippets;
		/// <summary>
		///</summary>
		public VerbalizationSet(string[] snippets)
		{
			this.mySnippets = snippets;
		}
		/// <summary>
		///</summary>
		public string GetSnippet(VerbalizationTextSnippetType snippetType)
		{
			return this.mySnippets[((int)(snippetType))];
		}
	}
	/// <summary>
	///</summary>
	public class VerbalizationSets
	{
		/// <summary>
		///</summary>
		public static VerbalizationSets Default = VerbalizationSets.CreateDefaultVerbalizationSets();
		private VerbalizationSet[] mySets;
		private VerbalizationSets()
		{
		}
		/// <summary>
		///</summary>
		public string GetSnippet(VerbalizationTextSnippetType snippetType, bool isDeontic, bool isNegative)
		{
			int setIndex = 0;
			if (isDeontic)
			{
				setIndex = (setIndex + 1);
			}
			if (isNegative)
			{
				setIndex = (setIndex + 2);
			}
			return this.mySets[setIndex].GetSnippet(snippetType);
		}
		private static VerbalizationSets CreateDefaultVerbalizationSets()
		{
			VerbalizationSets retVal = new VerbalizationSets();
			retVal.mySets = new VerbalizationSet[] {
					new VerbalizationSet(new string[] {
								"<span class=\"quantifier\">at most one</span> {0}",
								"<span class=\"listSeparator\">.</span>",
								"{0} <span class=\"quantifier\">combination</span>",
								"",
								"<span class=\"listSeparator\">, </span>",
								"",
								"<span class=\"listSeparator\">, </span>",
								"<span class=\"listSeparator\">, </span>",
								"</span>",
								"<span class=\"listSeparator\">; </span>",
								"<br/><span class=\"smallIndent\">",
								"<span class=\"listSeparator\">; </span>",
								"<span class=\"listSeparator\">; </span>",
								"<span class=\"quantifier\">each instance of</span> {0} <span class=\"quantifier\">occ" +
									"urs only once</span>",
								"<span class=\"quantifier\">some</span> {0}",
								"<span class=\"quantifier\">for each</span> {0}, {1}",
								"<span class=\"quantifier\">for each</span> {0},<br/><span class=\"smallIndent\">{1}</" +
									"span>",
								"<span class=\"quantifier\">the same</span> {0}",
								"<span class=\"quantifier\">that</span> {0}",
								"</span>",
								"<span class=\"listSeparator\"> and </span><br/>",
								"<br/><span class=\"smallIndent\">",
								"<span class=\"listSeparator\"> and </span><br/>",
								"<span class=\"listSeparator\"> and </span><br/>",
								"</span>",
								"<br/><span class=\"listSeparator\">or </span>",
								"<span class=\"smallIndent\">",
								"<br/><span class=\"listSeparator\">or </span>",
								"<br/><span class=\"listSeparator\">or </span>",
								"<span class=\"quantifier\">it is necessary that</span> {0}",
								"<span class=\"quantifier\">it is possible that</span> {0}",
								"<span class=\"quantifier\">more than one</span> {0}",
								"<span class=\"quantifier\">some</span> {0} <span class=\"quantifier\">participates in" +
									" none of the following:</span>{1}",
								"<span class=\"objectType\">{0}</span>",
								"<span class=\"objectTypeMissing\">Missing<sub>{0}</sub></span>",
								"<span class=\"objectType\">{0}<sub>{1}</sub></span>",
								"{0} <span class=\"quantifier\">occurs at most once in the population of</span> {1}",
								"<span class=\"quantifier\">at most one</span> {0}",
								"<span class=\"quantifier\">who</span> {0}",
								"",
								"<span class=\"listSeparator\">, and </span>",
								"",
								"<span class=\"listSeparator\"> and </span>",
								"<span class=\"listSeparator\">, </span>",
								"</span>",
								"</span><span class=\"smallIndent\"><br/><span class=\"listSeparator\">or </span>",
								"<span>",
								"</span><span class=\"smallIndent\"><br/><span class=\"listSeparator\">or </span>",
								"</span><span class=\"smallIndent\"><br/><span class=\"listSeparator\">or </span>",
								"<span class=\"quantifier\">each</span> {0}"}),
					new VerbalizationSet(new string[] {
								"<span class=\"quantifier\">at most one</span> {0}",
								"<span class=\"listSeparator\">.</span>",
								"{0} <span class=\"quantifier\">combination</span>",
								"",
								"<span class=\"listSeparator\">, </span>",
								"",
								"<span class=\"listSeparator\">, </span>",
								"<span class=\"listSeparator\">, </span>",
								"</span>",
								"<span class=\"listSeparator\">; </span>",
								"<br/><span class=\"smallIndent\">",
								"<span class=\"listSeparator\">; </span>",
								"<span class=\"listSeparator\">; </span>",
								"<span class=\"quantifier\">each instance of</span> {0} <span class=\"quantifier\">occ" +
									"urs only once</span>",
								"<span class=\"quantifier\">some</span> {0}",
								"<span class=\"quantifier\">for each</span> {0}, {1}",
								"<span class=\"quantifier\">for each</span> {0},<br/><span class=\"smallIndent\">{1}</" +
									"span>",
								"<span class=\"quantifier\">the same</span> {0}",
								"<span class=\"quantifier\">that</span> {0}",
								"</span>",
								"<span class=\"listSeparator\"> and </span><br/>",
								"<br/><span class=\"smallIndent\">",
								"<span class=\"listSeparator\"> and </span><br/>",
								"<span class=\"listSeparator\"> and </span><br/>",
								"</span>",
								"<br/><span class=\"listSeparator\">or </span>",
								"<span class=\"smallIndent\">",
								"<br/><span class=\"listSeparator\">or </span>",
								"<br/><span class=\"listSeparator\">or </span>",
								"<span class=\"quantifier\">it is obligatory that</span> {0}",
								"<span class=\"quantifier\">it is permitted that</span> {0}",
								"<span class=\"quantifier\">more than one</span> {0}",
								"<span class=\"quantifier\">some</span> {0} <span class=\"quantifier\">participates in" +
									" none of the following:</span>{1}",
								"<span class=\"objectType\">{0}</span>",
								"<span class=\"objectTypeMissing\">Missing<sub>{0}</sub></span>",
								"<span class=\"objectType\">{0}<sub>{1}</sub></span>",
								"{0} <span class=\"quantifier\">occurs at most once in the population of</span> {1}",
								"<span class=\"quantifier\">at most one</span> {0}",
								"<span class=\"quantifier\">who</span> {0}",
								"",
								"<span class=\"listSeparator\">, and </span>",
								"",
								"<span class=\"listSeparator\"> and </span>",
								"<span class=\"listSeparator\">, </span>",
								"</span>",
								"</span><span class=\"smallIndent\"><br/><span class=\"listSeparator\">or </span>",
								"<span>",
								"</span><span class=\"smallIndent\"><br/><span class=\"listSeparator\">or </span>",
								"</span><span class=\"smallIndent\"><br/><span class=\"listSeparator\">or </span>",
								"<span class=\"quantifier\">each</span> {0}"}),
					new VerbalizationSet(new string[] {
								"<span class=\"quantifier\">at most one</span> {0}",
								"<span class=\"listSeparator\">.</span>",
								"{0} <span class=\"quantifier\">combination</span>",
								"",
								"<span class=\"listSeparator\">, </span>",
								"",
								"<span class=\"listSeparator\">, </span>",
								"<span class=\"listSeparator\">, </span>",
								"</span>",
								"<span class=\"listSeparator\">; </span>",
								"<br/><span class=\"smallIndent\">",
								"<span class=\"listSeparator\">; </span>",
								"<span class=\"listSeparator\">; </span>",
								"<span class=\"quantifier\">each instance of</span> {0} <span class=\"quantifier\">occ" +
									"urs only once</span>",
								"<span class=\"quantifier\">some</span> {0}",
								"<span class=\"quantifier\">for each</span> {0}, {1}",
								"<span class=\"quantifier\">for each</span> {0},<br/><span class=\"smallIndent\">{1}</" +
									"span>",
								"<span class=\"quantifier\">the same</span> {0}",
								"<span class=\"quantifier\">that</span> {0}",
								"</span>",
								"<span class=\"listSeparator\"> and </span><br/>",
								"<br/><span class=\"smallIndent\">",
								"<span class=\"listSeparator\"> and </span><br/>",
								"<span class=\"listSeparator\"> and </span><br/>",
								"</span>",
								"<br/><span class=\"listSeparator\">or </span>",
								"<span class=\"smallIndent\">",
								"<br/><span class=\"listSeparator\">or </span>",
								"<br/><span class=\"listSeparator\">or </span>",
								"<span class=\"quantifier\">it is necessary that</span> {0}",
								"<span class=\"quantifier\">it is impossible that</span> {0}",
								"<span class=\"quantifier\">more than one</span> {0}",
								"<span class=\"quantifier\">some</span> {0} <span class=\"quantifier\">participates in" +
									" none of the following:</span>{1}",
								"<span class=\"objectType\">{0}</span>",
								"<span class=\"objectTypeMissing\">Missing<sub>{0}</sub></span>",
								"<span class=\"objectType\">{0}<sub>{1}</sub></span>",
								"{0} <span class=\"quantifier\">occurs more than once in the population of</span> {1" +
									"}",
								"<span class=\"quantifier\">more than one</span> {0}",
								"<span class=\"quantifier\">who</span> {0}",
								"",
								"<span class=\"listSeparator\">, and </span>",
								"",
								"<span class=\"listSeparator\"> and </span>",
								"<span class=\"listSeparator\">, </span>",
								"</span>",
								"</span><span class=\"smallIndent\"><br/><span class=\"listSeparator\">or </span>",
								"<span>",
								"</span><span class=\"smallIndent\"><br/><span class=\"listSeparator\">or </span>",
								"</span><span class=\"smallIndent\"><br/><span class=\"listSeparator\">or </span>",
								"<span class=\"quantifier\">each</span> {0}"}),
					new VerbalizationSet(new string[] {
								"<span class=\"quantifier\">at most one</span> {0}",
								"<span class=\"listSeparator\">.</span>",
								"{0} <span class=\"quantifier\">combination</span>",
								"",
								"<span class=\"listSeparator\">, </span>",
								"",
								"<span class=\"listSeparator\">, </span>",
								"<span class=\"listSeparator\">, </span>",
								"</span>",
								"<span class=\"listSeparator\">; </span>",
								"<br/><span class=\"smallIndent\">",
								"<span class=\"listSeparator\">; </span>",
								"<span class=\"listSeparator\">; </span>",
								"<span class=\"quantifier\">each instance of</span> {0} <span class=\"quantifier\">occ" +
									"urs only once</span>",
								"<span class=\"quantifier\">some</span> {0}",
								"<span class=\"quantifier\">for each</span> {0}, {1}",
								"<span class=\"quantifier\">for each</span> {0},<br/><span class=\"smallIndent\">{1}</" +
									"span>",
								"<span class=\"quantifier\">the same</span> {0}",
								"<span class=\"quantifier\">that</span> {0}",
								"</span>",
								"<span class=\"listSeparator\"> and </span><br/>",
								"<br/><span class=\"smallIndent\">",
								"<span class=\"listSeparator\"> and </span><br/>",
								"<span class=\"listSeparator\"> and </span><br/>",
								"</span>",
								"<br/><span class=\"listSeparator\">or </span>",
								"<span class=\"smallIndent\">",
								"<br/><span class=\"listSeparator\">or </span>",
								"<br/><span class=\"listSeparator\">or </span>",
								"<span class=\"quantifier\">it is obligatory that</span> {0}",
								"<span class=\"quantifier\">it is forbidden that</span> {0}",
								"<span class=\"quantifier\">more than one</span> {0}",
								"<span class=\"quantifier\">some</span> {0} <span class=\"quantifier\">participates in" +
									" none of the following:</span>{1}",
								"<span class=\"objectType\">{0}</span>",
								"<span class=\"objectTypeMissing\">Missing<sub>{0}</sub></span>",
								"<span class=\"objectType\">{0}<sub>{1}</sub></span>",
								"{0} <span class=\"quantifier\">occurs more than once in the population of</span> {1" +
									"}",
								"<span class=\"quantifier\">more than one</span> {0}",
								"<span class=\"quantifier\">who</span> {0}",
								"",
								"<span class=\"listSeparator\">, and </span>",
								"",
								"<span class=\"listSeparator\"> and </span>",
								"<span class=\"listSeparator\">, </span>",
								"</span>",
								"</span><span class=\"smallIndent\"><br/><span class=\"listSeparator\">or </span>",
								"<span>",
								"</span><span class=\"smallIndent\"><br/><span class=\"listSeparator\">or </span>",
								"</span><span class=\"smallIndent\"><br/><span class=\"listSeparator\">or </span>",
								"<span class=\"quantifier\">each</span> {0}"})};
			return retVal;
		}
	}
	/// <summary>
	///</summary>
	public partial class FactType : IVerbalize
	{
		/// <summary>
		///</summary>
		protected bool GetVerbalization(TextWriter writer, NotifyBeginVerbalization beginVerbalization, bool isNegative)
		{
			IModelErrorOwner errorOwner = (this) as IModelErrorOwner;
			if ((errorOwner != null))
			{
				bool firstElement = true;
				foreach (ModelError error in errorOwner.ErrorCollection)
				{
					if (firstElement)
					{
						firstElement = false;
						beginVerbalization(VerbalizationContent.ErrorReport);
					}
					else
					{
						writer.WriteLine();
					}
					writer.Write(error.Name);
				}
				if (!(firstElement))
				{
					return false;
				}
			}
			RoleMoveableCollection factRoles = this.RoleCollection;
			int factArity = factRoles.Count;
			ReadingOrderMoveableCollection allReadingOrders = this.ReadingOrderCollection;
			bool isDeontic = false;
			ReadingOrder readingOrder;
			VerbalizationSets snippets = VerbalizationSets.Default;
			string[] basicRoleReplacements = new string[factArity];
			int i = 0;
			for (; (i < factArity); i = (i + 1))
			{
				ObjectType rolePlayer = factRoles[i].RolePlayer;
				string basicReplacement;
				if ((rolePlayer != null))
				{
					basicReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ObjectType, isDeontic, isNegative), rolePlayer.Name);
				}
				else
				{
					basicReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ObjectTypeMissing, isDeontic, isNegative), (i + 1));
				}
				basicRoleReplacements[i] = basicReplacement;
			}
			beginVerbalization(VerbalizationContent.Normal);
			readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
			FactType.WriteVerbalizerSentence(writer, FactType.PopulatePredicateText(readingOrder, factRoles, basicRoleReplacements), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
			return true;
		}
		bool IVerbalize.GetVerbalization(TextWriter writer, NotifyBeginVerbalization beginVerbalization, bool isNegative)
		{
			return this.GetVerbalization(writer, beginVerbalization, isNegative);
		}
	}
	/// <summary>
	///</summary>
	public partial class InternalUniquenessConstraint : IVerbalize
	{
		/// <summary>
		///</summary>
		protected bool GetVerbalization(TextWriter writer, NotifyBeginVerbalization beginVerbalization, bool isNegative)
		{
			IModelErrorOwner errorOwner = (this) as IModelErrorOwner;
			if ((errorOwner != null))
			{
				bool firstElement = true;
				foreach (ModelError error in errorOwner.ErrorCollection)
				{
					if (firstElement)
					{
						firstElement = false;
						beginVerbalization(VerbalizationContent.ErrorReport);
					}
					else
					{
						writer.WriteLine();
					}
					writer.Write(error.Name);
				}
				if (!(firstElement))
				{
					return false;
				}
			}
			VerbalizationSets snippets = VerbalizationSets.Default;
			bool isDeontic = false;
			StringBuilder sbTemp = null;
			FactType parentFact = this.FactType;
			RoleMoveableCollection includedRoles = this.RoleCollection;
			RoleMoveableCollection factRoles = parentFact.RoleCollection;
			int factArity = factRoles.Count;
			ReadingOrderMoveableCollection allReadingOrders = parentFact.ReadingOrderCollection;
			int includedArity = includedRoles.Count;
			if (((allReadingOrders.Count == 0) 
						|| (includedArity == 0)))
			{
				return false;
			}
			string[] basicRoleReplacements = new string[factArity];
			int i = 0;
			for (; (i < factArity); i = (i + 1))
			{
				ObjectType rolePlayer = factRoles[i].RolePlayer;
				string basicReplacement;
				if ((rolePlayer != null))
				{
					int subscript = 0;
					bool useSubscript = false;
					int j = 0;
					for (; (j < i); j = (j + 1))
					{
						if (object.ReferenceEquals(rolePlayer, factRoles[j].RolePlayer))
						{
							useSubscript = true;
							subscript = (subscript + 1);
						}
					}
					for (j = (i + 1); (!(useSubscript) 
								&& (j < factArity)); j = (j + 1))
					{
						if (object.ReferenceEquals(rolePlayer, factRoles[j].RolePlayer))
						{
							useSubscript = true;
						}
					}
					if (useSubscript)
					{
						basicReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ObjectTypeWithSubscript, isDeontic, isNegative), rolePlayer.Name, (subscript + 1));
					}
					else
					{
						basicReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ObjectType, isDeontic, isNegative), rolePlayer.Name);
					}
				}
				else
				{
					basicReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ObjectTypeMissing, isDeontic, isNegative), (i + 1));
				}
				basicRoleReplacements[i] = basicReplacement;
			}
			string[] roleReplacements = new string[factArity];
			ReadingOrder readingOrder;
			if (((factArity == 1) 
						&& !(isNegative)))
			{
				beginVerbalization(VerbalizationContent.Normal);
				string snippetFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.OccursInPopulation, isDeontic, isNegative);
				string snippet1Replace1 = null;
				string snippet1ReplaceFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.UniversalQuantifier, isDeontic, isNegative);
				string snippet1Replace1Replace1 = null;
				if ((sbTemp == null))
				{
					sbTemp = new StringBuilder();
				}
				else
				{
					sbTemp.Length = 0;
				}
				int snippet1Replace1ReplaceRoleIter1 = 0;
				for (; (snippet1Replace1ReplaceRoleIter1 < includedArity); snippet1Replace1ReplaceRoleIter1 = (snippet1Replace1ReplaceRoleIter1 + 1))
				{
					Role primaryRole = includedRoles[snippet1Replace1ReplaceRoleIter1];
					VerbalizationTextSnippetType listSnippet;
					if ((snippet1Replace1ReplaceRoleIter1 == 0))
					{
						listSnippet = VerbalizationTextSnippetType.SimpleListOpen;
					}
					else
					{
						if ((snippet1Replace1ReplaceRoleIter1 
									== (includedArity - 1)))
						{
							if ((snippet1Replace1ReplaceRoleIter1 == 1))
							{
								listSnippet = VerbalizationTextSnippetType.SimpleListPairSeparator;
							}
							else
							{
								listSnippet = VerbalizationTextSnippetType.SimpleListFinalSeparator;
							}
						}
						else
						{
							listSnippet = VerbalizationTextSnippetType.SimpleListSeparator;
						}
					}
					sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
					sbTemp.Append(basicRoleReplacements[factRoles.IndexOf(includedRoles[snippet1Replace1ReplaceRoleIter1])]);
					if ((snippet1Replace1ReplaceRoleIter1 
								== (includedArity - 1)))
					{
						sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.SimpleListClose, isDeontic, isNegative));
					}
				}
				snippet1Replace1Replace1 = sbTemp.ToString();
				snippet1Replace1 = string.Format(writer.FormatProvider, snippet1ReplaceFormat1, snippet1Replace1Replace1);
				string snippet1Replace2 = null;
				readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
				snippet1Replace2 = FactType.PopulatePredicateText(readingOrder, factRoles, basicRoleReplacements);
				FactType.WriteVerbalizerSentence(writer, string.Format(writer.FormatProvider, snippetFormat1, snippet1Replace1, snippet1Replace2), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
			}
			else
			{
				if ((factArity == 1))
				{
					beginVerbalization(VerbalizationContent.Normal);
					string snippetFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.ModalPossibilityOperator, isDeontic, isNegative);
					string snippet1Replace1 = null;
					string snippet1ReplaceFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.OccursInPopulation, isDeontic, isNegative);
					string snippet1Replace1Replace1 = null;
					string snippet1Replace1ReplaceFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.IdentityReferenceQuantifier, isDeontic, isNegative);
					string snippet1Replace1Replace1Replace1 = null;
					if ((sbTemp == null))
					{
						sbTemp = new StringBuilder();
					}
					else
					{
						sbTemp.Length = 0;
					}
					int snippet1Replace1Replace1ReplaceRoleIter1 = 0;
					for (; (snippet1Replace1Replace1ReplaceRoleIter1 < includedArity); snippet1Replace1Replace1ReplaceRoleIter1 = (snippet1Replace1Replace1ReplaceRoleIter1 + 1))
					{
						Role primaryRole = includedRoles[snippet1Replace1Replace1ReplaceRoleIter1];
						VerbalizationTextSnippetType listSnippet;
						if ((snippet1Replace1Replace1ReplaceRoleIter1 == 0))
						{
							listSnippet = VerbalizationTextSnippetType.SimpleListOpen;
						}
						else
						{
							if ((snippet1Replace1Replace1ReplaceRoleIter1 
										== (includedArity - 1)))
							{
								if ((snippet1Replace1Replace1ReplaceRoleIter1 == 1))
								{
									listSnippet = VerbalizationTextSnippetType.SimpleListPairSeparator;
								}
								else
								{
									listSnippet = VerbalizationTextSnippetType.SimpleListFinalSeparator;
								}
							}
							else
							{
								listSnippet = VerbalizationTextSnippetType.SimpleListSeparator;
							}
						}
						sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
						sbTemp.Append(basicRoleReplacements[factRoles.IndexOf(includedRoles[snippet1Replace1Replace1ReplaceRoleIter1])]);
						if ((snippet1Replace1Replace1ReplaceRoleIter1 
									== (includedArity - 1)))
						{
							sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.SimpleListClose, isDeontic, isNegative));
						}
					}
					snippet1Replace1Replace1Replace1 = sbTemp.ToString();
					snippet1Replace1Replace1 = string.Format(writer.FormatProvider, snippet1Replace1ReplaceFormat1, snippet1Replace1Replace1Replace1);
					string snippet1Replace1Replace2 = null;
					readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
					snippet1Replace1Replace2 = FactType.PopulatePredicateText(readingOrder, factRoles, basicRoleReplacements);
					snippet1Replace1 = string.Format(writer.FormatProvider, snippet1ReplaceFormat1, snippet1Replace1Replace1, snippet1Replace1Replace2);
					FactType.WriteVerbalizerSentence(writer, string.Format(writer.FormatProvider, snippetFormat1, snippet1Replace1), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
				}
				else
				{
					if (((factArity == includedArity) 
								&& !(isNegative)))
					{
						beginVerbalization(VerbalizationContent.Normal);
						string snippetFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.OccursInPopulation, isDeontic, isNegative);
						string snippet1Replace1 = null;
						string snippet1ReplaceFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.CombinationIdentifier, isDeontic, isNegative);
						string snippet1Replace1Replace1 = null;
						string snippet1Replace1ReplaceFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.UniversalQuantifier, isDeontic, isNegative);
						string snippet1Replace1Replace1Replace1 = null;
						if ((sbTemp == null))
						{
							sbTemp = new StringBuilder();
						}
						else
						{
							sbTemp.Length = 0;
						}
						int snippet1Replace1Replace1ReplaceRoleIter1 = 0;
						for (; (snippet1Replace1Replace1ReplaceRoleIter1 < includedArity); snippet1Replace1Replace1ReplaceRoleIter1 = (snippet1Replace1Replace1ReplaceRoleIter1 + 1))
						{
							Role primaryRole = includedRoles[snippet1Replace1Replace1ReplaceRoleIter1];
							VerbalizationTextSnippetType listSnippet;
							if ((snippet1Replace1Replace1ReplaceRoleIter1 == 0))
							{
								listSnippet = VerbalizationTextSnippetType.SimpleListOpen;
							}
							else
							{
								if ((snippet1Replace1Replace1ReplaceRoleIter1 
											== (includedArity - 1)))
								{
									if ((snippet1Replace1Replace1ReplaceRoleIter1 == 1))
									{
										listSnippet = VerbalizationTextSnippetType.SimpleListPairSeparator;
									}
									else
									{
										listSnippet = VerbalizationTextSnippetType.SimpleListFinalSeparator;
									}
								}
								else
								{
									listSnippet = VerbalizationTextSnippetType.SimpleListSeparator;
								}
							}
							sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
							sbTemp.Append(basicRoleReplacements[factRoles.IndexOf(includedRoles[snippet1Replace1Replace1ReplaceRoleIter1])]);
							if ((snippet1Replace1Replace1ReplaceRoleIter1 
										== (includedArity - 1)))
							{
								sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.SimpleListClose, isDeontic, isNegative));
							}
						}
						snippet1Replace1Replace1Replace1 = sbTemp.ToString();
						snippet1Replace1Replace1 = string.Format(writer.FormatProvider, snippet1Replace1ReplaceFormat1, snippet1Replace1Replace1Replace1);
						snippet1Replace1 = string.Format(writer.FormatProvider, snippet1ReplaceFormat1, snippet1Replace1Replace1);
						string snippet1Replace2 = null;
						readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
						snippet1Replace2 = FactType.PopulatePredicateText(readingOrder, factRoles, basicRoleReplacements);
						FactType.WriteVerbalizerSentence(writer, string.Format(writer.FormatProvider, snippetFormat1, snippet1Replace1, snippet1Replace2), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
					}
					else
					{
						if ((factArity == includedArity))
						{
							beginVerbalization(VerbalizationContent.Normal);
							string snippetFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.ModalPossibilityOperator, isDeontic, isNegative);
							string snippet1Replace1 = null;
							string snippet1ReplaceFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.OccursInPopulation, isDeontic, isNegative);
							string snippet1Replace1Replace1 = null;
							string snippet1Replace1ReplaceFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.CombinationIdentifier, isDeontic, isNegative);
							string snippet1Replace1Replace1Replace1 = null;
							string snippet1Replace1Replace1ReplaceFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.IdentityReferenceQuantifier, isDeontic, isNegative);
							string snippet1Replace1Replace1Replace1Replace1 = null;
							if ((sbTemp == null))
							{
								sbTemp = new StringBuilder();
							}
							else
							{
								sbTemp.Length = 0;
							}
							int snippet1Replace1Replace1Replace1ReplaceRoleIter1 = 0;
							for (; (snippet1Replace1Replace1Replace1ReplaceRoleIter1 < includedArity); snippet1Replace1Replace1Replace1ReplaceRoleIter1 = (snippet1Replace1Replace1Replace1ReplaceRoleIter1 + 1))
							{
								Role primaryRole = includedRoles[snippet1Replace1Replace1Replace1ReplaceRoleIter1];
								VerbalizationTextSnippetType listSnippet;
								if ((snippet1Replace1Replace1Replace1ReplaceRoleIter1 == 0))
								{
									listSnippet = VerbalizationTextSnippetType.CompactSimpleListOpen;
								}
								else
								{
									if ((snippet1Replace1Replace1Replace1ReplaceRoleIter1 
												== (includedArity - 1)))
									{
										if ((snippet1Replace1Replace1Replace1ReplaceRoleIter1 == 1))
										{
											listSnippet = VerbalizationTextSnippetType.CompactSimpleListPairSeparator;
										}
										else
										{
											listSnippet = VerbalizationTextSnippetType.CompactSimpleListFinalSeparator;
										}
									}
									else
									{
										listSnippet = VerbalizationTextSnippetType.CompactSimpleListSeparator;
									}
								}
								sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
								sbTemp.Append(basicRoleReplacements[factRoles.IndexOf(includedRoles[snippet1Replace1Replace1Replace1ReplaceRoleIter1])]);
								if ((snippet1Replace1Replace1Replace1ReplaceRoleIter1 
											== (includedArity - 1)))
								{
									sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.CompactSimpleListClose, isDeontic, isNegative));
								}
							}
							snippet1Replace1Replace1Replace1Replace1 = sbTemp.ToString();
							snippet1Replace1Replace1Replace1 = string.Format(writer.FormatProvider, snippet1Replace1Replace1ReplaceFormat1, snippet1Replace1Replace1Replace1Replace1);
							snippet1Replace1Replace1 = string.Format(writer.FormatProvider, snippet1Replace1ReplaceFormat1, snippet1Replace1Replace1Replace1);
							string snippet1Replace1Replace2 = null;
							readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
							snippet1Replace1Replace2 = FactType.PopulatePredicateText(readingOrder, factRoles, basicRoleReplacements);
							snippet1Replace1 = string.Format(writer.FormatProvider, snippet1ReplaceFormat1, snippet1Replace1Replace1, snippet1Replace1Replace2);
							FactType.WriteVerbalizerSentence(writer, string.Format(writer.FormatProvider, snippetFormat1, snippet1Replace1), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
						}
						else
						{
							if (((factArity == 2) 
										&& !(isNegative)))
							{
								readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, null, includedRoles, false, false, factRoles, false);
								if ((readingOrder != null))
								{
									beginVerbalization(VerbalizationContent.Normal);
									int factTextFactRoleIter1 = 0;
									for (; (factTextFactRoleIter1 < factArity); factTextFactRoleIter1 = (factTextFactRoleIter1 + 1))
									{
										Role currentRole = factRoles[factTextFactRoleIter1];
										string roleReplacement = null;
										string basicReplacement = basicRoleReplacements[factTextFactRoleIter1];
										if (includedRoles.Contains(currentRole))
										{
											roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.UniversalQuantifier, isDeontic, isNegative), basicReplacement);
										}
										else
										{
											roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.OneQuantifier, isDeontic, isNegative), basicReplacement);
										}
										if ((roleReplacement == null))
										{
											roleReplacement = basicReplacement;
										}
										roleReplacements[factTextFactRoleIter1] = roleReplacement;
									}
									FactType.WriteVerbalizerSentence(writer, FactType.PopulatePredicateText(readingOrder, factRoles, roleReplacements), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
								}
								else
								{
									readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
									if ((readingOrder != null))
									{
										beginVerbalization(VerbalizationContent.Normal);
										string snippetFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.ForEachCompactQuantifier, isDeontic, isNegative);
										string snippet1Replace1 = null;
										if ((sbTemp == null))
										{
											sbTemp = new StringBuilder();
										}
										else
										{
											sbTemp.Length = 0;
										}
										int snippet1ReplaceRoleIter1 = 0;
										for (; (snippet1ReplaceRoleIter1 < includedArity); snippet1ReplaceRoleIter1 = (snippet1ReplaceRoleIter1 + 1))
										{
											Role primaryRole = includedRoles[snippet1ReplaceRoleIter1];
											VerbalizationTextSnippetType listSnippet;
											if ((snippet1ReplaceRoleIter1 == 0))
											{
												listSnippet = VerbalizationTextSnippetType.SimpleListOpen;
											}
											else
											{
												if ((snippet1ReplaceRoleIter1 
															== (includedArity - 1)))
												{
													if ((snippet1ReplaceRoleIter1 == 1))
													{
														listSnippet = VerbalizationTextSnippetType.SimpleListPairSeparator;
													}
													else
													{
														listSnippet = VerbalizationTextSnippetType.SimpleListFinalSeparator;
													}
												}
												else
												{
													listSnippet = VerbalizationTextSnippetType.SimpleListSeparator;
												}
											}
											sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
											sbTemp.Append(basicRoleReplacements[factRoles.IndexOf(includedRoles[snippet1ReplaceRoleIter1])]);
											if ((snippet1ReplaceRoleIter1 
														== (includedArity - 1)))
											{
												sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.SimpleListClose, isDeontic, isNegative));
											}
										}
										snippet1Replace1 = sbTemp.ToString();
										string snippet1Replace2 = null;
										readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
										int snippet1ReplaceFactRoleIter2 = 0;
										for (; (snippet1ReplaceFactRoleIter2 < factArity); snippet1ReplaceFactRoleIter2 = (snippet1ReplaceFactRoleIter2 + 1))
										{
											Role currentRole = factRoles[snippet1ReplaceFactRoleIter2];
											string roleReplacement = null;
											string basicReplacement = basicRoleReplacements[snippet1ReplaceFactRoleIter2];
											if (includedRoles.Contains(currentRole))
											{
												roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ImpersonalPronoun, isDeontic, isNegative), basicReplacement);
											}
											else
											{
												roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.OneQuantifier, isDeontic, isNegative), basicReplacement);
											}
											if ((roleReplacement == null))
											{
												roleReplacement = basicReplacement;
											}
											roleReplacements[snippet1ReplaceFactRoleIter2] = roleReplacement;
										}
										snippet1Replace2 = FactType.PopulatePredicateText(readingOrder, factRoles, roleReplacements);
										FactType.WriteVerbalizerSentence(writer, string.Format(writer.FormatProvider, snippetFormat1, snippet1Replace1, snippet1Replace2), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
									}
								}
							}
							else
							{
								if ((factArity == 2))
								{
									readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, null, includedRoles, false, false, factRoles, false);
									if ((readingOrder != null))
									{
										beginVerbalization(VerbalizationContent.Normal);
										string snippetFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.ModalPossibilityOperator, isDeontic, isNegative);
										string snippet1Replace1 = null;
										readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
										int snippet1ReplaceFactRoleIter1 = 0;
										for (; (snippet1ReplaceFactRoleIter1 < factArity); snippet1ReplaceFactRoleIter1 = (snippet1ReplaceFactRoleIter1 + 1))
										{
											Role currentRole = factRoles[snippet1ReplaceFactRoleIter1];
											string roleReplacement = null;
											string basicReplacement = basicRoleReplacements[snippet1ReplaceFactRoleIter1];
											if (includedRoles.Contains(currentRole))
											{
												roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.IdentityReferenceQuantifier, isDeontic, isNegative), basicReplacement);
											}
											else
											{
												if (!(includedRoles.Contains(currentRole)))
												{
													roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.OneQuantifier, isDeontic, isNegative), basicReplacement);
												}
											}
											if ((roleReplacement == null))
											{
												roleReplacement = basicReplacement;
											}
											roleReplacements[snippet1ReplaceFactRoleIter1] = roleReplacement;
										}
										snippet1Replace1 = FactType.PopulatePredicateText(readingOrder, factRoles, roleReplacements);
										FactType.WriteVerbalizerSentence(writer, string.Format(writer.FormatProvider, snippetFormat1, snippet1Replace1), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
									}
									else
									{
										readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
										if ((readingOrder != null))
										{
											beginVerbalization(VerbalizationContent.Normal);
											string snippetFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.ModalPossibilityOperator, isDeontic, isNegative);
											string snippet1Replace1 = null;
											readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
											int snippet1ReplaceFactRoleIter1 = 0;
											for (; (snippet1ReplaceFactRoleIter1 < factArity); snippet1ReplaceFactRoleIter1 = (snippet1ReplaceFactRoleIter1 + 1))
											{
												Role currentRole = factRoles[snippet1ReplaceFactRoleIter1];
												string roleReplacement = null;
												string basicReplacement = basicRoleReplacements[snippet1ReplaceFactRoleIter1];
												if (!(includedRoles.Contains(currentRole)))
												{
													roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.OneQuantifier, isDeontic, isNegative), basicReplacement);
												}
												else
												{
													if (includedRoles.Contains(currentRole))
													{
														roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.IdentityReferenceQuantifier, isDeontic, isNegative), basicReplacement);
													}
												}
												if ((roleReplacement == null))
												{
													roleReplacement = basicReplacement;
												}
												roleReplacements[snippet1ReplaceFactRoleIter1] = roleReplacement;
											}
											snippet1Replace1 = FactType.PopulatePredicateText(readingOrder, factRoles, roleReplacements);
											FactType.WriteVerbalizerSentence(writer, string.Format(writer.FormatProvider, snippetFormat1, snippet1Replace1), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
										}
									}
								}
								else
								{
									if (isNegative)
									{
										beginVerbalization(VerbalizationContent.Normal);
										string snippetFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.ModalPossibilityOperator, isDeontic, isNegative);
										string snippet1Replace1 = null;
										string snippet1ReplaceFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.IdentityReferenceQuantifier, isDeontic, isNegative);
										string snippet1Replace1Replace1 = null;
										if ((sbTemp == null))
										{
											sbTemp = new StringBuilder();
										}
										else
										{
											sbTemp.Length = 0;
										}
										int snippet1Replace1ReplaceRoleIter1 = 0;
										for (; (snippet1Replace1ReplaceRoleIter1 < includedArity); snippet1Replace1ReplaceRoleIter1 = (snippet1Replace1ReplaceRoleIter1 + 1))
										{
											Role primaryRole = includedRoles[snippet1Replace1ReplaceRoleIter1];
											VerbalizationTextSnippetType listSnippet;
											if ((snippet1Replace1ReplaceRoleIter1 == 0))
											{
												listSnippet = VerbalizationTextSnippetType.SimpleListOpen;
											}
											else
											{
												if ((snippet1Replace1ReplaceRoleIter1 
															== (includedArity - 1)))
												{
													if ((snippet1Replace1ReplaceRoleIter1 == 1))
													{
														listSnippet = VerbalizationTextSnippetType.SimpleListPairSeparator;
													}
													else
													{
														listSnippet = VerbalizationTextSnippetType.SimpleListFinalSeparator;
													}
												}
												else
												{
													listSnippet = VerbalizationTextSnippetType.SimpleListSeparator;
												}
											}
											sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
											sbTemp.Append(basicRoleReplacements[factRoles.IndexOf(includedRoles[snippet1Replace1ReplaceRoleIter1])]);
											if ((snippet1Replace1ReplaceRoleIter1 
														== (includedArity - 1)))
											{
												sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.SimpleListClose, isDeontic, isNegative));
											}
										}
										snippet1Replace1Replace1 = sbTemp.ToString();
										string snippet1Replace1Replace2 = null;
										readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, null, includedRoles, false, false, factRoles, false);
										int snippet1Replace1ReplaceFactRoleIter2 = 0;
										for (; (snippet1Replace1ReplaceFactRoleIter2 < factArity); snippet1Replace1ReplaceFactRoleIter2 = (snippet1Replace1ReplaceFactRoleIter2 + 1))
										{
											Role currentRole = factRoles[snippet1Replace1ReplaceFactRoleIter2];
											string roleReplacement = null;
											string basicReplacement = basicRoleReplacements[snippet1Replace1ReplaceFactRoleIter2];
											if (includedRoles.Contains(currentRole))
											{
												roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ImpersonalPronoun, isDeontic, isNegative), basicReplacement);
											}
											else
											{
												if (!(includedRoles.Contains(currentRole)))
												{
													roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.OneQuantifier, isDeontic, isNegative), basicReplacement);
												}
											}
											if ((roleReplacement == null))
											{
												roleReplacement = basicReplacement;
											}
											roleReplacements[snippet1Replace1ReplaceFactRoleIter2] = roleReplacement;
										}
										snippet1Replace1Replace2 = FactType.PopulatePredicateText(readingOrder, factRoles, roleReplacements);
										snippet1Replace1 = string.Format(writer.FormatProvider, snippet1ReplaceFormat1, snippet1Replace1Replace1, snippet1Replace1Replace2);
										FactType.WriteVerbalizerSentence(writer, string.Format(writer.FormatProvider, snippetFormat1, snippet1Replace1), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
									}
									else
									{
										beginVerbalization(VerbalizationContent.Normal);
										string snippetFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.ForEachQuantifier, isDeontic, isNegative);
										string snippet1Replace1 = null;
										if ((sbTemp == null))
										{
											sbTemp = new StringBuilder();
										}
										else
										{
											sbTemp.Length = 0;
										}
										int snippet1ReplaceRoleIter1 = 0;
										for (; (snippet1ReplaceRoleIter1 < includedArity); snippet1ReplaceRoleIter1 = (snippet1ReplaceRoleIter1 + 1))
										{
											Role primaryRole = includedRoles[snippet1ReplaceRoleIter1];
											VerbalizationTextSnippetType listSnippet;
											if ((snippet1ReplaceRoleIter1 == 0))
											{
												listSnippet = VerbalizationTextSnippetType.SimpleListOpen;
											}
											else
											{
												if ((snippet1ReplaceRoleIter1 
															== (includedArity - 1)))
												{
													if ((snippet1ReplaceRoleIter1 == 1))
													{
														listSnippet = VerbalizationTextSnippetType.SimpleListPairSeparator;
													}
													else
													{
														listSnippet = VerbalizationTextSnippetType.SimpleListFinalSeparator;
													}
												}
												else
												{
													listSnippet = VerbalizationTextSnippetType.SimpleListSeparator;
												}
											}
											sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
											sbTemp.Append(basicRoleReplacements[factRoles.IndexOf(includedRoles[snippet1ReplaceRoleIter1])]);
											if ((snippet1ReplaceRoleIter1 
														== (includedArity - 1)))
											{
												sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.SimpleListClose, isDeontic, isNegative));
											}
										}
										snippet1Replace1 = sbTemp.ToString();
										string snippet1Replace2 = null;
										readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
										int snippet1ReplaceFactRoleIter2 = 0;
										for (; (snippet1ReplaceFactRoleIter2 < factArity); snippet1ReplaceFactRoleIter2 = (snippet1ReplaceFactRoleIter2 + 1))
										{
											Role currentRole = factRoles[snippet1ReplaceFactRoleIter2];
											string roleReplacement = null;
											string basicReplacement = basicRoleReplacements[snippet1ReplaceFactRoleIter2];
											if (includedRoles.Contains(currentRole))
											{
												roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ImpersonalPronoun, isDeontic, isNegative), basicReplacement);
											}
											else
											{
												if (!(includedRoles.Contains(currentRole)))
												{
													roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.OneQuantifier, isDeontic, isNegative), basicReplacement);
												}
											}
											if ((roleReplacement == null))
											{
												roleReplacement = basicReplacement;
											}
											roleReplacements[snippet1ReplaceFactRoleIter2] = roleReplacement;
										}
										snippet1Replace2 = FactType.PopulatePredicateText(readingOrder, factRoles, roleReplacements);
										FactType.WriteVerbalizerSentence(writer, string.Format(writer.FormatProvider, snippetFormat1, snippet1Replace1, snippet1Replace2), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
									}
								}
							}
						}
					}
				}
			}
			return true;
		}
		bool IVerbalize.GetVerbalization(TextWriter writer, NotifyBeginVerbalization beginVerbalization, bool isNegative)
		{
			return this.GetVerbalization(writer, beginVerbalization, isNegative);
		}
	}
	/// <summary>
	///</summary>
	public partial class SimpleMandatoryConstraint : IVerbalize
	{
		/// <summary>
		///</summary>
		protected bool GetVerbalization(TextWriter writer, NotifyBeginVerbalization beginVerbalization, bool isNegative)
		{
			IModelErrorOwner errorOwner = (this) as IModelErrorOwner;
			if ((errorOwner != null))
			{
				bool firstElement = true;
				foreach (ModelError error in errorOwner.ErrorCollection)
				{
					if (firstElement)
					{
						firstElement = false;
						beginVerbalization(VerbalizationContent.ErrorReport);
					}
					else
					{
						writer.WriteLine();
					}
					writer.Write(error.Name);
				}
				if (!(firstElement))
				{
					return false;
				}
			}
			VerbalizationSets snippets = VerbalizationSets.Default;
			bool isDeontic = false;
			StringBuilder sbTemp = null;
			FactType parentFact = this.FactType;
			RoleMoveableCollection includedRoles = this.RoleCollection;
			RoleMoveableCollection factRoles = parentFact.RoleCollection;
			int factArity = factRoles.Count;
			ReadingOrderMoveableCollection allReadingOrders = parentFact.ReadingOrderCollection;
			int includedArity = includedRoles.Count;
			if (((allReadingOrders.Count == 0) 
						|| (includedArity == 0)))
			{
				return false;
			}
			string[] basicRoleReplacements = new string[factArity];
			int i = 0;
			for (; (i < factArity); i = (i + 1))
			{
				ObjectType rolePlayer = factRoles[i].RolePlayer;
				string basicReplacement;
				if ((rolePlayer != null))
				{
					int subscript = 0;
					bool useSubscript = false;
					int j = 0;
					for (; (j < i); j = (j + 1))
					{
						if (object.ReferenceEquals(rolePlayer, factRoles[j].RolePlayer))
						{
							useSubscript = true;
							subscript = (subscript + 1);
						}
					}
					for (j = (i + 1); (!(useSubscript) 
								&& (j < factArity)); j = (j + 1))
					{
						if (object.ReferenceEquals(rolePlayer, factRoles[j].RolePlayer))
						{
							useSubscript = true;
						}
					}
					if (useSubscript)
					{
						basicReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ObjectTypeWithSubscript, isDeontic, isNegative), rolePlayer.Name, (subscript + 1));
					}
					else
					{
						basicReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ObjectType, isDeontic, isNegative), rolePlayer.Name);
					}
				}
				else
				{
					basicReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ObjectTypeMissing, isDeontic, isNegative), (i + 1));
				}
				basicRoleReplacements[i] = basicReplacement;
			}
			string[] roleReplacements = new string[factArity];
			ReadingOrder readingOrder;
			if ((factArity == 1))
			{
				beginVerbalization(VerbalizationContent.Normal);
				string snippetFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.UniversalQuantifier, isDeontic, isNegative);
				string snippet1Replace1 = null;
				readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
				snippet1Replace1 = FactType.PopulatePredicateText(readingOrder, factRoles, basicRoleReplacements);
				FactType.WriteVerbalizerSentence(writer, string.Format(writer.FormatProvider, snippetFormat1, snippet1Replace1), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
			}
			else
			{
				if ((factArity == 2))
				{
					readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, null, includedRoles, false, false, factRoles, false);
					if ((readingOrder != null))
					{
						beginVerbalization(VerbalizationContent.Normal);
						int factTextFactRoleIter1 = 0;
						for (; (factTextFactRoleIter1 < factArity); factTextFactRoleIter1 = (factTextFactRoleIter1 + 1))
						{
							Role currentRole = factRoles[factTextFactRoleIter1];
							string roleReplacement = null;
							string basicReplacement = basicRoleReplacements[factTextFactRoleIter1];
							if (includedRoles.Contains(currentRole))
							{
								roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.UniversalQuantifier, isDeontic, isNegative), basicReplacement);
							}
							else
							{
								roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ExistentialQuantifier, isDeontic, isNegative), basicReplacement);
							}
							if ((roleReplacement == null))
							{
								roleReplacement = basicReplacement;
							}
							roleReplacements[factTextFactRoleIter1] = roleReplacement;
						}
						FactType.WriteVerbalizerSentence(writer, FactType.PopulatePredicateText(readingOrder, factRoles, roleReplacements), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
					}
					else
					{
						readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
						if ((readingOrder != null))
						{
							beginVerbalization(VerbalizationContent.Normal);
							string snippetFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.ForEachCompactQuantifier, isDeontic, isNegative);
							string snippet1Replace1 = null;
							if ((sbTemp == null))
							{
								sbTemp = new StringBuilder();
							}
							else
							{
								sbTemp.Length = 0;
							}
							int snippet1ReplaceRoleIter1 = 0;
							for (; (snippet1ReplaceRoleIter1 < includedArity); snippet1ReplaceRoleIter1 = (snippet1ReplaceRoleIter1 + 1))
							{
								Role primaryRole = includedRoles[snippet1ReplaceRoleIter1];
								VerbalizationTextSnippetType listSnippet;
								if ((snippet1ReplaceRoleIter1 == 0))
								{
									listSnippet = VerbalizationTextSnippetType.SimpleListOpen;
								}
								else
								{
									if ((snippet1ReplaceRoleIter1 
												== (includedArity - 1)))
									{
										if ((snippet1ReplaceRoleIter1 == 1))
										{
											listSnippet = VerbalizationTextSnippetType.SimpleListPairSeparator;
										}
										else
										{
											listSnippet = VerbalizationTextSnippetType.SimpleListFinalSeparator;
										}
									}
									else
									{
										listSnippet = VerbalizationTextSnippetType.SimpleListSeparator;
									}
								}
								sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
								sbTemp.Append(basicRoleReplacements[factRoles.IndexOf(includedRoles[snippet1ReplaceRoleIter1])]);
								if ((snippet1ReplaceRoleIter1 
											== (includedArity - 1)))
								{
									sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.SimpleListClose, isDeontic, isNegative));
								}
							}
							snippet1Replace1 = sbTemp.ToString();
							string snippet1Replace2 = null;
							readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
							int snippet1ReplaceFactRoleIter2 = 0;
							for (; (snippet1ReplaceFactRoleIter2 < factArity); snippet1ReplaceFactRoleIter2 = (snippet1ReplaceFactRoleIter2 + 1))
							{
								Role currentRole = factRoles[snippet1ReplaceFactRoleIter2];
								string roleReplacement = null;
								string basicReplacement = basicRoleReplacements[snippet1ReplaceFactRoleIter2];
								if (includedRoles.Contains(currentRole))
								{
									roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ImpersonalPronoun, isDeontic, isNegative), basicReplacement);
								}
								else
								{
									roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ExistentialQuantifier, isDeontic, isNegative), basicReplacement);
								}
								if ((roleReplacement == null))
								{
									roleReplacement = basicReplacement;
								}
								roleReplacements[snippet1ReplaceFactRoleIter2] = roleReplacement;
							}
							snippet1Replace2 = FactType.PopulatePredicateText(readingOrder, factRoles, roleReplacements);
							FactType.WriteVerbalizerSentence(writer, string.Format(writer.FormatProvider, snippetFormat1, snippet1Replace1, snippet1Replace2), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
						}
					}
				}
				else
				{
					readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, null, includedRoles, false, false, factRoles, false);
					if ((readingOrder != null))
					{
						beginVerbalization(VerbalizationContent.Normal);
						int factTextFactRoleIter1 = 0;
						for (; (factTextFactRoleIter1 < factArity); factTextFactRoleIter1 = (factTextFactRoleIter1 + 1))
						{
							Role currentRole = factRoles[factTextFactRoleIter1];
							string roleReplacement = null;
							string basicReplacement = basicRoleReplacements[factTextFactRoleIter1];
							if (includedRoles.Contains(currentRole))
							{
								roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.UniversalQuantifier, isDeontic, isNegative), basicReplacement);
							}
							else
							{
								roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ExistentialQuantifier, isDeontic, isNegative), basicReplacement);
							}
							if ((roleReplacement == null))
							{
								roleReplacement = basicReplacement;
							}
							roleReplacements[factTextFactRoleIter1] = roleReplacement;
						}
						FactType.WriteVerbalizerSentence(writer, FactType.PopulatePredicateText(readingOrder, factRoles, roleReplacements), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
					}
					else
					{
						readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
						if ((readingOrder != null))
						{
							beginVerbalization(VerbalizationContent.Normal);
							string snippetFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.ForEachQuantifier, isDeontic, isNegative);
							string snippet1Replace1 = null;
							if ((sbTemp == null))
							{
								sbTemp = new StringBuilder();
							}
							else
							{
								sbTemp.Length = 0;
							}
							int snippet1ReplaceRoleIter1 = 0;
							for (; (snippet1ReplaceRoleIter1 < includedArity); snippet1ReplaceRoleIter1 = (snippet1ReplaceRoleIter1 + 1))
							{
								Role primaryRole = includedRoles[snippet1ReplaceRoleIter1];
								VerbalizationTextSnippetType listSnippet;
								if ((snippet1ReplaceRoleIter1 == 0))
								{
									listSnippet = VerbalizationTextSnippetType.SimpleListOpen;
								}
								else
								{
									if ((snippet1ReplaceRoleIter1 
												== (includedArity - 1)))
									{
										if ((snippet1ReplaceRoleIter1 == 1))
										{
											listSnippet = VerbalizationTextSnippetType.SimpleListPairSeparator;
										}
										else
										{
											listSnippet = VerbalizationTextSnippetType.SimpleListFinalSeparator;
										}
									}
									else
									{
										listSnippet = VerbalizationTextSnippetType.SimpleListSeparator;
									}
								}
								sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
								sbTemp.Append(basicRoleReplacements[factRoles.IndexOf(includedRoles[snippet1ReplaceRoleIter1])]);
								if ((snippet1ReplaceRoleIter1 
											== (includedArity - 1)))
								{
									sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.SimpleListClose, isDeontic, isNegative));
								}
							}
							snippet1Replace1 = sbTemp.ToString();
							string snippet1Replace2 = null;
							readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
							int snippet1ReplaceFactRoleIter2 = 0;
							for (; (snippet1ReplaceFactRoleIter2 < factArity); snippet1ReplaceFactRoleIter2 = (snippet1ReplaceFactRoleIter2 + 1))
							{
								Role currentRole = factRoles[snippet1ReplaceFactRoleIter2];
								string roleReplacement = null;
								string basicReplacement = basicRoleReplacements[snippet1ReplaceFactRoleIter2];
								if (includedRoles.Contains(currentRole))
								{
									roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ImpersonalPronoun, isDeontic, isNegative), basicReplacement);
								}
								else
								{
									roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ExistentialQuantifier, isDeontic, isNegative), basicReplacement);
								}
								if ((roleReplacement == null))
								{
									roleReplacement = basicReplacement;
								}
								roleReplacements[snippet1ReplaceFactRoleIter2] = roleReplacement;
							}
							snippet1Replace2 = FactType.PopulatePredicateText(readingOrder, factRoles, roleReplacements);
							FactType.WriteVerbalizerSentence(writer, string.Format(writer.FormatProvider, snippetFormat1, snippet1Replace1, snippet1Replace2), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
						}
					}
				}
			}
			return true;
		}
		bool IVerbalize.GetVerbalization(TextWriter writer, NotifyBeginVerbalization beginVerbalization, bool isNegative)
		{
			return this.GetVerbalization(writer, beginVerbalization, isNegative);
		}
	}
	/// <summary>
	///</summary>
	public partial class DisjunctiveMandatoryConstraint : IVerbalize
	{
		/// <summary>
		///</summary>
		protected bool GetVerbalization(TextWriter writer, NotifyBeginVerbalization beginVerbalization, bool isNegative)
		{
			IModelErrorOwner errorOwner = (this) as IModelErrorOwner;
			if ((errorOwner != null))
			{
				bool firstElement = true;
				foreach (ModelError error in errorOwner.ErrorCollection)
				{
					if (firstElement)
					{
						firstElement = false;
						beginVerbalization(VerbalizationContent.ErrorReport);
					}
					else
					{
						writer.WriteLine();
					}
					writer.Write(error.Name);
				}
				if (!(firstElement))
				{
					return false;
				}
			}
			VerbalizationSets snippets = VerbalizationSets.Default;
			bool isDeontic = false;
			StringBuilder sbTemp = null;
			FactType parentFact;
			RoleMoveableCollection factRoles;
			int factArity;
			ReadingOrderMoveableCollection allReadingOrders;
			RoleMoveableCollection allConstraintRoles = this.RoleCollection;
			FactTypeMoveableCollection allFacts = this.FactTypeCollection;
			int allFactsCount = allFacts.Count;
			if ((allFactsCount == 0))
			{
				return false;
			}
			string[][] allBasicRoleReplacements = new string[allFactsCount][];
			int minFactArity = int.MaxValue;
			int maxFactArity = int.MinValue;
			int iFact = 0;
			for (; (iFact < allFactsCount); iFact = (iFact + 1))
			{
				FactType currentFact = allFacts[iFact];
				if ((currentFact.ReadingOrderCollection.Count == 0))
				{
					return false;
				}
				factRoles = currentFact.RoleCollection;
				factArity = factRoles.Count;
				if ((factArity < minFactArity))
				{
					minFactArity = factArity;
				}
				if ((factArity > maxFactArity))
				{
					maxFactArity = factArity;
				}
				string[] basicRoleReplacements = new string[factArity];
				int i = 0;
				for (; (i < factArity); i = (i + 1))
				{
					ObjectType rolePlayer = factRoles[i].RolePlayer;
					string basicReplacement;
					if ((rolePlayer != null))
					{
						int subscript = 0;
						bool useSubscript = false;
						int j = 0;
						for (; (j < i); j = (j + 1))
						{
							if (object.ReferenceEquals(rolePlayer, factRoles[j].RolePlayer))
							{
								useSubscript = true;
								subscript = (subscript + 1);
							}
						}
						for (j = (i + 1); (!(useSubscript) 
									&& (j < factArity)); j = (j + 1))
						{
							if (object.ReferenceEquals(rolePlayer, factRoles[j].RolePlayer))
							{
								useSubscript = true;
							}
						}
						if (useSubscript)
						{
							basicReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ObjectTypeWithSubscript, isDeontic, isNegative), rolePlayer.Name, (subscript + 1));
						}
						else
						{
							basicReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ObjectType, isDeontic, isNegative), rolePlayer.Name);
						}
					}
					else
					{
						basicReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ObjectTypeMissing, isDeontic, isNegative), (i + 1));
					}
					basicRoleReplacements[i] = basicReplacement;
				}
				allBasicRoleReplacements[iFact] = basicRoleReplacements;
			}
			int constraintRoleArity = allConstraintRoles.Count;
			ReadingOrder[] allConstraintRoleReadingOrders = new ReadingOrder[constraintRoleArity];
			string[] roleReplacements = new string[maxFactArity];
			ReadingOrder readingOrder;
			if ((isNegative 
						&& (maxFactArity <= 1)))
			{
				beginVerbalization(VerbalizationContent.Normal);
				string snippetFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.ModalPossibilityOperator, isDeontic, isNegative);
				string snippet1Replace1 = null;
				string snippet1ReplaceFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.NegativeReadingForUnaryOnlyDisjunctiveMandatory, isDeontic, isNegative);
				string snippet1Replace1Replace1 = null;
				if ((sbTemp == null))
				{
					sbTemp = new StringBuilder();
				}
				else
				{
					sbTemp.Length = 0;
				}
				int snippet1Replace1ReplaceRoleIter1 = 0;
				for (; (snippet1Replace1ReplaceRoleIter1 < 1); snippet1Replace1ReplaceRoleIter1 = (snippet1Replace1ReplaceRoleIter1 + 1))
				{
					Role primaryRole = allConstraintRoles[snippet1Replace1ReplaceRoleIter1];
					parentFact = primaryRole.FactType;
					factRoles = parentFact.RoleCollection;
					factArity = factRoles.Count;
					allReadingOrders = parentFact.ReadingOrderCollection;
					int currentFactIndex = allFacts.IndexOf(parentFact);
					string[] basicRoleReplacements = allBasicRoleReplacements[currentFactIndex];
					VerbalizationTextSnippetType listSnippet;
					listSnippet = VerbalizationTextSnippetType.SimpleListOpen;
					sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
					sbTemp.Append(basicRoleReplacements[factRoles.IndexOf(allConstraintRoles[snippet1Replace1ReplaceRoleIter1])]);
					sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.SimpleListClose, isDeontic, isNegative));
				}
				snippet1Replace1Replace1 = sbTemp.ToString();
				string snippet1Replace1Replace2 = null;
				if ((sbTemp == null))
				{
					sbTemp = new StringBuilder();
				}
				else
				{
					sbTemp.Length = 0;
				}
				int snippet1Replace1ReplaceRoleIter2 = 0;
				for (; (snippet1Replace1ReplaceRoleIter2 < constraintRoleArity); snippet1Replace1ReplaceRoleIter2 = (snippet1Replace1ReplaceRoleIter2 + 1))
				{
					Role primaryRole = allConstraintRoles[snippet1Replace1ReplaceRoleIter2];
					parentFact = primaryRole.FactType;
					factRoles = parentFact.RoleCollection;
					factArity = factRoles.Count;
					allReadingOrders = parentFact.ReadingOrderCollection;
					int currentFactIndex = allFacts.IndexOf(parentFact);
					string[] basicRoleReplacements = allBasicRoleReplacements[currentFactIndex];
					VerbalizationTextSnippetType listSnippet;
					if ((snippet1Replace1ReplaceRoleIter2 == 0))
					{
						listSnippet = VerbalizationTextSnippetType.CompoundListOpen;
					}
					else
					{
						if ((snippet1Replace1ReplaceRoleIter2 
									== (constraintRoleArity - 1)))
						{
							if ((snippet1Replace1ReplaceRoleIter2 == 1))
							{
								listSnippet = VerbalizationTextSnippetType.CompoundListPairSeparator;
							}
							else
							{
								listSnippet = VerbalizationTextSnippetType.CompoundListFinalSeparator;
							}
						}
						else
						{
							listSnippet = VerbalizationTextSnippetType.CompoundListSeparator;
						}
					}
					sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
					snippet1Replace1Replace2 = null;
					readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
					snippet1Replace1Replace2 = FactType.PopulatePredicateText(readingOrder, factRoles, basicRoleReplacements);
					sbTemp.Append(snippet1Replace1Replace2);
					if ((snippet1Replace1ReplaceRoleIter2 
								== (constraintRoleArity - 1)))
					{
						sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.CompoundListClose, isDeontic, isNegative));
					}
				}
				snippet1Replace1Replace2 = sbTemp.ToString();
				snippet1Replace1 = string.Format(writer.FormatProvider, snippet1ReplaceFormat1, snippet1Replace1Replace1, snippet1Replace1Replace2);
				FactType.WriteVerbalizerSentence(writer, string.Format(writer.FormatProvider, snippetFormat1, snippet1Replace1), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
			}
			else
			{
				if ((!(isNegative) 
							&& (maxFactArity <= 1)))
				{
					beginVerbalization(VerbalizationContent.Normal);
					if ((sbTemp == null))
					{
						sbTemp = new StringBuilder();
					}
					else
					{
						sbTemp.Length = 0;
					}
					int factTextRoleIter1 = 0;
					bool factTextIsFirstPass1 = true;
					for (; (factTextRoleIter1 < constraintRoleArity); factTextRoleIter1 = (factTextRoleIter1 + 1))
					{
						Role primaryRole = allConstraintRoles[factTextRoleIter1];
						parentFact = primaryRole.FactType;
						factRoles = parentFact.RoleCollection;
						factArity = factRoles.Count;
						allReadingOrders = parentFact.ReadingOrderCollection;
						int currentFactIndex = allFacts.IndexOf(parentFact);
						string[] basicRoleReplacements = allBasicRoleReplacements[currentFactIndex];
						VerbalizationTextSnippetType listSnippet;
						if ((factTextRoleIter1 == 0))
						{
							listSnippet = VerbalizationTextSnippetType.TopLevelIndentedOrListOpen;
						}
						else
						{
							if ((factTextRoleIter1 
										== (constraintRoleArity - 1)))
							{
								if ((factTextRoleIter1 == 1))
								{
									listSnippet = VerbalizationTextSnippetType.TopLevelIndentedOrListPairSeparator;
								}
								else
								{
									listSnippet = VerbalizationTextSnippetType.TopLevelIndentedOrListFinalSeparator;
								}
							}
							else
							{
								listSnippet = VerbalizationTextSnippetType.TopLevelIndentedOrListSeparator;
							}
						}
						sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
						string factText1 = null;
						readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
						int factTextFactRoleIter1 = 0;
						for (; (factTextFactRoleIter1 < factArity); factTextFactRoleIter1 = (factTextFactRoleIter1 + 1))
						{
							Role currentRole = factRoles[factTextFactRoleIter1];
							string roleReplacement = null;
							string basicReplacement = basicRoleReplacements[factTextFactRoleIter1];
							if (((primaryRole == currentRole) 
										&& factTextIsFirstPass1))
							{
								roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.UniversalQuantifier, isDeontic, isNegative), basicReplacement);
							}
							else
							{
								if ((primaryRole == currentRole))
								{
									roleReplacement = "";
								}
							}
							if ((roleReplacement == null))
							{
								roleReplacement = basicReplacement;
							}
							roleReplacements[factTextFactRoleIter1] = roleReplacement;
						}
						factText1 = FactType.PopulatePredicateText(readingOrder, factRoles, roleReplacements);
						sbTemp.Append(factText1);
						if ((factTextRoleIter1 
									== (constraintRoleArity - 1)))
						{
							sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.TopLevelIndentedOrListClose, isDeontic, isNegative));
						}
						factTextIsFirstPass1 = false;
					}
					FactType.WriteVerbalizerSentence(writer, sbTemp.ToString(), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
				}
				else
				{
					if (!(isNegative))
					{
						bool missingReading1 = false;
						int readingMatchIndex1 = 0;
						for (; (!(missingReading1) 
									&& (readingMatchIndex1 < constraintRoleArity)); readingMatchIndex1 = (readingMatchIndex1 + 1))
						{
							Role primaryRole = allConstraintRoles[readingMatchIndex1];
							parentFact = primaryRole.FactType;
							factRoles = parentFact.RoleCollection;
							allReadingOrders = parentFact.ReadingOrderCollection;
							readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, primaryRole, null, false, false, factRoles, false);
							if ((readingOrder == null))
							{
								missingReading1 = true;
							}
							else
							{
								allConstraintRoleReadingOrders[readingMatchIndex1] = readingOrder;
							}
						}
						if (!(missingReading1))
						{
							beginVerbalization(VerbalizationContent.Normal);
							int listCompositeCount1 = 0;
							int listCompositeIterator1;
							for (listCompositeIterator1 = 0; (listCompositeIterator1 < constraintRoleArity); listCompositeIterator1 = (listCompositeIterator1 + 1))
							{
								Role primaryRole = allConstraintRoles[listCompositeIterator1];
								parentFact = primaryRole.FactType;
								factRoles = parentFact.RoleCollection;
								factArity = factRoles.Count;
								allReadingOrders = parentFact.ReadingOrderCollection;
								if ((factArity >= 2))
								{
									listCompositeCount1 = (listCompositeCount1 + 1);
								}
							}
							for (listCompositeIterator1 = 0; (listCompositeIterator1 < constraintRoleArity); listCompositeIterator1 = (listCompositeIterator1 + 1))
							{
								Role primaryRole = allConstraintRoles[listCompositeIterator1];
								parentFact = primaryRole.FactType;
								factRoles = parentFact.RoleCollection;
								factArity = factRoles.Count;
								allReadingOrders = parentFact.ReadingOrderCollection;
								if ((factArity == 1))
								{
									listCompositeCount1 = (listCompositeCount1 + 1);
								}
							}
							listCompositeIterator1 = 0;
							if ((sbTemp == null))
							{
								sbTemp = new StringBuilder();
							}
							else
							{
								sbTemp.Length = 0;
							}
							string list1Item1 = null;
							int list1ItemRoleIter1 = 0;
							bool list1ItemIsFirstPass1 = true;
							for (; (list1ItemRoleIter1 < constraintRoleArity); list1ItemRoleIter1 = (list1ItemRoleIter1 + 1))
							{
								Role primaryRole = allConstraintRoles[list1ItemRoleIter1];
								parentFact = primaryRole.FactType;
								factRoles = parentFact.RoleCollection;
								factArity = factRoles.Count;
								allReadingOrders = parentFact.ReadingOrderCollection;
								int currentFactIndex = allFacts.IndexOf(parentFact);
								string[] basicRoleReplacements = allBasicRoleReplacements[currentFactIndex];
								if ((factArity >= 2))
								{
									VerbalizationTextSnippetType listSnippet;
									if ((listCompositeIterator1 == 0))
									{
										listSnippet = VerbalizationTextSnippetType.TopLevelIndentedOrListOpen;
									}
									else
									{
										if ((listCompositeIterator1 
													== (listCompositeCount1 - 1)))
										{
											if ((listCompositeIterator1 == 1))
											{
												listSnippet = VerbalizationTextSnippetType.TopLevelIndentedOrListPairSeparator;
											}
											else
											{
												listSnippet = VerbalizationTextSnippetType.TopLevelIndentedOrListFinalSeparator;
											}
										}
										else
										{
											listSnippet = VerbalizationTextSnippetType.TopLevelIndentedOrListSeparator;
										}
									}
									sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
									list1Item1 = null;
									readingOrder = allConstraintRoleReadingOrders[list1ItemRoleIter1];
									int list1ItemFactRoleIter1 = 0;
									for (; (list1ItemFactRoleIter1 < factArity); list1ItemFactRoleIter1 = (list1ItemFactRoleIter1 + 1))
									{
										Role currentRole = factRoles[list1ItemFactRoleIter1];
										string roleReplacement = null;
										string basicReplacement = basicRoleReplacements[list1ItemFactRoleIter1];
										if (((primaryRole == currentRole) 
													&& list1ItemIsFirstPass1))
										{
											roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.UniversalQuantifier, isDeontic, isNegative), basicReplacement);
										}
										else
										{
											if ((primaryRole == currentRole))
											{
												roleReplacement = "";
											}
											else
											{
												roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ExistentialQuantifier, isDeontic, isNegative), basicReplacement);
											}
										}
										if ((roleReplacement == null))
										{
											roleReplacement = basicReplacement;
										}
										roleReplacements[list1ItemFactRoleIter1] = roleReplacement;
									}
									list1Item1 = FactType.PopulatePredicateText(readingOrder, factRoles, roleReplacements);
									sbTemp.Append(list1Item1);
									if ((list1ItemRoleIter1 
												== (listCompositeCount1 - 1)))
									{
										sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.TopLevelIndentedOrListClose, isDeontic, isNegative));
									}
									listCompositeIterator1 = (listCompositeIterator1 + 1);
									list1ItemIsFirstPass1 = false;
								}
							}
							string list1Item2 = null;
							int list1ItemRoleIter2 = 0;
							for (; (list1ItemRoleIter2 < constraintRoleArity); list1ItemRoleIter2 = (list1ItemRoleIter2 + 1))
							{
								Role primaryRole = allConstraintRoles[list1ItemRoleIter2];
								parentFact = primaryRole.FactType;
								factRoles = parentFact.RoleCollection;
								factArity = factRoles.Count;
								allReadingOrders = parentFact.ReadingOrderCollection;
								int currentFactIndex = allFacts.IndexOf(parentFact);
								string[] basicRoleReplacements = allBasicRoleReplacements[currentFactIndex];
								if ((factArity == 1))
								{
									VerbalizationTextSnippetType listSnippet;
									if ((listCompositeIterator1 == 0))
									{
										listSnippet = VerbalizationTextSnippetType.TopLevelIndentedOrListOpen;
									}
									else
									{
										if ((listCompositeIterator1 
													== (listCompositeCount1 - 1)))
										{
											if ((listCompositeIterator1 == 1))
											{
												listSnippet = VerbalizationTextSnippetType.TopLevelIndentedOrListPairSeparator;
											}
											else
											{
												listSnippet = VerbalizationTextSnippetType.TopLevelIndentedOrListFinalSeparator;
											}
										}
										else
										{
											listSnippet = VerbalizationTextSnippetType.TopLevelIndentedOrListSeparator;
										}
									}
									sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
									list1Item2 = null;
									readingOrder = allConstraintRoleReadingOrders[list1ItemRoleIter2];
									int list1ItemFactRoleIter2 = 0;
									for (; (list1ItemFactRoleIter2 < factArity); list1ItemFactRoleIter2 = (list1ItemFactRoleIter2 + 1))
									{
										Role currentRole = factRoles[list1ItemFactRoleIter2];
										string roleReplacement = null;
										string basicReplacement = basicRoleReplacements[list1ItemFactRoleIter2];
										roleReplacement = "";
										if ((roleReplacement == null))
										{
											roleReplacement = basicReplacement;
										}
										roleReplacements[list1ItemFactRoleIter2] = roleReplacement;
									}
									list1Item2 = FactType.PopulatePredicateText(readingOrder, factRoles, roleReplacements);
									sbTemp.Append(list1Item2);
									if ((list1ItemRoleIter2 
												== (listCompositeCount1 - 1)))
									{
										sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.TopLevelIndentedOrListClose, isDeontic, isNegative));
									}
									listCompositeIterator1 = (listCompositeIterator1 + 1);
								}
							}
							FactType.WriteVerbalizerSentence(writer, sbTemp.ToString(), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
						}
						else
						{
							beginVerbalization(VerbalizationContent.Normal);
							string snippetFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.ForEachQuantifier, isDeontic, isNegative);
							string snippet1Replace1 = null;
							if ((sbTemp == null))
							{
								sbTemp = new StringBuilder();
							}
							else
							{
								sbTemp.Length = 0;
							}
							int snippet1ReplaceRoleIter1 = 0;
							for (; (snippet1ReplaceRoleIter1 < 1); snippet1ReplaceRoleIter1 = (snippet1ReplaceRoleIter1 + 1))
							{
								Role primaryRole = allConstraintRoles[snippet1ReplaceRoleIter1];
								parentFact = primaryRole.FactType;
								factRoles = parentFact.RoleCollection;
								factArity = factRoles.Count;
								allReadingOrders = parentFact.ReadingOrderCollection;
								int currentFactIndex = allFacts.IndexOf(parentFact);
								string[] basicRoleReplacements = allBasicRoleReplacements[currentFactIndex];
								VerbalizationTextSnippetType listSnippet;
								listSnippet = VerbalizationTextSnippetType.SimpleListOpen;
								sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
								sbTemp.Append(basicRoleReplacements[factRoles.IndexOf(allConstraintRoles[snippet1ReplaceRoleIter1])]);
								sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.SimpleListClose, isDeontic, isNegative));
							}
							snippet1Replace1 = sbTemp.ToString();
							string snippet1Replace2 = null;
							int snippet1ReplaceCompositeCount2 = 0;
							int snippet1ReplaceCompositeIterator2;
							for (snippet1ReplaceCompositeIterator2 = 0; (snippet1ReplaceCompositeIterator2 < constraintRoleArity); snippet1ReplaceCompositeIterator2 = (snippet1ReplaceCompositeIterator2 + 1))
							{
								Role primaryRole = allConstraintRoles[snippet1ReplaceCompositeIterator2];
								parentFact = primaryRole.FactType;
								factRoles = parentFact.RoleCollection;
								factArity = factRoles.Count;
								allReadingOrders = parentFact.ReadingOrderCollection;
								if ((factArity >= 2))
								{
									snippet1ReplaceCompositeCount2 = (snippet1ReplaceCompositeCount2 + 1);
								}
							}
							for (snippet1ReplaceCompositeIterator2 = 0; (snippet1ReplaceCompositeIterator2 < constraintRoleArity); snippet1ReplaceCompositeIterator2 = (snippet1ReplaceCompositeIterator2 + 1))
							{
								Role primaryRole = allConstraintRoles[snippet1ReplaceCompositeIterator2];
								parentFact = primaryRole.FactType;
								factRoles = parentFact.RoleCollection;
								factArity = factRoles.Count;
								allReadingOrders = parentFact.ReadingOrderCollection;
								if ((factArity == 1))
								{
									snippet1ReplaceCompositeCount2 = (snippet1ReplaceCompositeCount2 + 1);
								}
							}
							snippet1ReplaceCompositeIterator2 = 0;
							if ((sbTemp == null))
							{
								sbTemp = new StringBuilder();
							}
							else
							{
								sbTemp.Length = 0;
							}
							string snippet1Replace2Item1 = null;
							int snippet1Replace2ItemRoleIter1 = 0;
							for (; (snippet1Replace2ItemRoleIter1 < constraintRoleArity); snippet1Replace2ItemRoleIter1 = (snippet1Replace2ItemRoleIter1 + 1))
							{
								Role primaryRole = allConstraintRoles[snippet1Replace2ItemRoleIter1];
								parentFact = primaryRole.FactType;
								factRoles = parentFact.RoleCollection;
								factArity = factRoles.Count;
								allReadingOrders = parentFact.ReadingOrderCollection;
								int currentFactIndex = allFacts.IndexOf(parentFact);
								string[] basicRoleReplacements = allBasicRoleReplacements[currentFactIndex];
								if ((factArity >= 2))
								{
									VerbalizationTextSnippetType listSnippet;
									if ((snippet1ReplaceCompositeIterator2 == 0))
									{
										listSnippet = VerbalizationTextSnippetType.IndentedOrListOpen;
									}
									else
									{
										if ((snippet1ReplaceCompositeIterator2 
													== (snippet1ReplaceCompositeCount2 - 1)))
										{
											if ((snippet1ReplaceCompositeIterator2 == 1))
											{
												listSnippet = VerbalizationTextSnippetType.IndentedOrListPairSeparator;
											}
											else
											{
												listSnippet = VerbalizationTextSnippetType.IndentedOrListFinalSeparator;
											}
										}
										else
										{
											listSnippet = VerbalizationTextSnippetType.IndentedOrListSeparator;
										}
									}
									sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
									snippet1Replace2Item1 = null;
									readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, primaryRole, null, false, true, factRoles, true);
									int snippet1Replace2ItemFactRoleIter1 = 0;
									for (; (snippet1Replace2ItemFactRoleIter1 < factArity); snippet1Replace2ItemFactRoleIter1 = (snippet1Replace2ItemFactRoleIter1 + 1))
									{
										Role currentRole = factRoles[snippet1Replace2ItemFactRoleIter1];
										string roleReplacement = null;
										string basicReplacement = basicRoleReplacements[snippet1Replace2ItemFactRoleIter1];
										if ((currentRole == primaryRole))
										{
											roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ImpersonalPronoun, isDeontic, isNegative), basicReplacement);
										}
										else
										{
											if ((currentRole != primaryRole))
											{
												roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ExistentialQuantifier, isDeontic, isNegative), basicReplacement);
											}
										}
										if ((roleReplacement == null))
										{
											roleReplacement = basicReplacement;
										}
										roleReplacements[snippet1Replace2ItemFactRoleIter1] = roleReplacement;
									}
									snippet1Replace2Item1 = FactType.PopulatePredicateText(readingOrder, factRoles, roleReplacements);
									sbTemp.Append(snippet1Replace2Item1);
									if ((snippet1Replace2ItemRoleIter1 
												== (snippet1ReplaceCompositeCount2 - 1)))
									{
										sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.IndentedOrListClose, isDeontic, isNegative));
									}
									snippet1ReplaceCompositeIterator2 = (snippet1ReplaceCompositeIterator2 + 1);
								}
							}
							string snippet1Replace2Item2 = null;
							int snippet1Replace2ItemRoleIter2 = 0;
							for (; (snippet1Replace2ItemRoleIter2 < constraintRoleArity); snippet1Replace2ItemRoleIter2 = (snippet1Replace2ItemRoleIter2 + 1))
							{
								Role primaryRole = allConstraintRoles[snippet1Replace2ItemRoleIter2];
								parentFact = primaryRole.FactType;
								factRoles = parentFact.RoleCollection;
								factArity = factRoles.Count;
								allReadingOrders = parentFact.ReadingOrderCollection;
								int currentFactIndex = allFacts.IndexOf(parentFact);
								string[] basicRoleReplacements = allBasicRoleReplacements[currentFactIndex];
								if ((factArity == 1))
								{
									VerbalizationTextSnippetType listSnippet;
									if ((snippet1ReplaceCompositeIterator2 == 0))
									{
										listSnippet = VerbalizationTextSnippetType.IndentedOrListOpen;
									}
									else
									{
										if ((snippet1ReplaceCompositeIterator2 
													== (snippet1ReplaceCompositeCount2 - 1)))
										{
											if ((snippet1ReplaceCompositeIterator2 == 1))
											{
												listSnippet = VerbalizationTextSnippetType.IndentedOrListPairSeparator;
											}
											else
											{
												listSnippet = VerbalizationTextSnippetType.IndentedOrListFinalSeparator;
											}
										}
										else
										{
											listSnippet = VerbalizationTextSnippetType.IndentedOrListSeparator;
										}
									}
									sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
									snippet1Replace2Item2 = null;
									readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, factRoles[0], null, false, false, factRoles, true);
									int snippet1Replace2ItemFactRoleIter2 = 0;
									for (; (snippet1Replace2ItemFactRoleIter2 < factArity); snippet1Replace2ItemFactRoleIter2 = (snippet1Replace2ItemFactRoleIter2 + 1))
									{
										Role currentRole = factRoles[snippet1Replace2ItemFactRoleIter2];
										string roleReplacement = null;
										string basicReplacement = basicRoleReplacements[snippet1Replace2ItemFactRoleIter2];
										roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ImpersonalPronoun, isDeontic, isNegative), basicReplacement);
										if ((roleReplacement == null))
										{
											roleReplacement = basicReplacement;
										}
										roleReplacements[snippet1Replace2ItemFactRoleIter2] = roleReplacement;
									}
									snippet1Replace2Item2 = FactType.PopulatePredicateText(readingOrder, factRoles, roleReplacements);
									sbTemp.Append(snippet1Replace2Item2);
									if ((snippet1Replace2ItemRoleIter2 
												== (snippet1ReplaceCompositeCount2 - 1)))
									{
										sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.IndentedOrListClose, isDeontic, isNegative));
									}
									snippet1ReplaceCompositeIterator2 = (snippet1ReplaceCompositeIterator2 + 1);
								}
							}
							snippet1Replace2 = sbTemp.ToString();
							FactType.WriteVerbalizerSentence(writer, string.Format(writer.FormatProvider, snippetFormat1, snippet1Replace1, snippet1Replace2), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
						}
					}
				}
			}
			return true;
		}
		bool IVerbalize.GetVerbalization(TextWriter writer, NotifyBeginVerbalization beginVerbalization, bool isNegative)
		{
			return this.GetVerbalization(writer, beginVerbalization, isNegative);
		}
	}
	/// <summary>
	///</summary>
	public partial class ExternalUniquenessConstraint : IVerbalize
	{
		/// <summary>
		///</summary>
		protected bool GetVerbalization(TextWriter writer, NotifyBeginVerbalization beginVerbalization, bool isNegative)
		{
			IModelErrorOwner errorOwner = (this) as IModelErrorOwner;
			if ((errorOwner != null))
			{
				bool firstElement = true;
				foreach (ModelError error in errorOwner.ErrorCollection)
				{
					if (firstElement)
					{
						firstElement = false;
						beginVerbalization(VerbalizationContent.ErrorReport);
					}
					else
					{
						writer.WriteLine();
					}
					writer.Write(error.Name);
				}
				if (!(firstElement))
				{
					return false;
				}
			}
			VerbalizationSets snippets = VerbalizationSets.Default;
			bool isDeontic = false;
			StringBuilder sbTemp = null;
			FactType parentFact;
			RoleMoveableCollection factRoles;
			int factArity;
			ReadingOrderMoveableCollection allReadingOrders;
			RoleMoveableCollection allConstraintRoles = this.RoleCollection;
			FactTypeMoveableCollection allFacts = this.FactTypeCollection;
			int allFactsCount = allFacts.Count;
			if ((allFactsCount == 0))
			{
				return false;
			}
			string[][] allBasicRoleReplacements = new string[allFactsCount][];
			int minFactArity = int.MaxValue;
			int maxFactArity = int.MinValue;
			int iFact = 0;
			for (; (iFact < allFactsCount); iFact = (iFact + 1))
			{
				FactType currentFact = allFacts[iFact];
				if ((currentFact.ReadingOrderCollection.Count == 0))
				{
					return false;
				}
				factRoles = currentFact.RoleCollection;
				factArity = factRoles.Count;
				if ((factArity < minFactArity))
				{
					minFactArity = factArity;
				}
				if ((factArity > maxFactArity))
				{
					maxFactArity = factArity;
				}
				string[] basicRoleReplacements = new string[factArity];
				int i = 0;
				for (; (i < factArity); i = (i + 1))
				{
					ObjectType rolePlayer = factRoles[i].RolePlayer;
					string basicReplacement;
					if ((rolePlayer != null))
					{
						int subscript = 0;
						bool useSubscript = false;
						int j = 0;
						for (; (j < i); j = (j + 1))
						{
							if (object.ReferenceEquals(rolePlayer, factRoles[j].RolePlayer))
							{
								useSubscript = true;
								subscript = (subscript + 1);
							}
						}
						for (j = (i + 1); (!(useSubscript) 
									&& (j < factArity)); j = (j + 1))
						{
							if (object.ReferenceEquals(rolePlayer, factRoles[j].RolePlayer))
							{
								useSubscript = true;
							}
						}
						if (useSubscript)
						{
							basicReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ObjectTypeWithSubscript, isDeontic, isNegative), rolePlayer.Name, (subscript + 1));
						}
						else
						{
							basicReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ObjectType, isDeontic, isNegative), rolePlayer.Name);
						}
					}
					else
					{
						basicReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ObjectTypeMissing, isDeontic, isNegative), (i + 1));
					}
					basicRoleReplacements[i] = basicReplacement;
				}
				allBasicRoleReplacements[iFact] = basicRoleReplacements;
			}
			int constraintRoleArity = allConstraintRoles.Count;
			ReadingOrder[] allConstraintRoleReadingOrders = new ReadingOrder[constraintRoleArity];
			string[] roleReplacements = new string[maxFactArity];
			ReadingOrder readingOrder;
			if ((!(isNegative) 
						&& ((minFactArity >= 2) 
						&& (maxFactArity <= 2))))
			{
				bool missingReading1 = false;
				int readingMatchIndex1 = 0;
				for (; (!(missingReading1) 
							&& (readingMatchIndex1 < constraintRoleArity)); readingMatchIndex1 = (readingMatchIndex1 + 1))
				{
					Role primaryRole = allConstraintRoles[readingMatchIndex1];
					parentFact = primaryRole.FactType;
					factRoles = parentFact.RoleCollection;
					allReadingOrders = parentFact.ReadingOrderCollection;
					readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, primaryRole, null, true, true, factRoles, false);
					if ((readingOrder == null))
					{
						missingReading1 = true;
					}
					else
					{
						allConstraintRoleReadingOrders[readingMatchIndex1] = readingOrder;
					}
				}
				if (!(missingReading1))
				{
					beginVerbalization(VerbalizationContent.Normal);
					string snippetFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.ForEachCompactQuantifier, isDeontic, isNegative);
					string snippet1Replace1 = null;
					if ((sbTemp == null))
					{
						sbTemp = new StringBuilder();
					}
					else
					{
						sbTemp.Length = 0;
					}
					int snippet1ReplaceRoleIter1 = 0;
					for (; (snippet1ReplaceRoleIter1 < constraintRoleArity); snippet1ReplaceRoleIter1 = (snippet1ReplaceRoleIter1 + 1))
					{
						Role primaryRole = allConstraintRoles[snippet1ReplaceRoleIter1];
						parentFact = primaryRole.FactType;
						factRoles = parentFact.RoleCollection;
						factArity = factRoles.Count;
						allReadingOrders = parentFact.ReadingOrderCollection;
						int currentFactIndex = allFacts.IndexOf(parentFact);
						string[] basicRoleReplacements = allBasicRoleReplacements[currentFactIndex];
						VerbalizationTextSnippetType listSnippet;
						if ((snippet1ReplaceRoleIter1 == 0))
						{
							listSnippet = VerbalizationTextSnippetType.SimpleListOpen;
						}
						else
						{
							if ((snippet1ReplaceRoleIter1 
										== (constraintRoleArity - 1)))
							{
								if ((snippet1ReplaceRoleIter1 == 1))
								{
									listSnippet = VerbalizationTextSnippetType.SimpleListPairSeparator;
								}
								else
								{
									listSnippet = VerbalizationTextSnippetType.SimpleListFinalSeparator;
								}
							}
							else
							{
								listSnippet = VerbalizationTextSnippetType.SimpleListSeparator;
							}
						}
						sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
						sbTemp.Append(basicRoleReplacements[factRoles.IndexOf(allConstraintRoles[snippet1ReplaceRoleIter1])]);
						if ((snippet1ReplaceRoleIter1 
									== (constraintRoleArity - 1)))
						{
							sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.SimpleListClose, isDeontic, isNegative));
						}
					}
					snippet1Replace1 = sbTemp.ToString();
					string snippet1Replace2 = null;
					if ((sbTemp == null))
					{
						sbTemp = new StringBuilder();
					}
					else
					{
						sbTemp.Length = 0;
					}
					int snippet1ReplaceRoleIter2 = 0;
					bool snippet1ReplaceIsFirstPass2 = true;
					for (; (snippet1ReplaceRoleIter2 < constraintRoleArity); snippet1ReplaceRoleIter2 = (snippet1ReplaceRoleIter2 + 1))
					{
						Role primaryRole = allConstraintRoles[snippet1ReplaceRoleIter2];
						parentFact = primaryRole.FactType;
						factRoles = parentFact.RoleCollection;
						factArity = factRoles.Count;
						allReadingOrders = parentFact.ReadingOrderCollection;
						int currentFactIndex = allFacts.IndexOf(parentFact);
						string[] basicRoleReplacements = allBasicRoleReplacements[currentFactIndex];
						VerbalizationTextSnippetType listSnippet;
						if ((snippet1ReplaceRoleIter2 == 0))
						{
							listSnippet = VerbalizationTextSnippetType.IndentedListOpen;
						}
						else
						{
							if ((snippet1ReplaceRoleIter2 
										== (constraintRoleArity - 1)))
							{
								if ((snippet1ReplaceRoleIter2 == 1))
								{
									listSnippet = VerbalizationTextSnippetType.IndentedListPairSeparator;
								}
								else
								{
									listSnippet = VerbalizationTextSnippetType.IndentedListFinalSeparator;
								}
							}
							else
							{
								listSnippet = VerbalizationTextSnippetType.IndentedListSeparator;
							}
						}
						sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
						snippet1Replace2 = null;
						readingOrder = allConstraintRoleReadingOrders[snippet1ReplaceRoleIter2];
						int snippet1ReplaceFactRoleIter2 = 0;
						for (; (snippet1ReplaceFactRoleIter2 < factArity); snippet1ReplaceFactRoleIter2 = (snippet1ReplaceFactRoleIter2 + 1))
						{
							Role currentRole = factRoles[snippet1ReplaceFactRoleIter2];
							string roleReplacement = null;
							string basicReplacement = basicRoleReplacements[snippet1ReplaceFactRoleIter2];
							if (((currentRole != primaryRole) 
										&& snippet1ReplaceIsFirstPass2))
							{
								roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.AtMostOneQuantifier, isDeontic, isNegative), basicReplacement);
							}
							else
							{
								if ((currentRole != primaryRole))
								{
									roleReplacement = "";
								}
								else
								{
									roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.ImpersonalPronoun, isDeontic, isNegative), basicReplacement);
								}
							}
							if ((roleReplacement == null))
							{
								roleReplacement = basicReplacement;
							}
							roleReplacements[snippet1ReplaceFactRoleIter2] = roleReplacement;
						}
						snippet1Replace2 = FactType.PopulatePredicateText(readingOrder, factRoles, roleReplacements);
						sbTemp.Append(snippet1Replace2);
						if ((snippet1ReplaceRoleIter2 
									== (constraintRoleArity - 1)))
						{
							sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.IndentedListClose, isDeontic, isNegative));
						}
						snippet1ReplaceIsFirstPass2 = false;
					}
					snippet1Replace2 = sbTemp.ToString();
					FactType.WriteVerbalizerSentence(writer, string.Format(writer.FormatProvider, snippetFormat1, snippet1Replace1, snippet1Replace2), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
				}
			}
			else
			{
				if ((isNegative 
							&& ((minFactArity >= 2) 
							&& (maxFactArity <= 2))))
				{
					bool missingReading1 = false;
					int readingMatchIndex1 = 0;
					for (; (!(missingReading1) 
								&& (readingMatchIndex1 < constraintRoleArity)); readingMatchIndex1 = (readingMatchIndex1 + 1))
					{
						Role primaryRole = allConstraintRoles[readingMatchIndex1];
						parentFact = primaryRole.FactType;
						factRoles = parentFact.RoleCollection;
						allReadingOrders = parentFact.ReadingOrderCollection;
						readingOrder = FactType.GetMatchingReadingOrder(allReadingOrders, primaryRole, null, true, true, factRoles, false);
						if ((readingOrder == null))
						{
							missingReading1 = true;
						}
						else
						{
							allConstraintRoleReadingOrders[readingMatchIndex1] = readingOrder;
						}
					}
					if (!(missingReading1))
					{
						beginVerbalization(VerbalizationContent.Normal);
						string snippetFormat1 = snippets.GetSnippet(VerbalizationTextSnippetType.ModalPossibilityOperator, isDeontic, isNegative);
						string snippet1Replace1 = null;
						if ((sbTemp == null))
						{
							sbTemp = new StringBuilder();
						}
						else
						{
							sbTemp.Length = 0;
						}
						int snippet1ReplaceRoleIter1 = 0;
						bool snippet1ReplaceIsFirstPass1 = true;
						for (; (snippet1ReplaceRoleIter1 < constraintRoleArity); snippet1ReplaceRoleIter1 = (snippet1ReplaceRoleIter1 + 1))
						{
							Role primaryRole = allConstraintRoles[snippet1ReplaceRoleIter1];
							parentFact = primaryRole.FactType;
							factRoles = parentFact.RoleCollection;
							factArity = factRoles.Count;
							allReadingOrders = parentFact.ReadingOrderCollection;
							int currentFactIndex = allFacts.IndexOf(parentFact);
							string[] basicRoleReplacements = allBasicRoleReplacements[currentFactIndex];
							VerbalizationTextSnippetType listSnippet;
							if ((snippet1ReplaceRoleIter1 == 0))
							{
								listSnippet = VerbalizationTextSnippetType.SimpleListOpen;
							}
							else
							{
								if ((snippet1ReplaceRoleIter1 
											== (constraintRoleArity - 1)))
								{
									if ((snippet1ReplaceRoleIter1 == 1))
									{
										listSnippet = VerbalizationTextSnippetType.SimpleListPairSeparator;
									}
									else
									{
										listSnippet = VerbalizationTextSnippetType.SimpleListFinalSeparator;
									}
								}
								else
								{
									listSnippet = VerbalizationTextSnippetType.SimpleListSeparator;
								}
							}
							sbTemp.Append(snippets.GetSnippet(listSnippet, isDeontic, isNegative));
							snippet1Replace1 = null;
							readingOrder = allConstraintRoleReadingOrders[snippet1ReplaceRoleIter1];
							int snippet1ReplaceFactRoleIter1 = 0;
							for (; (snippet1ReplaceFactRoleIter1 < factArity); snippet1ReplaceFactRoleIter1 = (snippet1ReplaceFactRoleIter1 + 1))
							{
								Role currentRole = factRoles[snippet1ReplaceFactRoleIter1];
								string roleReplacement = null;
								string basicReplacement = basicRoleReplacements[snippet1ReplaceFactRoleIter1];
								if (((currentRole != primaryRole) 
											&& snippet1ReplaceIsFirstPass1))
								{
									roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.MoreThanOneQuantifier, isDeontic, isNegative), basicReplacement);
								}
								else
								{
									if ((currentRole != primaryRole))
									{
										roleReplacement = "";
									}
									else
									{
										roleReplacement = string.Format(writer.FormatProvider, snippets.GetSnippet(VerbalizationTextSnippetType.IdentityReferenceQuantifier, isDeontic, isNegative), basicReplacement);
									}
								}
								if ((roleReplacement == null))
								{
									roleReplacement = basicReplacement;
								}
								roleReplacements[snippet1ReplaceFactRoleIter1] = roleReplacement;
							}
							snippet1Replace1 = FactType.PopulatePredicateText(readingOrder, factRoles, roleReplacements);
							sbTemp.Append(snippet1Replace1);
							if ((snippet1ReplaceRoleIter1 
										== (constraintRoleArity - 1)))
							{
								sbTemp.Append(snippets.GetSnippet(VerbalizationTextSnippetType.SimpleListClose, isDeontic, isNegative));
							}
							snippet1ReplaceIsFirstPass1 = false;
						}
						snippet1Replace1 = sbTemp.ToString();
						FactType.WriteVerbalizerSentence(writer, string.Format(writer.FormatProvider, snippetFormat1, snippet1Replace1), snippets.GetSnippet(VerbalizationTextSnippetType.CloseVerbalizationSentence, isDeontic, isNegative));
					}
				}
			}
			return true;
		}
		bool IVerbalize.GetVerbalization(TextWriter writer, NotifyBeginVerbalization beginVerbalization, bool isNegative)
		{
			return this.GetVerbalization(writer, beginVerbalization, isNegative);
		}
	}
}
