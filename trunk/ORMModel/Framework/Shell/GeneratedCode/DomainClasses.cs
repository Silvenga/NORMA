#region Common Public License Copyright Notice
/**************************************************************************\
* Natural Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © ORM Solutions, LLC. All rights reserved.                        *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ORMSolutions.ORMArchitect.Framework.Shell
{
	/// <summary>
	/// DomainClass DiagramDisplay
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Framework.Shell.DiagramDisplay.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Framework.Shell.DiagramDisplayDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.DiagramDisplayDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Framework.Shell.DiagramDisplay.Description", typeof(global::ORMSolutions.ORMArchitect.Framework.Shell.DiagramDisplayDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.DiagramDisplayDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("14a6b724-7849-4d7d-a5c2-29910ffbb516")]
	public sealed partial class DiagramDisplay : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DiagramDisplay domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x14a6b724, 0x7849, 0x4d7d, 0xa5, 0xc2, 0x29, 0x91, 0x0f, 0xfb, 0xb5, 0x16);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DiagramDisplay(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DiagramDisplay(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SaveDiagramPosition domain property code
		
		/// <summary>
		/// SaveDiagramPosition domain property Id.
		/// </summary>
		public static readonly global::System.Guid SaveDiagramPositionDomainPropertyId = new global::System.Guid(0x17aa2b64, 0x3328, 0x4420, 0x8c, 0x68, 0x34, 0x15, 0x7d, 0x10, 0xdb, 0x77);
		
		/// <summary>
		/// Storage for SaveDiagramPosition
		/// </summary>
		private global::System.Boolean saveDiagramPositionPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of SaveDiagramPosition domain property.
		/// Save the most recent position and zoom information for each diagram in addition
		/// to diagram order.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Framework.Shell.DiagramDisplay/SaveDiagramPosition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Framework.Shell.DiagramDisplayDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.DiagramDisplayDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Framework.Shell.DiagramDisplay/SaveDiagramPosition.Description", typeof(global::ORMSolutions.ORMArchitect.Framework.Shell.DiagramDisplayDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.DiagramDisplayDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("17aa2b64-3328-4420-8c68-34157d10db77")]
		public global::System.Boolean SaveDiagramPosition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return saveDiagramPositionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SaveDiagramPositionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DiagramDisplay.SaveDiagramPosition domain property.
		/// </summary>
		internal sealed partial class SaveDiagramPositionPropertyHandler : DslModeling::DomainPropertyValueHandler<DiagramDisplay, global::System.Boolean>
		{
			private SaveDiagramPositionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DiagramDisplay.SaveDiagramPosition domain property value handler.
			/// </summary>
			public static readonly SaveDiagramPositionPropertyHandler Instance = new SaveDiagramPositionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DiagramDisplay.SaveDiagramPosition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SaveDiagramPositionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(DiagramDisplay element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.saveDiagramPositionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DiagramDisplay element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.saveDiagramPositionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OrderedDiagramCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of OrderedDiagramCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Framework.Shell.DiagramDisplayHasDiagramOrder.DiagramDisplay
		/// </summary>
		public DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.Diagrams.Diagram> OrderedDiagramCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.Diagrams.Diagram>(this, global::ORMSolutions.ORMArchitect.Framework.Shell.DiagramDisplayHasDiagramOrder.DiagramDisplayDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Framework.Shell
{
	/// <summary>
	/// DomainClass DiagramPlaceHolder
	/// Diagram placeholder type used during deserialization to load forward references
	/// to diagrams without creating a diagram instance of a random type. Creating
	/// random types will cause the primary collection to be reordered, resulting in a
	/// significant file change for a diagram reorder.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Framework.Shell.DiagramPlaceHolder.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Framework.Shell.DiagramDisplayDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.DiagramDisplayDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Framework.Shell.DiagramPlaceHolder.Description", typeof(global::ORMSolutions.ORMArchitect.Framework.Shell.DiagramDisplayDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.DiagramDisplayDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8936a358-233b-4322-a20d-92f0d61f8378")]
	public sealed partial class DiagramPlaceHolder : global::Microsoft.VisualStudio.Modeling.Diagrams.Diagram
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DiagramPlaceHolder domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8936a358, 0x233b, 0x4322, 0xa2, 0x0d, 0x92, 0xf0, 0xd6, 0x1f, 0x83, 0x78);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DiagramPlaceHolder(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DiagramPlaceHolder(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
