<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><style type="text/css">
					body {font-family:verdana; font-size:smaller;}
					.targetNamespaceHeader {font-size:smaller; font-weight:400;}
					.mainHeader {font-size:large;text-align:center;}
					.tableSimpleType {border-collapse:collapse; width:94%; border-color:#000000;border-style:solid;border-width:1px;}
					.trSimpleType {font-weight:700; text-align:center; background-color:#000000; color:#FFFFFF;}
					.unit {border-style: solid; border-width: 1px; border-color: lightgrey;}
					.comment {font-family:courier new; color:#008000;}
				</style><title>Schema: http://schemas.neumont.edu/ORM/DesignerSettings</title></head><body><h3 class="mainHeader"> Schema<br /><span class="targetNamespaceHeader">http://schemas.neumont.edu/ORM/DesignerSettings</span></h3><h4 id="Elements_Header">Elements<span style="font-size:smaller">&nbsp;&nbsp;(<a href="#ComplexTypes_Header">Complex Types</a>,&nbsp;<a href="#SimpleTypes_Header">Simple Types</a>)</span></h4><ul><li><b><a id="settings">settings</a></b> (<a href="#DesignerSettingsType_Type">DesignerSettingsType</a>): Options for the ORM designer.</li><li><b><a id="xmlConverter">xmlConverter</a></b> (<a href="#xmlConverterType_Type">xmlConverterType</a>): Specify a transform to run to convert a document with a root element of the specified sourceElement type to a document with the specified targetElement type.</li><li><b><a id="xmlExtensionConverter">xmlExtensionConverter</a></b> (<a href="#xmlExtensionConverterType_Type">xmlExtensionConverterType</a>): Specify a transform to run to convert the extensions with a namespace of the specified sourceNamespace to the new namespace specified by targetNamespace.</li></ul><h4 id="ComplexTypes_Header">Complex Types<span style="font-size:smaller">&nbsp;&nbsp;(<a href="#Elements_Header">Elements</a>,&nbsp;<a href="#SimpleTypes_Header">Simple Types</a>)</span></h4><ul><li><b><a id="DesignerSettingsType_Type">DesignerSettingsType</a></b>: Options for the ORM designer.<ul><li><b>xmlConverters</b> (optional): Container for conversion transforms used during file import.<ul><li class="unit">Choose One (optional, repeat)<ul><li><b>xmlConverter</b> (<a href="#xmlConverterType_Type">xmlConverterType</a>): Specify a transform to run to convert a document with a root element of the specified sourceElement type to a document with the specified targetElement type.</li><li><b>xmlExtensionConverter</b> (<a href="#xmlExtensionConverterType_Type">xmlExtensionConverterType</a>): Specify a transform to run to convert the extensions with a namespace of the specified sourceNamespace to the new namespace specified by targetNamespace.</li></ul></li></ul></li></ul></li><li><b><a id="xmlConverterType_Type">xmlConverterType</a></b>: Specify a transform to run to convert a document with a root element of the specified sourceElement type to a document with the specified targetElement type.<ul><li><b>@description</b> (xs:token, required): A short description of the converter. Used for conflict resolution if	multiple converters are specified for the same element.</li><li><b>@transformFile</b> (xs:string, required): The transform file to load. Paths are relative to the XmlConverters directory.</li><li><b>@sourceElement</b> (<a href="#elementName_Type">elementName</a>, required): The type of document to convert from.</li><li><b>@targetElement</b> (<a href="#elementName_Type">elementName</a>, required): The type of document to convert to.</li><li class="unit">Choose One (optional, repeat)<ul><li><b>extensionClass</b>: A class to create and load to provide extension functions to the importer<ul><li><b>@xslNamespace</b> (xs:string, required): The namespace for this extension in the transform file</li><li><b>@className</b> (xs:string, required): A fully qualified name for loading the class to instantiate and use with this extension</li></ul></li><li><b>transformParameter</b>: A parameter value to pass to the transform<ul><li><b>dynamicValue</b> (optional, repeat): A predefined value for a dynamic transform parameter. If dynamicValuesExclusive is set (the default), then one of the values must match the value attribute on the parent transformParameter element.<ul><li><b>@value</b> (xs:string, required): The predefined value</li></ul></li><li><b>@name</b> (xs:string, required): The name of the param in the transform file</li><li><b>@value</b> (xs:string, required): The value to pass to the parameter. Used as the default value for a dynamic parameter.</li><li><b>@description</b> (xs:string): The parameter description, displayed to the user for dynamic parameters.</li><li><b>@dynamicType</b>: If specified, allow the user to enter the value for this parameter. A list of possible values can be specified with dynamicValue elements, and the value attribute provides the default setting.<table border="1" class="tableSimpleType"><tr class="trSimpleType"><td colspan="2">(inlineType)</td></tr><tr><td>(restricts)</td><td style="width:100%;">xs:token</td></tr><tr><td>string</td><td style="width:100%;">A string parameter</td></tr><tr><td>number</td><td style="width:100%;">A numeric parameter</td></tr><tr><td>boolean</td><td style="width:100%;">A boolean parameter</td></tr></table></li><li><b>@dynamicValuesExclusive</b> (xs:boolean, default=true): If nested dynamic values are specified, indicates if those are the only values supported.</li></ul></li></ul></li></ul></li><li><b><a id="xmlExtensionConverterType_Type">xmlExtensionConverterType</a></b>: Specify a transform to run to convert the extensions with a namespace of the specified sourceNamespace to the new namespace specified by targetNamespace.<ul><li><b>@description</b> (xs:token, required): A short description of the converter. Used for conflict resolution if	multiple converters are specified for the same element.</li><li><b>@transformFile</b> (xs:string, required): The transform file to load. Paths are relative to the XmlConverters directory.</li><li><b>@sourceNamespace</b> (xs:anyURI, required): The type of document to convert from. The xml namespace associated with the old extension dll and xml elements.</li><li><b>@targetNamespace</b> (xs:anyURI, required): The type of document to convert to. The xml namespace associated with the new extension dll and xml elements.</li><li><b>@runsWithSourceNamespace</b> (xs:anyURI): The source namespace this should run with. The specified transform file will be automatically included in the transform file that upgrades the target namespace.</li><li class="unit">Choose One (optional, repeat)<ul><li><b>extensionClass</b>: A class to create and load to provide extension functions to the importer<ul><li><b>@xslNamespace</b> (xs:string, required): The namespace for this extension in the transform file</li><li><b>@className</b> (xs:string, required): A fully qualified name for loading the class to instantiate and use with this extension</li></ul></li><li><b>transformParameter</b>: A parameter value to pass to the transform<ul><li><b>dynamicValue</b> (optional, repeat): A predefined value for a dynamic transform parameter. If dynamicValuesExclusive is set (the default), then one of the values must match the value attribute on the parent transformParameter element.<ul><li><b>@value</b> (xs:string, required): The predefined value</li></ul></li><li><b>@name</b> (xs:string, required): The name of the param in the transform file</li><li><b>@value</b> (xs:string, required): The value to pass to the parameter. Used as the default value for a dynamic parameter.</li><li><b>@description</b> (xs:string): The parameter description, displayed to the user for dynamic parameters.</li><li><b>@dynamicType</b>: If specified, allow the user to enter the value for this parameter. A list of possible values can be specified with dynamicValue elements, and the value attribute provides the default setting.<table border="1" class="tableSimpleType"><tr class="trSimpleType"><td colspan="2">(inlineType)</td></tr><tr><td>(restricts)</td><td style="width:100%;">xs:token</td></tr><tr><td>string</td><td style="width:100%;">A string parameter</td></tr><tr><td>number</td><td style="width:100%;">A numeric parameter</td></tr><tr><td>boolean</td><td style="width:100%;">A boolean parameter</td></tr></table></li><li><b>@dynamicValuesExclusive</b> (xs:boolean, default=true): If nested dynamic values are specified, indicates if those are the only values supported.</li></ul></li></ul></li></ul></li></ul><h4 id="SimpleTypes_Header">Simple Types<span style="font-size:smaller">&nbsp;&nbsp;(<a href="#Elements_Header">Elements</a>,&nbsp;<a href="#ComplexTypes_Header">Complex Types</a>)</span></h4><ul style="list-style-type:none;"><li><table border="1" class="tableSimpleType"><tr class="trSimpleType"><td colspan="2"><b><a id="elementName_Type">elementName</a></b>: The name for the root element of a document. This is prefix-qualified name: any namespace prefixes defined in the designer document at this point (including the default namespace) will be applied to the applied to resolve the specified prefix.</td></tr><tr><td>(restricts)</td><td style="width:100%;">xs:QName</td></tr></table></li></ul></body></html>