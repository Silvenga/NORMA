<?xml version="1.0" encoding="utf-8"?>
<xs:schema
	attributeFormDefault="unqualified"
	elementFormDefault="qualified"
	targetNamespace="http://schemas.neumont.edu/ORM/DesignerSettings"
	xmlns="http://schemas.neumont.edu/ORM/DesignerSettings"
	xmlns:ds="http://schemas.neumont.edu/ORM/DesignerSettings"
	xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<xs:annotation>
		<xs:appinfo source="Common Public License Copyright Notice">
			Natural Object-Role Modeling Architect for Visual Studio

			Copyright © Neumont University. All rights reserved.

			The use and distribution terms for this software are covered by the
			Common Public License 1.0 (http://opensource.org/licenses/cpl) which
			can be found in the file CPL.txt at the root of this distribution.
			By using this software in any fashion, you are agreeing to be bound by
			the terms of this license.

			You must not remove this notice, or any other, from this software.
		</xs:appinfo>
	</xs:annotation>

	<xs:element name="settings" type="DesignerSettingsType"/>
	<xs:complexType name="DesignerSettingsType">
		<xs:all>
			<xs:element name="xmlConverters" minOccurs="0">
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element ref="xmlConverterBase"/>
					</xs:sequence>
				</xs:complexType>
				<xs:key name="ConverterDescriptionKey">
					<xs:selector xpath="ds:*"/>
					<xs:field xpath="@description"/>
				</xs:key>
			</xs:element>
		</xs:all>
	</xs:complexType>
	<xs:element name="xmlConverterBase" type="xmlConverterTypeBase" abstract="true"/>
	<xs:complexType name="xmlConverterTypeBase" abstract="true">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="extensionClass">
				<xs:annotation>
					<xs:documentation>A class to create and load to provide extension functions to the importer</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="xslNamespace" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The namespace for this extension in the transform file</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="className" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>A fully qualified name for loading the class to instantiate and use with this extension</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="transformParameter">
				<xs:annotation>
					<xs:documentation>A parameter value to pass to the transform</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="dynamicValue" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>A predefined value for a dynamic transform parameter. If dynamicValuesExclusive is set (the default), then one of the values must match the value attribute on the parent transformParameter element.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:attribute name="value" type="xs:string" use="required">
									<xs:annotation>
										<xs:documentation>The predefined value</xs:documentation>
									</xs:annotation>
								</xs:attribute>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The name of the param in the transform file</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The value to pass to the parameter. Used as the default value for a dynamic parameter.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="description" type="xs:string">
						<xs:annotation>
							<xs:documentation>The parameter description, displayed to the user for dynamic parameters.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="dynamicType">
						<xs:annotation>
							<xs:documentation>If specified, allow the user to </xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:token">
								<xs:enumeration value="string">
									<xs:annotation>
										<xs:documentation>A string parameter</xs:documentation>
									</xs:annotation>
								</xs:enumeration>
								<xs:enumeration value="number">
									<xs:annotation>
										<xs:documentation>A numeric parameter</xs:documentation>
									</xs:annotation>
								</xs:enumeration>
								<xs:enumeration value="boolean">
									<xs:annotation>
										<xs:documentation>A boolean parameter</xs:documentation>
									</xs:annotation>
								</xs:enumeration>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="dynamicValuesExclusive" type="xs:boolean" default="true">
						<xs:annotation>
							<xs:documentation>If nested dynamic values are specified, indicates if those are the only values supported.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:choice>
		<xs:attribute name="description" type="xs:token" use="required">
			<xs:annotation>
				<xs:documentation>A short description of the converter. Used for conflict resolution if	multiple converters are specified for the same element.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="transformFile" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The transform file to load. Paths are relative to the XmlConverters directory.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:element name="xmlConverter" type="xmlConverterType" substitutionGroup="xmlConverterBase"/>
	<xs:element name="xmlExtensionConverter" type="xmlExtensionConverterType" substitutionGroup="xmlConverterBase"/>
	<xs:complexType name="xmlConverterType">
		<xs:annotation>
			<xs:documentation>Specify a transform to run to convert a document with a root element of the specified sourceElement type to a document with the specified targetElement type.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="xmlConverterTypeBase">
				<xs:attribute name="sourceElement" type="elementName" use="required">
					<xs:annotation>
						<xs:documentation>The type of document to convert from.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="targetElement" type="elementName" use="required">
					<xs:annotation>
						<xs:documentation>The type of document to convert to.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="xmlExtensionConverterType">
		<xs:annotation>
			<xs:documentation>Specify a transform to run to convert the extensions with a namespace of the specified sourceNamespace to the new namespace specified by targetNamespace.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="xmlConverterTypeBase">
				<xs:attribute name="sourceNamespace" type="xs:anyURI" use="required">
					<xs:annotation>
						<xs:documentation>The type of document to convert from. The xml namespace associated with the old extension dll and xml elements.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="targetNamespace" type="xs:anyURI" use="required">
					<xs:annotation>
						<xs:documentation>The type of document to convert to. The xml namespace associated with the new extension dll and xml elements.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="runsWithSourceNamespace" type="xs:anyURI">
					<xs:annotation>
						<xs:documentation>The source namespace this should run with. The specified transform file will be automatically included in the transform file that upgrades the target namespace.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="elementName">
		<xs:annotation>
			<xs:documentation>The name for the root element of a document. This is prefix-qualified name: any namespace prefixes defined in the designer document at this point (including the default namespace) will be applied to the applied to resolve the specified prefix.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:QName"/>
	</xs:simpleType>
</xs:schema>
