#region Common Public License Copyright Notice
/**************************************************************************\
* Neumont Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// DomainClass ORMBaseShape
	/// Description for Neumont.Tools.ORM.ShapeModel.ORMBaseShape
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::Neumont.Tools.Modeling.Diagrams.Design.PresentationElementTypeDescriptionProvider<ORMBaseShape, global::Neumont.Tools.ORM.ObjectModel.ORMModelElement, Design.ORMBaseShapeTypeDescriptor<ORMBaseShape, global::Neumont.Tools.ORM.ObjectModel.ORMModelElement>>))]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.ORMBaseShape.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.ORMBaseShape.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("55131f4b-0f9a-408d-bed0-79451ba7f4f0")]
	public abstract partial class ORMBaseShape : DslDiagrams::NodeShape
	{
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 1);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// ORMBaseShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x55131f4b, 0x0f9a, 0x408d, 0xbe, 0xd0, 0x79, 0x45, 0x1b, 0xa7, 0xf4, 0xf0);
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor.
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//protected ORMBaseShape(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
		#region UpdateCounter domain property code
		
		/// <summary>
		/// UpdateCounter domain property Id.
		/// </summary>
		public static readonly global::System.Guid UpdateCounterDomainPropertyId = new global::System.Guid(0x85e23ba2, 0x451a, 0x4cd3, 0xb2, 0x33, 0x64, 0x97, 0x3e, 0x61, 0x33, 0xf6);
		
		/// <summary>
		/// Gets or sets the value of UpdateCounter domain property.
		/// Description for Neumont.Tools.ORM.ShapeModel.ORMBaseShape.Update Counter
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.ORMBaseShape/UpdateCounter.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.ORMBaseShape/UpdateCounter.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("85e23ba2-451a-4cd3-b233-64973e6133f6")]
		private global::System.Int64 UpdateCounter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return UpdateCounterPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UpdateCounterPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ORMBaseShape.UpdateCounter domain property.
		/// </summary>
		internal sealed partial class UpdateCounterPropertyHandler : DslModeling::DomainPropertyValueHandler<ORMBaseShape, global::System.Int64>
		{
			private UpdateCounterPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ORMBaseShape.UpdateCounter domain property value handler.
			/// </summary>
			public static readonly UpdateCounterPropertyHandler Instance = new UpdateCounterPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ORMBaseShape.UpdateCounter domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UpdateCounterDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int64 GetValue(ORMBaseShape element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for UpdateCounter because its Kind is
				// set to CustomStorage. Please provide the GetUpdateCounterValue()
				// method on the domain class.
				return element.GetUpdateCounterValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ORMBaseShape element, global::System.Int64 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int64 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for UpdateCounter because its Kind is
					// set to CustomStorage. Please provide the SetUpdateCounterValue()
					// method on the domain class.
					element.SetUpdateCounterValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// DomainClass ObjectTypeShape
	/// Description for Neumont.Tools.ORM.ShapeModel.ObjectTypeShape
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("00c1f246-d8f1-4eea-ac88-39ba238143a8")]
	public partial class ObjectTypeShape : ORMBaseShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with ObjectTypeShape.
		/// </summary>
		public static DslDiagrams::Decorator FindObjectTypeShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(0.7, 0.35);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectTypeShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x00c1f246, 0xd8f1, 0x4eea, 0xac, 0x88, 0x39, 0xba, 0x23, 0x81, 0x43, 0xa8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectTypeShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectTypeShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ExpandRefMode domain property code
		
		/// <summary>
		/// ExpandRefMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExpandRefModeDomainPropertyId = new global::System.Guid(0xb2415bb1, 0x1c83, 0x4f0b, 0xb2, 0xc3, 0x58, 0xb6, 0x7b, 0xc6, 0x20, 0xdd);
		
		/// <summary>
		/// Storage for ExpandRefMode
		/// </summary>
		private global::System.Boolean expandRefModePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ExpandRefMode domain property.
		/// Description for Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ExpandRefMode
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.ObjectTypeShape/ExpandRefMode.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.ObjectTypeShape/ExpandRefMode.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
		[DslModeling::DomainObjectId("b2415bb1-1c83-4f0b-b2c3-58b67bc620dd")]
		public global::System.Boolean ExpandRefMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return expandRefModePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ExpandRefModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectTypeShape.ExpandRefMode domain property.
		/// </summary>
		internal sealed partial class ExpandRefModePropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectTypeShape, global::System.Boolean>
		{
			private ExpandRefModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectTypeShape.ExpandRefMode domain property value handler.
			/// </summary>
			public static readonly ExpandRefModePropertyHandler Instance = new ExpandRefModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectTypeShape.ExpandRefMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ExpandRefModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ObjectTypeShape element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.expandRefModePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectTypeShape element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.expandRefModePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// DomainClass FactTypeShape
	/// Description for Neumont.Tools.ORM.ShapeModel.FactTypeShape
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::Neumont.Tools.Modeling.Diagrams.Design.PresentationElementTypeDescriptionProvider<FactTypeShape, global::Neumont.Tools.ORM.ObjectModel.FactType, Design.FactTypeShapeTypeDescriptor<FactTypeShape, global::Neumont.Tools.ORM.ObjectModel.FactType>>))]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.FactTypeShape.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.FactTypeShape.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8e440a3b-275e-42f7-868b-d5d473158acd")]
	public partial class FactTypeShape : ORMBaseShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with FactTypeShape.
		/// </summary>
		public static DslDiagrams::Decorator FindFactTypeShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(0.7, 0.35);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// FactTypeShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8e440a3b, 0x275e, 0x42f7, 0x86, 0x8b, 0xd5, 0xd4, 0x73, 0x15, 0x8a, 0xcd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ConstraintDisplayPosition domain property code
		
		/// <summary>
		/// ConstraintDisplayPosition domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintDisplayPositionDomainPropertyId = new global::System.Guid(0x802767fd, 0xde7d, 0x4541, 0xb4, 0x2b, 0x90, 0xb6, 0x13, 0xdf, 0xe2, 0x2d);
		
		/// <summary>
		/// Storage for ConstraintDisplayPosition
		/// </summary>
		private ConstraintDisplayPosition constraintDisplayPositionPropertyStorage = Neumont.Tools.ORM.ShapeModel.ConstraintDisplayPosition.Top;
		
		/// <summary>
		/// Gets or sets the value of ConstraintDisplayPosition domain property.
		/// Determines where internal constraints are drawn on this FactTypeShape.
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.FactTypeShape/ConstraintDisplayPosition.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.FactTypeShape/ConstraintDisplayPosition.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Neumont.Tools.ORM.ShapeModel.ConstraintDisplayPosition.Top)]
		[DslModeling::DomainObjectId("802767fd-de7d-4541-b42b-90b613dfe22d")]
		public ConstraintDisplayPosition ConstraintDisplayPosition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return constraintDisplayPositionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConstraintDisplayPositionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactTypeShape.ConstraintDisplayPosition domain property.
		/// </summary>
		internal sealed partial class ConstraintDisplayPositionPropertyHandler : DslModeling::DomainPropertyValueHandler<FactTypeShape, ConstraintDisplayPosition>
		{
			private ConstraintDisplayPositionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactTypeShape.ConstraintDisplayPosition domain property value handler.
			/// </summary>
			public static readonly ConstraintDisplayPositionPropertyHandler Instance = new ConstraintDisplayPositionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactTypeShape.ConstraintDisplayPosition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConstraintDisplayPositionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ConstraintDisplayPosition GetValue(FactTypeShape element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.constraintDisplayPositionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactTypeShape element, ConstraintDisplayPosition newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ConstraintDisplayPosition oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.constraintDisplayPositionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DisplayRoleNames domain property code
		
		/// <summary>
		/// DisplayRoleNames domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisplayRoleNamesDomainPropertyId = new global::System.Guid(0x9607af0f, 0x2e12, 0x4215, 0xb8, 0xa5, 0x91, 0xb6, 0x7c, 0x1a, 0x9f, 0x08);
		
		/// <summary>
		/// Storage for DisplayRoleNames
		/// </summary>
		private DisplayRoleNames displayRoleNamesPropertyStorage = Neumont.Tools.ORM.ShapeModel.DisplayRoleNames.UserDefault;
		
		/// <summary>
		/// Gets or sets the value of DisplayRoleNames domain property.
		/// Determines whether RoleNameShapes will be drawn for the Roles in the FactType
		/// represented by this FactTypeShape, overriding the global setting.
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.FactTypeShape/DisplayRoleNames.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.FactTypeShape/DisplayRoleNames.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Neumont.Tools.ORM.ShapeModel.DisplayRoleNames.UserDefault)]
		[DslModeling::DomainObjectId("9607af0f-2e12-4215-b8a5-91b67c1a9f08")]
		public DisplayRoleNames DisplayRoleNames
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return displayRoleNamesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DisplayRoleNamesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactTypeShape.DisplayRoleNames domain property.
		/// </summary>
		internal sealed partial class DisplayRoleNamesPropertyHandler : DslModeling::DomainPropertyValueHandler<FactTypeShape, DisplayRoleNames>
		{
			private DisplayRoleNamesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactTypeShape.DisplayRoleNames domain property value handler.
			/// </summary>
			public static readonly DisplayRoleNamesPropertyHandler Instance = new DisplayRoleNamesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactTypeShape.DisplayRoleNames domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DisplayRoleNamesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DisplayRoleNames GetValue(FactTypeShape element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.displayRoleNamesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactTypeShape element, DisplayRoleNames newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DisplayRoleNames oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.displayRoleNamesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RolesPosition domain property code
		
		/// <summary>
		/// RolesPosition domain property Id.
		/// </summary>
		public static readonly global::System.Guid RolesPositionDomainPropertyId = new global::System.Guid(0x89244439, 0xfbb1, 0x4deb, 0xbf, 0xf3, 0x69, 0xd4, 0x7c, 0xb9, 0x0a, 0x6b);
		
		/// <summary>
		/// Storage for RolesPosition
		/// </summary>
		private global::System.Double rolesPositionPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of RolesPosition domain property.
		/// Description for Neumont.Tools.ORM.ShapeModel.FactTypeShape.Roles Position
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.FactTypeShape/RolesPosition.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.FactTypeShape/RolesPosition.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("89244439-fbb1-4deb-bff3-69d47cb90a6b")]
		public global::System.Double RolesPosition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return rolesPositionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RolesPositionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactTypeShape.RolesPosition domain property.
		/// </summary>
		internal sealed partial class RolesPositionPropertyHandler : DslModeling::DomainPropertyValueHandler<FactTypeShape, global::System.Double>
		{
			private RolesPositionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactTypeShape.RolesPosition domain property value handler.
			/// </summary>
			public static readonly RolesPositionPropertyHandler Instance = new RolesPositionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactTypeShape.RolesPosition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RolesPositionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Double GetValue(FactTypeShape element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.rolesPositionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactTypeShape element, global::System.Double newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Double oldValue = GetValue(element);
				// double type precision is guaranteed only to 15th digit.
				if (global::System.Math.Abs(newValue - oldValue) > 1e-15)
				{
					ValueChanging(element, oldValue, newValue);
					element.rolesPositionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RoleDisplayOrderCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of RoleDisplayOrderCollection.
		/// Description for
		/// Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder.FactTypeShape
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<global::Neumont.Tools.ORM.ObjectModel.RoleBase> RoleDisplayOrderCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<global::Neumont.Tools.ORM.ObjectModel.RoleBase>(this, global::Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder.FactTypeShapeDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// DomainClass SubtypeLink
	/// Description for Neumont.Tools.ORM.ShapeModel.SubtypeLink
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.SubtypeLink.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.SubtypeLink.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("87ddaeda-1fd8-4433-bb1e-7482c7f471a7")]
	public partial class SubtypeLink : global::Neumont.Tools.ORM.ShapeModel.ORMBaseBinaryLinkShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with SubtypeLink.
		/// </summary>
		public static DslDiagrams::Decorator FindSubtypeLinkDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 1);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// SubtypeLink domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x87ddaeda, 0x1fd8, 0x4433, 0xbb, 0x1e, 0x74, 0x82, 0xc7, 0xf4, 0x71, 0xa7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubtypeLink(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubtypeLink(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// DomainClass ExternalConstraintShape
	/// Description for Neumont.Tools.ORM.ShapeModel.ExternalConstraintShape
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.ExternalConstraintShape.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.ExternalConstraintShape.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("00a08f56-73ba-4c8f-8fa1-ae61b8fc1cae")]
	public partial class ExternalConstraintShape : ORMBaseShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with ExternalConstraintShape.
		/// </summary>
		public static DslDiagrams::Decorator FindExternalConstraintShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(0.16, 0.16);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExternalConstraintShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x00a08f56, 0x73ba, 0x4c8f, 0x8f, 0xa1, 0xae, 0x61, 0xb8, 0xfc, 0x1c, 0xae);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExternalConstraintShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExternalConstraintShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// DomainClass FrequencyConstraintShape
	/// Description for Neumont.Tools.ORM.ShapeModel.FrequencyConstraintShape
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.FrequencyConstraintShape.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.FrequencyConstraintShape.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ec47cd7d-023b-4971-8b5b-1242dbc7356f")]
	public partial class FrequencyConstraintShape : ExternalConstraintShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with FrequencyConstraintShape.
		/// </summary>
		public static DslDiagrams::Decorator FindFrequencyConstraintShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(0.16, 0.16);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// FrequencyConstraintShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xec47cd7d, 0x023b, 0x4971, 0x8b, 0x5b, 0x12, 0x42, 0xdb, 0xc7, 0x35, 0x6f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraintShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraintShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// DomainClass RingConstraintShape
	/// Description for Neumont.Tools.ORM.ShapeModel.RingConstraintShape
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.RingConstraintShape.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.RingConstraintShape.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("61b334c5-d37f-4a74-90e9-ac793d35bdf1")]
	public partial class RingConstraintShape : ExternalConstraintShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with RingConstraintShape.
		/// </summary>
		public static DslDiagrams::Decorator FindRingConstraintShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(0.16, 0.16);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// RingConstraintShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x61b334c5, 0xd37f, 0x4a74, 0x90, 0xe9, 0xac, 0x79, 0x3d, 0x35, 0xbd, 0xf1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RingConstraintShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RingConstraintShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// DomainClass FloatingTextShape
	/// Description for Neumont.Tools.ORM.ShapeModel.FloatingTextShape
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.FloatingTextShape.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.FloatingTextShape.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0904999f-d9c5-4c4e-a08f-f8dd4b2f29a3")]
	public abstract partial class FloatingTextShape : ORMBaseShape
	{
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 1);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// FloatingTextShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0904999f, 0xd9c5, 0x4c4e, 0xa0, 0x8f, 0xf8, 0xdd, 0x4b, 0x2f, 0x29, 0xa3);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected FloatingTextShape(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// DomainClass ObjectifiedFactTypeNameShape
	/// Description for Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7fd5183a-8bc2-43bb-8474-a0a2d558d90a")]
	public partial class ObjectifiedFactTypeNameShape : FloatingTextShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with ObjectifiedFactTypeNameShape.
		/// </summary>
		public static DslDiagrams::Decorator FindObjectifiedFactTypeNameShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 1);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectifiedFactTypeNameShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7fd5183a, 0x8bc2, 0x43bb, 0x84, 0x74, 0xa0, 0xa2, 0xd5, 0x58, 0xd9, 0x0a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectifiedFactTypeNameShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectifiedFactTypeNameShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ExpandRefMode domain property code
		
		/// <summary>
		/// ExpandRefMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExpandRefModeDomainPropertyId = new global::System.Guid(0x5bdafe8c, 0xafa7, 0x4b78, 0xad, 0xc6, 0xca, 0xe8, 0x76, 0xab, 0x21, 0x40);
		
		/// <summary>
		/// Storage for ExpandRefMode
		/// </summary>
		private global::System.Boolean expandRefModePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ExpandRefMode domain property.
		/// Description for
		/// Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape.ExpandRefMode
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape/ExpandRefMode.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape/ExpandRefMode.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
		[DslModeling::DomainObjectId("5bdafe8c-afa7-4b78-adc6-cae876ab2140")]
		public global::System.Boolean ExpandRefMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return expandRefModePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ExpandRefModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectifiedFactTypeNameShape.ExpandRefMode domain property.
		/// </summary>
		internal sealed partial class ExpandRefModePropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectifiedFactTypeNameShape, global::System.Boolean>
		{
			private ExpandRefModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectifiedFactTypeNameShape.ExpandRefMode domain property value handler.
			/// </summary>
			public static readonly ExpandRefModePropertyHandler Instance = new ExpandRefModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectifiedFactTypeNameShape.ExpandRefMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ExpandRefModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ObjectifiedFactTypeNameShape element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.expandRefModePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectifiedFactTypeNameShape element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.expandRefModePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// DomainClass ReadingShape
	/// Description for Neumont.Tools.ORM.ShapeModel.ReadingShape
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.ReadingShape.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.ReadingShape.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c567ed6d-d0a6-4fd8-a974-c567aa309d5e")]
	public partial class ReadingShape : FloatingTextShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with ReadingShape.
		/// </summary>
		public static DslDiagrams::Decorator FindReadingShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 1);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// ReadingShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc567ed6d, 0xd0a6, 0x4fd8, 0xa9, 0x74, 0xc5, 0x67, 0xaa, 0x30, 0x9d, 0x5e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReadingShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReadingShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// DomainClass ValueConstraintShape
	/// Description for Neumont.Tools.ORM.ShapeModel.ValueConstraintShape
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.ValueConstraintShape.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.ValueConstraintShape.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b65f916a-06a5-4efe-bbf9-8d8e55b5c7eb")]
	public partial class ValueConstraintShape : FloatingTextShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with ValueConstraintShape.
		/// </summary>
		public static DslDiagrams::Decorator FindValueConstraintShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 1);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// ValueConstraintShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb65f916a, 0x06a5, 0x4efe, 0xbb, 0xf9, 0x8d, 0x8e, 0x55, 0xb5, 0xc7, 0xeb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueConstraintShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueConstraintShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// DomainClass RoleNameShape
	/// Description for Neumont.Tools.ORM.ShapeModel.RoleNameShape
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.RoleNameShape.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.RoleNameShape.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2cb7393c-4502-4c59-979d-94d6c89b4080")]
	public partial class RoleNameShape : FloatingTextShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with RoleNameShape.
		/// </summary>
		public static DslDiagrams::Decorator FindRoleNameShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 1);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// RoleNameShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2cb7393c, 0x4502, 0x4c59, 0x97, 0x9d, 0x94, 0xd6, 0xc8, 0x9b, 0x40, 0x80);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RoleNameShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RoleNameShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// DomainClass ModelNoteShape
	/// Description for Neumont.Tools.ORM.ShapeModel.ModelNoteShape
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.ModelNoteShape.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.ModelNoteShape.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8252e1d1-3c59-4595-8c32-9fb79e84924e")]
	public partial class ModelNoteShape : FloatingTextShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with ModelNoteShape.
		/// </summary>
		public static DslDiagrams::Decorator FindModelNoteShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(0.312, 0.132);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelNoteShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8252e1d1, 0x3c59, 0x4595, 0x8c, 0x32, 0x9f, 0xb7, 0x9e, 0x84, 0x92, 0x4e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelNoteShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelNoteShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// DomainClass LinkConnectorShape
	/// Description for Neumont.Tools.ORM.ShapeModel.LinkConnectorShape
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ShapeModel.LinkConnectorShape.DisplayName", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ShapeModel.LinkConnectorShape.Description", typeof(global::Neumont.Tools.ORM.ShapeModel.ORMShapeDomainModel), "Neumont.Tools.ORM.GeneratedCode.ShapeDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("51770447-28e0-4bff-977f-2d2625f7978d")]
	public partial class LinkConnectorShape : DslDiagrams::NodeShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with LinkConnectorShape.
		/// </summary>
		public static DslDiagrams::Decorator FindLinkConnectorShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(0, 0);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// LinkConnectorShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x51770447, 0x28e0, 0x4bff, 0x97, 0x7f, 0x2d, 0x26, 0x25, 0xf7, 0x97, 0x8d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LinkConnectorShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LinkConnectorShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}

