#region Common Public License Copyright Notice
/**************************************************************************\
* Neumont Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = Microsoft.VisualStudio.Modeling;
using DslDesign = Microsoft.VisualStudio.Modeling.Design;
using Microsoft.VisualStudio.Modeling.Validation;
namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class ORMModelElement
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.ExtensionCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ORMModelElement", "", "ExtensionCollection"),
						"DSL0001", this);
			}
			if (this.ExtensionModelErrorCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ORMModelElement", "", "ExtensionModelErrorCollection"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class ORMModelElement
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class ORMNamedElement
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.FactTypeCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ORMNamedElement", "", "FactTypeCollection"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class ORMNamedElement
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class ORMModel
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.ObjectTypeCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ORMModel", "", "ObjectTypeCollection"),
						"DSL0001", this);
			}
			if (this.FactTypeCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ORMModel", "", "FactTypeCollection"),
						"DSL0001", this);
			}
			if (this.ErrorCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ORMModel", "", "ErrorCollection"),
						"DSL0001", this);
			}
			if (this.ReferenceModeKindCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ORMModel", "", "ReferenceModeKindCollection"),
						"DSL0001", this);
			}
			if (this.ReferenceModeCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ORMModel", "", "ReferenceModeCollection"),
						"DSL0001", this);
			}
			if (this.SetConstraintCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ORMModel", "", "SetConstraintCollection"),
						"DSL0001", this);
			}
			if (this.SetComparisonConstraintCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ORMModel", "", "SetComparisonConstraintCollection"),
						"DSL0001", this);
			}
			if (this.DataTypeCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ORMModel", "", "DataTypeCollection"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class ORMModel
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class ObjectType
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.DataType == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ObjectType", "", "DataType"),
						"DSL0001", this);
			}
			if (this.NestedFactType == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ObjectType", "", "NestedFactType"),
						"DSL0001", this);
			}
			if (this.PlayedRoleCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ObjectType", "", "PlayedRoleCollection"),
						"DSL0001", this);
			}
			if (this.DuplicateNameError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ObjectType", "", "DuplicateNameError"),
						"DSL0001", this);
			}
			if (this.PreferredIdentifier == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ObjectType", "", "PreferredIdentifier"),
						"DSL0001", this);
			}
			if (this.ValueConstraint == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ObjectType", "", "ValueConstraint"),
						"DSL0001", this);
			}
			if (this.ReferenceSchemeError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ObjectType", "", "ReferenceSchemeError"),
						"DSL0001", this);
			}
			if (this.ObjectTypeRequiresPrimarySupertypeError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ObjectType", "", "ObjectTypeRequiresPrimarySupertypeError"),
						"DSL0001", this);
			}
			if (this.Note == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ObjectType", "", "Note"),
						"DSL0001", this);
			}
			if (this.CompatibleSupertypesError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ObjectType", "", "CompatibleSupertypesError"),
						"DSL0001", this);
			}
			if (this.PreferredIdentifierRequiresMandatoryError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ObjectType", "", "PreferredIdentifierRequiresMandatoryError"),
						"DSL0001", this);
			}
			if (this.EntityTypeInstanceCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ObjectType", "", "EntityTypeInstanceCollection"),
						"DSL0001", this);
			}
			if (this.ValueTypeInstanceCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ObjectType", "", "ValueTypeInstanceCollection"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class ObjectType
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class FactType
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.ConstraintCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"FactType", "", "ConstraintCollection"),
						"DSL0001", this);
			}
			if (this.SetComparisonConstraintCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"FactType", "", "SetComparisonConstraintCollection"),
						"DSL0001", this);
			}
			if (this.SetConstraintCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"FactType", "", "SetConstraintCollection"),
						"DSL0001", this);
			}
			if (this.NestingType == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"FactType", "", "NestingType"),
						"DSL0001", this);
			}
			if (this.ReadingOrderCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"FactType", "", "ReadingOrderCollection"),
						"DSL0001", this);
			}
			if (this.ReadingRequiredError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"FactType", "", "ReadingRequiredError"),
						"DSL0001", this);
			}
			if (this.InternalUniquenessConstraintRequiredError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"FactType", "", "InternalUniquenessConstraintRequiredError"),
						"DSL0001", this);
			}
			if (this.ImpliedInternalUniquenessConstraintError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"FactType", "", "ImpliedInternalUniquenessConstraintError"),
						"DSL0001", this);
			}
			if (this.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"FactType", "", "FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection"),
						"DSL0001", this);
			}
			if (this.Note == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"FactType", "", "Note"),
						"DSL0001", this);
			}
			if (this.RoleCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"FactType", "", "RoleCollection"),
						"DSL0001", this);
			}
			if (this.DerivationRule == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"FactType", "", "DerivationRule"),
						"DSL0001", this);
			}
			if (this.FactTypeInstanceCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"FactType", "", "FactTypeInstanceCollection"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class FactType
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class RoleBase
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.ReadingOrder.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"RoleBase", "", "ReadingOrder"),
						"DSL0001", this);
			}
			if (this.FactTypeShapeCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"RoleBase", "", "FactTypeShapeCollection"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class RoleBase
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class RoleProxy
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.TargetRole == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"RoleProxy", "", "TargetRole"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class RoleProxy
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class Role
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.RolePlayer == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"Role", "", "RolePlayer"),
						"DSL0001", this);
			}
			if (this.ConstraintRoleSequenceCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"Role", "", "ConstraintRoleSequenceCollection"),
						"DSL0001", this);
			}
			if (this.ValueConstraint == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"Role", "", "ValueConstraint"),
						"DSL0001", this);
			}
			if (this.RolePlayerRequiredError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"Role", "", "RolePlayerRequiredError"),
						"DSL0001", this);
			}
			if (this.Proxy == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"Role", "", "Proxy"),
						"DSL0001", this);
			}
			if (this.ObjectTypeInstanceCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"Role", "", "ObjectTypeInstanceCollection"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class Role
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class EqualityConstraint
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.EqualityImpliedByMandatoryError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"EqualityConstraint", "", "EqualityImpliedByMandatoryError"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class EqualityConstraint
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class SetComparisonConstraint
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.FactTypeCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"SetComparisonConstraint", "", "FactTypeCollection"),
						"DSL0001", this);
			}
			if (this.RoleSequenceCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"SetComparisonConstraint", "", "RoleSequenceCollection"),
						"DSL0001", this);
			}
			if (this.TooFewRoleSequencesError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"SetComparisonConstraint", "", "TooFewRoleSequencesError"),
						"DSL0001", this);
			}
			if (this.TooManyRoleSequencesError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"SetComparisonConstraint", "", "TooManyRoleSequencesError"),
						"DSL0001", this);
			}
			if (this.DuplicateNameError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"SetComparisonConstraint", "", "DuplicateNameError"),
						"DSL0001", this);
			}
			if (this.ArityMismatchError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"SetComparisonConstraint", "", "ArityMismatchError"),
						"DSL0001", this);
			}
			if (this.CompatibleRolePlayerTypeErrorCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"SetComparisonConstraint", "", "CompatibleRolePlayerTypeErrorCollection"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class SetComparisonConstraint
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class RingConstraint
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.RingConstraintTypeNotSpecifiedError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"RingConstraint", "", "RingConstraintTypeNotSpecifiedError"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class RingConstraint
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class FrequencyConstraint
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.FrequencyConstraintMinMaxError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"FrequencyConstraint", "", "FrequencyConstraintMinMaxError"),
						"DSL0001", this);
			}
			if (this.FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"FrequencyConstraint", "", "FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class FrequencyConstraint
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class UniquenessConstraint
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.PreferredIdentifierFor == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"UniquenessConstraint", "", "PreferredIdentifierFor"),
						"DSL0001", this);
			}
			if (this.NMinusOneError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"UniquenessConstraint", "", "NMinusOneError"),
						"DSL0001", this);
			}
			if (this.ImpliedByUniquenessError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"UniquenessConstraint", "", "ImpliedByUniquenessError"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class UniquenessConstraint
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class MandatoryConstraint
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.ImpliedByMandatoryError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"MandatoryConstraint", "", "ImpliedByMandatoryError"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class MandatoryConstraint
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class SetConstraint
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.FactTypeCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"SetConstraint", "", "FactTypeCollection"),
						"DSL0001", this);
			}
			if (this.DuplicateNameError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"SetConstraint", "", "DuplicateNameError"),
						"DSL0001", this);
			}
			if (this.CompatibleRolePlayerTypeError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"SetConstraint", "", "CompatibleRolePlayerTypeError"),
						"DSL0001", this);
			}
			if (this.TooFewRoleSequencesError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"SetConstraint", "", "TooFewRoleSequencesError"),
						"DSL0001", this);
			}
			if (this.TooManyRoleSequencesError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"SetConstraint", "", "TooManyRoleSequencesError"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class SetConstraint
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class ConstraintRoleSequence
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.RoleCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ConstraintRoleSequence", "", "RoleCollection"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class ConstraintRoleSequence
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class ObjectTypeDuplicateNameError
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.ObjectTypeCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ObjectTypeDuplicateNameError", "", "ObjectTypeCollection"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class ObjectTypeDuplicateNameError
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class ConstraintDuplicateNameError
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.SetConstraintCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ConstraintDuplicateNameError", "", "SetConstraintCollection"),
						"DSL0001", this);
			}
			if (this.SetComparisonConstraintCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ConstraintDuplicateNameError", "", "SetComparisonConstraintCollection"),
						"DSL0001", this);
			}
			if (this.ValueConstraintCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ConstraintDuplicateNameError", "", "ValueConstraintCollection"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class ConstraintDuplicateNameError
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class ReferenceModeKind
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.ReferenceModeCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ReferenceModeKind", "", "ReferenceModeCollection"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class ReferenceModeKind
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class ReferenceMode
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.Kind == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ReferenceMode", "", "Kind"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class ReferenceMode
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class DataType
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.ValueTypeCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"DataType", "", "ValueTypeCollection"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class DataType
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class Reading
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.TooManyRolesError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"Reading", "", "TooManyRolesError"),
						"DSL0001", this);
			}
			if (this.TooFewRolesError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"Reading", "", "TooFewRolesError"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class Reading
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class ReadingOrder
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.ReadingCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ReadingOrder", "", "ReadingCollection"),
						"DSL0001", this);
			}
			if (this.RoleCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ReadingOrder", "", "RoleCollection"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class ReadingOrder
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class ValueRange
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.MaxValueMismatchError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ValueRange", "", "MaxValueMismatchError"),
						"DSL0001", this);
			}
			if (this.MinValueMismatchError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ValueRange", "", "MinValueMismatchError"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class ValueRange
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class ValueConstraint
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.ValueRangeCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ValueConstraint", "", "ValueRangeCollection"),
						"DSL0001", this);
			}
			if (this.DuplicateNameError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ValueConstraint", "", "DuplicateNameError"),
						"DSL0001", this);
			}
			if (this.ValueRangeOverlapError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ValueConstraint", "", "ValueRangeOverlapError"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class ValueConstraint
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class ObjectTypeInstance
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.RoleCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ObjectTypeInstance", "", "RoleCollection"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class ObjectTypeInstance
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class EntityTypeInstance
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.RoleInstanceCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"EntityTypeInstance", "", "RoleInstanceCollection"),
						"DSL0001", this);
			}
			if (this.TooFewEntityTypeRoleInstancesError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"EntityTypeInstance", "", "TooFewEntityTypeRoleInstancesError"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class EntityTypeInstance
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class ValueTypeInstance
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.CompatibleValueTypeInstanceValueError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"ValueTypeInstance", "", "CompatibleValueTypeInstanceValueError"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class ValueTypeInstance
} // Neumont.Tools.ORM.ObjectModel

namespace Neumont.Tools.ORM.ObjectModel
{
    //[ValidationState(ValidationState.Enabled)]
	public partial class FactTypeInstance
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
#if DEBUG
		[ValidationMethod(CustomCategory = "devtest")]
#endif
	    [ValidationMethod(ValidationCategories.Open | ValidationCategories.Save | ValidationCategories.Menu)]
		private void ValidateMultiplicity (ValidationContext context)
		{
			if (this.RoleInstanceCollection.Count == 0)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"FactTypeInstance", "", "RoleInstanceCollection"),
						"DSL0001", this);
			}
			if (this.TooFewFactTypeRoleInstancesError == null)
			{
				context.LogViolation(ViolationType.Error,
					string.Format(System.Globalization.CultureInfo.CurrentCulture, 
						Neumont.Tools.ORM.ObjectModel.Properties.Resources.MinimumMultiplicity_MissingLink, 
						"FactTypeInstance", "", "TooFewFactTypeRoleInstancesError"),
						"DSL0001", this);
			}
		} // ValidateMultiplicity
	} // class FactTypeInstance
} // Neumont.Tools.ORM.ObjectModel

	
 