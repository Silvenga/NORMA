#region Common Public License Copyright Notice
/**************************************************************************\
* Natural Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
* Copyright © ORM Solutions, LLC. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker
{
	/// <summary>
	/// DomainRelationship EntityTypeHasAttribute
	/// Description for
	/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ff7d1a21-8f7f-4392-8bc4-c75e2b44464b")]
	public partial class EntityTypeHasAttribute : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeHasAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xff7d1a21, 0x8f7f, 0x4392, 0x8b, 0xc4, 0xc7, 0x5e, 0x2b, 0x44, 0x46, 0x4b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeHasAttribute link in the same Partition as the given EntityType
		/// </summary>
		/// <param name="source">EntityType to use as the source of the relationship.</param>
		/// <param name="target">Attribute to use as the target of the relationship.</param>
		public EntityTypeHasAttribute(EntityType source, Attribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeHasAttribute.EntityTypeDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeHasAttribute.AttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasAttribute(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasAttribute(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasAttribute(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasAttribute(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityType domain role code
		
		/// <summary>
		/// EntityType domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeDomainRoleId = new global::System.Guid(0x60179d80, 0x596a, 0x4646, 0xa2, 0x40, 0x7e, 0xd9, 0x7a, 0xae, 0xdc, 0xe2);
		
		/// <summary>
		/// DomainRole EntityType
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute.EntityType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute/EntityType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute/EntityType.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AttributeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute/EntityType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("60179d80-596a-4646-a240-7ed97aaedce2")]
		public virtual EntityType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityType)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityType of a Attribute
		/// <summary>
		/// Gets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityType GetEntityType(Attribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeDomainRoleId) as EntityType;
		}
		
		/// <summary>
		/// Sets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntityType(Attribute element, EntityType newEntityType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeDomainRoleId, newEntityType);
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0x9f98b07b, 0xea08, 0x4c6b, 0xae, 0x5d, 0x6e, 0xa8, 0x71, 0x15, 0x56, 0x50);
		
		/// <summary>
		/// DomainRole Attribute
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute.Attribute
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute/Attribute.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute/Attribute.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute/Attribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9f98b07b-ea08-4c6b-ae5d-6ea871155650")]
		public virtual Attribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Attribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AttributeCollection of a EntityType
		/// <summary>
		/// Gets a list of AttributeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Attribute> GetAttributeCollection(EntityType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(element, EntityTypeDomainRoleId);
		}
		#endregion
		#region EntityType link accessor
		/// <summary>
		/// Get the list of EntityTypeHasAttribute links to a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute> GetLinksToAttributeCollection ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType entityTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute>(entityTypeInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute.EntityTypeDomainRoleId);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the EntityTypeHasAttribute link to a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute GetLinkToEntityType (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Attribute attributeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute>(attributeInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute.AttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Attribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityTypeHasAttribute instance accessors
		
		/// <summary>
		/// Get any EntityTypeHasAttribute links between a given EntityType and a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute> GetLinks( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Attribute target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute.EntityTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeHasAttribute link between a given EntityTypeand a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute GetLink( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Attribute target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute.EntityTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeHasAttribute link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker
{
	/// <summary>
	/// DomainRelationship AttributeHasPossibleValue
	/// Description for
	/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d1bfe73f-e05d-48d2-895b-b4daaa60908a")]
	public partial class AttributeHasPossibleValue : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AttributeHasPossibleValue domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd1bfe73f, 0xe05d, 0x48d2, 0x89, 0x5b, 0xb4, 0xda, 0xaa, 0x60, 0x90, 0x8a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AttributeHasPossibleValue link in the same Partition as the given Attribute
		/// </summary>
		/// <param name="source">Attribute to use as the source of the relationship.</param>
		/// <param name="target">Value to use as the target of the relationship.</param>
		public AttributeHasPossibleValue(Attribute source, Value target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AttributeHasPossibleValue.AttributeDomainRoleId, source), new DslModeling::RoleAssignment(AttributeHasPossibleValue.ValueDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AttributeHasPossibleValue(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AttributeHasPossibleValue(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AttributeHasPossibleValue(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AttributeHasPossibleValue(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0x2c5b6ef2, 0xcdf7, 0x4a42, 0xa9, 0x0f, 0xa0, 0x8b, 0xf4, 0xc3, 0x6c, 0x9e);
		
		/// <summary>
		/// DomainRole Attribute
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue.Attribute
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue/Attribute.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue/Attribute.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PossibleValuesCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue/Attribute.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2c5b6ef2-cdf7-4a42-a90f-a08bf4c36c9e")]
		public virtual Attribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Attribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attribute of a Value
		/// <summary>
		/// Gets Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Attribute GetAttribute(Value element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueDomainRoleId) as Attribute;
		}
		
		/// <summary>
		/// Sets Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAttribute(Value element, Attribute newAttribute)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueDomainRoleId, newAttribute);
		}
		#endregion
		#region Value domain role code
		
		/// <summary>
		/// Value domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainRoleId = new global::System.Guid(0xcffa86f5, 0x0271, 0x4416, 0xad, 0x85, 0xd5, 0x29, 0x34, 0x45, 0x9d, 0x56);
		
		/// <summary>
		/// DomainRole Value
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue.Value
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue/Value.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue/Value.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Attribute", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue/Value.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("cffa86f5-0271-4416-ad85-d52934459d56")]
		public virtual Value Value
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Value)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PossibleValuesCollection of a Attribute
		/// <summary>
		/// Gets a list of PossibleValuesCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Value> GetPossibleValuesCollection(Attribute element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Value>, Value>(element, AttributeDomainRoleId);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the list of AttributeHasPossibleValue links to a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue> GetLinksToPossibleValuesCollection ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Attribute attributeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue>(attributeInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue.AttributeDomainRoleId);
		}
		#endregion
		#region Value link accessor
		/// <summary>
		/// Get the AttributeHasPossibleValue link to a Value.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue GetLinkToAttribute (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Value valueInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue>(valueInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue.ValueDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Value not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AttributeHasPossibleValue instance accessors
		
		/// <summary>
		/// Get any AttributeHasPossibleValue links between a given Attribute and a Value.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue> GetLinks( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Attribute source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Value target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue.AttributeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue link in links )
			{
				if ( target.Equals(link.Value) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AttributeHasPossibleValue link between a given Attributeand a Value.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue GetLink( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Attribute source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Value target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue.AttributeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.AttributeHasPossibleValue link in links )
			{
				if ( target.Equals(link.Value) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker
{
	/// <summary>
	/// DomainRelationship EntityTypeIsSubtypeOfEntityType
	/// Description for
	/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0bdbb7e8-8d3c-4c09-a7fc-9086b04a494e")]
	public partial class EntityTypeIsSubtypeOfEntityType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeIsSubtypeOfEntityType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0bdbb7e8, 0x8d3c, 0x4c09, 0xa7, 0xfc, 0x90, 0x86, 0xb0, 0x4a, 0x49, 0x4e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeIsSubtypeOfEntityType link in the same Partition as the given EntityType
		/// </summary>
		/// <param name="source">EntityType to use as the source of the relationship.</param>
		/// <param name="target">EntityType to use as the target of the relationship.</param>
		public EntityTypeIsSubtypeOfEntityType(EntityType source, EntityType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeIsSubtypeOfEntityType.SubtypeDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeIsSubtypeOfEntityType.SupertypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeIsSubtypeOfEntityType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeIsSubtypeOfEntityType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeIsSubtypeOfEntityType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeIsSubtypeOfEntityType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Subtype domain role code
		
		/// <summary>
		/// Subtype domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubtypeDomainRoleId = new global::System.Guid(0x87a158db, 0xae78, 0x4282, 0x81, 0x1c, 0x8b, 0xcb, 0xc8, 0x2f, 0x24, 0xe7);
		
		/// <summary>
		/// DomainRole Subtype
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType.Subtype
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType/Subtype.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType/Subtype.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Supertype", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType/Subtype.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("87a158db-ae78-4282-811c-8bcbc82f24e7")]
		public virtual EntityType Subtype
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityType)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubtypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubtypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubtypesCollection of a EntityType
		/// <summary>
		/// Gets a list of SubtypesCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityType> GetSubtypesCollection(EntityType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityType>, EntityType>(element, SupertypeDomainRoleId);
		}
		#endregion
		#region Supertype domain role code
		
		/// <summary>
		/// Supertype domain role Id.
		/// </summary>
		public static readonly global::System.Guid SupertypeDomainRoleId = new global::System.Guid(0xc19b7670, 0x8950, 0x425f, 0x96, 0xc6, 0xe4, 0xeb, 0xc5, 0x46, 0xf2, 0x79);
		
		/// <summary>
		/// DomainRole Supertype
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType.Supertype
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType/Supertype.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType/Supertype.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SubtypesCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType/Supertype.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c19b7670-8950-425f-96c6-e4ebc546f279")]
		public virtual EntityType Supertype
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityType)DslModeling::DomainRoleInfo.GetRolePlayer(this, SupertypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SupertypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Supertype of a EntityType
		/// <summary>
		/// Gets Supertype.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityType GetSupertype(EntityType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubtypeDomainRoleId) as EntityType;
		}
		
		/// <summary>
		/// Sets Supertype.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSupertype(EntityType element, EntityType newSupertype)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubtypeDomainRoleId, newSupertype);
		}
		#endregion
		#region Subtype link accessor
		/// <summary>
		/// Get the EntityTypeIsSubtypeOfEntityType link to a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType GetLinkToSupertype (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType subtypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType>(subtypeInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType.SubtypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Subtype not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Supertype link accessor
		/// <summary>
		/// Get the list of EntityTypeIsSubtypeOfEntityType links to a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType> GetLinksToSubtypesCollection ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType supertypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType>(supertypeInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType.SupertypeDomainRoleId);
		}
		#endregion
		#region EntityTypeIsSubtypeOfEntityType instance accessors
		
		/// <summary>
		/// Get any EntityTypeIsSubtypeOfEntityType links between a given EntityType and a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType> GetLinks( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType.SubtypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType link in links )
			{
				if ( target.Equals(link.Supertype) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeIsSubtypeOfEntityType link between a given EntityTypeand a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType GetLink( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType.SubtypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypeIsSubtypeOfEntityType link in links )
			{
				if ( target.Equals(link.Supertype) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker
{
	/// <summary>
	/// DomainRelationship EntityTypePlaysRole
	/// Description for
	/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a7c02288-3e60-4aa5-a509-4f900d42ce46")]
	public partial class EntityTypePlaysRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypePlaysRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa7c02288, 0x3e60, 0x4aa5, 0xa5, 0x09, 0x4f, 0x90, 0x0d, 0x42, 0xce, 0x46);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypePlaysRole link in the same Partition as the given EntityType
		/// </summary>
		/// <param name="source">EntityType to use as the source of the relationship.</param>
		/// <param name="target">Role to use as the target of the relationship.</param>
		public EntityTypePlaysRole(EntityType source, Role target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypePlaysRole.EntityTypeDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypePlaysRole.RoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypePlaysRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypePlaysRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypePlaysRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypePlaysRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityType domain role code
		
		/// <summary>
		/// EntityType domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeDomainRoleId = new global::System.Guid(0xc88332b5, 0x35eb, 0x40fc, 0x9f, 0xa6, 0xa0, 0xd7, 0x4f, 0x0d, 0x63, 0x37);
		
		/// <summary>
		/// DomainRole EntityType
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole.EntityType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole/EntityType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole/EntityType.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RoleCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole/EntityType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c88332b5-35eb-40fc-9fa6-a0d74f0d6337")]
		public virtual EntityType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityType)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityType of a Role
		/// <summary>
		/// Gets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityType GetEntityType(Role element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleDomainRoleId) as EntityType;
		}
		
		/// <summary>
		/// Sets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntityType(Role element, EntityType newEntityType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleDomainRoleId, newEntityType);
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0xfe8eb808, 0x17fa, 0x4f28, 0xaa, 0x8f, 0x19, 0xa2, 0x40, 0xf9, 0x79, 0x1d);
		
		/// <summary>
		/// DomainRole Role
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole.Role
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole/Role.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole/Role.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole/Role.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fe8eb808-17fa-4f28-aa8f-19a240f9791d")]
		public virtual Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleCollection of a EntityType
		/// <summary>
		/// Gets a list of RoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Role> GetRoleCollection(EntityType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Role>, Role>(element, EntityTypeDomainRoleId);
		}
		#endregion
		#region EntityType link accessor
		/// <summary>
		/// Get the list of EntityTypePlaysRole links to a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole> GetLinksToRoleCollection ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType entityTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole>(entityTypeInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole.EntityTypeDomainRoleId);
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the EntityTypePlaysRole link to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole GetLinkToEntityType (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Role roleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole>(roleInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole.RoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Role not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityTypePlaysRole instance accessors
		
		/// <summary>
		/// Get any EntityTypePlaysRole links between a given EntityType and a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole> GetLinks( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Role target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole.EntityTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypePlaysRole link between a given EntityTypeand a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole GetLink( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Role target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole.EntityTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityTypePlaysRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker
{
	/// <summary>
	/// DomainRelationship RoleHasCardinalityQualifier
	/// Description for
	/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8bd9c7c4-41c6-42d1-b3f6-e124110c9f20")]
	public partial class RoleHasCardinalityQualifier : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleHasCardinalityQualifier domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8bd9c7c4, 0x41c6, 0x42d1, 0xb3, 0xf6, 0xe1, 0x24, 0x11, 0x0c, 0x9f, 0x20);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RoleHasCardinalityQualifier link in the same Partition as the given Role
		/// </summary>
		/// <param name="source">Role to use as the source of the relationship.</param>
		/// <param name="target">CardinalityQualifier to use as the target of the relationship.</param>
		public RoleHasCardinalityQualifier(Role source, CardinalityQualifier target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RoleHasCardinalityQualifier.RoleDomainRoleId, source), new DslModeling::RoleAssignment(RoleHasCardinalityQualifier.CardinalityQualifierDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleHasCardinalityQualifier(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleHasCardinalityQualifier(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleHasCardinalityQualifier(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleHasCardinalityQualifier(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0x44710950, 0x5ba1, 0x492d, 0x82, 0x6d, 0x6d, 0x59, 0xfb, 0x65, 0x9e, 0x56);
		
		/// <summary>
		/// DomainRole Role
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier.Role
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier/Role.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier/Role.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CardinalityQualifier", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier/Role.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("44710950-5ba1-492d-826d-6d59fb659e56")]
		public virtual Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Role of a CardinalityQualifier
		/// <summary>
		/// Gets Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Role GetRole(CardinalityQualifier element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CardinalityQualifierDomainRoleId) as Role;
		}
		
		/// <summary>
		/// Sets Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRole(CardinalityQualifier element, Role newRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CardinalityQualifierDomainRoleId, newRole);
		}
		#endregion
		#region CardinalityQualifier domain role code
		
		/// <summary>
		/// CardinalityQualifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid CardinalityQualifierDomainRoleId = new global::System.Guid(0xc910c3d7, 0x0e8e, 0x4657, 0xbb, 0x3b, 0x56, 0xb3, 0xf8, 0x4f, 0xf7, 0xd8);
		
		/// <summary>
		/// DomainRole CardinalityQualifier
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier.CardinalityQualifier
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier/CardinalityQualifier.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier/CardinalityQualifier.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Role", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier/CardinalityQualifier.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c910c3d7-0e8e-4657-bb3b-56b3f84ff7d8")]
		public virtual CardinalityQualifier CardinalityQualifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CardinalityQualifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, CardinalityQualifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CardinalityQualifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CardinalityQualifier of a Role
		/// <summary>
		/// Gets CardinalityQualifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CardinalityQualifier GetCardinalityQualifier(Role element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleDomainRoleId) as CardinalityQualifier;
		}
		
		/// <summary>
		/// Sets CardinalityQualifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCardinalityQualifier(Role element, CardinalityQualifier newCardinalityQualifier)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleDomainRoleId, newCardinalityQualifier);
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the RoleHasCardinalityQualifier link to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier GetLinkToCardinalityQualifier (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Role roleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier>(roleInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier.RoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Role not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CardinalityQualifier link accessor
		/// <summary>
		/// Get the RoleHasCardinalityQualifier link to a CardinalityQualifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier GetLinkToRole (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.CardinalityQualifier cardinalityQualifierInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier>(cardinalityQualifierInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier.CardinalityQualifierDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CardinalityQualifier not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RoleHasCardinalityQualifier instance accessors
		
		/// <summary>
		/// Get any RoleHasCardinalityQualifier links between a given Role and a CardinalityQualifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier> GetLinks( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Role source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.CardinalityQualifier target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier.RoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier link in links )
			{
				if ( target.Equals(link.CardinalityQualifier) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoleHasCardinalityQualifier link between a given Roleand a CardinalityQualifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier GetLink( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Role source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.CardinalityQualifier target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier.RoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.RoleHasCardinalityQualifier link in links )
			{
				if ( target.Equals(link.CardinalityQualifier) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker
{
	/// <summary>
	/// DomainRelationship ExclusiveArcSpansOptionalRole
	/// Description for
	/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0caedc0d-9450-4ce1-b61a-df55df75fbea")]
	public partial class ExclusiveArcSpansOptionalRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExclusiveArcSpansOptionalRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0caedc0d, 0x9450, 0x4ce1, 0xb6, 0x1a, 0xdf, 0x55, 0xdf, 0x75, 0xfb, 0xea);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExclusiveArcSpansOptionalRole link in the same Partition as the given ExclusiveArc
		/// </summary>
		/// <param name="source">ExclusiveArc to use as the source of the relationship.</param>
		/// <param name="target">Role to use as the target of the relationship.</param>
		public ExclusiveArcSpansOptionalRole(ExclusiveArc source, Role target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExclusiveArcSpansOptionalRole.ExclusiveArcDomainRoleId, source), new DslModeling::RoleAssignment(ExclusiveArcSpansOptionalRole.ConstrainedRoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExclusiveArcSpansOptionalRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExclusiveArcSpansOptionalRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExclusiveArcSpansOptionalRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExclusiveArcSpansOptionalRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExclusiveArc domain role code
		
		/// <summary>
		/// ExclusiveArc domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExclusiveArcDomainRoleId = new global::System.Guid(0x5f2b9a73, 0x0d8b, 0x4cb8, 0xbb, 0xe0, 0xe0, 0x93, 0x17, 0x08, 0x6e, 0x20);
		
		/// <summary>
		/// DomainRole ExclusiveArc
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole.ExclusiveArc
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole/ExclusiveArc.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole/ExclusiveArc.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RoleCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole/ExclusiveArc.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("5f2b9a73-0d8b-4cb8-bbe0-e09317086e20")]
		public virtual ExclusiveArc ExclusiveArc
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExclusiveArc)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExclusiveArcDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExclusiveArcDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExclusiveArc of a Role
		/// <summary>
		/// Gets ExclusiveArc.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExclusiveArc GetExclusiveArc(Role element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConstrainedRoleDomainRoleId) as ExclusiveArc;
		}
		
		/// <summary>
		/// Sets ExclusiveArc.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExclusiveArc(Role element, ExclusiveArc newExclusiveArc)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConstrainedRoleDomainRoleId, newExclusiveArc);
		}
		#endregion
		#region ConstrainedRole domain role code
		
		/// <summary>
		/// ConstrainedRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstrainedRoleDomainRoleId = new global::System.Guid(0x7890570b, 0x8556, 0x46bf, 0x9a, 0xd1, 0x7f, 0x11, 0xb6, 0xa1, 0x89, 0x06);
		
		/// <summary>
		/// DomainRole ConstrainedRole
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole.ConstrainedRole
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole/ConstrainedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole/ConstrainedRole.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExclusiveArc", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole/ConstrainedRole.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7890570b-8556-46bf-9ad1-7f11b6a18906")]
		public virtual Role ConstrainedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstrainedRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstrainedRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleCollection of a ExclusiveArc
		/// <summary>
		/// Gets a list of RoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Role> GetRoleCollection(ExclusiveArc element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Role>, Role>(element, ExclusiveArcDomainRoleId);
		}
		#endregion
		#region ExclusiveArc link accessor
		/// <summary>
		/// Get the list of ExclusiveArcSpansOptionalRole links to a ExclusiveArc.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole> GetLinksToRoleCollection ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArc exclusiveArcInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole>(exclusiveArcInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole.ExclusiveArcDomainRoleId);
		}
		#endregion
		#region ConstrainedRole link accessor
		/// <summary>
		/// Get the ExclusiveArcSpansOptionalRole link to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole GetLinkToExclusiveArc (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Role constrainedRoleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole>(constrainedRoleInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole.ConstrainedRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConstrainedRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExclusiveArcSpansOptionalRole instance accessors
		
		/// <summary>
		/// Get any ExclusiveArcSpansOptionalRole links between a given ExclusiveArc and a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole> GetLinks( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArc source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Role target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole.ExclusiveArcDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole link in links )
			{
				if ( target.Equals(link.ConstrainedRole) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExclusiveArcSpansOptionalRole link between a given ExclusiveArcand a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole GetLink( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArc source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Role target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole.ExclusiveArcDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArcSpansOptionalRole link in links )
			{
				if ( target.Equals(link.ConstrainedRole) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker
{
	/// <summary>
	/// DomainRelationship BinaryAssociationContainsRole
	/// Description for
	/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("bcac40ef-38d3-4548-9bbc-804a11e57e08")]
	public partial class BinaryAssociationContainsRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BinaryAssociationContainsRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbcac40ef, 0x38d3, 0x4548, 0x9b, 0xbc, 0x80, 0x4a, 0x11, 0xe5, 0x7e, 0x08);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BinaryAssociationContainsRole link in the same Partition as the given BinaryAssociation
		/// </summary>
		/// <param name="source">BinaryAssociation to use as the source of the relationship.</param>
		/// <param name="target">Role to use as the target of the relationship.</param>
		public BinaryAssociationContainsRole(BinaryAssociation source, Role target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BinaryAssociationContainsRole.BinaryAssociationDomainRoleId, source), new DslModeling::RoleAssignment(BinaryAssociationContainsRole.RoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BinaryAssociationContainsRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BinaryAssociationContainsRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BinaryAssociationContainsRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BinaryAssociationContainsRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BinaryAssociation domain role code
		
		/// <summary>
		/// BinaryAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid BinaryAssociationDomainRoleId = new global::System.Guid(0xc9b8667e, 0xa51d, 0x47dc, 0xa1, 0x95, 0x4f, 0x4d, 0x4c, 0xdc, 0x2b, 0xda);
		
		/// <summary>
		/// DomainRole BinaryAssociation
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole.BinaryAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole/BinaryAssociation.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole/BinaryAssociation.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RoleCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole/BinaryAssociation.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c9b8667e-a51d-47dc-a195-4f4d4cdc2bda")]
		public virtual BinaryAssociation BinaryAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BinaryAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, BinaryAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BinaryAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BinaryAssociation of a Role
		/// <summary>
		/// Gets BinaryAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BinaryAssociation GetBinaryAssociation(Role element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleDomainRoleId) as BinaryAssociation;
		}
		
		/// <summary>
		/// Sets BinaryAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBinaryAssociation(Role element, BinaryAssociation newBinaryAssociation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleDomainRoleId, newBinaryAssociation);
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0xa70f9695, 0x2f99, 0x4483, 0x9a, 0xc7, 0x93, 0x14, 0xce, 0x08, 0xd1, 0x4b);
		
		/// <summary>
		/// DomainRole Role
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole.Role
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole/Role.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole/Role.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BinaryAssociation", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole/Role.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a70f9695-2f99-4483-9ac7-9314ce08d14b")]
		public virtual Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleCollection of a BinaryAssociation
		/// <summary>
		/// Gets a list of RoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Role> GetRoleCollection(BinaryAssociation element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Role>, Role>(element, BinaryAssociationDomainRoleId);
		}
		#endregion
		#region BinaryAssociation link accessor
		/// <summary>
		/// Get the list of BinaryAssociationContainsRole links to a BinaryAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole> GetLinksToRoleCollection ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation binaryAssociationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole>(binaryAssociationInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole.BinaryAssociationDomainRoleId);
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the BinaryAssociationContainsRole link to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole GetLinkToBinaryAssociation (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Role roleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole>(roleInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole.RoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Role not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BinaryAssociationContainsRole instance accessors
		
		/// <summary>
		/// Get any BinaryAssociationContainsRole links between a given BinaryAssociation and a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole> GetLinks( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Role target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole.BinaryAssociationDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BinaryAssociationContainsRole link between a given BinaryAssociationand a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole GetLink( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Role target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole.BinaryAssociationDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociationContainsRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker
{
	/// <summary>
	/// DomainRelationship BarkerErModelContainsEntityType
	/// Description for
	/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("2ccb5738-115c-4470-bdbb-da4280acd994")]
	public partial class BarkerErModelContainsEntityType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BarkerErModelContainsEntityType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2ccb5738, 0x115c, 0x4470, 0xbd, 0xbb, 0xda, 0x42, 0x80, 0xac, 0xd9, 0x94);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BarkerErModelContainsEntityType link in the same Partition as the given BarkerErModel
		/// </summary>
		/// <param name="source">BarkerErModel to use as the source of the relationship.</param>
		/// <param name="target">EntityType to use as the target of the relationship.</param>
		public BarkerErModelContainsEntityType(BarkerErModel source, EntityType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BarkerErModelContainsEntityType.BarkerErModelDomainRoleId, source), new DslModeling::RoleAssignment(BarkerErModelContainsEntityType.EntityTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BarkerErModelContainsEntityType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BarkerErModelContainsEntityType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BarkerErModelContainsEntityType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BarkerErModelContainsEntityType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BarkerErModel domain role code
		
		/// <summary>
		/// BarkerErModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid BarkerErModelDomainRoleId = new global::System.Guid(0xb9aa4a9f, 0x0414, 0x44f1, 0x84, 0xa7, 0x80, 0xe9, 0xd6, 0x98, 0x4a, 0x12);
		
		/// <summary>
		/// DomainRole BarkerErModel
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType.BarkerErModel
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType/BarkerErModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType/BarkerErModel.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EntityTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType/BarkerErModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b9aa4a9f-0414-44f1-84a7-80e9d6984a12")]
		public virtual BarkerErModel BarkerErModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BarkerErModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, BarkerErModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BarkerErModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BarkerErModel of a EntityType
		/// <summary>
		/// Gets BarkerErModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BarkerErModel GetBarkerErModel(EntityType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityTypeDomainRoleId) as BarkerErModel;
		}
		
		/// <summary>
		/// Sets BarkerErModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBarkerErModel(EntityType element, BarkerErModel newBarkerErModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityTypeDomainRoleId, newBarkerErModel);
		}
		#endregion
		#region EntityType domain role code
		
		/// <summary>
		/// EntityType domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeDomainRoleId = new global::System.Guid(0x8ea97980, 0xb6e3, 0x45a5, 0x84, 0x47, 0x6c, 0xee, 0xbf, 0x5d, 0x62, 0xde);
		
		/// <summary>
		/// DomainRole EntityType
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType.EntityType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType/EntityType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType/EntityType.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BarkerErModel", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType/EntityType.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8ea97980-b6e3-45a5-8447-6ceebf5d62de")]
		public virtual EntityType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityType)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityTypeCollection of a BarkerErModel
		/// <summary>
		/// Gets a list of EntityTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityType> GetEntityTypeCollection(BarkerErModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityType>, EntityType>(element, BarkerErModelDomainRoleId);
		}
		#endregion
		#region BarkerErModel link accessor
		/// <summary>
		/// Get the list of BarkerErModelContainsEntityType links to a BarkerErModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType> GetLinksToEntityTypeCollection ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel barkerErModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType>(barkerErModelInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType.BarkerErModelDomainRoleId);
		}
		#endregion
		#region EntityType link accessor
		/// <summary>
		/// Get the BarkerErModelContainsEntityType link to a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType GetLinkToBarkerErModel (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType entityTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType>(entityTypeInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType.EntityTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EntityType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BarkerErModelContainsEntityType instance accessors
		
		/// <summary>
		/// Get any BarkerErModelContainsEntityType links between a given BarkerErModel and a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType> GetLinks( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType.BarkerErModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType link in links )
			{
				if ( target.Equals(link.EntityType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BarkerErModelContainsEntityType link between a given BarkerErModeland a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType GetLink( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType.BarkerErModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsEntityType link in links )
			{
				if ( target.Equals(link.EntityType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker
{
	/// <summary>
	/// DomainRelationship BarkerErModelContainsBinaryAssociation
	/// Description for
	/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("734a6758-65e4-40f9-b4ec-8b99dec314af")]
	public partial class BarkerErModelContainsBinaryAssociation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BarkerErModelContainsBinaryAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x734a6758, 0x65e4, 0x40f9, 0xb4, 0xec, 0x8b, 0x99, 0xde, 0xc3, 0x14, 0xaf);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BarkerErModelContainsBinaryAssociation link in the same Partition as the given BarkerErModel
		/// </summary>
		/// <param name="source">BarkerErModel to use as the source of the relationship.</param>
		/// <param name="target">BinaryAssociation to use as the target of the relationship.</param>
		public BarkerErModelContainsBinaryAssociation(BarkerErModel source, BinaryAssociation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BarkerErModelContainsBinaryAssociation.BarkerErModelDomainRoleId, source), new DslModeling::RoleAssignment(BarkerErModelContainsBinaryAssociation.BinaryAssociationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BarkerErModelContainsBinaryAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BarkerErModelContainsBinaryAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BarkerErModelContainsBinaryAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BarkerErModelContainsBinaryAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BarkerErModel domain role code
		
		/// <summary>
		/// BarkerErModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid BarkerErModelDomainRoleId = new global::System.Guid(0x400580d3, 0xeb5b, 0x4230, 0xbd, 0x4f, 0xe6, 0x9c, 0x33, 0xc7, 0x27, 0x51);
		
		/// <summary>
		/// DomainRole BarkerErModel
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation.BarkerErModel
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation/BarkerErModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation/BarkerErModel.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "BinaryAssociationCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation/BarkerErModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("400580d3-eb5b-4230-bd4f-e69c33c72751")]
		public virtual BarkerErModel BarkerErModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BarkerErModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, BarkerErModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BarkerErModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BarkerErModel of a BinaryAssociation
		/// <summary>
		/// Gets BarkerErModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BarkerErModel GetBarkerErModel(BinaryAssociation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BinaryAssociationDomainRoleId) as BarkerErModel;
		}
		
		/// <summary>
		/// Sets BarkerErModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBarkerErModel(BinaryAssociation element, BarkerErModel newBarkerErModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BinaryAssociationDomainRoleId, newBarkerErModel);
		}
		#endregion
		#region BinaryAssociation domain role code
		
		/// <summary>
		/// BinaryAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid BinaryAssociationDomainRoleId = new global::System.Guid(0x7bd4b726, 0x1526, 0x47ee, 0x9e, 0x4c, 0xa8, 0x87, 0xa5, 0x2a, 0x7e, 0x27);
		
		/// <summary>
		/// DomainRole BinaryAssociation
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation.BinaryAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation/BinaryAssociation.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation/BinaryAssociation.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BarkerErModel", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation/BinaryAssociation.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7bd4b726-1526-47ee-9e4c-a887a52a7e27")]
		public virtual BinaryAssociation BinaryAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BinaryAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, BinaryAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BinaryAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BinaryAssociationCollection of a BarkerErModel
		/// <summary>
		/// Gets a list of BinaryAssociationCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<BinaryAssociation> GetBinaryAssociationCollection(BarkerErModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<BinaryAssociation>, BinaryAssociation>(element, BarkerErModelDomainRoleId);
		}
		#endregion
		#region BarkerErModel link accessor
		/// <summary>
		/// Get the list of BarkerErModelContainsBinaryAssociation links to a BarkerErModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation> GetLinksToBinaryAssociationCollection ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel barkerErModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation>(barkerErModelInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation.BarkerErModelDomainRoleId);
		}
		#endregion
		#region BinaryAssociation link accessor
		/// <summary>
		/// Get the BarkerErModelContainsBinaryAssociation link to a BinaryAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation GetLinkToBarkerErModel (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation binaryAssociationInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation>(binaryAssociationInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation.BinaryAssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of BinaryAssociation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BarkerErModelContainsBinaryAssociation instance accessors
		
		/// <summary>
		/// Get any BarkerErModelContainsBinaryAssociation links between a given BarkerErModel and a BinaryAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation> GetLinks( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation.BarkerErModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation link in links )
			{
				if ( target.Equals(link.BinaryAssociation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BarkerErModelContainsBinaryAssociation link between a given BarkerErModeland a BinaryAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation GetLink( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation.BarkerErModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsBinaryAssociation link in links )
			{
				if ( target.Equals(link.BinaryAssociation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker
{
	/// <summary>
	/// DomainRelationship BarkerErModelContainsExclusiveArc
	/// Description for
	/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b3ec67e1-4e16-47bd-a93a-f798f1765292")]
	public partial class BarkerErModelContainsExclusiveArc : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BarkerErModelContainsExclusiveArc domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb3ec67e1, 0x4e16, 0x47bd, 0xa9, 0x3a, 0xf7, 0x98, 0xf1, 0x76, 0x52, 0x92);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BarkerErModelContainsExclusiveArc link in the same Partition as the given BarkerErModel
		/// </summary>
		/// <param name="source">BarkerErModel to use as the source of the relationship.</param>
		/// <param name="target">ExclusiveArc to use as the target of the relationship.</param>
		public BarkerErModelContainsExclusiveArc(BarkerErModel source, ExclusiveArc target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BarkerErModelContainsExclusiveArc.BarkerErModelDomainRoleId, source), new DslModeling::RoleAssignment(BarkerErModelContainsExclusiveArc.ExclusiveArcDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BarkerErModelContainsExclusiveArc(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BarkerErModelContainsExclusiveArc(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BarkerErModelContainsExclusiveArc(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BarkerErModelContainsExclusiveArc(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BarkerErModel domain role code
		
		/// <summary>
		/// BarkerErModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid BarkerErModelDomainRoleId = new global::System.Guid(0xacf7dab7, 0x7550, 0x4b64, 0x81, 0xe3, 0x2f, 0x94, 0xf1, 0xbf, 0xaf, 0x25);
		
		/// <summary>
		/// DomainRole BarkerErModel
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc.BarkerErModel
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc/BarkerErModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc/BarkerErModel.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExclusiveArcCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc/BarkerErModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("acf7dab7-7550-4b64-81e3-2f94f1bfaf25")]
		public virtual BarkerErModel BarkerErModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BarkerErModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, BarkerErModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BarkerErModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BarkerErModel of a ExclusiveArc
		/// <summary>
		/// Gets BarkerErModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BarkerErModel GetBarkerErModel(ExclusiveArc element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ExclusiveArcDomainRoleId) as BarkerErModel;
		}
		
		/// <summary>
		/// Sets BarkerErModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBarkerErModel(ExclusiveArc element, BarkerErModel newBarkerErModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ExclusiveArcDomainRoleId, newBarkerErModel);
		}
		#endregion
		#region ExclusiveArc domain role code
		
		/// <summary>
		/// ExclusiveArc domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExclusiveArcDomainRoleId = new global::System.Guid(0x153a27e8, 0xb3de, 0x4c63, 0xb7, 0xb1, 0x91, 0x8c, 0x09, 0xa9, 0x56, 0x45);
		
		/// <summary>
		/// DomainRole ExclusiveArc
		/// Description for
		/// ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc.ExclusiveArc
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc/ExclusiveArc.DisplayName", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc/ExclusiveArc.Description", typeof(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerDomainModel), "ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BarkerErModel", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc/ExclusiveArc.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("153a27e8-b3de-4c63-b7b1-918c09a95645")]
		public virtual ExclusiveArc ExclusiveArc
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExclusiveArc)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExclusiveArcDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExclusiveArcDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExclusiveArcCollection of a BarkerErModel
		/// <summary>
		/// Gets a list of ExclusiveArcCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ExclusiveArc> GetExclusiveArcCollection(BarkerErModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ExclusiveArc>, ExclusiveArc>(element, BarkerErModelDomainRoleId);
		}
		#endregion
		#region BarkerErModel link accessor
		/// <summary>
		/// Get the list of BarkerErModelContainsExclusiveArc links to a BarkerErModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc> GetLinksToExclusiveArcCollection ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel barkerErModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc>(barkerErModelInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc.BarkerErModelDomainRoleId);
		}
		#endregion
		#region ExclusiveArc link accessor
		/// <summary>
		/// Get the BarkerErModelContainsExclusiveArc link to a ExclusiveArc.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc GetLinkToBarkerErModel (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArc exclusiveArcInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc>(exclusiveArcInstance, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc.ExclusiveArcDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ExclusiveArc not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BarkerErModelContainsExclusiveArc instance accessors
		
		/// <summary>
		/// Get any BarkerErModelContainsExclusiveArc links between a given BarkerErModel and a ExclusiveArc.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc> GetLinks( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArc target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc.BarkerErModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc link in links )
			{
				if ( target.Equals(link.ExclusiveArc) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BarkerErModelContainsExclusiveArc link between a given BarkerErModeland a ExclusiveArc.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc GetLink( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.ExclusiveArc target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc>(source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc.BarkerErModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModelContainsExclusiveArc link in links )
			{
				if ( target.Equals(link.ExclusiveArc) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
