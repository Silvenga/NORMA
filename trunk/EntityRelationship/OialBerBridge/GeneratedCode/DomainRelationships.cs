#region Common Public License Copyright Notice
/**************************************************************************\
* Natural Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge
{
	/// <summary>
	/// DomainRelationship BarkerErModelIsForAbstractionModel
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("42c5224a-ea1f-4c06-9516-d44b4fdbc30d")]
	public partial class BarkerErModelIsForAbstractionModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BarkerErModelIsForAbstractionModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x42c5224a, 0xea1f, 0x4c06, 0x95, 0x16, 0xd4, 0x4b, 0x4f, 0xdb, 0xc3, 0x0d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BarkerErModelIsForAbstractionModel link in the same Partition as the given BarkerErModel
		/// </summary>
		/// <param name="source">BarkerErModel to use as the source of the relationship.</param>
		/// <param name="target">AbstractionModel to use as the target of the relationship.</param>
		public BarkerErModelIsForAbstractionModel(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BarkerErModelIsForAbstractionModel.BarkerErModelDomainRoleId, source), new DslModeling::RoleAssignment(BarkerErModelIsForAbstractionModel.AbstractionModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BarkerErModelIsForAbstractionModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BarkerErModelIsForAbstractionModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BarkerErModelIsForAbstractionModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BarkerErModelIsForAbstractionModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BarkerErModel domain role code
		
		/// <summary>
		/// BarkerErModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid BarkerErModelDomainRoleId = new global::System.Guid(0xd2d2c257, 0xdc11, 0x4eb2, 0x86, 0xa9, 0xa1, 0xcc, 0x31, 0xcd, 0x55, 0x1d);
		
		/// <summary>
		/// DomainRole BarkerErModel
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel/BarkerErModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel/BarkerErModel.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AbstractionModel", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel/BarkerErModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d2d2c257-dc11-4eb2-86a9-a1cc31cd551d")]
		public virtual global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel BarkerErModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, BarkerErModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BarkerErModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BarkerErModel of a AbstractionModel
		/// <summary>
		/// Gets BarkerErModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel GetBarkerErModel(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AbstractionModelDomainRoleId) as global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel;
		}
		
		/// <summary>
		/// Sets BarkerErModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBarkerErModel(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel element, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel newBarkerErModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AbstractionModelDomainRoleId, newBarkerErModel);
		}
		#endregion
		#region AbstractionModel domain role code
		
		/// <summary>
		/// AbstractionModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbstractionModelDomainRoleId = new global::System.Guid(0xf861386b, 0x1881, 0x4ac7, 0x99, 0x88, 0xf5, 0xf5, 0xef, 0xc2, 0x77, 0x21);
		
		/// <summary>
		/// DomainRole AbstractionModel
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel/AbstractionModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel/AbstractionModel.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BarkerErModel", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel/AbstractionModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f861386b-1881-4ac7-9988-f5f5efc27721")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel AbstractionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbstractionModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbstractionModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AbstractionModel of a BarkerErModel
		/// <summary>
		/// Gets AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel GetAbstractionModel(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BarkerErModelDomainRoleId) as global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel;
		}
		
		/// <summary>
		/// Sets AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAbstractionModel(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel element, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel newAbstractionModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BarkerErModelDomainRoleId, newAbstractionModel);
		}
		#endregion
		#region BarkerErModel link accessor
		/// <summary>
		/// Get the BarkerErModelIsForAbstractionModel link to a BarkerErModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel GetLinkToAbstractionModel (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel barkerErModelInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel>(barkerErModelInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel.BarkerErModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of BarkerErModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AbstractionModel link accessor
		/// <summary>
		/// Get the BarkerErModelIsForAbstractionModel link to a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel GetLinkToBarkerErModel (global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel abstractionModelInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel>(abstractionModelInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel.AbstractionModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AbstractionModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BarkerErModelIsForAbstractionModel instance accessors
		
		/// <summary>
		/// Get any BarkerErModelIsForAbstractionModel links between a given BarkerErModel and a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel> GetLinks( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel.BarkerErModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel link in links )
			{
				if ( target.Equals(link.AbstractionModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BarkerErModelIsForAbstractionModel link between a given BarkerErModeland a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel GetLink( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel.BarkerErModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerErModelIsForAbstractionModel link in links )
			{
				if ( target.Equals(link.AbstractionModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge
{
	/// <summary>
	/// DomainRelationship EntityTypeIsPrimarilyForConceptType
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("281345a7-81ea-4bf8-a3c6-77607c83ea9b")]
	public partial class EntityTypeIsPrimarilyForConceptType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeIsPrimarilyForConceptType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x281345a7, 0x81ea, 0x4bf8, 0xa3, 0xc6, 0x77, 0x60, 0x7c, 0x83, 0xea, 0x9b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeIsPrimarilyForConceptType link in the same Partition as the given EntityType
		/// </summary>
		/// <param name="source">EntityType to use as the source of the relationship.</param>
		/// <param name="target">ConceptType to use as the target of the relationship.</param>
		public EntityTypeIsPrimarilyForConceptType(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeIsPrimarilyForConceptType.EntityTypeDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeIsPrimarilyForConceptType.ConceptTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeIsPrimarilyForConceptType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeIsPrimarilyForConceptType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeIsPrimarilyForConceptType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeIsPrimarilyForConceptType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityType domain role code
		
		/// <summary>
		/// EntityType domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeDomainRoleId = new global::System.Guid(0xa848a9db, 0x04de, 0x4607, 0x92, 0x05, 0x35, 0xc2, 0xb8, 0xa4, 0xac, 0x4e);
		
		/// <summary>
		/// DomainRole EntityType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType/EntityType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType/EntityType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConceptType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType/EntityType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a848a9db-04de-4607-9205-35c2b8a4ac4e")]
		public virtual global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityType of a ConceptType
		/// <summary>
		/// Gets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType GetEntityType(global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConceptTypeDomainRoleId) as global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType;
		}
		
		/// <summary>
		/// Sets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntityType(global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType element, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType newEntityType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConceptTypeDomainRoleId, newEntityType);
		}
		#endregion
		#region ConceptType domain role code
		
		/// <summary>
		/// ConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeDomainRoleId = new global::System.Guid(0x79fe9518, 0x573b, 0x4d6e, 0xb8, 0x7d, 0xe8, 0x29, 0x07, 0x6a, 0x0d, 0x96);
		
		/// <summary>
		/// DomainRole ConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType/ConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType/ConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType/ConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("79fe9518-573b-4d6e-b87d-e829076a0d96")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptType of a EntityType
		/// <summary>
		/// Gets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType GetConceptType(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityTypeDomainRoleId) as global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType;
		}
		
		/// <summary>
		/// Sets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConceptType(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType element, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType newConceptType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityTypeDomainRoleId, newConceptType);
		}
		#endregion
		#region EntityType link accessor
		/// <summary>
		/// Get the EntityTypeIsPrimarilyForConceptType link to a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType GetLinkToConceptType (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType entityTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType>(entityTypeInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType.EntityTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EntityType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptType link accessor
		/// <summary>
		/// Get the EntityTypeIsPrimarilyForConceptType link to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType GetLinkToEntityType (global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType conceptTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType>(conceptTypeInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType.ConceptTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConceptType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityTypeIsPrimarilyForConceptType instance accessors
		
		/// <summary>
		/// Get any EntityTypeIsPrimarilyForConceptType links between a given EntityType and a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType> GetLinks( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType.EntityTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeIsPrimarilyForConceptType link between a given EntityTypeand a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType GetLink( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.EntityType source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType.EntityTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.EntityTypeIsPrimarilyForConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge
{
	/// <summary>
	/// DomainRelationship GenerationSettingTargetsBarkerERModel
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e44e5810-1166-4bb9-a6ab-4d8176dd3d46")]
	public partial class GenerationSettingTargetsBarkerERModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GenerationSettingTargetsBarkerERModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe44e5810, 0x1166, 0x4bb9, 0xa6, 0xab, 0x4d, 0x81, 0x76, 0xdd, 0x3d, 0x46);
	
				
		/// <summary>
		/// Constructor
		/// Creates a GenerationSettingTargetsBarkerERModel link in the same Partition as the given BarkerERModelGenerationSetting
		/// </summary>
		/// <param name="source">BarkerERModelGenerationSetting to use as the source of the relationship.</param>
		/// <param name="target">BarkerErModel to use as the target of the relationship.</param>
		public GenerationSettingTargetsBarkerERModel(BarkerERModelGenerationSetting source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(GenerationSettingTargetsBarkerERModel.GenerationSettingDomainRoleId, source), new DslModeling::RoleAssignment(GenerationSettingTargetsBarkerERModel.GeneratedBarkerERModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GenerationSettingTargetsBarkerERModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GenerationSettingTargetsBarkerERModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GenerationSettingTargetsBarkerERModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GenerationSettingTargetsBarkerERModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region GenerationSetting domain role code
		
		/// <summary>
		/// GenerationSetting domain role Id.
		/// </summary>
		public static readonly global::System.Guid GenerationSettingDomainRoleId = new global::System.Guid(0x0a1deae3, 0xde66, 0x4d36, 0x95, 0x97, 0xc9, 0xb0, 0x95, 0xe8, 0xa5, 0xc4);
		
		/// <summary>
		/// DomainRole GenerationSetting
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel.GenerationSetting
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel/GenerationSetting.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel/GenerationSetting.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "GeneratedBarkerERModel", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel/GenerationSetting.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0a1deae3-de66-4d36-9597-c9b095e8a5c4")]
		public virtual BarkerERModelGenerationSetting GenerationSetting
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BarkerERModelGenerationSetting)DslModeling::DomainRoleInfo.GetRolePlayer(this, GenerationSettingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GenerationSettingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GenerationSetting of a BarkerErModel
		/// <summary>
		/// Gets GenerationSetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BarkerERModelGenerationSetting GetGenerationSetting(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GeneratedBarkerERModelDomainRoleId) as BarkerERModelGenerationSetting;
		}
		
		/// <summary>
		/// Sets GenerationSetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGenerationSetting(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel element, BarkerERModelGenerationSetting newGenerationSetting)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GeneratedBarkerERModelDomainRoleId, newGenerationSetting);
		}
		#endregion
		#region GeneratedBarkerERModel domain role code
		
		/// <summary>
		/// GeneratedBarkerERModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid GeneratedBarkerERModelDomainRoleId = new global::System.Guid(0xb993b0d6, 0xd3ae, 0x4a31, 0x90, 0x94, 0xa8, 0x69, 0x6a, 0x22, 0x97, 0xec);
		
		/// <summary>
		/// DomainRole GeneratedBarkerERModel
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel.GeneratedBarkerERModel
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel/GeneratedBarkerERModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel/GeneratedBarkerERModel.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "GenerationSetting", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel/GeneratedBarkerERModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b993b0d6-d3ae-4a31-9094-a8696a2297ec")]
		public virtual global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel GeneratedBarkerERModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, GeneratedBarkerERModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GeneratedBarkerERModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GeneratedBarkerERModel of a BarkerERModelGenerationSetting
		/// <summary>
		/// Gets GeneratedBarkerERModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel GetGeneratedBarkerERModel(BarkerERModelGenerationSetting element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GenerationSettingDomainRoleId) as global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel;
		}
		
		/// <summary>
		/// Sets GeneratedBarkerERModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGeneratedBarkerERModel(BarkerERModelGenerationSetting element, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel newGeneratedBarkerERModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GenerationSettingDomainRoleId, newGeneratedBarkerERModel);
		}
		#endregion
		#region GenerationSetting link accessor
		/// <summary>
		/// Get the GenerationSettingTargetsBarkerERModel link to a BarkerERModelGenerationSetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel GetLinkToGeneratedBarkerERModel (global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerERModelGenerationSetting generationSettingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel>(generationSettingInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel.GenerationSettingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GenerationSetting not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region GeneratedBarkerERModel link accessor
		/// <summary>
		/// Get the GenerationSettingTargetsBarkerERModel link to a BarkerErModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel GetLinkToGenerationSetting (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel generatedBarkerERModelInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel>(generatedBarkerERModelInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel.GeneratedBarkerERModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GeneratedBarkerERModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region GenerationSettingTargetsBarkerERModel instance accessors
		
		/// <summary>
		/// Get any GenerationSettingTargetsBarkerERModel links between a given BarkerERModelGenerationSetting and a BarkerErModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerERModelGenerationSetting source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel.GenerationSettingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel link in links )
			{
				if ( target.Equals(link.GeneratedBarkerERModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GenerationSettingTargetsBarkerERModel link between a given BarkerERModelGenerationSettingand a BarkerErModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel GetLink( global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BarkerERModelGenerationSetting source, global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BarkerErModel target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel.GenerationSettingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GenerationSettingTargetsBarkerERModel link in links )
			{
				if ( target.Equals(link.GeneratedBarkerERModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge
{
	/// <summary>
	/// DomainRelationship AttributeHasConceptTypeChild
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("e068b80f-d598-4c4c-a6e9-729602a6c564")]
	public partial class AttributeHasConceptTypeChild : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AttributeHasConceptTypeChild domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe068b80f, 0xd598, 0x4c4c, 0xa6, 0xe9, 0x72, 0x96, 0x02, 0xa6, 0xc5, 0x64);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AttributeHasConceptTypeChild link in the same Partition as the given Attribute
		/// </summary>
		/// <param name="source">Attribute to use as the source of the relationship.</param>
		/// <param name="target">ConceptTypeChild to use as the target of the relationship.</param>
		public AttributeHasConceptTypeChild(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Attribute source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AttributeHasConceptTypeChild.AttributeDomainRoleId, source), new DslModeling::RoleAssignment(AttributeHasConceptTypeChild.ConceptTypeChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AttributeHasConceptTypeChild(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AttributeHasConceptTypeChild(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AttributeHasConceptTypeChild(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AttributeHasConceptTypeChild(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0xc18d335d, 0x5b83, 0x4b06, 0xbd, 0x07, 0xfd, 0x04, 0xf9, 0x41, 0xfa, 0x57);
		
		/// <summary>
		/// DomainRole Attribute
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild/Attribute.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild/Attribute.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConceptTypeChildPath", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild/Attribute.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("c18d335d-5b83-4b06-bd07-fd04f941fa57")]
		public virtual global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Attribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Attribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attribute of a ConceptTypeChild
		/// <summary>
		/// Gets a list of Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Attribute> GetAttribute(global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild element)
		{
			return new DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Attribute>(element, ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild domain role code
		
		/// <summary>
		/// ConceptTypeChild domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeChildDomainRoleId = new global::System.Guid(0x31a83bc9, 0x8635, 0x49cf, 0x94, 0x5f, 0x21, 0xe0, 0x1e, 0x54, 0xb2, 0x28);
		
		/// <summary>
		/// DomainRole ConceptTypeChild
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild/ConceptTypeChild.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild/ConceptTypeChild.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Attribute", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild/ConceptTypeChild.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("31a83bc9-8635-49cf-945f-21e01e54b228")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild ConceptTypeChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptTypeChildPath of a Attribute
		/// <summary>
		/// Gets a list of ConceptTypeChildPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild> GetConceptTypeChildPath(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Attribute element)
		{
			return new DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild>(element, AttributeDomainRoleId);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the list of AttributeHasConceptTypeChild links to a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild> GetLinksToConceptTypeChildPath ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Attribute attributeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild>(attributeInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild.AttributeDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild link accessor
		/// <summary>
		/// Get the list of AttributeHasConceptTypeChild links to a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild> GetLinksToAttribute ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild conceptTypeChildInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild>(conceptTypeChildInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild.ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region AttributeHasConceptTypeChild instance accessors
		
		/// <summary>
		/// Get any AttributeHasConceptTypeChild links between a given Attribute and a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild> GetLinks( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.Attribute source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild.AttributeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.AttributeHasConceptTypeChild link in links )
			{
				if ( target.Equals(link.ConceptTypeChild) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge
{
	/// <summary>
	/// DomainRelationship BinaryAssociationHasConceptTypeChild
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("011e06f6-6b28-4212-b57d-9c97403bce0b")]
	public partial class BinaryAssociationHasConceptTypeChild : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BinaryAssociationHasConceptTypeChild domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x011e06f6, 0x6b28, 0x4212, 0xb5, 0x7d, 0x9c, 0x97, 0x40, 0x3b, 0xce, 0x0b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BinaryAssociationHasConceptTypeChild link in the same Partition as the given BinaryAssociation
		/// </summary>
		/// <param name="source">BinaryAssociation to use as the source of the relationship.</param>
		/// <param name="target">ConceptTypeChild to use as the target of the relationship.</param>
		public BinaryAssociationHasConceptTypeChild(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BinaryAssociationHasConceptTypeChild.BinaryAssociationDomainRoleId, source), new DslModeling::RoleAssignment(BinaryAssociationHasConceptTypeChild.ConceptTypeChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BinaryAssociationHasConceptTypeChild(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BinaryAssociationHasConceptTypeChild(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BinaryAssociationHasConceptTypeChild(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BinaryAssociationHasConceptTypeChild(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BinaryAssociation domain role code
		
		/// <summary>
		/// BinaryAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid BinaryAssociationDomainRoleId = new global::System.Guid(0xec36d9a6, 0x531c, 0x4f56, 0x86, 0x79, 0x97, 0xbd, 0x23, 0x07, 0x7f, 0x84);
		
		/// <summary>
		/// DomainRole BinaryAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild/BinaryAssociation.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild/BinaryAssociation.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConceptTypeChildPath", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild/BinaryAssociation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("ec36d9a6-531c-4f56-8679-97bd23077f84")]
		public virtual global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation BinaryAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, BinaryAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BinaryAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BinaryAssociation of a ConceptTypeChild
		/// <summary>
		/// Gets a list of BinaryAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation> GetBinaryAssociation(global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild element)
		{
			return new DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation>(element, ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild domain role code
		
		/// <summary>
		/// ConceptTypeChild domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeChildDomainRoleId = new global::System.Guid(0x3bfd33ce, 0xbd21, 0x4773, 0x86, 0x3e, 0x4c, 0x3b, 0xd8, 0x22, 0x79, 0xc4);
		
		/// <summary>
		/// DomainRole ConceptTypeChild
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild/ConceptTypeChild.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild/ConceptTypeChild.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BinaryAssociation", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild/ConceptTypeChild.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("3bfd33ce-bd21-4773-863e-4c3bd82279c4")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild ConceptTypeChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptTypeChildPath of a BinaryAssociation
		/// <summary>
		/// Gets a list of ConceptTypeChildPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild> GetConceptTypeChildPath(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation element)
		{
			return new DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild>(element, BinaryAssociationDomainRoleId);
		}
		#endregion
		#region BinaryAssociation link accessor
		/// <summary>
		/// Get the list of BinaryAssociationHasConceptTypeChild links to a BinaryAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild> GetLinksToConceptTypeChildPath ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation binaryAssociationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild>(binaryAssociationInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild.BinaryAssociationDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild link accessor
		/// <summary>
		/// Get the list of BinaryAssociationHasConceptTypeChild links to a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild> GetLinksToBinaryAssociation ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild conceptTypeChildInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild>(conceptTypeChildInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild.ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region BinaryAssociationHasConceptTypeChild instance accessors
		
		/// <summary>
		/// Get any BinaryAssociationHasConceptTypeChild links between a given BinaryAssociation and a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild> GetLinks( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild.BinaryAssociationDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptTypeChild link in links )
			{
				if ( target.Equals(link.ConceptTypeChild) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge
{
	/// <summary>
	/// DomainRelationship BinaryAssociationHasConceptType
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("e9923cb9-22ef-4866-9e54-3799c8311dae")]
	public partial class BinaryAssociationHasConceptType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BinaryAssociationHasConceptType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe9923cb9, 0x22ef, 0x4866, 0x9e, 0x54, 0x37, 0x99, 0xc8, 0x31, 0x1d, 0xae);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BinaryAssociationHasConceptType link in the same Partition as the given BinaryAssociation
		/// </summary>
		/// <param name="source">BinaryAssociation to use as the source of the relationship.</param>
		/// <param name="target">ConceptType to use as the target of the relationship.</param>
		public BinaryAssociationHasConceptType(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BinaryAssociationHasConceptType.BinaryAssociationDomainRoleId, source), new DslModeling::RoleAssignment(BinaryAssociationHasConceptType.ConceptTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BinaryAssociationHasConceptType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BinaryAssociationHasConceptType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BinaryAssociationHasConceptType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BinaryAssociationHasConceptType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BinaryAssociation domain role code
		
		/// <summary>
		/// BinaryAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid BinaryAssociationDomainRoleId = new global::System.Guid(0xb56f9740, 0xe940, 0x4021, 0x81, 0xd6, 0x3d, 0x49, 0xf6, 0xea, 0x91, 0x1b);
		
		/// <summary>
		/// DomainRole BinaryAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType/BinaryAssociation.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType/BinaryAssociation.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConceptType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType/BinaryAssociation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("b56f9740-e940-4021-81d6-3d49f6ea911b")]
		public virtual global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation BinaryAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, BinaryAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BinaryAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BinaryAssociation of a ConceptType
		/// <summary>
		/// Gets a list of BinaryAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation> GetBinaryAssociation(global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType element)
		{
			return new DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation>(element, ConceptTypeDomainRoleId);
		}
		#endregion
		#region ConceptType domain role code
		
		/// <summary>
		/// ConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeDomainRoleId = new global::System.Guid(0x453529f7, 0x8950, 0x48fd, 0xbc, 0x2a, 0xdc, 0x56, 0xd8, 0xa3, 0x26, 0x72);
		
		/// <summary>
		/// DomainRole ConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType/ConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType/ConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.ORMAbstractionToBarkerERBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BinaryAssociation", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType/ConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("453529f7-8950-48fd-bc2a-dc56d8a32672")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptType of a BinaryAssociation
		/// <summary>
		/// Gets a list of ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType> GetConceptType(global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation element)
		{
			return new DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType>(element, BinaryAssociationDomainRoleId);
		}
		#endregion
		#region BinaryAssociation link accessor
		/// <summary>
		/// Get the list of BinaryAssociationHasConceptType links to a BinaryAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType> GetLinksToConceptType ( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation binaryAssociationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType>(binaryAssociationInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType.BinaryAssociationDomainRoleId);
		}
		#endregion
		#region ConceptType link accessor
		/// <summary>
		/// Get the list of BinaryAssociationHasConceptType links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType> GetLinksToBinaryAssociation ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType conceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType>(conceptTypeInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType.ConceptTypeDomainRoleId);
		}
		#endregion
		#region BinaryAssociationHasConceptType instance accessors
		
		/// <summary>
		/// Get any BinaryAssociationHasConceptType links between a given BinaryAssociation and a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType> GetLinks( global::ORMSolutions.ORMArchitect.EntityRelationshipModels.Barker.BinaryAssociation source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType.BinaryAssociationDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToBarkerERBridge.BinaryAssociationHasConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
