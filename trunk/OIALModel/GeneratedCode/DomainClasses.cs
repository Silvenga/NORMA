#region Common Public License Copyright Notice
/**************************************************************************\
* Neumont Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass OIALNamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.OIALNamedElement.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.OIALNamedElement.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("aa4c1802-dd46-43f6-a580-724cdd7ed5eb")]
	public abstract partial class OIALNamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// OIALNamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaa4c1802, 0xdd46, 0x43f6, 0xa5, 0x80, 0x72, 0x4c, 0xdd, 0x7e, 0xd5, 0xeb);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected OIALNamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xec43ba80, 0x66b1, 0x4f5b, 0x8a, 0xe4, 0xba, 0x49, 0xb9, 0x10, 0x51, 0xe3);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Neumont.Tools.ORM.OIALModel.OIALNamedElement.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.OIALNamedElement/Name.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.OIALNamedElement/Name.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("ec43ba80-66b1-4f5b-8ae4-ba49b91051e3")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the OIALNamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<OIALNamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the OIALNamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the OIALNamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(OIALNamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(OIALNamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass OIALModel
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.OIALModel.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.OIALModel.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8bdc608e-901d-44f5-b6b6-18e5199e9768")]
	public partial class OIALModel : OIALNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// OIALModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8bdc608e, 0x901d, 0x44f5, 0xb6, 0xb6, 0x18, 0xe5, 0x19, 0x9e, 0x97, 0x68);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public OIALModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public OIALModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ORMModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ORMModel.
		/// Description for Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.OIALModel
		/// </summary>
		public virtual global::Neumont.Tools.ORM.ObjectModel.ORMModel ORMModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.OIALModelDomainRoleId) as global::Neumont.Tools.ORM.ObjectModel.ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.OIALModelHasORMModel.OIALModelDomainRoleId, value);
			}
		}
		#endregion
		#region ConceptTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ConceptTypeCollection.
		/// Description for Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConceptType> ConceptTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ConceptType>(this, global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ModelDomainRoleId);
			}
		}
		#endregion
		#region InformationTypeFormatCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of InformationTypeFormatCollection.
		/// Description for Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<InformationTypeFormat> InformationTypeFormatCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<InformationTypeFormat>(this, global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.ModelDomainRoleId);
			}
		}
		#endregion
		#region ChildSequenceConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ChildSequenceConstraintCollection.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.OIALModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ChildSequenceConstraint> ChildSequenceConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ChildSequenceConstraint>(this, global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.OIALModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Neumont.Tools.ORM.OIALModel.ConceptType.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Neumont.Tools.ORM.OIALModel.InformationTypeFormat.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint sourceChildSequenceConstraint1 = sourceElement as global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint;
			if (sourceChildSequenceConstraint1 != null)
			{
				// Create link for path OIALModelHasChildSequenceConstraint.ChildSequenceConstraintCollection
				this.ChildSequenceConstraintCollection.Add(sourceChildSequenceConstraint1);

				return;
			}
				
			global::Neumont.Tools.ORM.OIALModel.ConceptType sourceConceptType2 = sourceElement as global::Neumont.Tools.ORM.OIALModel.ConceptType;
			if (sourceConceptType2 != null)
			{
				// Create link for path OIALModelHasConceptType.ConceptTypeCollection
				this.ConceptTypeCollection.Add(sourceConceptType2);

				return;
			}
				
			global::Neumont.Tools.ORM.OIALModel.InformationTypeFormat sourceInformationTypeFormat3 = sourceElement as global::Neumont.Tools.ORM.OIALModel.InformationTypeFormat;
			if (sourceInformationTypeFormat3 != null)
			{
				// Create link for path OIALHasInformationTypeFormat.InformationTypeFormatCollection
				this.InformationTypeFormatCollection.Add(sourceInformationTypeFormat3);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint sourceChildSequenceConstraint1 = sourceElement as global::Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint;
			if (sourceChildSequenceConstraint1 != null)
			{
				// Delete link for path OIALModelHasChildSequenceConstraint.ChildSequenceConstraintCollection
				
				foreach (DslModeling::ElementLink link in global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.GetLinks((global::Neumont.Tools.ORM.OIALModel.OIALModel)this, sourceChildSequenceConstraint1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.OIALModelDomainRoleId, global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintDomainRoleId);
				}

				return;
			}
				
			global::Neumont.Tools.ORM.OIALModel.ConceptType sourceConceptType2 = sourceElement as global::Neumont.Tools.ORM.OIALModel.ConceptType;
			if (sourceConceptType2 != null)
			{
				// Delete link for path OIALModelHasConceptType.ConceptTypeCollection
				
				foreach (DslModeling::ElementLink link in global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.GetLinks((global::Neumont.Tools.ORM.OIALModel.OIALModel)this, sourceConceptType2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ModelDomainRoleId, global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ConceptTypeDomainRoleId);
				}

				return;
			}
				
			global::Neumont.Tools.ORM.OIALModel.InformationTypeFormat sourceInformationTypeFormat3 = sourceElement as global::Neumont.Tools.ORM.OIALModel.InformationTypeFormat;
			if (sourceInformationTypeFormat3 != null)
			{
				// Delete link for path OIALHasInformationTypeFormat.InformationTypeFormatCollection
				
				foreach (DslModeling::ElementLink link in global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.GetLinks((global::Neumont.Tools.ORM.OIALModel.OIALModel)this, sourceInformationTypeFormat3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.ModelDomainRoleId, global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.InformationTypeFormatDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass ParentableType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ParentableType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ParentableType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5b25ef27-c3e0-4f71-8230-d155d8279926")]
	public partial class ParentableType : OIALNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ParentableType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5b25ef27, 0xc3e0, 0x4f71, 0x82, 0x30, 0xd1, 0x55, 0xd8, 0x27, 0x99, 0x26);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ParentableType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ParentableType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass ConceptType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ConceptType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ac397c05-9e1a-4bed-bfc8-82d3c1ded36d")]
	public partial class ConceptType : ParentableType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConceptType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xac397c05, 0x9e1a, 0x4bed, 0xbf, 0xc8, 0x82, 0xd3, 0xc1, 0xde, 0xd3, 0x6d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConceptType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConceptType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ConceptType
		/// </summary>
		public virtual OIALModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ConceptTypeDomainRoleId) as OIALModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.OIALModelHasConceptType.ConceptTypeDomainRoleId, value);
			}
		}
		#endregion
		#region AbsorbedConceptTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of AbsorbedConceptTypeCollection.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConceptType> AbsorbedConceptTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ConceptType>(this, global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptTypeDomainRoleId);
			}
		}
		#endregion
		#region AbsorbingConceptType opposite domain role accessor
		/// <summary>
		/// Gets or sets AbsorbingConceptType.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptType
		/// </summary>
		public virtual ConceptType AbsorbingConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeDomainRoleId) as ConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeDomainRoleId, value);
			}
		}
		#endregion
		#region InformationTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of InformationTypeCollection.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.ConceptType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<InformationType> InformationTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<InformationType>(this, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.ConceptTypeDomainRoleId);
			}
		}
		#endregion
		#region ReferencedConceptTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ReferencedConceptTypeCollection.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ReferencingConceptType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConceptType> ReferencedConceptTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ConceptType>(this, global::Neumont.Tools.ORM.OIALModel.ConceptTypeRef.ReferencingConceptTypeDomainRoleId);
			}
		}
		#endregion
		#region ObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectType.
		/// Description for Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ConceptType
		/// </summary>
		public virtual global::Neumont.Tools.ORM.ObjectModel.ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ConceptTypeDomainRoleId) as global::Neumont.Tools.ORM.ObjectModel.ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasObjectType.ConceptTypeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass InformationType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.InformationType.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.InformationType.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("08be24c4-c237-4cac-b7f0-04c4f5e27758")]
	public partial class InformationType : ParentableType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InformationType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x08be24c4, 0xc237, 0x4cac, 0xb7, 0xf0, 0x04, 0xc4, 0xf5, 0xe2, 0x77, 0x58);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InformationType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InformationType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ConceptType opposite domain role accessor
		/// <summary>
		/// Gets or sets ConceptType.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.InformationType
		/// </summary>
		public virtual ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.InformationTypeDomainRoleId) as ConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.ConceptTypeHasInformationType.InformationTypeDomainRoleId, value);
			}
		}
		#endregion
		#region InformationTypeFormat opposite domain role accessor
		/// <summary>
		/// Gets or sets InformationTypeFormat.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationType
		/// </summary>
		public virtual InformationTypeFormat InformationTypeFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeDomainRoleId) as InformationTypeFormat;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.InformationTypeHasInformationTypeFormat.InformationTypeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass InformationTypeFormat
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.InformationTypeFormat.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.InformationTypeFormat.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8d5e029e-4a1a-4ab2-a222-5d727c32f3f5")]
	public partial class InformationTypeFormat : OIALNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InformationTypeFormat domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8d5e029e, 0x4a1a, 0x4ab2, 0xa2, 0x22, 0x5d, 0x72, 0x7c, 0x32, 0xf3, 0xf5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InformationTypeFormat(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InformationTypeFormat(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.InformationTypeFormat
		/// </summary>
		public virtual OIALModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.InformationTypeFormatDomainRoleId) as OIALModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.OIALHasInformationTypeFormat.InformationTypeFormatDomainRoleId, value);
			}
		}
		#endregion
		#region ValueType opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueType.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.InformationTypeFormat
		/// </summary>
		public virtual global::Neumont.Tools.ORM.ObjectModel.ObjectType ValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatDomainRoleId) as global::Neumont.Tools.ORM.ObjectModel.ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass ChildSequence
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ChildSequence.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("aefb7b15-f7d4-4d82-a1e2-000526723265")]
	public partial class ChildSequence : OIALNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ChildSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaefb7b15, 0xf7d4, 0x4d82, 0xa1, 0xe2, 0x00, 0x05, 0x26, 0x72, 0x32, 0x65);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ChildSequence(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ChildSequence(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ConceptTypeHasChildCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ConceptTypeHasChildCollection.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ChildSequence
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConceptTypeHasChild> ConceptTypeHasChildCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ConceptTypeHasChild>(this, global::Neumont.Tools.ORM.OIALModel.ChildSequenceHasConceptTypeHasChild.ChildSequenceDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass Constraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.Constraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.Constraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("aa42253e-5ff3-48c7-aa9c-866b6155d99a")]
	public abstract partial class Constraint : OIALNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Constraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaa42253e, 0x5ff3, 0x48c7, 0xaa, 0x9c, 0x86, 0x6b, 0x61, 0x55, 0xd9, 0x9a);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Constraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Modality domain property code
		
		/// <summary>
		/// Modality domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModalityDomainPropertyId = new global::System.Guid(0x5cce8e32, 0x9fb1, 0x487f, 0x92, 0x49, 0x35, 0x75, 0x84, 0xf0, 0x6f, 0x7c);
		
		/// <summary>
		/// Storage for Modality
		/// </summary>
		private global::Neumont.Tools.ORM.ObjectModel.ConstraintModality modalityPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Modality domain property.
		/// Description for Neumont.Tools.ORM.OIALModel.Constraint.Modality
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.Constraint/Modality.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.Constraint/Modality.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5cce8e32-9fb1-487f-9249-357584f06f7c")]
		public global::Neumont.Tools.ORM.ObjectModel.ConstraintModality Modality
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modalityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModalityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Constraint.Modality domain property.
		/// </summary>
		internal sealed partial class ModalityPropertyHandler : DslModeling::DomainPropertyValueHandler<Constraint, global::Neumont.Tools.ORM.ObjectModel.ConstraintModality>
		{
			private ModalityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Constraint.Modality domain property value handler.
			/// </summary>
			public static readonly ModalityPropertyHandler Instance = new ModalityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Constraint.Modality domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModalityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Neumont.Tools.ORM.ObjectModel.ConstraintModality GetValue(Constraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modalityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Constraint element, global::Neumont.Tools.ORM.ObjectModel.ConstraintModality newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Neumont.Tools.ORM.ObjectModel.ConstraintModality oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modalityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass SingleChildConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.SingleChildConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.SingleChildConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("48459459-ba21-451d-b433-53c3ab892719")]
	public abstract partial class SingleChildConstraint : Constraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SingleChildConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x48459459, 0xba21, 0x451d, 0xb4, 0x33, 0x53, 0xc3, 0xab, 0x89, 0x27, 0x19);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected SingleChildConstraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ConceptTypeHasChild opposite domain role accessor
		/// <summary>
		/// Gets or sets ConceptTypeHasChild.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.SingleChildConstraint
		/// </summary>
		public virtual ConceptTypeHasChild ConceptTypeHasChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.SingleChildConstraintDomainRoleId) as ConceptTypeHasChild;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.ChildHasSingleChildConstraint.SingleChildConstraintDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass ChildSequenceConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("35fb67c9-7f1c-475d-be7f-9d55071af0a8")]
	public abstract partial class ChildSequenceConstraint : Constraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ChildSequenceConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x35fb67c9, 0x7f1c, 0x475d, 0xbe, 0x7f, 0x9d, 0x55, 0x07, 0x1a, 0xf0, 0xa8);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ChildSequenceConstraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region OIALModel opposite domain role accessor
		/// <summary>
		/// Gets or sets OIALModel.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraint
		/// </summary>
		public virtual OIALModel OIALModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintDomainRoleId) as OIALModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass SingleChildUniquenessConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d52e7116-46b7-4f80-9071-36f30541cda5")]
	public partial class SingleChildUniquenessConstraint : SingleChildConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SingleChildUniquenessConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd52e7116, 0x46b7, 0x4f80, 0x90, 0x71, 0x36, 0xf3, 0x05, 0x41, 0xcd, 0xa5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SingleChildUniquenessConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SingleChildUniquenessConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsPreferred domain property code
		
		/// <summary>
		/// IsPreferred domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPreferredDomainPropertyId = new global::System.Guid(0x65b13d34, 0xbdd7, 0x4aab, 0xbf, 0x8a, 0xef, 0x9c, 0x0a, 0xf3, 0x36, 0x87);
		
		/// <summary>
		/// Storage for IsPreferred
		/// </summary>
		private global::System.Boolean isPreferredPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsPreferred domain property.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint.IsPreferred
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint/IsPreferred.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.SingleChildUniquenessConstraint/IsPreferred.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("65b13d34-bdd7-4aab-bf8a-ef9c0af33687")]
		public global::System.Boolean IsPreferred
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPreferredPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPreferredPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SingleChildUniquenessConstraint.IsPreferred domain property.
		/// </summary>
		internal sealed partial class IsPreferredPropertyHandler : DslModeling::DomainPropertyValueHandler<SingleChildUniquenessConstraint, global::System.Boolean>
		{
			private IsPreferredPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SingleChildUniquenessConstraint.IsPreferred domain property value handler.
			/// </summary>
			public static readonly IsPreferredPropertyHandler Instance = new IsPreferredPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SingleChildUniquenessConstraint.IsPreferred domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPreferredDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(SingleChildUniquenessConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isPreferredPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SingleChildUniquenessConstraint element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPreferredPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass SingleChildSequenceConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d6bb5ad8-13d9-4fbf-a62c-a8fcd26afd2b")]
	public abstract partial class SingleChildSequenceConstraint : ChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SingleChildSequenceConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd6bb5ad8, 0x13d9, 0x4fbf, 0xa6, 0x2c, 0xa8, 0xfc, 0xd2, 0x6a, 0xfd, 0x2b);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected SingleChildSequenceConstraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ChildSequence opposite domain role accessor
		/// <summary>
		/// Gets or sets ChildSequence.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraint
		/// </summary>
		public virtual MinTwoChildrenChildSequence ChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintDomainRoleId) as MinTwoChildrenChildSequence;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass MultiChildSequenceConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.MultiChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.MultiChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c110669a-73e3-457d-a99e-7c6a1322c482")]
	public abstract partial class MultiChildSequenceConstraint : ChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MultiChildSequenceConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc110669a, 0x73e3, 0x457d, 0xa9, 0x9e, 0x7c, 0x6a, 0x13, 0x22, 0xc4, 0x82);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected MultiChildSequenceConstraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass SingleChildFrequencyConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.SingleChildFrequencyConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.SingleChildFrequencyConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("469ca5b0-3512-4413-819b-56c16a82bd05")]
	public partial class SingleChildFrequencyConstraint : SingleChildConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SingleChildFrequencyConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x469ca5b0, 0x3512, 0x4413, 0x81, 0x9b, 0x56, 0xc1, 0x6a, 0x82, 0xbd, 0x05);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SingleChildFrequencyConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SingleChildFrequencyConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass ValueConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ValueConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ValueConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7615a579-c490-43d8-b50f-3a5d5e5530c5")]
	public partial class ValueConstraint : SingleChildConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ValueConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7615a579, 0xc490, 0x43d8, 0xb5, 0x0f, 0x3a, 0x5d, 0x5e, 0x55, 0x30, 0xc5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass ChildSequenceFrequencyConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ChildSequenceFrequencyConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ChildSequenceFrequencyConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7cf44eac-a8f9-4e67-98fd-537988b59ba0")]
	public partial class ChildSequenceFrequencyConstraint : SingleChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ChildSequenceFrequencyConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7cf44eac, 0xa8f9, 0x4e67, 0x98, 0xfd, 0x53, 0x79, 0x88, 0xb5, 0x9b, 0xa0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ChildSequenceFrequencyConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ChildSequenceFrequencyConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass RingConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.RingConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.RingConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("96301ec3-a829-4bb8-a5bb-705801778612")]
	public partial class RingConstraint : SingleChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RingConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x96301ec3, 0xa829, 0x4bb8, 0xa5, 0xbb, 0x70, 0x58, 0x01, 0x77, 0x86, 0x12);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RingConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RingConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass DisjunctiveMandatoryConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.DisjunctiveMandatoryConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.DisjunctiveMandatoryConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("37be6a6c-12c5-446b-a229-02155a4ca85b")]
	public partial class DisjunctiveMandatoryConstraint : SingleChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DisjunctiveMandatoryConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x37be6a6c, 0x12c5, 0x446b, 0xa2, 0x29, 0x02, 0x15, 0x5a, 0x4c, 0xa8, 0x5b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DisjunctiveMandatoryConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DisjunctiveMandatoryConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass ChildSequenceUniquenessConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2bf1bcf6-f1ac-48c5-b996-ef72d9de6b1e")]
	public partial class ChildSequenceUniquenessConstraint : SingleChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ChildSequenceUniquenessConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2bf1bcf6, 0xf1ac, 0x48c5, 0xb9, 0x96, 0xef, 0x72, 0xd9, 0xde, 0x6b, 0x1e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ChildSequenceUniquenessConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ChildSequenceUniquenessConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsPreferred domain property code
		
		/// <summary>
		/// IsPreferred domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPreferredDomainPropertyId = new global::System.Guid(0x0eebf253, 0xc79b, 0x45d3, 0xa9, 0x75, 0xf3, 0xf5, 0x9b, 0x56, 0x03, 0xca);
		
		/// <summary>
		/// Storage for IsPreferred
		/// </summary>
		private global::System.Boolean isPreferredPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsPreferred domain property.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint.IsPreferred
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint/IsPreferred.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ChildSequenceUniquenessConstraint/IsPreferred.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0eebf253-c79b-45d3-a975-f3f59b5603ca")]
		public global::System.Boolean IsPreferred
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPreferredPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPreferredPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ChildSequenceUniquenessConstraint.IsPreferred domain property.
		/// </summary>
		internal sealed partial class IsPreferredPropertyHandler : DslModeling::DomainPropertyValueHandler<ChildSequenceUniquenessConstraint, global::System.Boolean>
		{
			private IsPreferredPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ChildSequenceUniquenessConstraint.IsPreferred domain property value handler.
			/// </summary>
			public static readonly IsPreferredPropertyHandler Instance = new IsPreferredPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ChildSequenceUniquenessConstraint.IsPreferred domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPreferredDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ChildSequenceUniquenessConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isPreferredPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ChildSequenceUniquenessConstraint element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPreferredPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass MinTwoChildrenChildSequence
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.MinTwoChildrenChildSequence.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("03805483-888a-448e-82fd-0104034870f5")]
	public partial class MinTwoChildrenChildSequence : ChildSequence
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MinTwoChildrenChildSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x03805483, 0x888a, 0x448e, 0x82, 0xfd, 0x01, 0x04, 0x03, 0x48, 0x70, 0xf5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MinTwoChildrenChildSequence(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MinTwoChildrenChildSequence(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass SubsetConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.SubsetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.SubsetConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("be0d381d-8a53-402c-9d4a-dd2032460ec2")]
	public partial class SubsetConstraint : MultiChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SubsetConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbe0d381d, 0x8a53, 0x402c, 0x9d, 0x4a, 0xdd, 0x20, 0x32, 0x46, 0x0e, 0xc2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubsetConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubsetConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SubChildSequence opposite domain role accessor
		/// <summary>
		/// Gets or sets SubChildSequence.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraint
		/// </summary>
		public virtual ChildSequence SubChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraintDomainRoleId) as ChildSequence;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region SuperChildSequence opposite domain role accessor
		/// <summary>
		/// Gets or sets SuperChildSequence.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraint
		/// </summary>
		public virtual ChildSequence SuperChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraintDomainRoleId) as ChildSequence;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.OIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraintDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass TwoOrMoreChildSequenceConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("66dee528-c04e-46a8-8704-842377f5064a")]
	public abstract partial class TwoOrMoreChildSequenceConstraint : MultiChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TwoOrMoreChildSequenceConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x66dee528, 0xc04e, 0x46a8, 0x87, 0x04, 0x84, 0x23, 0x77, 0xf5, 0x06, 0x4a);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected TwoOrMoreChildSequenceConstraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ChildSequence opposite domain role accessor
		/// <summary>
		/// Gets a list of ChildSequence.
		/// Description for
		/// Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ChildSequence> ChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ChildSequence>(this, global::Neumont.Tools.ORM.OIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraintDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass ExclusionConstraint
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.ExclusionConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.ExclusionConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8a090d5d-d2c4-46a4-9dd4-4193cc17b57a")]
	public partial class ExclusionConstraint : TwoOrMoreChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExclusionConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8a090d5d, 0xd2c4, 0x46a4, 0x9d, 0xd4, 0x41, 0x93, 0xcc, 0x17, 0xb5, 0x7a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.OIALModel
{
	/// <summary>
	/// DomainClass EqualityConstraint
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.OIALModel.EqualityConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.OIALModel.EqualityConstraint.Description", typeof(global::Neumont.Tools.ORM.OIALModel.OIALDomainModel), "Neumont.Tools.ORM.OIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4fcdfbbe-7021-4af1-a5d7-e34b778122f4")]
	public partial class EqualityConstraint : TwoOrMoreChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EqualityConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4fcdfbbe, 0x7021, 0x4af1, 0xa5, 0xd7, 0xe3, 0x4b, 0x77, 0x81, 0x22, 0xf4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EqualityConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EqualityConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
