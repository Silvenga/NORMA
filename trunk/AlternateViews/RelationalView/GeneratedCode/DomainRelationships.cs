#region Common Public License Copyright Notice
/**************************************************************************\
* Neumont Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Neumont.Tools.ORM.Views.RelationalView
{
	/// <summary>
	/// DomainRelationship RelationalModelHasTable
	/// Description for Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("99f4eff8-1552-46da-8b6c-8cc7eb9409e3")]
	internal partial class RelationalModelHasTable : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RelationalModelHasTable domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x99f4eff8, 0x1552, 0x46da, 0x8b, 0x6c, 0x8c, 0xc7, 0xeb, 0x94, 0x09, 0xe3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RelationalModelHasTable link in the same Partition as the given RelationalModel
		/// </summary>
		/// <param name="source">RelationalModel to use as the source of the relationship.</param>
		/// <param name="target">Table to use as the target of the relationship.</param>
		public RelationalModelHasTable(RelationalModel source, Table target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RelationalModelHasTable.RelationalModelDomainRoleId, source), new DslModeling::RoleAssignment(RelationalModelHasTable.TableDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationalModelHasTable(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationalModelHasTable(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationalModelHasTable(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationalModelHasTable(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RelationalModel domain role code
		
		/// <summary>
		/// RelationalModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationalModelDomainRoleId = new global::System.Guid(0x9b228d99, 0x4cad, 0x4727, 0xa9, 0x6c, 0x8c, 0xe6, 0xb9, 0xb9, 0xf9, 0xbb);
		
		/// <summary>
		/// DomainRole RelationalModel
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable.RelationalModel
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable/RelationalModel.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable/RelationalModel.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TableCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable/RelationalModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9b228d99-4cad-4727-a96c-8ce6b9b9f9bb")]
		public virtual RelationalModel RelationalModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RelationalModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationalModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationalModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RelationalModel of a Table
		/// <summary>
		/// Gets RelationalModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RelationalModel GetRelationalModel(Table element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TableDomainRoleId) as RelationalModel;
		}
		
		/// <summary>
		/// Sets RelationalModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRelationalModel(Table element, RelationalModel newRelationalModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TableDomainRoleId, newRelationalModel);
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainRoleId = new global::System.Guid(0xc4451d63, 0xdc31, 0x4181, 0xad, 0x15, 0x1a, 0x86, 0x55, 0x73, 0x63, 0x50);
		
		/// <summary>
		/// DomainRole Table
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable.Table
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable/Table.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable/Table.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RelationalModel", PropertyDisplayNameKey="Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable/Table.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c4451d63-dc31-4181-ad15-1a8655736350")]
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TableCollection of a RelationalModel
		/// <summary>
		/// Gets a list of TableCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Table> GetTableCollection(RelationalModel element)
		{
			return new DslModeling::LinkedElementCollection<Table>(element, RelationalModelDomainRoleId);
		}
		#endregion
		#region RelationalModel link accessor
		/// <summary>
		/// Get the list of RelationalModelHasTable links to a RelationalModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable> GetLinksToTableCollection ( global::Neumont.Tools.ORM.Views.RelationalView.RelationalModel relationalModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable>(relationalModelInstance, global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable.RelationalModelDomainRoleId);
		}
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the RelationalModelHasTable link to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable GetLinkToRelationalModel (global::Neumont.Tools.ORM.Views.RelationalView.Table tableInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable>(tableInstance, global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable.TableDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Table not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RelationalModelHasTable instance accessors
		
		/// <summary>
		/// Get any RelationalModelHasTable links between a given RelationalModel and a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable> GetLinks( global::Neumont.Tools.ORM.Views.RelationalView.RelationalModel source, global::Neumont.Tools.ORM.Views.RelationalView.Table target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable>(source, global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable.RelationalModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable link in links )
			{
				if ( target.Equals(link.Table) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RelationalModelHasTable link between a given RelationalModeland a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable GetLink( global::Neumont.Tools.ORM.Views.RelationalView.RelationalModel source, global::Neumont.Tools.ORM.Views.RelationalView.Table target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable>(source, global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable.RelationalModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable link in links )
			{
				if ( target.Equals(link.Table) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.Views.RelationalView
{
	/// <summary>
	/// DomainRelationship TableHasColumn
	/// Description for Neumont.Tools.ORM.Views.RelationalView.TableHasColumn
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.TableHasColumn.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.TableHasColumn.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4350e15f-9256-45d2-9c53-2165c954b779")]
	internal partial class TableHasColumn : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TableHasColumn domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4350e15f, 0x9256, 0x45d2, 0x9c, 0x53, 0x21, 0x65, 0xc9, 0x54, 0xb7, 0x79);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TableHasColumn link in the same Partition as the given Table
		/// </summary>
		/// <param name="source">Table to use as the source of the relationship.</param>
		/// <param name="target">Column to use as the target of the relationship.</param>
		public TableHasColumn(Table source, Column target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TableHasColumn.TableDomainRoleId, source), new DslModeling::RoleAssignment(TableHasColumn.ColumnDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableHasColumn(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableHasColumn(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableHasColumn(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableHasColumn(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainRoleId = new global::System.Guid(0x29d486e0, 0x43cf, 0x4229, 0x94, 0xc3, 0x72, 0x01, 0x5c, 0x78, 0x9a, 0x23);
		
		/// <summary>
		/// DomainRole Table
		/// Description for Neumont.Tools.ORM.Views.RelationalView.TableHasColumn.Table
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.TableHasColumn/Table.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.TableHasColumn/Table.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ColumnCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.Views.RelationalView.TableHasColumn/Table.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("29d486e0-43cf-4229-94c3-72015c789a23")]
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Table of a Column
		/// <summary>
		/// Gets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Table GetTable(Column element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ColumnDomainRoleId) as Table;
		}
		
		/// <summary>
		/// Sets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTable(Column element, Table newTable)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ColumnDomainRoleId, newTable);
		}
		#endregion
		#region Column domain role code
		
		/// <summary>
		/// Column domain role Id.
		/// </summary>
		public static readonly global::System.Guid ColumnDomainRoleId = new global::System.Guid(0x950f1a01, 0xc0f2, 0x472f, 0x94, 0x20, 0x14, 0xeb, 0x64, 0x2e, 0xa6, 0x07);
		
		/// <summary>
		/// DomainRole Column
		/// Description for Neumont.Tools.ORM.Views.RelationalView.TableHasColumn.Column
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.TableHasColumn/Column.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.TableHasColumn/Column.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Table", PropertyDisplayNameKey="Neumont.Tools.ORM.Views.RelationalView.TableHasColumn/Column.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("950f1a01-c0f2-472f-9420-14eb642ea607")]
		public virtual Column Column
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Column)DslModeling::DomainRoleInfo.GetRolePlayer(this, ColumnDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ColumnDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ColumnCollection of a Table
		/// <summary>
		/// Gets a list of ColumnCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Column> GetColumnCollection(Table element)
		{
			return new DslModeling::LinkedElementCollection<Column>(element, TableDomainRoleId);
		}
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the list of TableHasColumn links to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn> GetLinksToColumnCollection ( global::Neumont.Tools.ORM.Views.RelationalView.Table tableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn>(tableInstance, global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn.TableDomainRoleId);
		}
		#endregion
		#region Column link accessor
		/// <summary>
		/// Get the TableHasColumn link to a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn GetLinkToTable (global::Neumont.Tools.ORM.Views.RelationalView.Column columnInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn>(columnInstance, global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn.ColumnDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Column not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TableHasColumn instance accessors
		
		/// <summary>
		/// Get any TableHasColumn links between a given Table and a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn> GetLinks( global::Neumont.Tools.ORM.Views.RelationalView.Table source, global::Neumont.Tools.ORM.Views.RelationalView.Column target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn>(source, global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn.TableDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn link in links )
			{
				if ( target.Equals(link.Column) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TableHasColumn link between a given Tableand a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn GetLink( global::Neumont.Tools.ORM.Views.RelationalView.Table source, global::Neumont.Tools.ORM.Views.RelationalView.Column target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn>(source, global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn.TableDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn link in links )
			{
				if ( target.Equals(link.Column) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.Views.RelationalView
{
	/// <summary>
	/// DomainRelationship TableHasConstraint
	/// Description for Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("de27a531-45d4-40f5-a8ea-389c18f7cc65")]
	internal partial class TableHasConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TableHasConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xde27a531, 0x45d4, 0x40f5, 0xa8, 0xea, 0x38, 0x9c, 0x18, 0xf7, 0xcc, 0x65);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TableHasConstraint link in the same Partition as the given Table
		/// </summary>
		/// <param name="source">Table to use as the source of the relationship.</param>
		/// <param name="target">Constraint to use as the target of the relationship.</param>
		public TableHasConstraint(Table source, Constraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TableHasConstraint.TableDomainRoleId, source), new DslModeling::RoleAssignment(TableHasConstraint.ConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableHasConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableHasConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableHasConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableHasConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainRoleId = new global::System.Guid(0x6457dc9b, 0x37ee, 0x44a6, 0x9e, 0x7b, 0x6f, 0x85, 0x58, 0xf2, 0xa3, 0x5b);
		
		/// <summary>
		/// DomainRole Table
		/// Description for Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint.Table
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint/Table.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint/Table.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint/Table.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("6457dc9b-37ee-44a6-9e7b-6f8558f2a35b")]
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Table of a Constraint
		/// <summary>
		/// Gets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Table GetTable(Constraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConstraintDomainRoleId) as Table;
		}
		
		/// <summary>
		/// Sets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTable(Constraint element, Table newTable)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConstraintDomainRoleId, newTable);
		}
		#endregion
		#region Constraint domain role code
		
		/// <summary>
		/// Constraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintDomainRoleId = new global::System.Guid(0x85ff9e28, 0x159b, 0x4d6a, 0xa2, 0x13, 0x38, 0xa7, 0xf4, 0xaf, 0x1c, 0xd6);
		
		/// <summary>
		/// DomainRole Constraint
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint.Constraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint/Constraint.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint/Constraint.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Table", PropertyDisplayNameKey="Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint/Constraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("85ff9e28-159b-4d6a-a213-38a7f4af1cd6")]
		public virtual Constraint Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Constraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConstraintCollection of a Table
		/// <summary>
		/// Gets a list of ConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Constraint> GetConstraintCollection(Table element)
		{
			return new DslModeling::LinkedElementCollection<Constraint>(element, TableDomainRoleId);
		}
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the list of TableHasConstraint links to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint> GetLinksToConstraintCollection ( global::Neumont.Tools.ORM.Views.RelationalView.Table tableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint>(tableInstance, global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint.TableDomainRoleId);
		}
		#endregion
		#region Constraint link accessor
		/// <summary>
		/// Get the TableHasConstraint link to a Constraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint GetLinkToTable (global::Neumont.Tools.ORM.Views.RelationalView.Constraint constraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint>(constraintInstance, global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint.ConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Constraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TableHasConstraint instance accessors
		
		/// <summary>
		/// Get any TableHasConstraint links between a given Table and a Constraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint> GetLinks( global::Neumont.Tools.ORM.Views.RelationalView.Table source, global::Neumont.Tools.ORM.Views.RelationalView.Constraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint>(source, global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint.TableDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint link in links )
			{
				if ( target.Equals(link.Constraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TableHasConstraint link between a given Tableand a Constraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint GetLink( global::Neumont.Tools.ORM.Views.RelationalView.Table source, global::Neumont.Tools.ORM.Views.RelationalView.Constraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint>(source, global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint.TableDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint link in links )
			{
				if ( target.Equals(link.Constraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.Views.RelationalView
{
	/// <summary>
	/// DomainRelationship ConstraintReferencesColumn
	/// Description for
	/// Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("8c312418-c27c-47d0-b56e-994972b98444")]
	internal partial class ConstraintReferencesColumn : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintReferencesColumn domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8c312418, 0xc27c, 0x47d0, 0xb5, 0x6e, 0x99, 0x49, 0x72, 0xb9, 0x84, 0x44);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintReferencesColumn link in the same Partition as the given Constraint
		/// </summary>
		/// <param name="source">Constraint to use as the source of the relationship.</param>
		/// <param name="target">Column to use as the target of the relationship.</param>
		public ConstraintReferencesColumn(Constraint source, Column target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintReferencesColumn.ConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintReferencesColumn.ColumnDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintReferencesColumn(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintReferencesColumn(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintReferencesColumn(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintReferencesColumn(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Constraint domain role code
		
		/// <summary>
		/// Constraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintDomainRoleId = new global::System.Guid(0x4970b4ee, 0xe2f2, 0x41d6, 0x9a, 0x5f, 0x6d, 0x60, 0xb5, 0x19, 0x4c, 0xcc);
		
		/// <summary>
		/// DomainRole Constraint
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn.Constraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn/Constraint.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn/Constraint.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ColumnCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn/Constraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("4970b4ee-e2f2-41d6-9a5f-6d60b5194ccc")]
		public virtual Constraint Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Constraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConstraintCollection of a Column
		/// <summary>
		/// Gets a list of ConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Constraint> GetConstraintCollection(Column element)
		{
			return new DslModeling::LinkedElementCollection<Constraint>(element, ColumnDomainRoleId);
		}
		#endregion
		#region Column domain role code
		
		/// <summary>
		/// Column domain role Id.
		/// </summary>
		public static readonly global::System.Guid ColumnDomainRoleId = new global::System.Guid(0x7986bd40, 0x2615, 0x4ca7, 0x97, 0xef, 0x4e, 0x51, 0x1c, 0x2c, 0xb8, 0x50);
		
		/// <summary>
		/// DomainRole Column
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn.Column
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn/Column.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn/Column.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn/Column.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7986bd40-2615-4ca7-97ef-4e511c2cb850")]
		public virtual Column Column
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Column)DslModeling::DomainRoleInfo.GetRolePlayer(this, ColumnDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ColumnDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ColumnCollection of a Constraint
		/// <summary>
		/// Gets a list of ColumnCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Column> GetColumnCollection(Constraint element)
		{
			return new DslModeling::LinkedElementCollection<Column>(element, ConstraintDomainRoleId);
		}
		#endregion
		#region Constraint link accessor
		/// <summary>
		/// Get the list of ConstraintReferencesColumn links to a Constraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn> GetLinksToColumnCollection ( global::Neumont.Tools.ORM.Views.RelationalView.Constraint constraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn>(constraintInstance, global::Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn.ConstraintDomainRoleId);
		}
		#endregion
		#region Column link accessor
		/// <summary>
		/// Get the list of ConstraintReferencesColumn links to a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn> GetLinksToConstraintCollection ( global::Neumont.Tools.ORM.Views.RelationalView.Column columnInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn>(columnInstance, global::Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn.ColumnDomainRoleId);
		}
		#endregion
		#region ConstraintReferencesColumn instance accessors
		
		/// <summary>
		/// Get any ConstraintReferencesColumn links between a given Constraint and a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn> GetLinks( global::Neumont.Tools.ORM.Views.RelationalView.Constraint source, global::Neumont.Tools.ORM.Views.RelationalView.Column target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn>(source, global::Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn.ConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn link in links )
			{
				if ( target.Equals(link.Column) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.Views.RelationalView
{
	/// <summary>
	/// DomainRelationship TableReferencesTable
	/// Description for Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("9974a38a-ab9a-4f05-b257-c3c753718e6c")]
	internal partial class TableReferencesTable : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TableReferencesTable domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9974a38a, 0xab9a, 0x4f05, 0xb2, 0x57, 0xc3, 0xc7, 0x53, 0x71, 0x8e, 0x6c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TableReferencesTable link in the same Partition as the given Table
		/// </summary>
		/// <param name="source">Table to use as the source of the relationship.</param>
		/// <param name="target">Table to use as the target of the relationship.</param>
		public TableReferencesTable(Table source, Table target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TableReferencesTable.TableDomainRoleId, source), new DslModeling::RoleAssignment(TableReferencesTable.ReferencedTableDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableReferencesTable(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableReferencesTable(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableReferencesTable(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableReferencesTable(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainRoleId = new global::System.Guid(0xf2f61edb, 0x05b8, 0x4367, 0x9b, 0xf2, 0xe4, 0x4e, 0x6e, 0xd2, 0x0f, 0xad);
		
		/// <summary>
		/// DomainRole Table
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable.Table
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable/Table.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable/Table.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferencedTableCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable/Table.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f2f61edb-05b8-4367-9bf2-e44e6ed20fad")]
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferencingTableCollection of a Table
		/// <summary>
		/// Gets a list of ReferencingTableCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Table> GetReferencingTableCollection(Table element)
		{
			return new DslModeling::LinkedElementCollection<Table>(element, ReferencedTableDomainRoleId);
		}
		#endregion
		#region ReferencedTable domain role code
		
		/// <summary>
		/// ReferencedTable domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferencedTableDomainRoleId = new global::System.Guid(0x3e98d5e9, 0x48ad, 0x476e, 0xac, 0x5d, 0x00, 0x5f, 0xe1, 0x23, 0xc3, 0x92);
		
		/// <summary>
		/// DomainRole ReferencedTable
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable.ReferencedTable
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable/ReferencedTable.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable/ReferencedTable.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferencingTableCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable/ReferencedTable.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3e98d5e9-48ad-476e-ac5d-005fe123c392")]
		public virtual Table ReferencedTable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferencedTableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferencedTableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferencedTableCollection of a Table
		/// <summary>
		/// Gets a list of ReferencedTableCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Table> GetReferencedTableCollection(Table element)
		{
			return new DslModeling::LinkedElementCollection<Table>(element, TableDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ForeignKey opposite domain role accessor
		/// <summary>
		/// Gets or sets ForeignKey.
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey.TableReferencesTable
		/// </summary>
		public virtual ForeignKey ForeignKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey.TableReferencesTableDomainRoleId) as ForeignKey;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey.TableReferencesTableDomainRoleId, value);
			}
		}
		#endregion
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the list of TableReferencesTable links to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable> GetLinksToReferencedTableCollection ( global::Neumont.Tools.ORM.Views.RelationalView.Table tableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable>(tableInstance, global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable.TableDomainRoleId);
		}
		#endregion
		#region ReferencedTable link accessor
		/// <summary>
		/// Get the list of TableReferencesTable links to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable> GetLinksToReferencingTableCollection ( global::Neumont.Tools.ORM.Views.RelationalView.Table referencedTableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable>(referencedTableInstance, global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable.ReferencedTableDomainRoleId);
		}
		#endregion
		#region TableReferencesTable instance accessors
		
		/// <summary>
		/// Get any TableReferencesTable links between a given Table and a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable> GetLinks( global::Neumont.Tools.ORM.Views.RelationalView.Table source, global::Neumont.Tools.ORM.Views.RelationalView.Table target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable>(source, global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable.TableDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable link in links )
			{
				if ( target.Equals(link.ReferencedTable) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.Views.RelationalView
{
	/// <summary>
	/// DomainRelationship TableReferenceHasForeignKey
	/// Description for
	/// Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("71dbf367-e57d-4279-9330-9fc7cf24a8f4")]
	internal partial class TableReferenceHasForeignKey : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TableReferenceHasForeignKey domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x71dbf367, 0xe57d, 0x4279, 0x93, 0x30, 0x9f, 0xc7, 0xcf, 0x24, 0xa8, 0xf4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TableReferenceHasForeignKey link in the same Partition as the given TableReferencesTable
		/// </summary>
		/// <param name="source">TableReferencesTable to use as the source of the relationship.</param>
		/// <param name="target">ForeignKey to use as the target of the relationship.</param>
		public TableReferenceHasForeignKey(TableReferencesTable source, ForeignKey target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TableReferenceHasForeignKey.TableReferencesTableDomainRoleId, source), new DslModeling::RoleAssignment(TableReferenceHasForeignKey.ForeignKeyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableReferenceHasForeignKey(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableReferenceHasForeignKey(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableReferenceHasForeignKey(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableReferenceHasForeignKey(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TableReferencesTable domain role code
		
		/// <summary>
		/// TableReferencesTable domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableReferencesTableDomainRoleId = new global::System.Guid(0xf430cc5e, 0xae32, 0x4ed3, 0x96, 0x5a, 0x3d, 0xd6, 0x7b, 0x37, 0xe3, 0x8f);
		
		/// <summary>
		/// DomainRole TableReferencesTable
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey.TableReferencesTable
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey/TableReferencesTable.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey/TableReferencesTable.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ForeignKey", PropertyDisplayNameKey="Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey/TableReferencesTable.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f430cc5e-ae32-4ed3-965a-3dd67b37e38f")]
		public virtual TableReferencesTable TableReferencesTable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TableReferencesTable)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableReferencesTableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableReferencesTableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TableReference of a ForeignKey
		/// <summary>
		/// Gets TableReference.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TableReferencesTable GetTableReference(ForeignKey element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ForeignKeyDomainRoleId) as TableReferencesTable;
		}
		
		/// <summary>
		/// Sets TableReference.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTableReference(ForeignKey element, TableReferencesTable newTableReferencesTable)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ForeignKeyDomainRoleId, newTableReferencesTable);
		}
		#endregion
		#region ForeignKey domain role code
		
		/// <summary>
		/// ForeignKey domain role Id.
		/// </summary>
		public static readonly global::System.Guid ForeignKeyDomainRoleId = new global::System.Guid(0x83163af7, 0x5dc2, 0x4b38, 0x89, 0xdd, 0x2c, 0x82, 0x21, 0x40, 0x6c, 0x84);
		
		/// <summary>
		/// DomainRole ForeignKey
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey.ForeignKey
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey/ForeignKey.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey/ForeignKey.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TableReference", PropertyDisplayNameKey="Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey/ForeignKey.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("83163af7-5dc2-4b38-89dd-2c8221406c84")]
		public virtual ForeignKey ForeignKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ForeignKey)DslModeling::DomainRoleInfo.GetRolePlayer(this, ForeignKeyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ForeignKeyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ForeignKey of a TableReferencesTable
		/// <summary>
		/// Gets ForeignKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ForeignKey GetForeignKey(TableReferencesTable element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TableReferencesTableDomainRoleId) as ForeignKey;
		}
		
		/// <summary>
		/// Sets ForeignKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetForeignKey(TableReferencesTable element, ForeignKey newForeignKey)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TableReferencesTableDomainRoleId, newForeignKey);
		}
		#endregion
		#region TableReferencesTable link accessor
		/// <summary>
		/// Get the TableReferenceHasForeignKey link to a TableReferencesTable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey GetLinkToForeignKey (global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable tableReferencesTableInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey>(tableReferencesTableInstance, global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey.TableReferencesTableDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TableReferencesTable not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ForeignKey link accessor
		/// <summary>
		/// Get the TableReferenceHasForeignKey link to a ForeignKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey GetLinkToTableReference (global::Neumont.Tools.ORM.Views.RelationalView.ForeignKey foreignKeyInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey>(foreignKeyInstance, global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey.ForeignKeyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ForeignKey not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TableReferenceHasForeignKey instance accessors
		
		/// <summary>
		/// Get any TableReferenceHasForeignKey links between a given TableReferencesTable and a ForeignKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey> GetLinks( global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable source, global::Neumont.Tools.ORM.Views.RelationalView.ForeignKey target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey>(source, global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey.TableReferencesTableDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey link in links )
			{
				if ( target.Equals(link.ForeignKey) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TableReferenceHasForeignKey link between a given TableReferencesTableand a ForeignKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey GetLink( global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable source, global::Neumont.Tools.ORM.Views.RelationalView.ForeignKey target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey>(source, global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey.TableReferencesTableDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.Views.RelationalView.TableReferenceHasForeignKey link in links )
			{
				if ( target.Equals(link.ForeignKey) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.Views.RelationalView
{
	/// <summary>
	/// DomainRelationship TableReferencesConceptType
	/// Description for
	/// Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b286333f-1047-44d1-9459-5735f428913d")]
	internal partial class TableReferencesConceptType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TableReferencesConceptType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb286333f, 0x1047, 0x44d1, 0x94, 0x59, 0x57, 0x35, 0xf4, 0x28, 0x91, 0x3d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TableReferencesConceptType link in the same Partition as the given Table
		/// </summary>
		/// <param name="source">Table to use as the source of the relationship.</param>
		/// <param name="target">ConceptType to use as the target of the relationship.</param>
		public TableReferencesConceptType(Table source, global::Neumont.Tools.ORM.OIALModel.ConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TableReferencesConceptType.TableDomainRoleId, source), new DslModeling::RoleAssignment(TableReferencesConceptType.ConceptTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableReferencesConceptType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableReferencesConceptType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableReferencesConceptType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableReferencesConceptType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainRoleId = new global::System.Guid(0x1697c628, 0x0ba4, 0x4a2e, 0x9a, 0x7a, 0x3b, 0xea, 0x6a, 0x08, 0xfa, 0xc1);
		
		/// <summary>
		/// DomainRole Table
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType.Table
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType/Table.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType/Table.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConceptType", PropertyDisplayNameKey="Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType/Table.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1697c628-0ba4-4a2e-9a7a-3bea6a08fac1")]
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Table of a ConceptType
		/// <summary>
		/// Gets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Table GetTable(global::Neumont.Tools.ORM.OIALModel.ConceptType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConceptTypeDomainRoleId) as Table;
		}
		
		/// <summary>
		/// Sets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTable(global::Neumont.Tools.ORM.OIALModel.ConceptType element, Table newTable)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConceptTypeDomainRoleId, newTable);
		}
		#endregion
		#region ConceptType domain role code
		
		/// <summary>
		/// ConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeDomainRoleId = new global::System.Guid(0xa1840588, 0x8a18, 0x4673, 0xa4, 0xd9, 0xa3, 0x5c, 0x81, 0xe8, 0x50, 0x0d);
		
		/// <summary>
		/// DomainRole ConceptType
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType.ConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType/ConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType/ConceptType.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Table", PropertyDisplayNameKey="Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType/ConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a1840588-8a18-4673-a4d9-a35c81e8500d")]
		public virtual global::Neumont.Tools.ORM.OIALModel.ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.ORM.OIALModel.ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptType of a Table
		/// <summary>
		/// Gets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.ConceptType GetConceptType(Table element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TableDomainRoleId) as global::Neumont.Tools.ORM.OIALModel.ConceptType;
		}
		
		/// <summary>
		/// Sets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConceptType(Table element, global::Neumont.Tools.ORM.OIALModel.ConceptType newConceptType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TableDomainRoleId, newConceptType);
		}
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the TableReferencesConceptType link to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType GetLinkToConceptType (global::Neumont.Tools.ORM.Views.RelationalView.Table tableInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType>(tableInstance, global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType.TableDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Table not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptType link accessor
		/// <summary>
		/// Get the TableReferencesConceptType link to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType GetLinkToTable (global::Neumont.Tools.ORM.OIALModel.ConceptType conceptTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType>(conceptTypeInstance, global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType.ConceptTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConceptType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TableReferencesConceptType instance accessors
		
		/// <summary>
		/// Get any TableReferencesConceptType links between a given Table and a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType> GetLinks( global::Neumont.Tools.ORM.Views.RelationalView.Table source, global::Neumont.Tools.ORM.OIALModel.ConceptType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType>(source, global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType.TableDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TableReferencesConceptType link between a given Tableand a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType GetLink( global::Neumont.Tools.ORM.Views.RelationalView.Table source, global::Neumont.Tools.ORM.OIALModel.ConceptType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType>(source, global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType.TableDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.Views.RelationalView
{
	/// <summary>
	/// DomainRelationship RelationalModelHasOIALModel
	/// Description for
	/// Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1d3a4cb0-b28d-4ae8-bcd5-723ec645eae9")]
	internal partial class RelationalModelHasOIALModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RelationalModelHasOIALModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1d3a4cb0, 0xb28d, 0x4ae8, 0xbc, 0xd5, 0x72, 0x3e, 0xc6, 0x45, 0xea, 0xe9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RelationalModelHasOIALModel link in the same Partition as the given RelationalModel
		/// </summary>
		/// <param name="source">RelationalModel to use as the source of the relationship.</param>
		/// <param name="target">OIALModel to use as the target of the relationship.</param>
		public RelationalModelHasOIALModel(RelationalModel source, global::Neumont.Tools.ORM.OIALModel.OIALModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RelationalModelHasOIALModel.RelationalModelDomainRoleId, source), new DslModeling::RoleAssignment(RelationalModelHasOIALModel.OIALModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationalModelHasOIALModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationalModelHasOIALModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationalModelHasOIALModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationalModelHasOIALModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RelationalModel domain role code
		
		/// <summary>
		/// RelationalModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationalModelDomainRoleId = new global::System.Guid(0x02fcacda, 0x1000, 0x49e1, 0xac, 0x8e, 0x50, 0x46, 0xac, 0x1d, 0xe7, 0x9f);
		
		/// <summary>
		/// DomainRole RelationalModel
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel.RelationalModel
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel/RelationalModel.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel/RelationalModel.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "OIALModel", PropertyDisplayNameKey="Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel/RelationalModel.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("02fcacda-1000-49e1-ac8e-5046ac1de79f")]
		public virtual RelationalModel RelationalModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RelationalModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationalModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationalModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RelationalModel of a OIALModel
		/// <summary>
		/// Gets RelationalModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RelationalModel GetRelationalModel(global::Neumont.Tools.ORM.OIALModel.OIALModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OIALModelDomainRoleId) as RelationalModel;
		}
		
		/// <summary>
		/// Sets RelationalModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRelationalModel(global::Neumont.Tools.ORM.OIALModel.OIALModel element, RelationalModel newRelationalModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OIALModelDomainRoleId, newRelationalModel);
		}
		#endregion
		#region OIALModel domain role code
		
		/// <summary>
		/// OIALModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid OIALModelDomainRoleId = new global::System.Guid(0xda1eb30b, 0x830d, 0x4c65, 0x9c, 0x72, 0x73, 0xdd, 0x1c, 0x96, 0x03, 0xcc);
		
		/// <summary>
		/// DomainRole OIALModel
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel.OIALModel
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel/OIALModel.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel/OIALModel.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RelationalModel", PropertyDisplayNameKey="Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel/OIALModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("da1eb30b-830d-4c65-9c72-73dd1c9603cc")]
		public virtual global::Neumont.Tools.ORM.OIALModel.OIALModel OIALModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.ORM.OIALModel.OIALModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, OIALModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OIALModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OIALModel of a RelationalModel
		/// <summary>
		/// Gets OIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.OIALModel.OIALModel GetOIALModel(RelationalModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationalModelDomainRoleId) as global::Neumont.Tools.ORM.OIALModel.OIALModel;
		}
		
		/// <summary>
		/// Sets OIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOIALModel(RelationalModel element, global::Neumont.Tools.ORM.OIALModel.OIALModel newOIALModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationalModelDomainRoleId, newOIALModel);
		}
		#endregion
		#region RelationalModel link accessor
		/// <summary>
		/// Get the RelationalModelHasOIALModel link to a RelationalModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel GetLinkToOIALModel (global::Neumont.Tools.ORM.Views.RelationalView.RelationalModel relationalModelInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel>(relationalModelInstance, global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel.RelationalModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RelationalModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OIALModel link accessor
		/// <summary>
		/// Get the RelationalModelHasOIALModel link to a OIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel GetLinkToRelationalModel (global::Neumont.Tools.ORM.OIALModel.OIALModel oIALModelInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel>(oIALModelInstance, global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel.OIALModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of OIALModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RelationalModelHasOIALModel instance accessors
		
		/// <summary>
		/// Get any RelationalModelHasOIALModel links between a given RelationalModel and a OIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel> GetLinks( global::Neumont.Tools.ORM.Views.RelationalView.RelationalModel source, global::Neumont.Tools.ORM.OIALModel.OIALModel target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel>(source, global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel.RelationalModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel link in links )
			{
				if ( target.Equals(link.OIALModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RelationalModelHasOIALModel link between a given RelationalModeland a OIALModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel GetLink( global::Neumont.Tools.ORM.Views.RelationalView.RelationalModel source, global::Neumont.Tools.ORM.OIALModel.OIALModel target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel>(source, global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel.RelationalModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel link in links )
			{
				if ( target.Equals(link.OIALModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
