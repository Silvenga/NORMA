#region Common Public License Copyright Notice
/**************************************************************************\
* Neumont Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Neumont.Tools.ORM.Views.RelationalView
{
	/// <summary>
	/// DomainClass RelationalNamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.RelationalNamedElement.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.RelationalNamedElement.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("fc88d6a8-ffc5-4f1b-b424-a5c46843f3f1")]
	internal abstract partial class RelationalNamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RelationalNamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfc88d6a8, 0xffc5, 0x4f1b, 0xb4, 0x24, 0xa5, 0xc4, 0x68, 0x43, 0xf3, 0xf1);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected RelationalNamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xef72aac6, 0xd628, 0x49f6, 0x86, 0xf0, 0x52, 0xd7, 0x27, 0x65, 0xfe, 0x68);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.RelationalNamedElement.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.RelationalNamedElement/Name.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.RelationalNamedElement/Name.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("ef72aac6-d628-49f6-86f0-52d72765fe68")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RelationalNamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<RelationalNamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RelationalNamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RelationalNamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(RelationalNamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RelationalNamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.Views.RelationalView
{
	/// <summary>
	/// DomainClass RelationalModel
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.RelationalModel.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.RelationalModel.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainObjectId("7faedeec-0a27-4417-b74b-422a67a67f50")]
	internal partial class RelationalModel : RelationalNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RelationalModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7faedeec, 0x0a27, 0x4417, 0xb7, 0x4b, 0x42, 0x2a, 0x67, 0xa6, 0x7f, 0x50);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RelationalModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RelationalModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DisplayDataTypes domain property code
		
		/// <summary>
		/// DisplayDataTypes domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisplayDataTypesDomainPropertyId = new global::System.Guid(0x7ad94a1d, 0x9a17, 0x408b, 0x83, 0xd4, 0x28, 0xc1, 0xb8, 0x27, 0x0c, 0xd5);
		
		/// <summary>
		/// Storage for DisplayDataTypes
		/// </summary>
		private global::System.Boolean displayDataTypesPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of DisplayDataTypes domain property.
		/// Specifies whether data types should be shown or not.
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.RelationalModel/DisplayDataTypes.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.RelationalModel/DisplayDataTypes.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("7ad94a1d-9a17-408b-83d4-28c1b8270cd5")]
		public global::System.Boolean DisplayDataTypes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return displayDataTypesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DisplayDataTypesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RelationalModel.DisplayDataTypes domain property.
		/// </summary>
		internal sealed partial class DisplayDataTypesPropertyHandler : DslModeling::DomainPropertyValueHandler<RelationalModel, global::System.Boolean>
		{
			private DisplayDataTypesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RelationalModel.DisplayDataTypes domain property value handler.
			/// </summary>
			public static readonly DisplayDataTypesPropertyHandler Instance = new DisplayDataTypesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RelationalModel.DisplayDataTypes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DisplayDataTypesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(RelationalModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.displayDataTypesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RelationalModel element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.displayDataTypesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TableCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of TableCollection.
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable.RelationalModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Table> TableCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Table>(this, global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable.RelationalModelDomainRoleId);
			}
		}
		#endregion
		#region OIALModel opposite domain role accessor
		/// <summary>
		/// Gets or sets OIALModel.
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel.RelationalModel
		/// </summary>
		public virtual global::Neumont.Tools.ORM.OIALModel.OIALModel OIALModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel.RelationalModelDomainRoleId) as global::Neumont.Tools.ORM.OIALModel.OIALModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasOIALModel.RelationalModelDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.Views.RelationalView
{
	/// <summary>
	/// DomainClass Table
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.Table.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.Table.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainObjectId("9a790bef-9541-4eac-a0fc-8be790958d88")]
	internal partial class Table : RelationalNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Table domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9a790bef, 0x9541, 0x4eac, 0xa0, 0xfc, 0x8b, 0xe7, 0x90, 0x95, 0x8d, 0x88);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Table(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Table(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RelationalModel opposite domain role accessor
		/// <summary>
		/// Gets or sets RelationalModel.
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable.Table
		/// </summary>
		public virtual RelationalModel RelationalModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable.TableDomainRoleId) as RelationalModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.Views.RelationalView.RelationalModelHasTable.TableDomainRoleId, value);
			}
		}
		#endregion
		#region ColumnCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ColumnCollection.
		/// Description for Neumont.Tools.ORM.Views.RelationalView.TableHasColumn.Table
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Column> ColumnCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Column>(this, global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn.TableDomainRoleId);
			}
		}
		#endregion
		#region ConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ConstraintCollection.
		/// Description for Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint.Table
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Constraint> ConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Constraint>(this, global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint.TableDomainRoleId);
			}
		}
		#endregion
		#region ReferencedTableCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ReferencedTableCollection.
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable.Table
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Table> ReferencedTableCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Table>(this, global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesTable.TableDomainRoleId);
			}
		}
		#endregion
		#region ConceptType opposite domain role accessor
		/// <summary>
		/// Gets or sets ConceptType.
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType.Table
		/// </summary>
		public virtual global::Neumont.Tools.ORM.OIALModel.ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType.TableDomainRoleId) as global::Neumont.Tools.ORM.OIALModel.ConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.Views.RelationalView.TableReferencesConceptType.TableDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.Views.RelationalView
{
	/// <summary>
	/// DomainClass Column
	/// </summary>
	[global::System.Diagnostics.DebuggerDisplay("Name={Name}, Mandatory = {IsMandatory}, Data Type = {DataType}")]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.Column.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.Column.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (IsMandatory = {isMandatoryPropertyStorage})")]
	[DslModeling::DomainObjectId("71ec2ca3-0d43-4acc-a302-063dbe8681a4")]
	internal partial class Column : RelationalNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Column domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x71ec2ca3, 0x0d43, 0x4acc, 0xa3, 0x02, 0x06, 0x3d, 0xbe, 0x86, 0x81, 0xa4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Column(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Column(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsMandatory domain property code
		
		/// <summary>
		/// IsMandatory domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsMandatoryDomainPropertyId = new global::System.Guid(0xa0c66481, 0xccc1, 0x4fac, 0xaa, 0xa5, 0x31, 0xaf, 0xc4, 0x80, 0x27, 0xc1);
		
		/// <summary>
		/// Storage for IsMandatory
		/// </summary>
		private global::System.Boolean isMandatoryPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsMandatory domain property.
		/// Description for Neumont.Tools.ORM.Views.RelationalView.Column.IsMandatory
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.Column/IsMandatory.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.Column/IsMandatory.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("a0c66481-ccc1-4fac-aaa5-31afc48027c1")]
		public global::System.Boolean IsMandatory
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isMandatoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsMandatoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Column.IsMandatory domain property.
		/// </summary>
		internal sealed partial class IsMandatoryPropertyHandler : DslModeling::DomainPropertyValueHandler<Column, global::System.Boolean>
		{
			private IsMandatoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Column.IsMandatory domain property value handler.
			/// </summary>
			public static readonly IsMandatoryPropertyHandler Instance = new IsMandatoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Column.IsMandatory domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsMandatoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Column element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isMandatoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Column element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isMandatoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataType domain property code
		
		/// <summary>
		/// DataType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainPropertyId = new global::System.Guid(0xc47b93eb, 0x3e02, 0x4177, 0xa6, 0x06, 0x0c, 0x1f, 0xe6, 0x11, 0x33, 0x8c);
		
		/// <summary>
		/// Storage for DataType
		/// </summary>
		private global::System.String dataTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DataType domain property.
		/// Description for Neumont.Tools.ORM.Views.RelationalView.Column.DataType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.Column/DataType.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.Column/DataType.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("c47b93eb-3e02-4177-a606-0c1fe611338c")]
		public global::System.String DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Column.DataType domain property.
		/// </summary>
		internal sealed partial class DataTypePropertyHandler : DslModeling::DomainPropertyValueHandler<Column, global::System.String>
		{
			private DataTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Column.DataType domain property value handler.
			/// </summary>
			public static readonly DataTypePropertyHandler Instance = new DataTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Column.DataType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Column element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dataTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Column element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Table opposite domain role accessor
		/// <summary>
		/// Gets or sets Table.
		/// Description for Neumont.Tools.ORM.Views.RelationalView.TableHasColumn.Column
		/// </summary>
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn.ColumnDomainRoleId) as Table;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.Views.RelationalView.TableHasColumn.ColumnDomainRoleId, value);
			}
		}
		#endregion
		#region ConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ConstraintCollection.
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn.Column
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Constraint> ConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Constraint>(this, global::Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn.ColumnDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.Views.RelationalView
{
	/// <summary>
	/// DomainClass Constraint
	/// </summary>
	[global::System.Diagnostics.DebuggerDisplay("Name={Name}")]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.Constraint.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.Constraint.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainObjectId("b425375c-0c0d-46df-810d-3384d6b4e62b")]
	internal abstract partial class Constraint : RelationalNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Constraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb425375c, 0x0c0d, 0x46df, 0x81, 0x0d, 0x33, 0x84, 0xd6, 0xb4, 0xe6, 0x2b);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Constraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Table opposite domain role accessor
		/// <summary>
		/// Gets or sets Table.
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint.Constraint
		/// </summary>
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint.ConstraintDomainRoleId) as Table;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.Views.RelationalView.TableHasConstraint.ConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region ColumnCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ColumnCollection.
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn.Constraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Column> ColumnCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Column>(this, global::Neumont.Tools.ORM.Views.RelationalView.ConstraintReferencesColumn.ConstraintDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.Views.RelationalView
{
	/// <summary>
	/// DomainClass ForeignKey
	/// </summary>
	[System.Diagnostics.DebuggerDisplay("Name={Name}")]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.ForeignKey.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.ForeignKey.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainObjectId("16611f65-ceb1-403d-a890-602518898c80")]
	internal partial class ForeignKey : Constraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ForeignKey domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x16611f65, 0xceb1, 0x403d, 0xa8, 0x90, 0x60, 0x25, 0x18, 0x89, 0x8c, 0x80);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ForeignKey(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ForeignKey(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.Views.RelationalView
{
	/// <summary>
	/// DomainClass UniquenessConstraint
	/// </summary>
	[System.Diagnostics.DebuggerDisplay("Name={Name}, Primary = {IsPreferred}")]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.UniquenessConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.UniquenessConstraint.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (IsPreferred = {isPreferredPropertyStorage})")]
	[DslModeling::DomainObjectId("be998864-7664-410b-8072-e4d7065a17d9")]
	internal partial class UniquenessConstraint : Constraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// UniquenessConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbe998864, 0x7664, 0x410b, 0x80, 0x72, 0xe4, 0xd7, 0x06, 0x5a, 0x17, 0xd9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UniquenessConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UniquenessConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsPreferred domain property code
		
		/// <summary>
		/// IsPreferred domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPreferredDomainPropertyId = new global::System.Guid(0x5c1efc1e, 0x21b8, 0x46c8, 0xad, 0xc7, 0x02, 0xeb, 0x60, 0x01, 0x21, 0x87);
		
		/// <summary>
		/// Storage for IsPreferred
		/// </summary>
		private global::System.Boolean isPreferredPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsPreferred domain property.
		/// Description for
		/// Neumont.Tools.ORM.Views.RelationalView.UniquenessConstraint.IsPreferred
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.Views.RelationalView.UniquenessConstraint/IsPreferred.DisplayName", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.Views.RelationalView.UniquenessConstraint/IsPreferred.Description", typeof(global::Neumont.Tools.ORM.Views.RelationalView.RelationalShapeDomainModel), "Neumont.Tools.ORM.Views.RelationalView.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("5c1efc1e-21b8-46c8-adc7-02eb60012187")]
		public global::System.Boolean IsPreferred
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPreferredPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPreferredPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the UniquenessConstraint.IsPreferred domain property.
		/// </summary>
		internal sealed partial class IsPreferredPropertyHandler : DslModeling::DomainPropertyValueHandler<UniquenessConstraint, global::System.Boolean>
		{
			private IsPreferredPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the UniquenessConstraint.IsPreferred domain property value handler.
			/// </summary>
			public static readonly IsPreferredPropertyHandler Instance = new IsPreferredPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the UniquenessConstraint.IsPreferred domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPreferredDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(UniquenessConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isPreferredPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(UniquenessConstraint element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPreferredPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
