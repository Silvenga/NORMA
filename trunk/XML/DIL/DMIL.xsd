<?xml version="1.0" encoding="utf-8"?>
<xs:schema
	targetNamespace="http://schemas.orm.net/DIL/DMIL"
	xmlns:dml="http://schemas.orm.net/DIL/DMIL"
	xmlns:ddt="http://schemas.orm.net/DIL/DILDT"
	xmlns:dep="http://schemas.orm.net/DIL/DILEP"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:ddl="http://schemas.orm.net/DIL/DDIL"
	elementFormDefault="qualified"
	attributeFormDefault="unqualified"
	version="0.9">

	<xs:annotation>
		<xs:appinfo>
			<rdf:RDF
				xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
				xmlns:dc="http://purl.org/dc/elements/1.1/"
				xmlns:dcterms="http://purl.org/dc/terms/">
				<rdf:Description rdf:about="http://schemas.orm.net/DIL/DMIL">
					<dcterms:isPartOf rdf:resource="http://schemas.orm.net/DIL"/>
					<dcterms:isRequiredBy rdf:resource="http://schemas.orm.net/DIL/DIL"/>
					<dcterms:isRequiredBy rdf:resource="http://schemas.orm.net/DIL/DILEP"/>
					<dcterms:isRequiredBy rdf:resource="http://schemas.orm.net/DIL/DDIL"/>
					<dcterms:requires rdf:resource="http://schemas.orm.net/DIL/DIL"/>
					<dcterms:requires rdf:resource="http://schemas.orm.net/DIL/DILDT"/>
					<dcterms:requires rdf:resource="http://schemas.orm.net/DIL/DILEP"/>
					<dc:title>Data Manipulation Intermediate Language</dc:title>
					<dcterms:abstract>Encompasses SQL Standard Foundation "7 - Query expressions"</dcterms:abstract>
					<dc:creator>Kevin M. Owen</dc:creator>
					<dc:creator>Corey Kaylor</dc:creator>
					<dc:contributor>Korvyn Dornseif</dc:contributor>
					<dc:contributor>Clé Diggins</dc:contributor>
					<dc:contributor>Robert Moore</dc:contributor>
					<dc:rights>Copyright © Neumont University. All rights reserved.</dc:rights>
					<dcterms:rightsHolder>Neumont University</dcterms:rightsHolder>
					<dcterms:license>
						This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
						Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
						1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
						2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
						3. This notice may not be removed or altered from any source distribution.
					</dcterms:license>
				</rdf:Description>
			</rdf:RDF>
		</xs:appinfo>
	</xs:annotation>

	<xs:import namespace="http://schemas.orm.net/DIL/DIL"/>
	<xs:import namespace="http://schemas.orm.net/DIL/DILDT"/>
	<xs:import namespace="http://schemas.orm.net/DIL/DILEP"/>

	<xs:element name="scalarSubquery" type="dml:scalarSubquery"/>
	<xs:complexType name="scalarSubquery">
		<xs:annotation>
			<xs:documentation>To be used in this context, a subquery must return a single result (single column, single row, scalar datatype).</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="dml:subquery"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="tableSubquery" type="dml:tableSubquery"/>
	<xs:complexType name="tableSubquery">
		<xs:annotation>
			<xs:documentation>To be used in this context, a subquery must return a table.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="dml:subquery"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="subquery" type="dml:subquery"/>
	<xs:complexType name="subquery">
		<xs:annotation>
			<xs:documentation>( &lt;query expression&gt; )</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="dml:queryExpression"/>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="tableValueConstructor">
		<xs:annotation>
			<xs:documentation>VALUES &lt;row value expression list&gt;</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:group ref="dep:valueExpressionPrimary" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	
	<!-- Query Expression pg. #351-->
	<xs:complexType name="queryExpression">
		<xs:group ref="dml:queryExpression"/>
	</xs:complexType>
	<xs:group name="queryExpression">
		<xs:choice>
			<xs:element name="withClauseQuery" type="dml:withClauseQuery"/>
			<xs:group ref="dml:queryPrimary"/>
		</xs:choice>
	</xs:group>

	<xs:group name="queryPrimary">
		<xs:choice>
			<xs:element name="union" type="dml:setOperation">
				<xs:annotation>
					<xs:documentation>&lt;query primary&gt; UNION [ &lt;set quantifier&gt; ] [ &lt;corresponding spec&gt; ] &lt;query primary&gt;</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="except" type="dml:setOperation">
				<xs:annotation>
					<xs:documentation>&lt;query primary&gt; EXCEPT [ &lt;set quantifier&gt; ] [ &lt;corresponding spec&gt; ] &lt;query primary&gt;</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="intersect" type="dml:setOperation">
				<xs:annotation>
					<xs:documentation>&lt;query primary&gt; INTERSECT [ &lt;set quantifier&gt; ] [ &lt;corresponding spec&gt; ] &lt;query primary&gt;</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="dml:querySpecification"/>
			<xs:element name="tableValueConstructor" type="dml:tableValueConstructor"/>
			<xs:element name="explicitTable" type="ddt:schemaQualifiedName">
				<xs:annotation>
					<xs:documentation>TABLE &lt;table or query name&gt;</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:group>

	<xs:complexType name="setOperation">
		<xs:sequence>
			<xs:group ref="dml:queryPrimary"/>
			<xs:element name="correspondingSpec" minOccurs="0">
				<xs:annotation>
					<xs:documentation>CORRESPONDING [ BY ( &lt;column name&gt;... ) ]</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="dep:columnNameDefinition" minOccurs="0" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:group ref="dml:queryPrimary"/>
		</xs:sequence>
		<xs:attribute name="setQuantifier" type="dml:setQuantifier" use="optional" default="ALL"/>
	</xs:complexType>

	<!-- p.300 -->
	<xs:complexType name="tableExpression">
		<xs:group ref="dml:tableExpression"/>
	</xs:complexType>
	<xs:group name="tableExpression">
		<xs:annotation>
			<xs:documentation>&lt;from clause&gt; [ &lt;where clause&gt; ] [ &lt;group by clause&lt; ] [ &lt;having clause&gt; ] [ &lt;window clause&gt; ]</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="dml:fromClause"/>
			<xs:element ref="dml:whereClause" minOccurs="0"/>
			<xs:element ref="dml:groupByClause" minOccurs="0"/>
			<xs:element ref="dml:havingClause" minOccurs="0"/>
			<xs:element ref="dml:windowClause" minOccurs="0"/>
		</xs:sequence>
	</xs:group>

	<xs:element name="fromClause" type="dml:tablePrimary">
		<xs:annotation>
			<xs:documentation>FROM &lt;table primary&gt;</xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:element name="whereClause" type="dep:searchCondition">
		<xs:annotation>
			<xs:documentation>WHERE &lt;search condition&gt;</xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:element name="groupByClause">
		<xs:annotation>
			<xs:documentation>GROUP BY [ &lt;set quantifier&gt; ] &lt;grouping element list&gt;</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:group ref="dml:groupingElement" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attribute name="setQuantifier" type="dml:setQuantifier" use="optional" default="ALL"/>
		</xs:complexType>
	</xs:element>

	<xs:complexType name="withClauseQuery">
		<xs:annotation>
			<xs:documentation>WITH [ RECURSIVE ] &lt;with list&gt; &lt;query primary&gt;</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="withListElement" type="dml:withListElement" maxOccurs="unbounded"/>
			<xs:group ref="dml:queryPrimary"/>
		</xs:sequence>
		<xs:attribute name="recursive" default="false" type="xs:boolean"/>
	</xs:complexType>

	<xs:complexType name="withListElement">
		<xs:annotation>
			<xs:documentation>&lt;query name&gt; [ ( &lt;with column list&gt; ) ] AS ( &lt;query expression&gt; ) [ &lt;search clause&gt; ] [ &lt;cycle clause&gt; ]</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="dep:columnNameDefinition" minOccurs="0" maxOccurs="unbounded" />
			<xs:group ref="dml:queryExpression"/>
			<xs:element name="searchClause" type="dml:searchClause" minOccurs="0"/>
			<xs:element name="cycleClause" type="dml:cycleClause" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="queryName" use="required" type="ddt:identifier"/>
	</xs:complexType>

	<xs:complexType name="searchClause">
		<xs:annotation>
			<xs:documentation>SEARCH &lt;recursive search order&gt; SET &lt;sequence column&gt;</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="sortSpecification" type="dml:sortSpecification" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="sequenceColumn" use="required" type="ddt:identifier"/>
		<xs:attribute name="type" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="DEPTH FIRST BY"/>
					<xs:enumeration value="BREADTH FIRST BY"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	
	<xs:complexType name="cycleClause">
		<xs:annotation>
			<xs:documentation>CYCLE &lt;cycle column list&gt; SET &lt;cycle mark column&gt; TO &lt;cycle mark value&gt;</xs:documentation>
			<xs:documentation>DEFAULT &lt;non cycle mark value&gt; USING &lt;path column&gt;</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="cycleColumn" maxOccurs="unbounded">
				<xs:complexType>
					<xs:attribute name="name" use="required" type="ddt:identifier"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="cycleMarkColumn">
				<xs:complexType>
					<xs:attribute name="name" use="required" type="ddt:identifier"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="cycleMarkValue" type="dep:valueExpression"/>
			<xs:element name="nonCycleMarkValue" type="dep:valueExpression"/>
			<xs:element name="pathColumn">
				<xs:complexType>
					<xs:attribute name="name" use="required" type="ddt:identifier"/>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="sortSpecification">
		<xs:annotation>
			<xs:documentation>&lt;sort key&gt; [ &lt;ordering specification&gt; ] [ &lt;null ordering&gt; ]</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:group ref="dep:valueExpression"/>
		</xs:sequence>
		<xs:attribute name="orderingSpecification" use="optional">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="ASC"/>
					<xs:enumeration value="DESC"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="nullOrdering" use="optional">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="NULLS FIRST"/>
					<xs:enumeration value="NULLS LAST"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>

	<xs:simpleType name="setQuantifier">
		<xs:annotation>
			<xs:documentation>ALL | DISTINCT</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="ALL"/>
			<xs:enumeration value="DISTINCT"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:group name="groupingElement">
		<xs:annotation>
			<xs:documentation>&lt;ordinary grouping set&gt; | &lt;rollup list&gt; | &lt;cube list&gt; | &lt;grouping sets specification&gt; | &lt;empty grouping set&gt;</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="ordinaryGroupingSet" type="dml:ordinaryGroupingSet"/>
			<xs:element name="rollupList" type="dml:ordinaryGroupingSetList">
				<xs:annotation>
					<xs:documentation>ROLLUP ( &lt;ordinary grouping set list&gt; )</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="cubeList" type="dml:ordinaryGroupingSetList">
				<xs:annotation>
					<xs:documentation>CUBE ( &lt;ordinary grouping set list&gt; )</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="groupingSetsSpecification">
				<xs:annotation>
					<xs:documentation>GROUPING SETS ( &lt;grouping element list&gt; )</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:group ref="dml:groupingElement" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="emptyGroupingSet">
				<xs:annotation>
					<xs:documentation>( )</xs:documentation>
				</xs:annotation>
				<xs:complexType/>
			</xs:element>
		</xs:choice>
	</xs:group>

	<xs:complexType name="ordinaryGroupingSetList">
		<xs:annotation>
			<xs:documentation>&lt;ordinary grouping set&gt; [ { , &lt;ordinary grouping set&gt; } ... ]</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ordinaryGroupingSet" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="ordinaryGroupingSet">
		<xs:annotation>
			<xs:documentation>( &lt;grouping column reference list&gt; )</xs:documentation>
		</xs:annotation>
		<xs:sequence maxOccurs="unbounded">
			<xs:group ref="dep:columnReferenceOrCollatedColumnReference"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="havingClause" type="dep:searchCondition">
		<xs:annotation>
			<xs:documentation>HAVING &lt;search condition&gt;</xs:documentation>
		</xs:annotation>
	</xs:element>

	<!-- windowClause and related types are not yet ready for use. -->
	<xs:element name="windowClause">
		<xs:annotation>
			<xs:documentation>WINDOW &lt;window definition list&gt;</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="windowDefinition" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>&lt;new window name&gt; AS &lt;window specification&gt;</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="newWindowName" use="required" type="ddt:identifier"/>
						<xs:attribute name="existingWindowName" use="optional" type="ddt:identifier"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<!-- p.340 -->
	<xs:element name="querySpecification" type="dml:querySpecification"/>
	<xs:complexType name="querySpecification">
		<xs:annotation>
			<xs:documentation>SELECT [ &lt;set quantifier&gt; ] &lt;select list&gt; &lt;table expression&gt;</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="selectList" type="dml:selectList"/>
			<xs:group ref="dml:tableExpression"/>
		</xs:sequence>
		<xs:attribute name="setQuantifier" type="dml:setQuantifier" use="optional" default="ALL"/>
	</xs:complexType>

	<xs:complexType name="selectList">
		<xs:annotation>
			<xs:documentation>&lt;asterisk&gt; | &lt;select sublist&gt; [ { , &lt;select sublist&gt; }... ]</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="asterisk" type="dml:asterisk"/>
			<xs:choice maxOccurs="unbounded">
				<!-- In the standard, you can't directly put a value expression in a select list (it can only be part of a derived column. -->
				<!-- We relax this a bit here and make derived column only necessary when you are providing an explicit name for the result column. -->
				<xs:element name="derivedColumn">
					<xs:annotation>
						<xs:documentation>&lt;value expression&gt; AS &lt;column name&gt; </xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:complexContent>
							<xs:extension base="dep:valueExpression">
								<xs:attribute name="columnName" use="required" type="ddt:identifier"/>
							</xs:extension>
						</xs:complexContent>
					</xs:complexType>
				</xs:element>
				<xs:group ref="dep:valueExpression"/>
				<xs:element name="asteriskedIdentifierChain">
					<xs:annotation>
						<xs:documentation>&lt;identifier chain&gt; . *</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="identifierChain" use="required" type="ddt:identifierChain"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="allFieldsReference">
					<xs:annotation>
						<xs:documentation>&lt;value expression primary&gt; . * [ AS ( &lt;all fields column name list&gt; ) ]</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:group ref="dep:valueExpressionPrimary"/>
							<xs:element ref="dep:columnNameDefinition" minOccurs="0" maxOccurs="unbounded" />
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:choice>
		</xs:choice>
	</xs:complexType>

	<xs:complexType name="asterisk">
		<xs:annotation>
			<xs:documentation>*</xs:documentation>
		</xs:annotation>
	</xs:complexType>

	<xs:complexType name="tablePrimary">
		<xs:group ref="dml:tablePrimary"/>
	</xs:complexType>
	<xs:group name="tablePrimary">
		<xs:annotation>
			<xs:documentation>&lt;table name&gt; [ &lt;correlation&gt; ]</xs:documentation>
			<xs:documentation>| &lt;query name&gt; [ &lt;correlation&gt; ]</xs:documentation>
			<xs:documentation>| &lt;derived table&gt; &lt;correlation&gt;</xs:documentation>
			<xs:documentation>| &lt;lateral derived table&gt; &lt;correlation&gt;</xs:documentation>
			<xs:documentation>| &lt;table function derived table&gt; &lt;correlation&gt;</xs:documentation>
			<xs:documentation>| &lt;only spec&gt; [ &lt;correlation&gt; ]</xs:documentation>
			<xs:documentation>| ( &lt;joined table&gt; )</xs:documentation>
			<xs:documentation>| &lt;sampled table primary&gt;</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="tableName" type="dml:schemaQualifiedNameWithOptionalCorrelation"/>
			<xs:element name="queryName" type="dml:schemaQualifiedNameWithOptionalCorrelation"/>
			<xs:element name="onlySpec" type="dml:schemaQualifiedNameWithOptionalCorrelation">
				<xs:annotation>
					<xs:documentation>ONLY &lt;table or query name&gt;</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="derivedTable" type="dml:tableSubqueryWithMandatoryCorrelation"/>
			<xs:element name="lateralDerivedTable" type="dml:tableSubqueryWithMandatoryCorrelation">
				<xs:annotation>
					<xs:documentation>LATERAL &lt;table subquery&gt;</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:group ref="dml:joinedTable"/>
			<xs:element name="sampledTablePrimary">
				<xs:annotation>
					<xs:documentation>&lt;table primary&gt; [ &lt;sample clause&gt; ]</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:group ref="dml:tablePrimary"/>
						<xs:element name="sampleClause">
							<xs:annotation>
								<xs:documentation>TABLESAMPLE &lt;sample method&gt; ( &lt;numeric value expression&gt; ) [ REPEATABLE ( &lt;numeric value expression&gt; ) ]</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:group ref="dep:numericValueExpression" maxOccurs="2"/>
								</xs:sequence>
								<xs:attribute name="sampleMethod" use="required">
									<xs:simpleType>
										<xs:restriction base="xs:string">
											<xs:enumeration value="BERNOULLI"/>
											<xs:enumeration value="SYSTEM"/>
										</xs:restriction>
									</xs:simpleType>
								</xs:attribute>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:group>

	<xs:complexType name="schemaQualifiedNameWithOptionalCorrelation">
		<xs:complexContent>
			<xs:extension base="ddt:schemaQualifiedName">
				<xs:sequence>
					<xs:element name="correlation" type="dml:correlation" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="tableSubqueryWithMandatoryCorrelation">
		<xs:complexContent>
			<xs:extension base="dml:tableSubquery">
				<xs:sequence>
					<xs:element name="correlation" type="dml:correlation"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="correlation">
		<xs:annotation>
			<xs:documentation>AS &lt;correlation name&gt; [ ( &lt;derived column list&gt; ) ]</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="dep:columnNameDefinition" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="name" use="required" type="ddt:identifier"/>
	</xs:complexType>

	<xs:group name="joinedTable">
		<xs:annotation>
			<xs:documentation>&lt;cross join&gt; | &lt;qualified join&gt; | &lt;natural join&gt;</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="crossJoin">
				<xs:annotation>
					<xs:documentation>&lt;table reference&gt; CROSS JOIN &lt;table factor&gt;</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:group ref="dml:tablePrimary" minOccurs="2" maxOccurs="2"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="qualifiedJoin">
				<xs:annotation>
					<xs:documentation>&lt;table reference&gt; [ &lt;join type&gt; ] JOIN &lt;table reference&gt; { &lt;join condition&gt; | &lt;named columns join&gt; }</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:group ref="dml:tablePrimary" minOccurs="2" maxOccurs="2"/>
						<xs:choice>
							<xs:element name="joinCondition" type="dep:searchCondition">
								<xs:annotation>
									<xs:documentation>ON &lt;search condition&gt;</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="namedColumnsJoin">
								<xs:annotation>
									<xs:documentation>USING &lt;join column list&gt;</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:sequence>
										<xs:element ref="dep:simpleColumnReference" maxOccurs="unbounded"/>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
						</xs:choice>
					</xs:sequence>
					<xs:attribute name="joinType" use="optional" default="INNER" type="dml:joinType"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="naturalJoin">
				<xs:annotation>
					<xs:documentation>&lt;table reference&gt; NATURAL [ &lt;join type&gt; ] JOIN &lt;table factor&gt;</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:group ref="dml:tablePrimary" minOccurs="2" maxOccurs="2"/>
					</xs:sequence>
					<xs:attribute name="joinType" use="optional" default="INNER" type="dml:joinType"/>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:group>

	<xs:simpleType name="joinType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="INNER"/>
			<xs:enumeration value="LEFT OUTER"/>
			<xs:enumeration value="RIGHT OUTER"/>
			<xs:enumeration value="FULL OUTER"/>
		</xs:restriction>
	</xs:simpleType>

	<!--Insert statment : Cle'   comments for purposes of finding my code.  remove them before shipping-->
	<xs:element name="insertStatement">
		<xs:annotation>
			<xs:documentation>INSERT INTO &lt;schema qualified name&gt;</xs:documentation>
			<xs:documentation>{ [ ( &lt;insert column list&gt; ) ] [ &lt;override clause&gt; ] &lt;query expression&gt; | &lt;default values&gt; }</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="ddt:schemaQualifiedName">
					<xs:choice>
						<xs:sequence>
							<xs:element ref="dep:simpleColumnReference" minOccurs="0" maxOccurs="unbounded"/>
							<xs:group ref="dml:queryExpression"/>
						</xs:sequence>
						<xs:element name="defaultValues">
							<xs:annotation>
								<xs:documentation>DEFAULT VALUES</xs:documentation>
							</xs:annotation>
							<xs:complexType/>
						</xs:element>
					</xs:choice>
					<xs:attribute name="overrideClause" use="optional" type="dml:overrideClause"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>

	<xs:simpleType name="overrideClause">
		<xs:restriction base="xs:string">
			<xs:enumeration value="OVERRIDING USER VALUE"/>
			<xs:enumeration value="OVERRIDING SYSTEM VALUE"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:element name="deleteStatement">
		<xs:annotation>
			<xs:documentation>DELETE FROM &lt;schema qualified name&gt;	[ AS &lt;correlation name&gt; ] [ &lt;where clause&gt; ]</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="ddt:schemaQualifiedName">
					<xs:sequence>
						<xs:element ref="dml:whereClause" minOccurs="0"/>
					</xs:sequence>
					<xs:attribute name="correlationName" use="optional" type="ddt:identifier"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>

	<xs:element name="updateStatement">
		<xs:annotation>
			<xs:documentation>UPDATE &lt;schema qualified name&gt; [ AS &lt;correlation name&gt; ] SET &lt;set clause list&gt; [ &lt;where clause&gt; ]</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="ddt:schemaQualifiedName">
					<xs:sequence>
						<xs:group ref="dml:setClause" maxOccurs="unbounded"/>
						<xs:element ref="dml:whereClause" minOccurs="0"/>
					</xs:sequence>
					<xs:attribute name="correlationName" use="optional" type="ddt:identifier"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>

	<xs:group name="setClause" >
		<xs:annotation>
			<xs:documentation>&lt;multiple column assignment&gt; | &lt;single column assignment&gt;</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="multipleColumnAssignment">
				<xs:annotation>
					<xs:documentation>( &lt;column name list&gt; ) = &lt;value expression primary&gt;</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="dep:simpleColumnReference" maxOccurs="unbounded"/>
						<xs:group ref="dep:valueExpressionPrimary"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="singleColumnAssignment">
				<xs:annotation>
					<xs:documentation>&lt;column name&gt; = &lt;update source&gt;</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:group ref="dml:updateSource"/>
					<xs:attribute name="name" use="required" type="ddt:identifier"/>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:group>

	<xs:group name="updateSource">
		<xs:choice>
			<xs:group ref="dep:valueExpression"/>
			<xs:group ref="dep:contextuallyTypedValueSpecification"/>
		</xs:choice>
	</xs:group>

	<!-- End of proc work done by cle.  comments for purposes of finding my code.  remove them before shipping -->


	<!-- windowClause and related types are not yet ready for use. -->
	<!--<xs:complexType name="windowSpecificationDetails">
		<xs:annotation>
			<xs:documentation>[ &lt;existing window name&gt; ] [ &lt;window partition clause&gt; ] [ &lt;window order clause&gt; ] [ &lt;window frame clause&gt; ]</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="existingWindowName" type="ddt:identifier" minOccurs="0"/>
			<xs:sequence minOccurs="0">
				<xs:element ref="dep:columnReference"/>
				<xs:element ref="dep:collateClause" minOccurs="0"/>
			</xs:sequence>
			<xs:element ref="dep:sortSpecification"  maxOccurs="unbounded"/>
			<xs:element name="windowFrameClause">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="windowFrameExtent">
							<xs:complexType>
								<xs:choice>
									<xs:element name="windowFrameStart" type="dml:windowFrameStart"/>
									<xs:element name="windowFrameBetween" type="dml:windowFrameBound" maxOccurs="2" minOccurs="2"/>
								</xs:choice>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
					<xs:attribute name="windowFrameUnits" use="required">
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:enumeration value="ROWS"/>
								<xs:enumeration value="RANGE"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="windowFrameExclusion" use="optional">
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:enumeration value="EXCLUDE CURRENT ROW"/>
								<xs:enumeration value="EXCLUDE GROUP"/>
								<xs:enumeration value="EXCLUDE TIES"/>
								<xs:enumeration value="EXCLUDE NO OTHERS"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="unboundedPreceding"/>
	<xs:complexType name="unboundedFollowing"/>
	<xs:complexType name="currentRow"/>
	<xs:complexType name="windowFrameStart">
		<xs:choice>
			<xs:element name="unboundedPreceding" type="dml:unboundedPreceding"/>
			<xs:element name="currentRow" type="dml:currentRow"/>
			<xs:element name="windowFramePreceding" type="dep:valueSpecification"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="windowFrameBound">
		<xs:choice>
			<xs:element name="windowFrameStart" type="dml:windowFrameStart"/>
			<xs:element name="unboundedFollowing" type="dml:unboundedFollowing"/>
			<xs:element name="windowFrameFollowing" type="dep:valueSpecification"/>
		</xs:choice>
	</xs:complexType>-->


</xs:schema>
