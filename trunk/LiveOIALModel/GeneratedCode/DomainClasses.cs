#region Common Public License Copyright Notice
/**************************************************************************\
* Neumont Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass OIALNamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.OIALNamedElement.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.OIALNamedElement.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("800b9524-e41c-4360-b06a-51005417283c")]
	public abstract partial class OIALNamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// OIALNamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x800b9524, 0xe41c, 0x4360, 0xb0, 0x6a, 0x51, 0x00, 0x54, 0x17, 0x28, 0x3c);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected OIALNamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x34b63104, 0x1e6d, 0x457b, 0x80, 0x29, 0x60, 0x9e, 0xbb, 0x9d, 0xf6, 0xa5);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Neumont.Tools.ORM.TestOIALModel.OIALNamedElement.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.OIALNamedElement/Name.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.OIALNamedElement/Name.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("34b63104-1e6d-457b-8029-609ebb9df6a5")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the OIALNamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<OIALNamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the OIALNamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the OIALNamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(OIALNamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(OIALNamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass LiveOIALModel
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.LiveOIALModel.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.LiveOIALModel.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0122b3e1-ecc2-4063-88d8-8e3fc25b01b9")]
	public partial class LiveOIALModel : OIALNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LiveOIALModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0122b3e1, 0xecc2, 0x4063, 0x88, 0xd8, 0x8e, 0x3f, 0xc2, 0x5b, 0x01, 0xb9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LiveOIALModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LiveOIALModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ORMModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ORMModel.
		/// Description for Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel.OIALModel
		/// </summary>
		public virtual global::Neumont.Tools.ORM.ObjectModel.ORMModel ORMModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel.OIALModelDomainRoleId) as global::Neumont.Tools.ORM.ObjectModel.ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasORMModel.OIALModelDomainRoleId, value);
			}
		}
		#endregion
		#region ConceptTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ConceptTypeCollection.
		/// Description for Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConceptType> ConceptTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ConceptType>(this, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType.ModelDomainRoleId);
			}
		}
		#endregion
		#region InformationTypeFormatCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of InformationTypeFormatCollection.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<InformationTypeFormat> InformationTypeFormatCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<InformationTypeFormat>(this, global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat.ModelDomainRoleId);
			}
		}
		#endregion
		#region ChildSequenceConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ChildSequenceConstraintCollection.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint.OIALModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ChildSequenceConstraint> ChildSequenceConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ChildSequenceConstraint>(this, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint.OIALModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraint.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormat.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Neumont.Tools.ORM.TestOIALModel.ConceptType.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraint sourceChildSequenceConstraint1 = sourceElement as global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraint;
			if (sourceChildSequenceConstraint1 != null)
			{
				// Create link for path OIALModelHasChildSequenceConstraint.ChildSequenceConstraintCollection
				this.ChildSequenceConstraintCollection.Add(sourceChildSequenceConstraint1);

				return;
			}
				
			global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormat sourceInformationTypeFormat2 = sourceElement as global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormat;
			if (sourceInformationTypeFormat2 != null)
			{
				// Create link for path OIALHasInformationTypeFormat.InformationTypeFormatCollection
				this.InformationTypeFormatCollection.Add(sourceInformationTypeFormat2);

				return;
			}
				
			global::Neumont.Tools.ORM.TestOIALModel.ConceptType sourceConceptType3 = sourceElement as global::Neumont.Tools.ORM.TestOIALModel.ConceptType;
			if (sourceConceptType3 != null)
			{
				// Create link for path OIALModelHasConceptType.ConceptTypeCollection
				this.ConceptTypeCollection.Add(sourceConceptType3);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraint sourceChildSequenceConstraint1 = sourceElement as global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraint;
			if (sourceChildSequenceConstraint1 != null)
			{
				// Delete link for path OIALModelHasChildSequenceConstraint.ChildSequenceConstraintCollection
				
				foreach (DslModeling::ElementLink link in global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint.GetLinks((global::Neumont.Tools.ORM.TestOIALModel.LiveOIALModel)this, sourceChildSequenceConstraint1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint.OIALModelDomainRoleId, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintDomainRoleId);
				}

				return;
			}
				
			global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormat sourceInformationTypeFormat2 = sourceElement as global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormat;
			if (sourceInformationTypeFormat2 != null)
			{
				// Delete link for path OIALHasInformationTypeFormat.InformationTypeFormatCollection
				
				foreach (DslModeling::ElementLink link in global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat.GetLinks((global::Neumont.Tools.ORM.TestOIALModel.LiveOIALModel)this, sourceInformationTypeFormat2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat.ModelDomainRoleId, global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat.InformationTypeFormatDomainRoleId);
				}

				return;
			}
				
			global::Neumont.Tools.ORM.TestOIALModel.ConceptType sourceConceptType3 = sourceElement as global::Neumont.Tools.ORM.TestOIALModel.ConceptType;
			if (sourceConceptType3 != null)
			{
				// Delete link for path OIALModelHasConceptType.ConceptTypeCollection
				
				foreach (DslModeling::ElementLink link in global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType.GetLinks((global::Neumont.Tools.ORM.TestOIALModel.LiveOIALModel)this, sourceConceptType3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType.ModelDomainRoleId, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType.ConceptTypeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass ConceptType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ConceptType.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ConceptType.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b3ad2fa0-cd80-4bce-89d7-adbe6d5089e0")]
	public partial class ConceptType : OIALNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConceptType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb3ad2fa0, 0xcd80, 0x4bce, 0x89, 0xd7, 0xad, 0xbe, 0x6d, 0x50, 0x89, 0xe0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConceptType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConceptType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType.ConceptType
		/// </summary>
		public virtual LiveOIALModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType.ConceptTypeDomainRoleId) as LiveOIALModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasConceptType.ConceptTypeDomainRoleId, value);
			}
		}
		#endregion
		#region AbsorbedConceptTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of AbsorbedConceptTypeCollection.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConceptType> AbsorbedConceptTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ConceptType>(this, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType.AbsorbingConceptTypeDomainRoleId);
			}
		}
		#endregion
		#region AbsorbingConceptType opposite domain role accessor
		/// <summary>
		/// Gets or sets AbsorbingConceptType.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptType
		/// </summary>
		public virtual ConceptType AbsorbingConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeDomainRoleId) as ConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeAbsorbedConceptType.AbsorbedConceptTypeDomainRoleId, value);
			}
		}
		#endregion
		#region InformationTypeFormatCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of InformationTypeFormatCollection.
		/// Description for Neumont.Tools.ORM.TestOIALModel.InformationType.ConceptType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<InformationTypeFormat> InformationTypeFormatCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<InformationTypeFormat>(this, global::Neumont.Tools.ORM.TestOIALModel.InformationType.ConceptTypeDomainRoleId);
			}
		}
		#endregion
		#region ReferencedConceptTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ReferencedConceptTypeCollection.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef.ReferencingConceptType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConceptType> ReferencedConceptTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ConceptType>(this, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeRef.ReferencingConceptTypeDomainRoleId);
			}
		}
		#endregion
		#region ObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectType.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType.ConceptType
		/// </summary>
		public virtual global::Neumont.Tools.ORM.ObjectModel.ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType.ConceptTypeDomainRoleId) as global::Neumont.Tools.ORM.ObjectModel.ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.ConceptTypeHasObjectType.ConceptTypeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass InformationTypeFormat
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.InformationTypeFormat.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.InformationTypeFormat.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6686689d-3d40-4e16-9cb4-0f58036a51b0")]
	public partial class InformationTypeFormat : OIALNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InformationTypeFormat domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6686689d, 0x3d40, 0x4e16, 0x9c, 0xb4, 0x0f, 0x58, 0x03, 0x6a, 0x51, 0xb0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InformationTypeFormat(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InformationTypeFormat(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ConceptTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ConceptTypeCollection.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.InformationType.InformationTypeFormat
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConceptType> ConceptTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ConceptType>(this, global::Neumont.Tools.ORM.TestOIALModel.InformationType.InformationTypeFormatDomainRoleId);
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat.InformationTypeFormat
		/// </summary>
		public virtual LiveOIALModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat.InformationTypeFormatDomainRoleId) as LiveOIALModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.OIALHasInformationTypeFormat.InformationTypeFormatDomainRoleId, value);
			}
		}
		#endregion
		#region ValueType opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueType.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType.InformationTypeFormat
		/// </summary>
		public virtual global::Neumont.Tools.ORM.ObjectModel.ObjectType ValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatDomainRoleId) as global::Neumont.Tools.ORM.ObjectModel.ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.InformationTypeFormatHasObjectType.InformationTypeFormatDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass ChildSequence
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ChildSequence.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f03f850b-9f09-46d8-b6c5-bcfa00fd0cd3")]
	public partial class ChildSequence : OIALNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ChildSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf03f850b, 0x9f09, 0x46d8, 0xb6, 0xc5, 0xbc, 0xfa, 0x00, 0xfd, 0x0c, 0xd3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ChildSequence(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ChildSequence(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ConceptTypeChildCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ConceptTypeChildCollection.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild.ChildSequence
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConceptTypeChild> ConceptTypeChildCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ConceptTypeChild>(this, global::Neumont.Tools.ORM.TestOIALModel.ChildSequenceHasConceptTypeChild.ChildSequenceDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass Constraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.Constraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.Constraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e5d9e3e5-5931-4a1d-b138-615d2fd906ce")]
	public abstract partial class Constraint : OIALNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Constraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe5d9e3e5, 0x5931, 0x4a1d, 0xb1, 0x38, 0x61, 0x5d, 0x2f, 0xd9, 0x06, 0xce);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Constraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Modality domain property code
		
		/// <summary>
		/// Modality domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModalityDomainPropertyId = new global::System.Guid(0x8ea5357b, 0x66fa, 0x4d61, 0xa6, 0xc6, 0xbd, 0x9e, 0xd0, 0x91, 0xd1, 0x31);
		
		/// <summary>
		/// Storage for Modality
		/// </summary>
		private global::Neumont.Tools.ORM.ObjectModel.ConstraintModality modalityPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Modality domain property.
		/// Description for Neumont.Tools.ORM.TestOIALModel.Constraint.Modality
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.Constraint/Modality.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.Constraint/Modality.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8ea5357b-66fa-4d61-a6c6-bd9ed091d131")]
		public global::Neumont.Tools.ORM.ObjectModel.ConstraintModality Modality
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modalityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModalityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Constraint.Modality domain property.
		/// </summary>
		internal sealed partial class ModalityPropertyHandler : DslModeling::DomainPropertyValueHandler<Constraint, global::Neumont.Tools.ORM.ObjectModel.ConstraintModality>
		{
			private ModalityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Constraint.Modality domain property value handler.
			/// </summary>
			public static readonly ModalityPropertyHandler Instance = new ModalityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Constraint.Modality domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModalityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Neumont.Tools.ORM.ObjectModel.ConstraintModality GetValue(Constraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modalityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Constraint element, global::Neumont.Tools.ORM.ObjectModel.ConstraintModality newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Neumont.Tools.ORM.ObjectModel.ConstraintModality oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modalityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass SingleChildConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.SingleChildConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.SingleChildConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("67db8a48-40a6-42bf-863d-78bac1446ad3")]
	public abstract partial class SingleChildConstraint : Constraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SingleChildConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x67db8a48, 0x40a6, 0x42bf, 0x86, 0x3d, 0x78, 0xba, 0xc1, 0x44, 0x6a, 0xd3);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected SingleChildConstraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ConceptTypeChild opposite domain role accessor
		/// <summary>
		/// Gets or sets ConceptTypeChild.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint.SingleChildConstraint
		/// </summary>
		public virtual ConceptTypeChild ConceptTypeChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint.SingleChildConstraintDomainRoleId) as ConceptTypeChild;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.ChildHasSingleChildConstraint.SingleChildConstraintDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass ChildSequenceConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e02af95c-b70e-40da-a827-4f8e16ba7b60")]
	public abstract partial class ChildSequenceConstraint : Constraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ChildSequenceConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe02af95c, 0xb70e, 0x40da, 0xa8, 0x27, 0x4f, 0x8e, 0x16, 0xba, 0x7b, 0x60);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ChildSequenceConstraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region OIALModel opposite domain role accessor
		/// <summary>
		/// Gets or sets OIALModel.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraint
		/// </summary>
		public virtual LiveOIALModel OIALModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintDomainRoleId) as LiveOIALModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.OIALModelHasChildSequenceConstraint.ChildSequenceConstraintDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass SingleChildUniquenessConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.SingleChildUniquenessConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.SingleChildUniquenessConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("dcc774b9-cc66-437e-956e-6ab792f96089")]
	public partial class SingleChildUniquenessConstraint : SingleChildConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SingleChildUniquenessConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdcc774b9, 0xcc66, 0x437e, 0x95, 0x6e, 0x6a, 0xb7, 0x92, 0xf9, 0x60, 0x89);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SingleChildUniquenessConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SingleChildUniquenessConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsPreferred domain property code
		
		/// <summary>
		/// IsPreferred domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPreferredDomainPropertyId = new global::System.Guid(0x30840715, 0xe330, 0x4fb5, 0xac, 0xa8, 0x65, 0x71, 0x55, 0xed, 0x00, 0xe1);
		
		/// <summary>
		/// Storage for IsPreferred
		/// </summary>
		private global::System.Boolean isPreferredPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsPreferred domain property.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.SingleChildUniquenessConstraint.IsPreferred
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.SingleChildUniquenessConstraint/IsPreferred.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.SingleChildUniquenessConstraint/IsPreferred.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("30840715-e330-4fb5-aca8-657155ed00e1")]
		public global::System.Boolean IsPreferred
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPreferredPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPreferredPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SingleChildUniquenessConstraint.IsPreferred domain property.
		/// </summary>
		internal sealed partial class IsPreferredPropertyHandler : DslModeling::DomainPropertyValueHandler<SingleChildUniquenessConstraint, global::System.Boolean>
		{
			private IsPreferredPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SingleChildUniquenessConstraint.IsPreferred domain property value handler.
			/// </summary>
			public static readonly IsPreferredPropertyHandler Instance = new IsPreferredPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SingleChildUniquenessConstraint.IsPreferred domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPreferredDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(SingleChildUniquenessConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isPreferredPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SingleChildUniquenessConstraint element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPreferredPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass SingleChildSequenceConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("526a34fd-1c91-4184-b35d-a7dcf1da42de")]
	public abstract partial class SingleChildSequenceConstraint : ChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SingleChildSequenceConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x526a34fd, 0x1c91, 0x4184, 0xb3, 0x5d, 0xa7, 0xdc, 0xf1, 0xda, 0x42, 0xde);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected SingleChildSequenceConstraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ChildSequence opposite domain role accessor
		/// <summary>
		/// Gets or sets ChildSequence.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraint
		/// </summary>
		public virtual MinTwoChildrenChildSequence ChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintDomainRoleId) as MinTwoChildrenChildSequence;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.SingleChildSequenceConstraintHasMinTwoChildrenChildSequence.SingleChildSequenceConstraintDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass MultiChildSequenceConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.MultiChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.MultiChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1d88e008-f00a-4055-9299-e80a0e460408")]
	public abstract partial class MultiChildSequenceConstraint : ChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MultiChildSequenceConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1d88e008, 0xf00a, 0x4055, 0x92, 0x99, 0xe8, 0x0a, 0x0e, 0x46, 0x04, 0x08);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected MultiChildSequenceConstraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass SingleChildFrequencyConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.SingleChildFrequencyConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.SingleChildFrequencyConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("09b6b866-61f7-405d-9f3e-3f44a9ba2ba1")]
	public partial class SingleChildFrequencyConstraint : SingleChildConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SingleChildFrequencyConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x09b6b866, 0x61f7, 0x405d, 0x9f, 0x3e, 0x3f, 0x44, 0xa9, 0xba, 0x2b, 0xa1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SingleChildFrequencyConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SingleChildFrequencyConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass ValueConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ValueConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ValueConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4ce5276c-45f6-4d72-bea4-9d0a6c37930c")]
	public partial class ValueConstraint : SingleChildConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ValueConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4ce5276c, 0x45f6, 0x4d72, 0xbe, 0xa4, 0x9d, 0x0a, 0x6c, 0x37, 0x93, 0x0c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass ChildSequenceFrequencyConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceFrequencyConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceFrequencyConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a7a3f837-4ff9-4423-a59a-f789e817250e")]
	public partial class ChildSequenceFrequencyConstraint : SingleChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ChildSequenceFrequencyConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa7a3f837, 0x4ff9, 0x4423, 0xa5, 0x9a, 0xf7, 0x89, 0xe8, 0x17, 0x25, 0x0e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ChildSequenceFrequencyConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ChildSequenceFrequencyConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass RingConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.RingConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.RingConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("50afa697-8336-49de-9f2c-4ef50d2dd560")]
	public partial class RingConstraint : SingleChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RingConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x50afa697, 0x8336, 0x49de, 0x9f, 0x2c, 0x4e, 0xf5, 0x0d, 0x2d, 0xd5, 0x60);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RingConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RingConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass DisjunctiveMandatoryConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.DisjunctiveMandatoryConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.DisjunctiveMandatoryConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("75d57a27-56f8-49ea-b509-3300b174fa4d")]
	public partial class DisjunctiveMandatoryConstraint : SingleChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DisjunctiveMandatoryConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x75d57a27, 0x56f8, 0x49ea, 0xb5, 0x09, 0x33, 0x00, 0xb1, 0x74, 0xfa, 0x4d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DisjunctiveMandatoryConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DisjunctiveMandatoryConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass ChildSequenceUniquenessConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceUniquenessConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceUniquenessConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("fbf2f9af-5a37-4202-8412-a8d33780d615")]
	public partial class ChildSequenceUniquenessConstraint : SingleChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ChildSequenceUniquenessConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfbf2f9af, 0x5a37, 0x4202, 0x84, 0x12, 0xa8, 0xd3, 0x37, 0x80, 0xd6, 0x15);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ChildSequenceUniquenessConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ChildSequenceUniquenessConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ShouldIgnore domain property code
		
		/// <summary>
		/// ShouldIgnore domain property Id.
		/// </summary>
		public static readonly global::System.Guid ShouldIgnoreDomainPropertyId = new global::System.Guid(0x66d9fe4b, 0xae01, 0x4693, 0x88, 0x1b, 0x30, 0xba, 0xb3, 0xbb, 0x60, 0x82);
		
		/// <summary>
		/// Storage for ShouldIgnore
		/// </summary>
		private global::System.Boolean shouldIgnorePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ShouldIgnore domain property.
		/// Describes whether views should ignore generating primary key notation for this
		/// constraint even though the <see
		/// cref="P:Neumont.Tools.ORM.TestOIALModel.ChildSequenceUniquenessConstraint.IsPreferred" /> property may be true.
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceUniquenessConstraint/ShouldIgnore.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceUniquenessConstraint/ShouldIgnore.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("66d9fe4b-ae01-4693-881b-30bab3bb6082")]
		public global::System.Boolean ShouldIgnore
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return shouldIgnorePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ShouldIgnorePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ChildSequenceUniquenessConstraint.ShouldIgnore domain property.
		/// </summary>
		internal sealed partial class ShouldIgnorePropertyHandler : DslModeling::DomainPropertyValueHandler<ChildSequenceUniquenessConstraint, global::System.Boolean>
		{
			private ShouldIgnorePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ChildSequenceUniquenessConstraint.ShouldIgnore domain property value handler.
			/// </summary>
			public static readonly ShouldIgnorePropertyHandler Instance = new ShouldIgnorePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ChildSequenceUniquenessConstraint.ShouldIgnore domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ShouldIgnoreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ChildSequenceUniquenessConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.shouldIgnorePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ChildSequenceUniquenessConstraint element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.shouldIgnorePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsPreferred domain property code
		
		/// <summary>
		/// IsPreferred domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPreferredDomainPropertyId = new global::System.Guid(0x95371269, 0xc2e4, 0x417c, 0xb5, 0x67, 0x58, 0xda, 0x3c, 0x74, 0x7c, 0xa0);
		
		/// <summary>
		/// Storage for IsPreferred
		/// </summary>
		private global::System.Boolean isPreferredPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsPreferred domain property.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.ChildSequenceUniquenessConstraint.IsPreferred
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceUniquenessConstraint/IsPreferred.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ChildSequenceUniquenessConstraint/IsPreferred.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("95371269-c2e4-417c-b567-58da3c747ca0")]
		public global::System.Boolean IsPreferred
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPreferredPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPreferredPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ChildSequenceUniquenessConstraint.IsPreferred domain property.
		/// </summary>
		internal sealed partial class IsPreferredPropertyHandler : DslModeling::DomainPropertyValueHandler<ChildSequenceUniquenessConstraint, global::System.Boolean>
		{
			private IsPreferredPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ChildSequenceUniquenessConstraint.IsPreferred domain property value handler.
			/// </summary>
			public static readonly IsPreferredPropertyHandler Instance = new IsPreferredPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ChildSequenceUniquenessConstraint.IsPreferred domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPreferredDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ChildSequenceUniquenessConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isPreferredPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ChildSequenceUniquenessConstraint element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPreferredPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass MinTwoChildrenChildSequence
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.MinTwoChildrenChildSequence.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.MinTwoChildrenChildSequence.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("745e0167-6373-4d1d-a4e6-7c815ccedaf1")]
	public partial class MinTwoChildrenChildSequence : ChildSequence
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MinTwoChildrenChildSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x745e0167, 0x6373, 0x4d1d, 0xa4, 0xe6, 0x7c, 0x81, 0x5c, 0xce, 0xda, 0xf1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MinTwoChildrenChildSequence(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MinTwoChildrenChildSequence(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass SubsetConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.SubsetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.SubsetConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1009f73d-4428-4365-87ea-81df77095531")]
	public partial class SubsetConstraint : MultiChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SubsetConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1009f73d, 0x4428, 0x4365, 0x87, 0xea, 0x81, 0xdf, 0x77, 0x09, 0x55, 0x31);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubsetConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubsetConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SubChildSequence opposite domain role accessor
		/// <summary>
		/// Gets or sets SubChildSequence.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraint
		/// </summary>
		public virtual ChildSequence SubChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraintDomainRoleId) as ChildSequence;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSubChildSequence.SubsetConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region SuperChildSequence opposite domain role accessor
		/// <summary>
		/// Gets or sets SuperChildSequence.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraint
		/// </summary>
		public virtual ChildSequence SuperChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraintDomainRoleId) as ChildSequence;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.TestOIALModel.SubsetConstraintHasSuperChildSequence.SubsetConstraintDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass TwoOrMoreChildSequenceConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4a149949-60dd-4165-af58-f8c9a607c73d")]
	public abstract partial class TwoOrMoreChildSequenceConstraint : MultiChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TwoOrMoreChildSequenceConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4a149949, 0x60dd, 0x4165, 0xaf, 0x58, 0xf8, 0xc9, 0xa6, 0x07, 0xc7, 0x3d);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected TwoOrMoreChildSequenceConstraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ChildSequence opposite domain role accessor
		/// <summary>
		/// Gets a list of ChildSequence.
		/// Description for
		/// Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ChildSequence> ChildSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ChildSequence>(this, global::Neumont.Tools.ORM.TestOIALModel.TwoOrMoreChildSequenceConstraintHasChildSequence.TwoOrMoreChildSequenceConstraintDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass ExclusionConstraint
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.ExclusionConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.ExclusionConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c17c4731-ebfb-43e1-abdd-e06d6fa81fb3")]
	public partial class ExclusionConstraint : TwoOrMoreChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExclusionConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc17c4731, 0xebfb, 0x43e1, 0xab, 0xdd, 0xe0, 0x6d, 0x6f, 0xa8, 0x1f, 0xb3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.TestOIALModel
{
	/// <summary>
	/// DomainClass EqualityConstraint
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.TestOIALModel.EqualityConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.TestOIALModel.EqualityConstraint.Description", typeof(global::Neumont.Tools.ORM.TestOIALModel.OIALDomainModel), "Neumont.Tools.ORM.TestOIALModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a6a27ee0-b4f0-46ad-aa46-4545f726bdf5")]
	public partial class EqualityConstraint : TwoOrMoreChildSequenceConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EqualityConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa6a27ee0, 0xb4f0, 0x46ad, 0xaa, 0x46, 0x45, 0x45, 0xf7, 0x26, 0xbd, 0xf5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EqualityConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EqualityConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
