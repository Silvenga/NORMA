#region Common Public License Copyright Notice
/**************************************************************************\
* Neumont Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Neumont.Tools.Dil.Dcil
{
	/// <summary>
	/// DomainRelationship CatalogContainsSchema
	/// Description for Neumont.Tools.Dil.Dcil.CatalogContainsSchema
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.CatalogContainsSchema.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.CatalogContainsSchema.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7cbdb2cd-2e18-4f16-bae8-c81d0f72f90d")]
	public partial class CatalogContainsSchema : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CatalogContainsSchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7cbdb2cd, 0x2e18, 0x4f16, 0xba, 0xe8, 0xc8, 0x1d, 0x0f, 0x72, 0xf9, 0x0d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CatalogContainsSchema link in the same Partition as the given Catalog
		/// </summary>
		/// <param name="source">Catalog to use as the source of the relationship.</param>
		/// <param name="target">Schema to use as the target of the relationship.</param>
		public CatalogContainsSchema(Catalog source, Schema target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CatalogContainsSchema.CatalogDomainRoleId, source), new DslModeling::RoleAssignment(CatalogContainsSchema.SchemaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CatalogContainsSchema(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CatalogContainsSchema(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CatalogContainsSchema(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CatalogContainsSchema(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Catalog domain role code
		
		/// <summary>
		/// Catalog domain role Id.
		/// </summary>
		public static readonly global::System.Guid CatalogDomainRoleId = new global::System.Guid(0xf7b037d9, 0xd101, 0x463a, 0x8b, 0xde, 0x62, 0xee, 0xbd, 0x54, 0x30, 0xf3);
		
		/// <summary>
		/// DomainRole Catalog
		/// Description for Neumont.Tools.Dil.Dcil.CatalogContainsSchema.Catalog
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.CatalogContainsSchema/Catalog.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.CatalogContainsSchema/Catalog.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Schemas", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.CatalogContainsSchema/Catalog.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f7b037d9-d101-463a-8bde-62eebd5430f3")]
		public virtual Catalog Catalog
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Catalog)DslModeling::DomainRoleInfo.GetRolePlayer(this, CatalogDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CatalogDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Catalog of a Schema
		/// <summary>
		/// Gets Catalog.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Catalog GetCatalog(Schema element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SchemaDomainRoleId) as Catalog;
		}
		
		/// <summary>
		/// Sets Catalog.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCatalog(Schema element, Catalog newCatalog)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SchemaDomainRoleId, newCatalog);
		}
		#endregion
		#region Schema domain role code
		
		/// <summary>
		/// Schema domain role Id.
		/// </summary>
		public static readonly global::System.Guid SchemaDomainRoleId = new global::System.Guid(0x0c3b8302, 0xb281, 0x4dc4, 0xb5, 0xb7, 0xd5, 0x7f, 0x7e, 0x02, 0x5e, 0x01);
		
		/// <summary>
		/// DomainRole Schema
		/// Description for Neumont.Tools.Dil.Dcil.CatalogContainsSchema.Schema
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.CatalogContainsSchema/Schema.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.CatalogContainsSchema/Schema.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Catalog", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.CatalogContainsSchema/Schema.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0c3b8302-b281-4dc4-b5b7-d57f7e025e01")]
		public virtual Schema Schema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Schema)DslModeling::DomainRoleInfo.GetRolePlayer(this, SchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Schemas of a Catalog
		/// <summary>
		/// Gets a list of Schemas.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Schema> GetSchemas(Catalog element)
		{
			return new DslModeling::LinkedElementCollection<Schema>(element, CatalogDomainRoleId);
		}
		#endregion
		#region Catalog link accessor
		/// <summary>
		/// Get the list of CatalogContainsSchema links to a Catalog.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema> GetLinksToSchemas ( global::Neumont.Tools.Dil.Dcil.Catalog catalogInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema>(catalogInstance, global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema.CatalogDomainRoleId);
		}
		#endregion
		#region Schema link accessor
		/// <summary>
		/// Get the CatalogContainsSchema link to a Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema GetLinkToCatalog (global::Neumont.Tools.Dil.Dcil.Schema schemaInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema>(schemaInstance, global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema.SchemaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Schema not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CatalogContainsSchema instance accessors
		
		/// <summary>
		/// Get any CatalogContainsSchema links between a given Catalog and a Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema> GetLinks( global::Neumont.Tools.Dil.Dcil.Catalog source, global::Neumont.Tools.Dil.Dcil.Schema target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema>(source, global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema.CatalogDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema link in links )
			{
				if ( target.Equals(link.Schema) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CatalogContainsSchema link between a given Catalogand a Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema GetLink( global::Neumont.Tools.Dil.Dcil.Catalog source, global::Neumont.Tools.Dil.Dcil.Schema target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema>(source, global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema.CatalogDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.CatalogContainsSchema link in links )
			{
				if ( target.Equals(link.Schema) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.Dil.Dcil
{
	/// <summary>
	/// DomainRelationship SchemaContainsContent
	/// Description for Neumont.Tools.Dil.Dcil.SchemaContainsContent
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.SchemaContainsContent.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.SchemaContainsContent.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ce3dcf73-da08-4116-a95a-bd9bc2a9d418")]
	public abstract partial class SchemaContainsContent : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SchemaContainsContent domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xce3dcf73, 0xda08, 0x4116, 0xa9, 0x5a, 0xbd, 0x9b, 0xc2, 0xa9, 0xd4, 0x18);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected SchemaContainsContent(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Schema domain role code
		
		/// <summary>
		/// Schema domain role Id.
		/// </summary>
		public static readonly global::System.Guid SchemaDomainRoleId = new global::System.Guid(0x6d64020b, 0xcf32, 0x4ac6, 0xa7, 0x4b, 0x59, 0xe2, 0xf6, 0x42, 0x1b, 0x65);
		
		/// <summary>
		/// DomainRole Schema
		/// Description for Neumont.Tools.Dil.Dcil.SchemaContainsContent.Schema
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.SchemaContainsContent/Schema.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.SchemaContainsContent/Schema.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SchemaContent", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.SchemaContainsContent/Schema.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6d64020b-cf32-4ac6-a74b-59e2f6421b65")]
		public abstract Schema Schema
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Schema of a DcilModelElement
		/// <summary>
		/// Gets Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Schema GetSchema(DcilModelElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SchemaContentDomainRoleId) as Schema;
		}
		
		/// <summary>
		/// Sets Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSchema(DcilModelElement element, Schema newSchema)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SchemaContentDomainRoleId, newSchema);
		}
		#endregion
		#region SchemaContent domain role code
		
		/// <summary>
		/// SchemaContent domain role Id.
		/// </summary>
		public static readonly global::System.Guid SchemaContentDomainRoleId = new global::System.Guid(0x6a22b218, 0xd701, 0x47d9, 0x85, 0x29, 0xc1, 0xcf, 0xa7, 0x82, 0x6d, 0x30);
		
		/// <summary>
		/// DomainRole SchemaContent
		/// Description for Neumont.Tools.Dil.Dcil.SchemaContainsContent.SchemaContent
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.SchemaContainsContent/SchemaContent.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.SchemaContainsContent/SchemaContent.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Schema", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.SchemaContainsContent/SchemaContent.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6a22b218-d701-47d9-8529-c1cfa7826d30")]
		public abstract DcilModelElement SchemaContent
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access SchemaContent of a Schema
		/// <summary>
		/// Gets a list of SchemaContent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<DcilModelElement> GetSchemaContent(Schema element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<DcilModelElement>(element, SchemaDomainRoleId);
		}
		#endregion
		#region Schema link accessor
		/// <summary>
		/// Get the list of SchemaContainsContent links to a Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.SchemaContainsContent> GetLinksToSchemaContent ( global::Neumont.Tools.Dil.Dcil.Schema schemaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.SchemaContainsContent>(schemaInstance, global::Neumont.Tools.Dil.Dcil.SchemaContainsContent.SchemaDomainRoleId);
		}
		#endregion
		#region SchemaContent link accessor
		/// <summary>
		/// Get the SchemaContainsContent link to a DcilModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.SchemaContainsContent GetLinkToSchema (global::Neumont.Tools.Dil.Dcil.DcilModelElement schemaContentInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.SchemaContainsContent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.SchemaContainsContent>(schemaContentInstance, global::Neumont.Tools.Dil.Dcil.SchemaContainsContent.SchemaContentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SchemaContent not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SchemaContainsContent instance accessors
		
		/// <summary>
		/// Get any SchemaContainsContent links between a given Schema and a DcilModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.SchemaContainsContent> GetLinks( global::Neumont.Tools.Dil.Dcil.Schema source, global::Neumont.Tools.Dil.Dcil.DcilModelElement target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.SchemaContainsContent> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.SchemaContainsContent>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.SchemaContainsContent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.SchemaContainsContent>(source, global::Neumont.Tools.Dil.Dcil.SchemaContainsContent.SchemaDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.SchemaContainsContent link in links )
			{
				if ( target.Equals(link.SchemaContent) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SchemaContainsContent link between a given Schemaand a DcilModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.SchemaContainsContent GetLink( global::Neumont.Tools.Dil.Dcil.Schema source, global::Neumont.Tools.Dil.Dcil.DcilModelElement target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.SchemaContainsContent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.SchemaContainsContent>(source, global::Neumont.Tools.Dil.Dcil.SchemaContainsContent.SchemaDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.SchemaContainsContent link in links )
			{
				if ( target.Equals(link.SchemaContent) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.Dil.Dcil
{
	/// <summary>
	/// DomainRelationship SchemaContainsTable
	/// Description for Neumont.Tools.Dil.Dcil.SchemaContainsTable
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.SchemaContainsTable.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.SchemaContainsTable.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3ac7cbd0-a619-4f31-8c8c-f0aa586d2c69")]
	public partial class SchemaContainsTable : SchemaContainsContent
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SchemaContainsTable domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3ac7cbd0, 0xa619, 0x4f31, 0x8c, 0x8c, 0xf0, 0xaa, 0x58, 0x6d, 0x2c, 0x69);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SchemaContainsTable link in the same Partition as the given Schema
		/// </summary>
		/// <param name="source">Schema to use as the source of the relationship.</param>
		/// <param name="target">Table to use as the target of the relationship.</param>
		public SchemaContainsTable(Schema source, Table target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SchemaContainsTable.SchemaDomainRoleId, source), new DslModeling::RoleAssignment(SchemaContainsTable.TableDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SchemaContainsTable(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SchemaContainsTable(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SchemaContainsTable(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SchemaContainsTable(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Schema domain role code
		
		/// <summary>
		/// Schema domain role Id.
		/// </summary>
		public static readonly new global::System.Guid SchemaDomainRoleId = new global::System.Guid(0xcc145e8c, 0xebc7, 0x4bbf, 0x9e, 0x70, 0x24, 0xf7, 0x6c, 0x4b, 0x69, 0xa9);
		
		/// <summary>
		/// DomainRole Schema
		/// Description for Neumont.Tools.Dil.Dcil.SchemaContainsTable.Schema
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.SchemaContainsTable/Schema.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.SchemaContainsTable/Schema.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Tables", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.SchemaContainsTable/Schema.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cc145e8c-ebc7-4bbf-9e70-24f76c4b69a9")]
		public override Schema Schema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Schema)DslModeling::DomainRoleInfo.GetRolePlayer(this, SchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Schema of a Table
		/// <summary>
		/// Gets Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Schema GetSchema(Table element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TableDomainRoleId) as Schema;
		}
		
		/// <summary>
		/// Sets Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSchema(Table element, Schema newSchema)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TableDomainRoleId, newSchema);
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainRoleId = new global::System.Guid(0xdf1f7f50, 0xb459, 0x4e7b, 0x89, 0x58, 0xba, 0xa8, 0x8e, 0x68, 0x52, 0x68);
		
		/// <summary>
		/// DomainRole Table
		/// Description for Neumont.Tools.Dil.Dcil.SchemaContainsTable.Table
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.SchemaContainsTable/Table.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.SchemaContainsTable/Table.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Schema", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.SchemaContainsTable/Table.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("df1f7f50-b459-4e7b-8958-baa88e685268")]
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tables of a Schema
		/// <summary>
		/// Gets a list of Tables.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Table> GetTables(Schema element)
		{
			return new DslModeling::LinkedElementCollection<Table>(element, SchemaDomainRoleId);
		}
		#endregion
		#region SchemaContent domain role override
		
		/// <summary>
		/// Gets the element playing Table domain role.
		/// Description for Neumont.Tools.Dil.Dcil.SchemaContainsContent.SchemaContent
		/// </summary>
		public override DcilModelElement SchemaContent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Table;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Table = (Table)value;
			}
		}
		
		#endregion
		#region Schema link accessor
		/// <summary>
		/// Get the list of SchemaContainsTable links to a Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.SchemaContainsTable> GetLinksToTables ( global::Neumont.Tools.Dil.Dcil.Schema schemaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.SchemaContainsTable>(schemaInstance, global::Neumont.Tools.Dil.Dcil.SchemaContainsTable.SchemaDomainRoleId);
		}
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the SchemaContainsTable link to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.SchemaContainsTable GetLinkToSchema (global::Neumont.Tools.Dil.Dcil.Table tableInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.SchemaContainsTable> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.SchemaContainsTable>(tableInstance, global::Neumont.Tools.Dil.Dcil.SchemaContainsTable.TableDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Table not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SchemaContainsTable instance accessors
		
		/// <summary>
		/// Get any SchemaContainsTable links between a given Schema and a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.SchemaContainsTable> GetLinks( global::Neumont.Tools.Dil.Dcil.Schema source, global::Neumont.Tools.Dil.Dcil.Table target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.SchemaContainsTable> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.SchemaContainsTable>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.SchemaContainsTable> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.SchemaContainsTable>(source, global::Neumont.Tools.Dil.Dcil.SchemaContainsTable.SchemaDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.SchemaContainsTable link in links )
			{
				if ( target.Equals(link.Table) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SchemaContainsTable link between a given Schemaand a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.SchemaContainsTable GetLink( global::Neumont.Tools.Dil.Dcil.Schema source, global::Neumont.Tools.Dil.Dcil.Table target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.SchemaContainsTable> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.SchemaContainsTable>(source, global::Neumont.Tools.Dil.Dcil.SchemaContainsTable.SchemaDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.SchemaContainsTable link in links )
			{
				if ( target.Equals(link.Table) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.Dil.Dcil
{
	/// <summary>
	/// DomainRelationship SchemaContainsDomain
	/// Description for Neumont.Tools.Dil.Dcil.SchemaContainsDomain
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.SchemaContainsDomain.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.SchemaContainsDomain.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4e787a64-2a01-4af0-a28b-35052693b1ab")]
	public partial class SchemaContainsDomain : SchemaContainsContent
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SchemaContainsDomain domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4e787a64, 0x2a01, 0x4af0, 0xa2, 0x8b, 0x35, 0x05, 0x26, 0x93, 0xb1, 0xab);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SchemaContainsDomain link in the same Partition as the given Schema
		/// </summary>
		/// <param name="source">Schema to use as the source of the relationship.</param>
		/// <param name="target">Domain to use as the target of the relationship.</param>
		public SchemaContainsDomain(Schema source, Domain target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SchemaContainsDomain.SchemaDomainRoleId, source), new DslModeling::RoleAssignment(SchemaContainsDomain.DomainDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SchemaContainsDomain(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SchemaContainsDomain(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SchemaContainsDomain(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SchemaContainsDomain(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Schema domain role code
		
		/// <summary>
		/// Schema domain role Id.
		/// </summary>
		public static readonly new global::System.Guid SchemaDomainRoleId = new global::System.Guid(0xbf0668b8, 0x0cb5, 0x49d0, 0xa1, 0xb7, 0x46, 0x37, 0xa1, 0x6e, 0x26, 0x25);
		
		/// <summary>
		/// DomainRole Schema
		/// Description for Neumont.Tools.Dil.Dcil.SchemaContainsDomain.Schema
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.SchemaContainsDomain/Schema.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.SchemaContainsDomain/Schema.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Domains", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.SchemaContainsDomain/Schema.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bf0668b8-0cb5-49d0-a1b7-4637a16e2625")]
		public override Schema Schema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Schema)DslModeling::DomainRoleInfo.GetRolePlayer(this, SchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Schema of a Domain
		/// <summary>
		/// Gets Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Schema GetSchema(Domain element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainDomainRoleId) as Schema;
		}
		
		/// <summary>
		/// Sets Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSchema(Domain element, Schema newSchema)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainDomainRoleId, newSchema);
		}
		#endregion
		#region Domain domain role code
		
		/// <summary>
		/// Domain domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainDomainRoleId = new global::System.Guid(0x591b91cc, 0x8e0b, 0x498d, 0xa1, 0xde, 0xc2, 0xca, 0x84, 0x40, 0xeb, 0xee);
		
		/// <summary>
		/// DomainRole Domain
		/// Description for Neumont.Tools.Dil.Dcil.SchemaContainsDomain.Domain
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.SchemaContainsDomain/Domain.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.SchemaContainsDomain/Domain.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Schema", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.SchemaContainsDomain/Domain.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("591b91cc-8e0b-498d-a1de-c2ca8440ebee")]
		public virtual Domain Domain
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Domain)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Domains of a Schema
		/// <summary>
		/// Gets a list of Domains.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Domain> GetDomains(Schema element)
		{
			return new DslModeling::LinkedElementCollection<Domain>(element, SchemaDomainRoleId);
		}
		#endregion
		#region SchemaContent domain role override
		
		/// <summary>
		/// Gets the element playing Domain domain role.
		/// Description for Neumont.Tools.Dil.Dcil.SchemaContainsContent.SchemaContent
		/// </summary>
		public override DcilModelElement SchemaContent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Domain;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Domain = (Domain)value;
			}
		}
		
		#endregion
		#region Schema link accessor
		/// <summary>
		/// Get the list of SchemaContainsDomain links to a Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain> GetLinksToDomains ( global::Neumont.Tools.Dil.Dcil.Schema schemaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain>(schemaInstance, global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain.SchemaDomainRoleId);
		}
		#endregion
		#region Domain link accessor
		/// <summary>
		/// Get the SchemaContainsDomain link to a Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain GetLinkToSchema (global::Neumont.Tools.Dil.Dcil.Domain domainInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain>(domainInstance, global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain.DomainDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Domain not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SchemaContainsDomain instance accessors
		
		/// <summary>
		/// Get any SchemaContainsDomain links between a given Schema and a Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain> GetLinks( global::Neumont.Tools.Dil.Dcil.Schema source, global::Neumont.Tools.Dil.Dcil.Domain target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain>(source, global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain.SchemaDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain link in links )
			{
				if ( target.Equals(link.Domain) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SchemaContainsDomain link between a given Schemaand a Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain GetLink( global::Neumont.Tools.Dil.Dcil.Schema source, global::Neumont.Tools.Dil.Dcil.Domain target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain>(source, global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain.SchemaDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.SchemaContainsDomain link in links )
			{
				if ( target.Equals(link.Domain) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.Dil.Dcil
{
	/// <summary>
	/// DomainRelationship TableContainsColumn
	/// Description for Neumont.Tools.Dil.Dcil.TableContainsColumn
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.TableContainsColumn.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.TableContainsColumn.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("fb5b6b20-8a4e-4ba3-bc8b-fbeaadbf9c33")]
	public partial class TableContainsColumn : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TableContainsColumn domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfb5b6b20, 0x8a4e, 0x4ba3, 0xbc, 0x8b, 0xfb, 0xea, 0xad, 0xbf, 0x9c, 0x33);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TableContainsColumn link in the same Partition as the given Table
		/// </summary>
		/// <param name="source">Table to use as the source of the relationship.</param>
		/// <param name="target">Column to use as the target of the relationship.</param>
		public TableContainsColumn(Table source, Column target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TableContainsColumn.TableDomainRoleId, source), new DslModeling::RoleAssignment(TableContainsColumn.ColumnDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableContainsColumn(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableContainsColumn(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableContainsColumn(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableContainsColumn(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainRoleId = new global::System.Guid(0xc3a52815, 0xe9b9, 0x4757, 0x99, 0x85, 0x71, 0x7e, 0x54, 0xf8, 0x84, 0xed);
		
		/// <summary>
		/// DomainRole Table
		/// Description for Neumont.Tools.Dil.Dcil.TableContainsColumn.Table
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.TableContainsColumn/Table.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.TableContainsColumn/Table.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Columns", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.TableContainsColumn/Table.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("c3a52815-e9b9-4757-9985-717e54f884ed")]
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Table of a Column
		/// <summary>
		/// Gets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Table GetTable(Column element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ColumnDomainRoleId) as Table;
		}
		
		/// <summary>
		/// Sets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTable(Column element, Table newTable)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ColumnDomainRoleId, newTable);
		}
		#endregion
		#region Column domain role code
		
		/// <summary>
		/// Column domain role Id.
		/// </summary>
		public static readonly global::System.Guid ColumnDomainRoleId = new global::System.Guid(0xea68512e, 0xc944, 0x44bc, 0x9f, 0x54, 0xd5, 0x8c, 0x34, 0x7d, 0xcd, 0xd7);
		
		/// <summary>
		/// DomainRole Column
		/// Description for Neumont.Tools.Dil.Dcil.TableContainsColumn.Column
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.TableContainsColumn/Column.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.TableContainsColumn/Column.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Table", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.TableContainsColumn/Column.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ea68512e-c944-44bc-9f54-d58c347dcdd7")]
		public virtual Column Column
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Column)DslModeling::DomainRoleInfo.GetRolePlayer(this, ColumnDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ColumnDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Columns of a Table
		/// <summary>
		/// Gets a list of Columns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Column> GetColumns(Table element)
		{
			return new DslModeling::LinkedElementCollection<Column>(element, TableDomainRoleId);
		}
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the list of TableContainsColumn links to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.TableContainsColumn> GetLinksToColumns ( global::Neumont.Tools.Dil.Dcil.Table tableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsColumn>(tableInstance, global::Neumont.Tools.Dil.Dcil.TableContainsColumn.TableDomainRoleId);
		}
		#endregion
		#region Column link accessor
		/// <summary>
		/// Get the TableContainsColumn link to a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.TableContainsColumn GetLinkToTable (global::Neumont.Tools.Dil.Dcil.Column columnInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.TableContainsColumn> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsColumn>(columnInstance, global::Neumont.Tools.Dil.Dcil.TableContainsColumn.ColumnDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Column not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TableContainsColumn instance accessors
		
		/// <summary>
		/// Get any TableContainsColumn links between a given Table and a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.TableContainsColumn> GetLinks( global::Neumont.Tools.Dil.Dcil.Table source, global::Neumont.Tools.Dil.Dcil.Column target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.TableContainsColumn> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.TableContainsColumn>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.TableContainsColumn> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsColumn>(source, global::Neumont.Tools.Dil.Dcil.TableContainsColumn.TableDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.TableContainsColumn link in links )
			{
				if ( target.Equals(link.Column) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TableContainsColumn link between a given Tableand a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.TableContainsColumn GetLink( global::Neumont.Tools.Dil.Dcil.Table source, global::Neumont.Tools.Dil.Dcil.Column target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.TableContainsColumn> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsColumn>(source, global::Neumont.Tools.Dil.Dcil.TableContainsColumn.TableDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.TableContainsColumn link in links )
			{
				if ( target.Equals(link.Column) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.Dil.Dcil
{
	/// <summary>
	/// DomainRelationship TableContainsConstraint
	/// Description for Neumont.Tools.Dil.Dcil.TableContainsConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.TableContainsConstraint.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.TableContainsConstraint.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("dad57818-93b6-4584-a94e-71d31e4f959c")]
	public partial class TableContainsConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TableContainsConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdad57818, 0x93b6, 0x4584, 0xa9, 0x4e, 0x71, 0xd3, 0x1e, 0x4f, 0x95, 0x9c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TableContainsConstraint link in the same Partition as the given Table
		/// </summary>
		/// <param name="source">Table to use as the source of the relationship.</param>
		/// <param name="target">Constraint to use as the target of the relationship.</param>
		public TableContainsConstraint(Table source, Constraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TableContainsConstraint.TableDomainRoleId, source), new DslModeling::RoleAssignment(TableContainsConstraint.ConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableContainsConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableContainsConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableContainsConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableContainsConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainRoleId = new global::System.Guid(0xe64c339f, 0x8ac5, 0x494d, 0xa9, 0x13, 0xd2, 0x2d, 0x50, 0x34, 0xe9, 0x61);
		
		/// <summary>
		/// DomainRole Table
		/// Description for Neumont.Tools.Dil.Dcil.TableContainsConstraint.Table
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.TableContainsConstraint/Table.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.TableContainsConstraint/Table.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Constraints", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.TableContainsConstraint/Table.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("e64c339f-8ac5-494d-a913-d22d5034e961")]
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Table of a Constraint
		/// <summary>
		/// Gets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Table GetTable(Constraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConstraintDomainRoleId) as Table;
		}
		
		/// <summary>
		/// Sets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTable(Constraint element, Table newTable)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConstraintDomainRoleId, newTable);
		}
		#endregion
		#region Constraint domain role code
		
		/// <summary>
		/// Constraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintDomainRoleId = new global::System.Guid(0x66919910, 0x6aca, 0x4a0d, 0xbc, 0xfd, 0x25, 0x79, 0x1a, 0x64, 0x1a, 0x16);
		
		/// <summary>
		/// DomainRole Constraint
		/// Description for Neumont.Tools.Dil.Dcil.TableContainsConstraint.Constraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.TableContainsConstraint/Constraint.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.TableContainsConstraint/Constraint.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Table", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.TableContainsConstraint/Constraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("66919910-6aca-4a0d-bcfd-25791a641a16")]
		public virtual Constraint Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Constraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Constraints of a Table
		/// <summary>
		/// Gets a list of Constraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Constraint> GetConstraints(Table element)
		{
			return new DslModeling::LinkedElementCollection<Constraint>(element, TableDomainRoleId);
		}
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the list of TableContainsConstraint links to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.TableContainsConstraint> GetLinksToConstraints ( global::Neumont.Tools.Dil.Dcil.Table tableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsConstraint>(tableInstance, global::Neumont.Tools.Dil.Dcil.TableContainsConstraint.TableDomainRoleId);
		}
		#endregion
		#region Constraint link accessor
		/// <summary>
		/// Get the TableContainsConstraint link to a Constraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.TableContainsConstraint GetLinkToTable (global::Neumont.Tools.Dil.Dcil.Constraint constraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.TableContainsConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsConstraint>(constraintInstance, global::Neumont.Tools.Dil.Dcil.TableContainsConstraint.ConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Constraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TableContainsConstraint instance accessors
		
		/// <summary>
		/// Get any TableContainsConstraint links between a given Table and a Constraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.TableContainsConstraint> GetLinks( global::Neumont.Tools.Dil.Dcil.Table source, global::Neumont.Tools.Dil.Dcil.Constraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.TableContainsConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.TableContainsConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.TableContainsConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsConstraint>(source, global::Neumont.Tools.Dil.Dcil.TableContainsConstraint.TableDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.TableContainsConstraint link in links )
			{
				if ( target.Equals(link.Constraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TableContainsConstraint link between a given Tableand a Constraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.TableContainsConstraint GetLink( global::Neumont.Tools.Dil.Dcil.Table source, global::Neumont.Tools.Dil.Dcil.Constraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.TableContainsConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsConstraint>(source, global::Neumont.Tools.Dil.Dcil.TableContainsConstraint.TableDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.TableContainsConstraint link in links )
			{
				if ( target.Equals(link.Constraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.Dil.Dcil
{
	/// <summary>
	/// DomainRelationship TableContainsUniquenessConstraint
	/// Description for Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8f420258-5c3d-4383-a657-13c0085500c5")]
	public partial class TableContainsUniquenessConstraint : TableContainsConstraint
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TableContainsUniquenessConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8f420258, 0x5c3d, 0x4383, 0xa6, 0x57, 0x13, 0xc0, 0x08, 0x55, 0x00, 0xc5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TableContainsUniquenessConstraint link in the same Partition as the given Table
		/// </summary>
		/// <param name="source">Table to use as the source of the relationship.</param>
		/// <param name="target">UniquenessConstraint to use as the target of the relationship.</param>
		public TableContainsUniquenessConstraint(Table source, UniquenessConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TableContainsUniquenessConstraint.TableDomainRoleId, source), new DslModeling::RoleAssignment(TableContainsUniquenessConstraint.UniquenessConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableContainsUniquenessConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableContainsUniquenessConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableContainsUniquenessConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableContainsUniquenessConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly new global::System.Guid TableDomainRoleId = new global::System.Guid(0xb9790914, 0xe889, 0x4f00, 0xa4, 0x56, 0xed, 0x1d, 0x18, 0x17, 0xc2, 0x3b);
		
		/// <summary>
		/// DomainRole Table
		/// Description for Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint.Table
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint/Table.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint/Table.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UniquenessConstraints", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint/Table.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("b9790914-e889-4f00-a456-ed1d1817c23b")]
		public override Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Table of a UniquenessConstraint
		/// <summary>
		/// Gets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Table GetTable(UniquenessConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UniquenessConstraintDomainRoleId) as Table;
		}
		
		/// <summary>
		/// Sets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTable(UniquenessConstraint element, Table newTable)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UniquenessConstraintDomainRoleId, newTable);
		}
		#endregion
		#region UniquenessConstraint domain role code
		
		/// <summary>
		/// UniquenessConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid UniquenessConstraintDomainRoleId = new global::System.Guid(0x132009f4, 0x76ff, 0x46fb, 0xac, 0x95, 0xa2, 0x41, 0x95, 0x75, 0xd2, 0x0c);
		
		/// <summary>
		/// DomainRole UniquenessConstraint
		/// Description for
		/// Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint.UniquenessConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint/UniquenessConstraint.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint/UniquenessConstraint.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Table", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint/UniquenessConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("132009f4-76ff-46fb-ac95-a2419575d20c")]
		public virtual UniquenessConstraint UniquenessConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UniquenessConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, UniquenessConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UniquenessConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UniquenessConstraints of a Table
		/// <summary>
		/// Gets a list of UniquenessConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UniquenessConstraint> GetUniquenessConstraints(Table element)
		{
			return new DslModeling::LinkedElementCollection<UniquenessConstraint>(element, TableDomainRoleId);
		}
		#endregion
		#region Constraint domain role override
		
		/// <summary>
		/// Gets the element playing UniquenessConstraint domain role.
		/// Description for Neumont.Tools.Dil.Dcil.TableContainsConstraint.Constraint
		/// </summary>
		public override Constraint Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.UniquenessConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.UniquenessConstraint = (UniquenessConstraint)value;
			}
		}
		
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the list of TableContainsUniquenessConstraint links to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint> GetLinksToUniquenessConstraints ( global::Neumont.Tools.Dil.Dcil.Table tableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint>(tableInstance, global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint.TableDomainRoleId);
		}
		#endregion
		#region UniquenessConstraint link accessor
		/// <summary>
		/// Get the TableContainsUniquenessConstraint link to a UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint GetLinkToTable (global::Neumont.Tools.Dil.Dcil.UniquenessConstraint uniquenessConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint>(uniquenessConstraintInstance, global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint.UniquenessConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of UniquenessConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TableContainsUniquenessConstraint instance accessors
		
		/// <summary>
		/// Get any TableContainsUniquenessConstraint links between a given Table and a UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint> GetLinks( global::Neumont.Tools.Dil.Dcil.Table source, global::Neumont.Tools.Dil.Dcil.UniquenessConstraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint>(source, global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint.TableDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint link in links )
			{
				if ( target.Equals(link.UniquenessConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TableContainsUniquenessConstraint link between a given Tableand a UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint GetLink( global::Neumont.Tools.Dil.Dcil.Table source, global::Neumont.Tools.Dil.Dcil.UniquenessConstraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint>(source, global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint.TableDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.TableContainsUniquenessConstraint link in links )
			{
				if ( target.Equals(link.UniquenessConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.Dil.Dcil
{
	/// <summary>
	/// DomainRelationship TableContainsReferenceConstraint
	/// Description for Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8e95a446-7557-4e60-b011-79f28f2f0773")]
	public partial class TableContainsReferenceConstraint : TableContainsConstraint
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TableContainsReferenceConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8e95a446, 0x7557, 0x4e60, 0xb0, 0x11, 0x79, 0xf2, 0x8f, 0x2f, 0x07, 0x73);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TableContainsReferenceConstraint link in the same Partition as the given Table
		/// </summary>
		/// <param name="source">Table to use as the source of the relationship.</param>
		/// <param name="target">ReferenceConstraint to use as the target of the relationship.</param>
		public TableContainsReferenceConstraint(Table source, ReferenceConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TableContainsReferenceConstraint.TableDomainRoleId, source), new DslModeling::RoleAssignment(TableContainsReferenceConstraint.ReferenceConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableContainsReferenceConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableContainsReferenceConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableContainsReferenceConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableContainsReferenceConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly new global::System.Guid TableDomainRoleId = new global::System.Guid(0x8d0549b5, 0x9a2f, 0x4fd2, 0xa7, 0x33, 0xbc, 0xc7, 0x79, 0xa8, 0x9b, 0xaf);
		
		/// <summary>
		/// DomainRole Table
		/// Description for Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint.Table
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint/Table.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint/Table.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferenceConstraints", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint/Table.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8d0549b5-9a2f-4fd2-a733-bcc779a89baf")]
		public override Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceTable of a ReferenceConstraint
		/// <summary>
		/// Gets SourceTable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Table GetSourceTable(ReferenceConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceConstraintDomainRoleId) as Table;
		}
		
		/// <summary>
		/// Sets SourceTable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSourceTable(ReferenceConstraint element, Table newTable)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceConstraintDomainRoleId, newTable);
		}
		#endregion
		#region ReferenceConstraint domain role code
		
		/// <summary>
		/// ReferenceConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceConstraintDomainRoleId = new global::System.Guid(0x6daa73b4, 0xe37e, 0x4be1, 0xbb, 0x3c, 0xda, 0xfb, 0xcf, 0xd5, 0x13, 0x43);
		
		/// <summary>
		/// DomainRole ReferenceConstraint
		/// Description for
		/// Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint.ReferenceConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint/ReferenceConstraint.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint/ReferenceConstraint.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceTable", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint/ReferenceConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6daa73b4-e37e-4be1-bb3c-dafbcfd51343")]
		public virtual ReferenceConstraint ReferenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceConstraints of a Table
		/// <summary>
		/// Gets a list of ReferenceConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReferenceConstraint> GetReferenceConstraints(Table element)
		{
			return new DslModeling::LinkedElementCollection<ReferenceConstraint>(element, TableDomainRoleId);
		}
		#endregion
		#region Constraint domain role override
		
		/// <summary>
		/// Gets the element playing ReferenceConstraint domain role.
		/// Description for Neumont.Tools.Dil.Dcil.TableContainsConstraint.Constraint
		/// </summary>
		public override Constraint Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ReferenceConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ReferenceConstraint = (ReferenceConstraint)value;
			}
		}
		
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the list of TableContainsReferenceConstraint links to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint> GetLinksToReferenceConstraints ( global::Neumont.Tools.Dil.Dcil.Table tableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint>(tableInstance, global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint.TableDomainRoleId);
		}
		#endregion
		#region ReferenceConstraint link accessor
		/// <summary>
		/// Get the TableContainsReferenceConstraint link to a ReferenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint GetLinkToSourceTable (global::Neumont.Tools.Dil.Dcil.ReferenceConstraint referenceConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint>(referenceConstraintInstance, global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint.ReferenceConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TableContainsReferenceConstraint instance accessors
		
		/// <summary>
		/// Get any TableContainsReferenceConstraint links between a given Table and a ReferenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint> GetLinks( global::Neumont.Tools.Dil.Dcil.Table source, global::Neumont.Tools.Dil.Dcil.ReferenceConstraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint>(source, global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint.TableDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint link in links )
			{
				if ( target.Equals(link.ReferenceConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TableContainsReferenceConstraint link between a given Tableand a ReferenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint GetLink( global::Neumont.Tools.Dil.Dcil.Table source, global::Neumont.Tools.Dil.Dcil.ReferenceConstraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint>(source, global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint.TableDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.TableContainsReferenceConstraint link in links )
			{
				if ( target.Equals(link.ReferenceConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.Dil.Dcil
{
	/// <summary>
	/// DomainRelationship TableContainsCheckConstraint
	/// Description for Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c129490d-491c-426f-b04b-7c11d461f608")]
	public partial class TableContainsCheckConstraint : TableContainsConstraint
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TableContainsCheckConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc129490d, 0x491c, 0x426f, 0xb0, 0x4b, 0x7c, 0x11, 0xd4, 0x61, 0xf6, 0x08);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TableContainsCheckConstraint link in the same Partition as the given Table
		/// </summary>
		/// <param name="source">Table to use as the source of the relationship.</param>
		/// <param name="target">CheckConstraint to use as the target of the relationship.</param>
		public TableContainsCheckConstraint(Table source, CheckConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TableContainsCheckConstraint.TableDomainRoleId, source), new DslModeling::RoleAssignment(TableContainsCheckConstraint.CheckConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableContainsCheckConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableContainsCheckConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableContainsCheckConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableContainsCheckConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly new global::System.Guid TableDomainRoleId = new global::System.Guid(0x3370d577, 0x580d, 0x4153, 0xa0, 0x3b, 0x42, 0x9a, 0xce, 0x90, 0xc7, 0x98);
		
		/// <summary>
		/// DomainRole Table
		/// Description for Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint.Table
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint/Table.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint/Table.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CheckConstraints", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint/Table.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3370d577-580d-4153-a03b-429ace90c798")]
		public override Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Table of a CheckConstraint
		/// <summary>
		/// Gets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Table GetTable(CheckConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CheckConstraintDomainRoleId) as Table;
		}
		
		/// <summary>
		/// Sets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTable(CheckConstraint element, Table newTable)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CheckConstraintDomainRoleId, newTable);
		}
		#endregion
		#region CheckConstraint domain role code
		
		/// <summary>
		/// CheckConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid CheckConstraintDomainRoleId = new global::System.Guid(0xc6559e00, 0x462f, 0x4d95, 0xa8, 0xba, 0xc5, 0xd1, 0x8a, 0x25, 0x60, 0x1a);
		
		/// <summary>
		/// DomainRole CheckConstraint
		/// Description for
		/// Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint.CheckConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint/CheckConstraint.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint/CheckConstraint.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Table", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint/CheckConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("c6559e00-462f-4d95-a8ba-c5d18a25601a")]
		public virtual CheckConstraint CheckConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CheckConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, CheckConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CheckConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CheckConstraints of a Table
		/// <summary>
		/// Gets a list of CheckConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CheckConstraint> GetCheckConstraints(Table element)
		{
			return new DslModeling::LinkedElementCollection<CheckConstraint>(element, TableDomainRoleId);
		}
		#endregion
		#region Constraint domain role override
		
		/// <summary>
		/// Gets the element playing CheckConstraint domain role.
		/// Description for Neumont.Tools.Dil.Dcil.TableContainsConstraint.Constraint
		/// </summary>
		public override Constraint Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CheckConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CheckConstraint = (CheckConstraint)value;
			}
		}
		
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the list of TableContainsCheckConstraint links to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint> GetLinksToCheckConstraints ( global::Neumont.Tools.Dil.Dcil.Table tableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint>(tableInstance, global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint.TableDomainRoleId);
		}
		#endregion
		#region CheckConstraint link accessor
		/// <summary>
		/// Get the TableContainsCheckConstraint link to a CheckConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint GetLinkToTable (global::Neumont.Tools.Dil.Dcil.CheckConstraint checkConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint>(checkConstraintInstance, global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint.CheckConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CheckConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TableContainsCheckConstraint instance accessors
		
		/// <summary>
		/// Get any TableContainsCheckConstraint links between a given Table and a CheckConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint> GetLinks( global::Neumont.Tools.Dil.Dcil.Table source, global::Neumont.Tools.Dil.Dcil.CheckConstraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint>(source, global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint.TableDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint link in links )
			{
				if ( target.Equals(link.CheckConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TableContainsCheckConstraint link between a given Tableand a CheckConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint GetLink( global::Neumont.Tools.Dil.Dcil.Table source, global::Neumont.Tools.Dil.Dcil.CheckConstraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint>(source, global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint.TableDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.TableContainsCheckConstraint link in links )
			{
				if ( target.Equals(link.CheckConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.Dil.Dcil
{
	/// <summary>
	/// DomainRelationship DomainContainsCheckConstraint
	/// Description for Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("25d67b3b-a209-480a-b708-684f1a4b887c")]
	public partial class DomainContainsCheckConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainContainsCheckConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x25d67b3b, 0xa209, 0x480a, 0xb7, 0x08, 0x68, 0x4f, 0x1a, 0x4b, 0x88, 0x7c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainContainsCheckConstraint link in the same Partition as the given Domain
		/// </summary>
		/// <param name="source">Domain to use as the source of the relationship.</param>
		/// <param name="target">CheckConstraint to use as the target of the relationship.</param>
		public DomainContainsCheckConstraint(Domain source, CheckConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainContainsCheckConstraint.DomainDomainRoleId, source), new DslModeling::RoleAssignment(DomainContainsCheckConstraint.CheckConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainContainsCheckConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainContainsCheckConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainContainsCheckConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainContainsCheckConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Domain domain role code
		
		/// <summary>
		/// Domain domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainDomainRoleId = new global::System.Guid(0x4b1bc8fc, 0x29ca, 0x4004, 0x93, 0x95, 0x2a, 0xe5, 0xbf, 0x20, 0x15, 0xa1);
		
		/// <summary>
		/// DomainRole Domain
		/// Description for Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint.Domain
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint/Domain.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint/Domain.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CheckConstraint", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint/Domain.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4b1bc8fc-29ca-4004-9395-2ae5bf2015a1")]
		public virtual Domain Domain
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Domain)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Domain of a CheckConstraint
		/// <summary>
		/// Gets Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Domain GetDomain(CheckConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CheckConstraintDomainRoleId) as Domain;
		}
		
		/// <summary>
		/// Sets Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomain(CheckConstraint element, Domain newDomain)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CheckConstraintDomainRoleId, newDomain);
		}
		#endregion
		#region CheckConstraint domain role code
		
		/// <summary>
		/// CheckConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid CheckConstraintDomainRoleId = new global::System.Guid(0x7194e4e3, 0xb028, 0x40f7, 0xb9, 0x9e, 0x17, 0x5b, 0xca, 0xe1, 0x3b, 0x50);
		
		/// <summary>
		/// DomainRole CheckConstraint
		/// Description for
		/// Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint.CheckConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint/CheckConstraint.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint/CheckConstraint.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Domain", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint/CheckConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7194e4e3-b028-40f7-b99e-175bcae13b50")]
		public virtual CheckConstraint CheckConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CheckConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, CheckConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CheckConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CheckConstraint of a Domain
		/// <summary>
		/// Gets CheckConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CheckConstraint GetCheckConstraint(Domain element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainDomainRoleId) as CheckConstraint;
		}
		
		/// <summary>
		/// Sets CheckConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCheckConstraint(Domain element, CheckConstraint newCheckConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainDomainRoleId, newCheckConstraint);
		}
		#endregion
		#region Domain link accessor
		/// <summary>
		/// Get the DomainContainsCheckConstraint link to a Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint GetLinkToCheckConstraint (global::Neumont.Tools.Dil.Dcil.Domain domainInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint>(domainInstance, global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint.DomainDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Domain not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CheckConstraint link accessor
		/// <summary>
		/// Get the DomainContainsCheckConstraint link to a CheckConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint GetLinkToDomain (global::Neumont.Tools.Dil.Dcil.CheckConstraint checkConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint>(checkConstraintInstance, global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint.CheckConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CheckConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainContainsCheckConstraint instance accessors
		
		/// <summary>
		/// Get any DomainContainsCheckConstraint links between a given Domain and a CheckConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint> GetLinks( global::Neumont.Tools.Dil.Dcil.Domain source, global::Neumont.Tools.Dil.Dcil.CheckConstraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint>(source, global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint.DomainDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint link in links )
			{
				if ( target.Equals(link.CheckConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainContainsCheckConstraint link between a given Domainand a CheckConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint GetLink( global::Neumont.Tools.Dil.Dcil.Domain source, global::Neumont.Tools.Dil.Dcil.CheckConstraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint>(source, global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint.DomainDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.DomainContainsCheckConstraint link in links )
			{
				if ( target.Equals(link.CheckConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.Dil.Dcil
{
	/// <summary>
	/// DomainRelationship ColumnHasDomain
	/// Description for Neumont.Tools.Dil.Dcil.ColumnHasDomain
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.ColumnHasDomain.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.ColumnHasDomain.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ab00e63e-3f80-443f-a2c1-df38b3b3cc4f")]
	public partial class ColumnHasDomain : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ColumnHasDomain domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xab00e63e, 0x3f80, 0x443f, 0xa2, 0xc1, 0xdf, 0x38, 0xb3, 0xb3, 0xcc, 0x4f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ColumnHasDomain link in the same Partition as the given Column
		/// </summary>
		/// <param name="source">Column to use as the source of the relationship.</param>
		/// <param name="target">Domain to use as the target of the relationship.</param>
		public ColumnHasDomain(Column source, Domain target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ColumnHasDomain.ColumnDomainRoleId, source), new DslModeling::RoleAssignment(ColumnHasDomain.DomainDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ColumnHasDomain(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ColumnHasDomain(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ColumnHasDomain(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ColumnHasDomain(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Column domain role code
		
		/// <summary>
		/// Column domain role Id.
		/// </summary>
		public static readonly global::System.Guid ColumnDomainRoleId = new global::System.Guid(0xdb3a68af, 0xc144, 0x41a1, 0x89, 0xcc, 0x54, 0x10, 0xaa, 0x81, 0x3d, 0x4f);
		
		/// <summary>
		/// DomainRole Column
		/// Description for Neumont.Tools.Dil.Dcil.ColumnHasDomain.Column
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.ColumnHasDomain/Column.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.ColumnHasDomain/Column.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Domain", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.ColumnHasDomain/Column.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("db3a68af-c144-41a1-89cc-5410aa813d4f")]
		public virtual Column Column
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Column)DslModeling::DomainRoleInfo.GetRolePlayer(this, ColumnDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ColumnDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Columns of a Domain
		/// <summary>
		/// Gets a list of Columns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Column> GetColumns(Domain element)
		{
			return new DslModeling::LinkedElementCollection<Column>(element, DomainDomainRoleId);
		}
		#endregion
		#region Domain domain role code
		
		/// <summary>
		/// Domain domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainDomainRoleId = new global::System.Guid(0x8049efc1, 0x7e4f, 0x4965, 0x82, 0xe7, 0xd0, 0xb3, 0x76, 0x42, 0x4c, 0x57);
		
		/// <summary>
		/// DomainRole Domain
		/// Description for Neumont.Tools.Dil.Dcil.ColumnHasDomain.Domain
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.ColumnHasDomain/Domain.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.ColumnHasDomain/Domain.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Columns", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.ColumnHasDomain/Domain.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8049efc1-7e4f-4965-82e7-d0b376424c57")]
		public virtual Domain Domain
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Domain)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Domain of a Column
		/// <summary>
		/// Gets Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Domain GetDomain(Column element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ColumnDomainRoleId) as Domain;
		}
		
		/// <summary>
		/// Sets Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomain(Column element, Domain newDomain)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ColumnDomainRoleId, newDomain);
		}
		#endregion
		#region Column link accessor
		/// <summary>
		/// Get the ColumnHasDomain link to a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.ColumnHasDomain GetLinkToDomain (global::Neumont.Tools.Dil.Dcil.Column columnInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.ColumnHasDomain> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ColumnHasDomain>(columnInstance, global::Neumont.Tools.Dil.Dcil.ColumnHasDomain.ColumnDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Column not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Domain link accessor
		/// <summary>
		/// Get the list of ColumnHasDomain links to a Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.ColumnHasDomain> GetLinksToColumns ( global::Neumont.Tools.Dil.Dcil.Domain domainInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ColumnHasDomain>(domainInstance, global::Neumont.Tools.Dil.Dcil.ColumnHasDomain.DomainDomainRoleId);
		}
		#endregion
		#region ColumnHasDomain instance accessors
		
		/// <summary>
		/// Get any ColumnHasDomain links between a given Column and a Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.ColumnHasDomain> GetLinks( global::Neumont.Tools.Dil.Dcil.Column source, global::Neumont.Tools.Dil.Dcil.Domain target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.ColumnHasDomain> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.ColumnHasDomain>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.ColumnHasDomain> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ColumnHasDomain>(source, global::Neumont.Tools.Dil.Dcil.ColumnHasDomain.ColumnDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.ColumnHasDomain link in links )
			{
				if ( target.Equals(link.Domain) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ColumnHasDomain link between a given Columnand a Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.ColumnHasDomain GetLink( global::Neumont.Tools.Dil.Dcil.Column source, global::Neumont.Tools.Dil.Dcil.Domain target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.ColumnHasDomain> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ColumnHasDomain>(source, global::Neumont.Tools.Dil.Dcil.ColumnHasDomain.ColumnDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.ColumnHasDomain link in links )
			{
				if ( target.Equals(link.Domain) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.Dil.Dcil
{
	/// <summary>
	/// DomainRelationship ColumnHasPredefinedDataType
	/// Description for Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7df7c60c-bb01-4d69-a884-11b62eb0df4c")]
	public partial class ColumnHasPredefinedDataType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ColumnHasPredefinedDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7df7c60c, 0xbb01, 0x4d69, 0xa8, 0x84, 0x11, 0xb6, 0x2e, 0xb0, 0xdf, 0x4c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ColumnHasPredefinedDataType link in the same Partition as the given Column
		/// </summary>
		/// <param name="source">Column to use as the source of the relationship.</param>
		/// <param name="target">PredefinedDataType to use as the target of the relationship.</param>
		public ColumnHasPredefinedDataType(Column source, PredefinedDataType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ColumnHasPredefinedDataType.ColumnDomainRoleId, source), new DslModeling::RoleAssignment(ColumnHasPredefinedDataType.PredefinedDataTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ColumnHasPredefinedDataType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ColumnHasPredefinedDataType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ColumnHasPredefinedDataType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ColumnHasPredefinedDataType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Column domain role code
		
		/// <summary>
		/// Column domain role Id.
		/// </summary>
		public static readonly global::System.Guid ColumnDomainRoleId = new global::System.Guid(0x213fd4bf, 0xdd0c, 0x4281, 0x88, 0xb3, 0xb1, 0x9f, 0xf0, 0xf9, 0x30, 0xc0);
		
		/// <summary>
		/// DomainRole Column
		/// Description for Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType.Column
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType/Column.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType/Column.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PredefinedDataType", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType/Column.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("213fd4bf-dd0c-4281-88b3-b19ff0f930c0")]
		public virtual Column Column
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Column)DslModeling::DomainRoleInfo.GetRolePlayer(this, ColumnDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ColumnDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Column of a PredefinedDataType
		/// <summary>
		/// Gets Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Column GetColumn(PredefinedDataType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PredefinedDataTypeDomainRoleId) as Column;
		}
		
		/// <summary>
		/// Sets Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetColumn(PredefinedDataType element, Column newColumn)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PredefinedDataTypeDomainRoleId, newColumn);
		}
		#endregion
		#region PredefinedDataType domain role code
		
		/// <summary>
		/// PredefinedDataType domain role Id.
		/// </summary>
		public static readonly global::System.Guid PredefinedDataTypeDomainRoleId = new global::System.Guid(0xe72d55d8, 0xeb10, 0x4eeb, 0xb4, 0x0e, 0xfc, 0xcf, 0x3b, 0x11, 0x1b, 0xdc);
		
		/// <summary>
		/// DomainRole PredefinedDataType
		/// Description for
		/// Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType.PredefinedDataType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType/PredefinedDataType.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType/PredefinedDataType.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Column", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType/PredefinedDataType.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e72d55d8-eb10-4eeb-b40e-fccf3b111bdc")]
		public virtual PredefinedDataType PredefinedDataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PredefinedDataType)DslModeling::DomainRoleInfo.GetRolePlayer(this, PredefinedDataTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PredefinedDataTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PredefinedDataType of a Column
		/// <summary>
		/// Gets PredefinedDataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PredefinedDataType GetPredefinedDataType(Column element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ColumnDomainRoleId) as PredefinedDataType;
		}
		
		/// <summary>
		/// Sets PredefinedDataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPredefinedDataType(Column element, PredefinedDataType newPredefinedDataType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ColumnDomainRoleId, newPredefinedDataType);
		}
		#endregion
		#region Column link accessor
		/// <summary>
		/// Get the ColumnHasPredefinedDataType link to a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType GetLinkToPredefinedDataType (global::Neumont.Tools.Dil.Dcil.Column columnInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType>(columnInstance, global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType.ColumnDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Column not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PredefinedDataType link accessor
		/// <summary>
		/// Get the ColumnHasPredefinedDataType link to a PredefinedDataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType GetLinkToColumn (global::Neumont.Tools.Dil.Dcil.PredefinedDataType predefinedDataTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType>(predefinedDataTypeInstance, global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType.PredefinedDataTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PredefinedDataType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ColumnHasPredefinedDataType instance accessors
		
		/// <summary>
		/// Get any ColumnHasPredefinedDataType links between a given Column and a PredefinedDataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType> GetLinks( global::Neumont.Tools.Dil.Dcil.Column source, global::Neumont.Tools.Dil.Dcil.PredefinedDataType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType>(source, global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType.ColumnDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType link in links )
			{
				if ( target.Equals(link.PredefinedDataType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ColumnHasPredefinedDataType link between a given Columnand a PredefinedDataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType GetLink( global::Neumont.Tools.Dil.Dcil.Column source, global::Neumont.Tools.Dil.Dcil.PredefinedDataType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType>(source, global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType.ColumnDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.ColumnHasPredefinedDataType link in links )
			{
				if ( target.Equals(link.PredefinedDataType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.Dil.Dcil
{
	/// <summary>
	/// DomainRelationship DomainHasPredefinedDataType
	/// Description for Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d889dccc-682c-4588-abd7-ea0f89f16ec3")]
	public partial class DomainHasPredefinedDataType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainHasPredefinedDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd889dccc, 0x682c, 0x4588, 0xab, 0xd7, 0xea, 0x0f, 0x89, 0xf1, 0x6e, 0xc3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainHasPredefinedDataType link in the same Partition as the given Domain
		/// </summary>
		/// <param name="source">Domain to use as the source of the relationship.</param>
		/// <param name="target">PredefinedDataType to use as the target of the relationship.</param>
		public DomainHasPredefinedDataType(Domain source, PredefinedDataType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainHasPredefinedDataType.DomainDomainRoleId, source), new DslModeling::RoleAssignment(DomainHasPredefinedDataType.PredefinedDataTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainHasPredefinedDataType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainHasPredefinedDataType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainHasPredefinedDataType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainHasPredefinedDataType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Domain domain role code
		
		/// <summary>
		/// Domain domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainDomainRoleId = new global::System.Guid(0x90609e27, 0xb82a, 0x4b38, 0x9c, 0xd9, 0xa1, 0x85, 0x2e, 0x4a, 0xe8, 0xbc);
		
		/// <summary>
		/// DomainRole Domain
		/// Description for Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType.Domain
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType/Domain.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType/Domain.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PredefinedDataType", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType/Domain.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("90609e27-b82a-4b38-9cd9-a1852e4ae8bc")]
		public virtual Domain Domain
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Domain)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Domain of a PredefinedDataType
		/// <summary>
		/// Gets Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Domain GetDomain(PredefinedDataType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PredefinedDataTypeDomainRoleId) as Domain;
		}
		
		/// <summary>
		/// Sets Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomain(PredefinedDataType element, Domain newDomain)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PredefinedDataTypeDomainRoleId, newDomain);
		}
		#endregion
		#region PredefinedDataType domain role code
		
		/// <summary>
		/// PredefinedDataType domain role Id.
		/// </summary>
		public static readonly global::System.Guid PredefinedDataTypeDomainRoleId = new global::System.Guid(0xa8838633, 0x1b28, 0x4538, 0x9b, 0x43, 0x11, 0x55, 0x6d, 0x0d, 0xd3, 0x43);
		
		/// <summary>
		/// DomainRole PredefinedDataType
		/// Description for
		/// Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType.PredefinedDataType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType/PredefinedDataType.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType/PredefinedDataType.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Domain", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType/PredefinedDataType.PropertyDisplayName", PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a8838633-1b28-4538-9b43-11556d0dd343")]
		public virtual PredefinedDataType PredefinedDataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PredefinedDataType)DslModeling::DomainRoleInfo.GetRolePlayer(this, PredefinedDataTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PredefinedDataTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PredefinedDataType of a Domain
		/// <summary>
		/// Gets PredefinedDataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PredefinedDataType GetPredefinedDataType(Domain element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainDomainRoleId) as PredefinedDataType;
		}
		
		/// <summary>
		/// Sets PredefinedDataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPredefinedDataType(Domain element, PredefinedDataType newPredefinedDataType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainDomainRoleId, newPredefinedDataType);
		}
		#endregion
		#region Domain link accessor
		/// <summary>
		/// Get the DomainHasPredefinedDataType link to a Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType GetLinkToPredefinedDataType (global::Neumont.Tools.Dil.Dcil.Domain domainInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType>(domainInstance, global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType.DomainDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Domain not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PredefinedDataType link accessor
		/// <summary>
		/// Get the DomainHasPredefinedDataType link to a PredefinedDataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType GetLinkToDomain (global::Neumont.Tools.Dil.Dcil.PredefinedDataType predefinedDataTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType>(predefinedDataTypeInstance, global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType.PredefinedDataTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PredefinedDataType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainHasPredefinedDataType instance accessors
		
		/// <summary>
		/// Get any DomainHasPredefinedDataType links between a given Domain and a PredefinedDataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType> GetLinks( global::Neumont.Tools.Dil.Dcil.Domain source, global::Neumont.Tools.Dil.Dcil.PredefinedDataType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType>(source, global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType.DomainDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType link in links )
			{
				if ( target.Equals(link.PredefinedDataType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainHasPredefinedDataType link between a given Domainand a PredefinedDataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType GetLink( global::Neumont.Tools.Dil.Dcil.Domain source, global::Neumont.Tools.Dil.Dcil.PredefinedDataType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType>(source, global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType.DomainDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.DomainHasPredefinedDataType link in links )
			{
				if ( target.Equals(link.PredefinedDataType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.Dil.Dcil
{
	/// <summary>
	/// DomainRelationship UniquenessConstraintIncludesColumn
	/// Description for Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0a87b269-0d2c-4d7d-80a7-6dc1b5e0c5f6")]
	public partial class UniquenessConstraintIncludesColumn : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UniquenessConstraintIncludesColumn domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0a87b269, 0x0d2c, 0x4d7d, 0x80, 0xa7, 0x6d, 0xc1, 0xb5, 0xe0, 0xc5, 0xf6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UniquenessConstraintIncludesColumn link in the same Partition as the given UniquenessConstraint
		/// </summary>
		/// <param name="source">UniquenessConstraint to use as the source of the relationship.</param>
		/// <param name="target">Column to use as the target of the relationship.</param>
		public UniquenessConstraintIncludesColumn(UniquenessConstraint source, Column target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UniquenessConstraintIncludesColumn.UniquenessConstraintDomainRoleId, source), new DslModeling::RoleAssignment(UniquenessConstraintIncludesColumn.ColumnDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UniquenessConstraintIncludesColumn(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UniquenessConstraintIncludesColumn(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UniquenessConstraintIncludesColumn(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UniquenessConstraintIncludesColumn(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region UniquenessConstraint domain role code
		
		/// <summary>
		/// UniquenessConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid UniquenessConstraintDomainRoleId = new global::System.Guid(0x2ac76280, 0x67ca, 0x4583, 0xa2, 0x03, 0xc0, 0xed, 0xa2, 0xd1, 0x5f, 0xe4);
		
		/// <summary>
		/// DomainRole UniquenessConstraint
		/// Description for
		/// Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn.UniquenessConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn/UniquenessConstraint.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn/UniquenessConstraint.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Columns", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn/UniquenessConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("2ac76280-67ca-4583-a203-c0eda2d15fe4")]
		public virtual UniquenessConstraint UniquenessConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UniquenessConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, UniquenessConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UniquenessConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UniquenessConstraints of a Column
		/// <summary>
		/// Gets a list of UniquenessConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UniquenessConstraint> GetUniquenessConstraints(Column element)
		{
			return new DslModeling::LinkedElementCollection<UniquenessConstraint>(element, ColumnDomainRoleId);
		}
		#endregion
		#region Column domain role code
		
		/// <summary>
		/// Column domain role Id.
		/// </summary>
		public static readonly global::System.Guid ColumnDomainRoleId = new global::System.Guid(0x32200848, 0x28e3, 0x4d35, 0x9a, 0x61, 0xf5, 0x92, 0x90, 0x3b, 0x52, 0xbf);
		
		/// <summary>
		/// DomainRole Column
		/// Description for Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn.Column
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn/Column.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn/Column.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UniquenessConstraints", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn/Column.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("32200848-28e3-4d35-9a61-f592903b52bf")]
		public virtual Column Column
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Column)DslModeling::DomainRoleInfo.GetRolePlayer(this, ColumnDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ColumnDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Columns of a UniquenessConstraint
		/// <summary>
		/// Gets a list of Columns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Column> GetColumns(UniquenessConstraint element)
		{
			return new DslModeling::LinkedElementCollection<Column>(element, UniquenessConstraintDomainRoleId);
		}
		#endregion
		#region UniquenessConstraint link accessor
		/// <summary>
		/// Get the list of UniquenessConstraintIncludesColumn links to a UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn> GetLinksToColumns ( global::Neumont.Tools.Dil.Dcil.UniquenessConstraint uniquenessConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn>(uniquenessConstraintInstance, global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn.UniquenessConstraintDomainRoleId);
		}
		#endregion
		#region Column link accessor
		/// <summary>
		/// Get the list of UniquenessConstraintIncludesColumn links to a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn> GetLinksToUniquenessConstraints ( global::Neumont.Tools.Dil.Dcil.Column columnInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn>(columnInstance, global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn.ColumnDomainRoleId);
		}
		#endregion
		#region UniquenessConstraintIncludesColumn instance accessors
		
		/// <summary>
		/// Get any UniquenessConstraintIncludesColumn links between a given UniquenessConstraint and a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn> GetLinks( global::Neumont.Tools.Dil.Dcil.UniquenessConstraint source, global::Neumont.Tools.Dil.Dcil.Column target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn>(source, global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn.UniquenessConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn link in links )
			{
				if ( target.Equals(link.Column) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UniquenessConstraintIncludesColumn link between a given UniquenessConstraintand a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn GetLink( global::Neumont.Tools.Dil.Dcil.UniquenessConstraint source, global::Neumont.Tools.Dil.Dcil.Column target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn>(source, global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn.UniquenessConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.UniquenessConstraintIncludesColumn link in links )
			{
				if ( target.Equals(link.Column) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.Dil.Dcil
{
	/// <summary>
	/// DomainRelationship ReferenceConstraintTargetsTable
	/// Description for Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("27a4368b-c175-4f67-803f-ad902b5e7753")]
	public partial class ReferenceConstraintTargetsTable : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReferenceConstraintTargetsTable domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x27a4368b, 0xc175, 0x4f67, 0x80, 0x3f, 0xad, 0x90, 0x2b, 0x5e, 0x77, 0x53);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReferenceConstraintTargetsTable link in the same Partition as the given ReferenceConstraint
		/// </summary>
		/// <param name="source">ReferenceConstraint to use as the source of the relationship.</param>
		/// <param name="target">Table to use as the target of the relationship.</param>
		public ReferenceConstraintTargetsTable(ReferenceConstraint source, Table target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReferenceConstraintTargetsTable.ReferenceConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ReferenceConstraintTargetsTable.TargetTableDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReferenceConstraintTargetsTable(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReferenceConstraintTargetsTable(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReferenceConstraintTargetsTable(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReferenceConstraintTargetsTable(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ReferenceConstraint domain role code
		
		/// <summary>
		/// ReferenceConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceConstraintDomainRoleId = new global::System.Guid(0x22f748a4, 0x8086, 0x46c4, 0xa3, 0x23, 0xe9, 0x35, 0x74, 0x43, 0x8d, 0x16);
		
		/// <summary>
		/// DomainRole ReferenceConstraint
		/// Description for
		/// Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable.ReferenceConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable/ReferenceConstraint.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable/ReferenceConstraint.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetTable", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable/ReferenceConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("22f748a4-8086-46c4-a323-e93574438d16")]
		public virtual ReferenceConstraint ReferenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceConstraints of a Table
		/// <summary>
		/// Gets a list of ReferenceConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReferenceConstraint> GetReferenceConstraints(Table element)
		{
			return new DslModeling::LinkedElementCollection<ReferenceConstraint>(element, TargetTableDomainRoleId);
		}
		#endregion
		#region TargetTable domain role code
		
		/// <summary>
		/// TargetTable domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetTableDomainRoleId = new global::System.Guid(0x3effddb4, 0x4b20, 0x4eb4, 0x8a, 0x79, 0x27, 0x12, 0x40, 0x57, 0x44, 0x13);
		
		/// <summary>
		/// DomainRole TargetTable
		/// Description for
		/// Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable.TargetTable
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable/TargetTable.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable/TargetTable.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferenceConstraints", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable/TargetTable.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3effddb4-4b20-4eb4-8a79-271240574413")]
		public virtual Table TargetTable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetTableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetTableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetTable of a ReferenceConstraint
		/// <summary>
		/// Gets TargetTable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Table GetTargetTable(ReferenceConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceConstraintDomainRoleId) as Table;
		}
		
		/// <summary>
		/// Sets TargetTable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTargetTable(ReferenceConstraint element, Table newTargetTable)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceConstraintDomainRoleId, newTargetTable);
		}
		#endregion
		#region ReferenceConstraint link accessor
		/// <summary>
		/// Get the ReferenceConstraintTargetsTable link to a ReferenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable GetLinkToTargetTable (global::Neumont.Tools.Dil.Dcil.ReferenceConstraint referenceConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable>(referenceConstraintInstance, global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable.ReferenceConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetTable link accessor
		/// <summary>
		/// Get the list of ReferenceConstraintTargetsTable links to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable> GetLinksToReferenceConstraints ( global::Neumont.Tools.Dil.Dcil.Table targetTableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable>(targetTableInstance, global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable.TargetTableDomainRoleId);
		}
		#endregion
		#region ReferenceConstraintTargetsTable instance accessors
		
		/// <summary>
		/// Get any ReferenceConstraintTargetsTable links between a given ReferenceConstraint and a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable> GetLinks( global::Neumont.Tools.Dil.Dcil.ReferenceConstraint source, global::Neumont.Tools.Dil.Dcil.Table target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable>(source, global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable.ReferenceConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable link in links )
			{
				if ( target.Equals(link.TargetTable) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReferenceConstraintTargetsTable link between a given ReferenceConstraintand a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable GetLink( global::Neumont.Tools.Dil.Dcil.ReferenceConstraint source, global::Neumont.Tools.Dil.Dcil.Table target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable>(source, global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable.ReferenceConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.ReferenceConstraintTargetsTable link in links )
			{
				if ( target.Equals(link.TargetTable) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.Dil.Dcil
{
	/// <summary>
	/// DomainRelationship ColumnReference
	/// Description for Neumont.Tools.Dil.Dcil.ColumnReference
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.ColumnReference.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.ColumnReference.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("2ca33a35-0fd3-4b68-9222-f2851a909c2f")]
	public partial class ColumnReference : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ColumnReference domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2ca33a35, 0x0fd3, 0x4b68, 0x92, 0x22, 0xf2, 0x85, 0x1a, 0x90, 0x9c, 0x2f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ColumnReference link in the same Partition as the given Column
		/// </summary>
		/// <param name="source">Column to use as the source of the relationship.</param>
		/// <param name="target">Column to use as the target of the relationship.</param>
		public ColumnReference(Column source, Column target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ColumnReference.SourceColumnDomainRoleId, source), new DslModeling::RoleAssignment(ColumnReference.TargetColumnDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ColumnReference(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ColumnReference(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ColumnReference(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ColumnReference(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceColumn domain role code
		
		/// <summary>
		/// SourceColumn domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceColumnDomainRoleId = new global::System.Guid(0x7be6b7cc, 0xee99, 0x4667, 0xb0, 0x96, 0x79, 0xe2, 0xb4, 0x40, 0x35, 0x61);
		
		/// <summary>
		/// DomainRole SourceColumn
		/// Description for Neumont.Tools.Dil.Dcil.ColumnReference.SourceColumn
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.ColumnReference/SourceColumn.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.ColumnReference/SourceColumn.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetColumns", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.ColumnReference/SourceColumn.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7be6b7cc-ee99-4667-b096-79e2b4403561")]
		public virtual Column SourceColumn
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Column)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceColumnDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceColumnDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceColumns of a Column
		/// <summary>
		/// Gets a list of SourceColumns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Column> GetSourceColumns(Column element)
		{
			return new DslModeling::LinkedElementCollection<Column>(element, TargetColumnDomainRoleId);
		}
		#endregion
		#region TargetColumn domain role code
		
		/// <summary>
		/// TargetColumn domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetColumnDomainRoleId = new global::System.Guid(0xd7569b79, 0x22db, 0x4423, 0x9b, 0x31, 0xad, 0x8c, 0x5f, 0xa9, 0x6a, 0xc2);
		
		/// <summary>
		/// DomainRole TargetColumn
		/// Description for Neumont.Tools.Dil.Dcil.ColumnReference.TargetColumn
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.ColumnReference/TargetColumn.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.ColumnReference/TargetColumn.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceColumns", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.ColumnReference/TargetColumn.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d7569b79-22db-4423-9b31-ad8c5fa96ac2")]
		public virtual Column TargetColumn
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Column)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetColumnDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetColumnDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetColumns of a Column
		/// <summary>
		/// Gets a list of TargetColumns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Column> GetTargetColumns(Column element)
		{
			return new DslModeling::LinkedElementCollection<Column>(element, SourceColumnDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ReferenceConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ReferenceConstraint.
		/// Description for
		/// Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference.ColumnReference
		/// </summary>
		public virtual ReferenceConstraint ReferenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference.ColumnReferenceDomainRoleId) as ReferenceConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference.ColumnReferenceDomainRoleId, value);
			}
		}
		#endregion
		#endregion
		#region SourceColumn link accessor
		/// <summary>
		/// Get the list of ColumnReference links to a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.ColumnReference> GetLinksToTargetColumns ( global::Neumont.Tools.Dil.Dcil.Column sourceColumnInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ColumnReference>(sourceColumnInstance, global::Neumont.Tools.Dil.Dcil.ColumnReference.SourceColumnDomainRoleId);
		}
		#endregion
		#region TargetColumn link accessor
		/// <summary>
		/// Get the list of ColumnReference links to a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.ColumnReference> GetLinksToSourceColumns ( global::Neumont.Tools.Dil.Dcil.Column targetColumnInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ColumnReference>(targetColumnInstance, global::Neumont.Tools.Dil.Dcil.ColumnReference.TargetColumnDomainRoleId);
		}
		#endregion
		#region ColumnReference instance accessors
		
		/// <summary>
		/// Get any ColumnReference links between a given Column and a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.ColumnReference> GetLinks( global::Neumont.Tools.Dil.Dcil.Column source, global::Neumont.Tools.Dil.Dcil.Column target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.ColumnReference> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.ColumnReference>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.ColumnReference> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ColumnReference>(source, global::Neumont.Tools.Dil.Dcil.ColumnReference.SourceColumnDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.ColumnReference link in links )
			{
				if ( target.Equals(link.TargetColumn) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Neumont.Tools.Dil.Dcil
{
	/// <summary>
	/// DomainRelationship ReferenceConstraintContainsColumnReference
	/// Description for
	/// Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("59f535bc-8daf-43a0-8cfc-519086a5a9de")]
	public partial class ReferenceConstraintContainsColumnReference : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReferenceConstraintContainsColumnReference domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x59f535bc, 0x8daf, 0x43a0, 0x8c, 0xfc, 0x51, 0x90, 0x86, 0xa5, 0xa9, 0xde);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReferenceConstraintContainsColumnReference link in the same Partition as the given ReferenceConstraint
		/// </summary>
		/// <param name="source">ReferenceConstraint to use as the source of the relationship.</param>
		/// <param name="target">ColumnReference to use as the target of the relationship.</param>
		public ReferenceConstraintContainsColumnReference(ReferenceConstraint source, ColumnReference target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReferenceConstraintContainsColumnReference.ReferenceConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ReferenceConstraintContainsColumnReference.ColumnReferenceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReferenceConstraintContainsColumnReference(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReferenceConstraintContainsColumnReference(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReferenceConstraintContainsColumnReference(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReferenceConstraintContainsColumnReference(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ReferenceConstraint domain role code
		
		/// <summary>
		/// ReferenceConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceConstraintDomainRoleId = new global::System.Guid(0xfa2dff9b, 0x4e4b, 0x4bde, 0xbd, 0xdd, 0x09, 0x0d, 0x6b, 0x6a, 0x68, 0x93);
		
		/// <summary>
		/// DomainRole ReferenceConstraint
		/// Description for
		/// Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference.ReferenceConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference/ReferenceConstraint.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference/ReferenceConstraint.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ColumnReferences", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference/ReferenceConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("fa2dff9b-4e4b-4bde-bddd-090d6b6a6893")]
		public virtual ReferenceConstraint ReferenceConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceConstraint of a ColumnReference
		/// <summary>
		/// Gets ReferenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ReferenceConstraint GetReferenceConstraint(ColumnReference element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ColumnReferenceDomainRoleId) as ReferenceConstraint;
		}
		
		/// <summary>
		/// Sets ReferenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReferenceConstraint(ColumnReference element, ReferenceConstraint newReferenceConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ColumnReferenceDomainRoleId, newReferenceConstraint);
		}
		#endregion
		#region ColumnReference domain role code
		
		/// <summary>
		/// ColumnReference domain role Id.
		/// </summary>
		public static readonly global::System.Guid ColumnReferenceDomainRoleId = new global::System.Guid(0x4febd832, 0xae5d, 0x446a, 0xa2, 0xce, 0x3f, 0x42, 0x5e, 0x0e, 0x65, 0x9e);
		
		/// <summary>
		/// DomainRole ColumnReference
		/// Description for
		/// Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference.ColumnReference
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference/ColumnReference.DisplayName", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference/ColumnReference.Description", typeof(global::Neumont.Tools.Dil.Dcil.DcilDomainModel), "Neumont.Tools.Dil.Dcil.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferenceConstraint", PropertyDisplayNameKey="Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference/ColumnReference.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4febd832-ae5d-446a-a2ce-3f425e0e659e")]
		public virtual ColumnReference ColumnReference
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ColumnReference)DslModeling::DomainRoleInfo.GetRolePlayer(this, ColumnReferenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ColumnReferenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ColumnReferences of a ReferenceConstraint
		/// <summary>
		/// Gets a list of ColumnReferences.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ColumnReference> GetColumnReferences(ReferenceConstraint element)
		{
			return new DslModeling::LinkedElementCollection<ColumnReference>(element, ReferenceConstraintDomainRoleId);
		}
		#endregion
		#region ReferenceConstraint link accessor
		/// <summary>
		/// Get the list of ReferenceConstraintContainsColumnReference links to a ReferenceConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference> GetLinksToColumnReferences ( global::Neumont.Tools.Dil.Dcil.ReferenceConstraint referenceConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference>(referenceConstraintInstance, global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference.ReferenceConstraintDomainRoleId);
		}
		#endregion
		#region ColumnReference link accessor
		/// <summary>
		/// Get the ReferenceConstraintContainsColumnReference link to a ColumnReference.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference GetLinkToReferenceConstraint (global::Neumont.Tools.Dil.Dcil.ColumnReference columnReferenceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference>(columnReferenceInstance, global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference.ColumnReferenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ColumnReference not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReferenceConstraintContainsColumnReference instance accessors
		
		/// <summary>
		/// Get any ReferenceConstraintContainsColumnReference links between a given ReferenceConstraint and a ColumnReference.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference> GetLinks( global::Neumont.Tools.Dil.Dcil.ReferenceConstraint source, global::Neumont.Tools.Dil.Dcil.ColumnReference target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference>(source, global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference.ReferenceConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference link in links )
			{
				if ( target.Equals(link.ColumnReference) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReferenceConstraintContainsColumnReference link between a given ReferenceConstraintand a ColumnReference.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference GetLink( global::Neumont.Tools.Dil.Dcil.ReferenceConstraint source, global::Neumont.Tools.Dil.Dcil.ColumnReference target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference>(source, global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference.ReferenceConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.Dil.Dcil.ReferenceConstraintContainsColumnReference link in links )
			{
				if ( target.Equals(link.ColumnReference) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
