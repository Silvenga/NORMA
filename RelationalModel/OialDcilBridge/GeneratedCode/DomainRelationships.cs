#region Common Public License Copyright Notice
/**************************************************************************\
* Neumont Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship AssimilationMappingCustomizesAssimilation
	/// Description for
	/// Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c997059d-5f08-43db-a225-b698ea7badfb")]
	public partial class AssimilationMappingCustomizesAssimilation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AssimilationMappingCustomizesAssimilation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc997059d, 0x5f08, 0x43db, 0xa2, 0x25, 0xb6, 0x98, 0xea, 0x7b, 0xad, 0xfb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AssimilationMappingCustomizesAssimilation link in the same Partition as the given AssimilationMapping
		/// </summary>
		/// <param name="source">AssimilationMapping to use as the source of the relationship.</param>
		/// <param name="target">ConceptTypeAssimilatesConceptType to use as the target of the relationship.</param>
		public AssimilationMappingCustomizesAssimilation(AssimilationMapping source, global::Neumont.Tools.ORMAbstraction.ConceptTypeAssimilatesConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AssimilationMappingCustomizesAssimilation.AssimilationMappingDomainRoleId, source), new DslModeling::RoleAssignment(AssimilationMappingCustomizesAssimilation.AssimilationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssimilationMappingCustomizesAssimilation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssimilationMappingCustomizesAssimilation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssimilationMappingCustomizesAssimilation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssimilationMappingCustomizesAssimilation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AssimilationMapping domain role code
		
		/// <summary>
		/// AssimilationMapping domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssimilationMappingDomainRoleId = new global::System.Guid(0xcdf964c3, 0x4a74, 0x479a, 0x86, 0xdb, 0x5d, 0x5a, 0xbb, 0x23, 0xdc, 0xea);
		
		/// <summary>
		/// DomainRole AssimilationMapping
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation/AssimilationMapping.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation/AssimilationMapping.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Assimilation", PropertyDisplayNameKey="Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation/AssimilationMapping.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("cdf964c3-4a74-479a-86db-5d5abb23dcea")]
		public virtual AssimilationMapping AssimilationMapping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AssimilationMapping)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssimilationMappingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssimilationMappingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AssimilationMapping of a ConceptTypeAssimilatesConceptType
		/// <summary>
		/// Gets AssimilationMapping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AssimilationMapping GetAssimilationMapping(global::Neumont.Tools.ORMAbstraction.ConceptTypeAssimilatesConceptType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssimilationDomainRoleId) as AssimilationMapping;
		}
		
		/// <summary>
		/// Sets AssimilationMapping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAssimilationMapping(global::Neumont.Tools.ORMAbstraction.ConceptTypeAssimilatesConceptType element, AssimilationMapping newAssimilationMapping)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssimilationDomainRoleId, newAssimilationMapping);
		}
		#endregion
		#region Assimilation domain role code
		
		/// <summary>
		/// Assimilation domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssimilationDomainRoleId = new global::System.Guid(0x41bd276d, 0xd55e, 0x4972, 0xaf, 0xd9, 0x75, 0x7e, 0xbe, 0x82, 0x4f, 0x39);
		
		/// <summary>
		/// DomainRole Assimilation
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation/Assimilation.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation/Assimilation.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AssimilationMapping", PropertyDisplayNameKey="Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation/Assimilation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("41bd276d-d55e-4972-afd9-757ebe824f39")]
		public virtual global::Neumont.Tools.ORMAbstraction.ConceptTypeAssimilatesConceptType Assimilation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.ORMAbstraction.ConceptTypeAssimilatesConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssimilationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssimilationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Assimilation of a AssimilationMapping
		/// <summary>
		/// Gets Assimilation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstraction.ConceptTypeAssimilatesConceptType GetAssimilation(AssimilationMapping element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssimilationMappingDomainRoleId) as global::Neumont.Tools.ORMAbstraction.ConceptTypeAssimilatesConceptType;
		}
		
		/// <summary>
		/// Sets Assimilation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAssimilation(AssimilationMapping element, global::Neumont.Tools.ORMAbstraction.ConceptTypeAssimilatesConceptType newAssimilation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssimilationMappingDomainRoleId, newAssimilation);
		}
		#endregion
		#region AssimilationMapping link accessor
		/// <summary>
		/// Get the AssimilationMappingCustomizesAssimilation link to a AssimilationMapping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation GetLinkToAssimilation (global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMapping assimilationMappingInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation>(assimilationMappingInstance, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation.AssimilationMappingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AssimilationMapping not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Assimilation link accessor
		/// <summary>
		/// Get the AssimilationMappingCustomizesAssimilation link to a ConceptTypeAssimilatesConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation GetLinkToAssimilationMapping (global::Neumont.Tools.ORMAbstraction.ConceptTypeAssimilatesConceptType assimilationInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation>(assimilationInstance, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation.AssimilationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Assimilation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AssimilationMappingCustomizesAssimilation instance accessors
		
		/// <summary>
		/// Get any AssimilationMappingCustomizesAssimilation links between a given AssimilationMapping and a ConceptTypeAssimilatesConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation> GetLinks( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMapping source, global::Neumont.Tools.ORMAbstraction.ConceptTypeAssimilatesConceptType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation>(source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation.AssimilationMappingDomainRoleId);
			foreach ( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation link in links )
			{
				if ( target.Equals(link.Assimilation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AssimilationMappingCustomizesAssimilation link between a given AssimilationMappingand a ConceptTypeAssimilatesConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation GetLink( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMapping source, global::Neumont.Tools.ORMAbstraction.ConceptTypeAssimilatesConceptType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation>(source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation.AssimilationMappingDomainRoleId);
			foreach ( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesAssimilation link in links )
			{
				if ( target.Equals(link.Assimilation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship MappingCustomizationModelHasAssimilationMapping
	/// Description for
	/// Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("61deb15b-308b-4266-8766-c1e4348250d8")]
	public partial class MappingCustomizationModelHasAssimilationMapping : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MappingCustomizationModelHasAssimilationMapping domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x61deb15b, 0x308b, 0x4266, 0x87, 0x66, 0xc1, 0xe4, 0x34, 0x82, 0x50, 0xd8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MappingCustomizationModelHasAssimilationMapping link in the same Partition as the given MappingCustomizationModel
		/// </summary>
		/// <param name="source">MappingCustomizationModel to use as the source of the relationship.</param>
		/// <param name="target">AssimilationMapping to use as the target of the relationship.</param>
		public MappingCustomizationModelHasAssimilationMapping(MappingCustomizationModel source, AssimilationMapping target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MappingCustomizationModelHasAssimilationMapping.ModelDomainRoleId, source), new DslModeling::RoleAssignment(MappingCustomizationModelHasAssimilationMapping.AssimilationMappingDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MappingCustomizationModelHasAssimilationMapping(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MappingCustomizationModelHasAssimilationMapping(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MappingCustomizationModelHasAssimilationMapping(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MappingCustomizationModelHasAssimilationMapping(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x2122d3fd, 0x134d, 0x41db, 0x8b, 0x12, 0x8f, 0xd2, 0xfd, 0x60, 0x72, 0x7e);
		
		/// <summary>
		/// DomainRole Model
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping/Model.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping/Model.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AssimilationMappingCollection", PropertyDisplayNameKey="Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2122d3fd-134d-41db-8b12-8fd2fd60727e")]
		public virtual MappingCustomizationModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MappingCustomizationModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a AssimilationMapping
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MappingCustomizationModel GetModel(AssimilationMapping element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssimilationMappingDomainRoleId) as MappingCustomizationModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(AssimilationMapping element, MappingCustomizationModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssimilationMappingDomainRoleId, newModel);
		}
		#endregion
		#region AssimilationMapping domain role code
		
		/// <summary>
		/// AssimilationMapping domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssimilationMappingDomainRoleId = new global::System.Guid(0xda82c400, 0x912e, 0x45b2, 0x87, 0xc4, 0x56, 0xaf, 0x21, 0xa7, 0xd4, 0x81);
		
		/// <summary>
		/// DomainRole AssimilationMapping
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping/AssimilationMapping.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping/AssimilationMapping.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping/AssimilationMapping.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("da82c400-912e-45b2-87c4-56af21a7d481")]
		public virtual AssimilationMapping AssimilationMapping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AssimilationMapping)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssimilationMappingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssimilationMappingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AssimilationMappingCollection of a MappingCustomizationModel
		/// <summary>
		/// Gets a list of AssimilationMappingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AssimilationMapping> GetAssimilationMappingCollection(MappingCustomizationModel element)
		{
			return new DslModeling::LinkedElementCollection<AssimilationMapping>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of MappingCustomizationModelHasAssimilationMapping links to a MappingCustomizationModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping> GetLinksToAssimilationMappingCollection ( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping>(modelInstance, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping.ModelDomainRoleId);
		}
		#endregion
		#region AssimilationMapping link accessor
		/// <summary>
		/// Get the MappingCustomizationModelHasAssimilationMapping link to a AssimilationMapping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping GetLinkToModel (global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMapping assimilationMappingInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping>(assimilationMappingInstance, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping.AssimilationMappingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AssimilationMapping not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MappingCustomizationModelHasAssimilationMapping instance accessors
		
		/// <summary>
		/// Get any MappingCustomizationModelHasAssimilationMapping links between a given MappingCustomizationModel and a AssimilationMapping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping> GetLinks( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModel source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMapping target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping>(source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping link in links )
			{
				if ( target.Equals(link.AssimilationMapping) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MappingCustomizationModelHasAssimilationMapping link between a given MappingCustomizationModeland a AssimilationMapping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping GetLink( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModel source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.AssimilationMapping target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping>(source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping link in links )
			{
				if ( target.Equals(link.AssimilationMapping) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship SchemaIsForAbstractionModel
	/// Description for
	/// Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9ca44cef-1787-41bc-a0ac-5ac79753dabb")]
	public partial class SchemaIsForAbstractionModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SchemaIsForAbstractionModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9ca44cef, 0x1787, 0x41bc, 0xa0, 0xac, 0x5a, 0xc7, 0x97, 0x53, 0xda, 0xbb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SchemaIsForAbstractionModel link in the same Partition as the given Schema
		/// </summary>
		/// <param name="source">Schema to use as the source of the relationship.</param>
		/// <param name="target">AbstractionModel to use as the target of the relationship.</param>
		public SchemaIsForAbstractionModel(global::Neumont.Tools.RelationalModels.ConceptualDatabase.Schema source, global::Neumont.Tools.ORMAbstraction.AbstractionModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SchemaIsForAbstractionModel.SchemaDomainRoleId, source), new DslModeling::RoleAssignment(SchemaIsForAbstractionModel.AbstractionModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SchemaIsForAbstractionModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SchemaIsForAbstractionModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SchemaIsForAbstractionModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SchemaIsForAbstractionModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Schema domain role code
		
		/// <summary>
		/// Schema domain role Id.
		/// </summary>
		public static readonly global::System.Guid SchemaDomainRoleId = new global::System.Guid(0x6ed59846, 0xe0d8, 0x4980, 0x81, 0xac, 0xb3, 0x54, 0x1a, 0xd9, 0xd7, 0xdd);
		
		/// <summary>
		/// DomainRole Schema
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel/Schema.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel/Schema.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AbstractionModel", PropertyDisplayNameKey="Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel/Schema.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6ed59846-e0d8-4980-81ac-b3541ad9d7dd")]
		public virtual global::Neumont.Tools.RelationalModels.ConceptualDatabase.Schema Schema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.RelationalModels.ConceptualDatabase.Schema)DslModeling::DomainRoleInfo.GetRolePlayer(this, SchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Schema of a AbstractionModel
		/// <summary>
		/// Gets Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.RelationalModels.ConceptualDatabase.Schema GetSchema(global::Neumont.Tools.ORMAbstraction.AbstractionModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AbstractionModelDomainRoleId) as global::Neumont.Tools.RelationalModels.ConceptualDatabase.Schema;
		}
		
		/// <summary>
		/// Sets Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSchema(global::Neumont.Tools.ORMAbstraction.AbstractionModel element, global::Neumont.Tools.RelationalModels.ConceptualDatabase.Schema newSchema)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AbstractionModelDomainRoleId, newSchema);
		}
		#endregion
		#region AbstractionModel domain role code
		
		/// <summary>
		/// AbstractionModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbstractionModelDomainRoleId = new global::System.Guid(0x3c18d01e, 0x2687, 0x42a1, 0x95, 0x36, 0xb2, 0x3f, 0x91, 0xa2, 0x47, 0xd0);
		
		/// <summary>
		/// DomainRole AbstractionModel
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel/AbstractionModel.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel/AbstractionModel.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Schema", PropertyDisplayNameKey="Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel/AbstractionModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3c18d01e-2687-42a1-9536-b23f91a247d0")]
		public virtual global::Neumont.Tools.ORMAbstraction.AbstractionModel AbstractionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.ORMAbstraction.AbstractionModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbstractionModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbstractionModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AbstractionModel of a Schema
		/// <summary>
		/// Gets AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstraction.AbstractionModel GetAbstractionModel(global::Neumont.Tools.RelationalModels.ConceptualDatabase.Schema element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SchemaDomainRoleId) as global::Neumont.Tools.ORMAbstraction.AbstractionModel;
		}
		
		/// <summary>
		/// Sets AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAbstractionModel(global::Neumont.Tools.RelationalModels.ConceptualDatabase.Schema element, global::Neumont.Tools.ORMAbstraction.AbstractionModel newAbstractionModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SchemaDomainRoleId, newAbstractionModel);
		}
		#endregion
		#region Schema link accessor
		/// <summary>
		/// Get the SchemaIsForAbstractionModel link to a Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel GetLinkToAbstractionModel (global::Neumont.Tools.RelationalModels.ConceptualDatabase.Schema schemaInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel>(schemaInstance, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel.SchemaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Schema not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AbstractionModel link accessor
		/// <summary>
		/// Get the SchemaIsForAbstractionModel link to a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel GetLinkToSchema (global::Neumont.Tools.ORMAbstraction.AbstractionModel abstractionModelInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel>(abstractionModelInstance, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel.AbstractionModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AbstractionModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SchemaIsForAbstractionModel instance accessors
		
		/// <summary>
		/// Get any SchemaIsForAbstractionModel links between a given Schema and a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel> GetLinks( global::Neumont.Tools.RelationalModels.ConceptualDatabase.Schema source, global::Neumont.Tools.ORMAbstraction.AbstractionModel target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel>(source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel.SchemaDomainRoleId);
			foreach ( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel link in links )
			{
				if ( target.Equals(link.AbstractionModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SchemaIsForAbstractionModel link between a given Schemaand a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel GetLink( global::Neumont.Tools.RelationalModels.ConceptualDatabase.Schema source, global::Neumont.Tools.ORMAbstraction.AbstractionModel target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel>(source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel.SchemaDomainRoleId);
			foreach ( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel link in links )
			{
				if ( target.Equals(link.AbstractionModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship TableIsPrimarilyForConceptType
	/// Description for
	/// Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("3598c529-7d90-47bf-92ae-f77575b8bfd9")]
	public partial class TableIsPrimarilyForConceptType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TableIsPrimarilyForConceptType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3598c529, 0x7d90, 0x47bf, 0x92, 0xae, 0xf7, 0x75, 0x75, 0xb8, 0xbf, 0xd9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TableIsPrimarilyForConceptType link in the same Partition as the given Table
		/// </summary>
		/// <param name="source">Table to use as the source of the relationship.</param>
		/// <param name="target">ConceptType to use as the target of the relationship.</param>
		public TableIsPrimarilyForConceptType(global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table source, global::Neumont.Tools.ORMAbstraction.ConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TableIsPrimarilyForConceptType.TableDomainRoleId, source), new DslModeling::RoleAssignment(TableIsPrimarilyForConceptType.ConceptTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableIsPrimarilyForConceptType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableIsPrimarilyForConceptType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableIsPrimarilyForConceptType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableIsPrimarilyForConceptType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainRoleId = new global::System.Guid(0xdaeb8db4, 0xc3a6, 0x497d, 0xba, 0x4c, 0x74, 0xd1, 0xaf, 0x6c, 0xcd, 0xc0);
		
		/// <summary>
		/// DomainRole Table
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType/Table.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType/Table.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConceptType", PropertyDisplayNameKey="Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType/Table.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("daeb8db4-c3a6-497d-ba4c-74d1af6ccdc0")]
		public virtual global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Table of a ConceptType
		/// <summary>
		/// Gets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table GetTable(global::Neumont.Tools.ORMAbstraction.ConceptType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConceptTypeDomainRoleId) as global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table;
		}
		
		/// <summary>
		/// Sets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTable(global::Neumont.Tools.ORMAbstraction.ConceptType element, global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table newTable)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConceptTypeDomainRoleId, newTable);
		}
		#endregion
		#region ConceptType domain role code
		
		/// <summary>
		/// ConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeDomainRoleId = new global::System.Guid(0x64f5ec66, 0x1af4, 0x4368, 0xa1, 0xa2, 0x59, 0x13, 0x68, 0x1d, 0xe4, 0x91);
		
		/// <summary>
		/// DomainRole ConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType/ConceptType.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType/ConceptType.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Table", PropertyDisplayNameKey="Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType/ConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("64f5ec66-1af4-4368-a1a2-5913681de491")]
		public virtual global::Neumont.Tools.ORMAbstraction.ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.ORMAbstraction.ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptType of a Table
		/// <summary>
		/// Gets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstraction.ConceptType GetConceptType(global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TableDomainRoleId) as global::Neumont.Tools.ORMAbstraction.ConceptType;
		}
		
		/// <summary>
		/// Sets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConceptType(global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table element, global::Neumont.Tools.ORMAbstraction.ConceptType newConceptType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TableDomainRoleId, newConceptType);
		}
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the TableIsPrimarilyForConceptType link to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType GetLinkToConceptType (global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table tableInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType>(tableInstance, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType.TableDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Table not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptType link accessor
		/// <summary>
		/// Get the TableIsPrimarilyForConceptType link to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType GetLinkToTable (global::Neumont.Tools.ORMAbstraction.ConceptType conceptTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType>(conceptTypeInstance, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType.ConceptTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConceptType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TableIsPrimarilyForConceptType instance accessors
		
		/// <summary>
		/// Get any TableIsPrimarilyForConceptType links between a given Table and a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType> GetLinks( global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table source, global::Neumont.Tools.ORMAbstraction.ConceptType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType>(source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType.TableDomainRoleId);
			foreach ( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TableIsPrimarilyForConceptType link between a given Tableand a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType GetLink( global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table source, global::Neumont.Tools.ORMAbstraction.ConceptType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType>(source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType.TableDomainRoleId);
			foreach ( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship TableIsAlsoForConceptType
	/// Description for
	/// Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("058e26e9-85e8-4da4-8979-bfa0455d41cc")]
	public partial class TableIsAlsoForConceptType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TableIsAlsoForConceptType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x058e26e9, 0x85e8, 0x4da4, 0x89, 0x79, 0xbf, 0xa0, 0x45, 0x5d, 0x41, 0xcc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TableIsAlsoForConceptType link in the same Partition as the given Table
		/// </summary>
		/// <param name="source">Table to use as the source of the relationship.</param>
		/// <param name="target">ConceptType to use as the target of the relationship.</param>
		public TableIsAlsoForConceptType(global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table source, global::Neumont.Tools.ORMAbstraction.ConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TableIsAlsoForConceptType.TableDomainRoleId, source), new DslModeling::RoleAssignment(TableIsAlsoForConceptType.ConceptTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableIsAlsoForConceptType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableIsAlsoForConceptType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableIsAlsoForConceptType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableIsAlsoForConceptType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainRoleId = new global::System.Guid(0xe2f7dd3b, 0x8e40, 0x45a5, 0xac, 0x39, 0x86, 0x3a, 0xbf, 0xa3, 0x50, 0x20);
		
		/// <summary>
		/// DomainRole Table
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType/Table.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType/Table.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConceptType", PropertyDisplayNameKey="Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType/Table.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e2f7dd3b-8e40-45a5-ac39-863abfa35020")]
		public virtual global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Table of a ConceptType
		/// <summary>
		/// Gets a list of Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table> GetTable(global::Neumont.Tools.ORMAbstraction.ConceptType element)
		{
			return new DslModeling::LinkedElementCollection<global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table>(element, ConceptTypeDomainRoleId);
		}
		#endregion
		#region ConceptType domain role code
		
		/// <summary>
		/// ConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeDomainRoleId = new global::System.Guid(0x51d93721, 0x0758, 0x4405, 0xb3, 0x6e, 0xe8, 0x07, 0x30, 0x9f, 0x8c, 0xa8);
		
		/// <summary>
		/// DomainRole ConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType/ConceptType.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType/ConceptType.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Table", PropertyDisplayNameKey="Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType/ConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("51d93721-0758-4405-b36e-e807309f8ca8")]
		public virtual global::Neumont.Tools.ORMAbstraction.ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.ORMAbstraction.ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptType of a Table
		/// <summary>
		/// Gets a list of ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::Neumont.Tools.ORMAbstraction.ConceptType> GetConceptType(global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table element)
		{
			return new DslModeling::LinkedElementCollection<global::Neumont.Tools.ORMAbstraction.ConceptType>(element, TableDomainRoleId);
		}
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the list of TableIsAlsoForConceptType links to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType> GetLinksToConceptType ( global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table tableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType>(tableInstance, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType.TableDomainRoleId);
		}
		#endregion
		#region ConceptType link accessor
		/// <summary>
		/// Get the list of TableIsAlsoForConceptType links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType> GetLinksToTable ( global::Neumont.Tools.ORMAbstraction.ConceptType conceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType>(conceptTypeInstance, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType.ConceptTypeDomainRoleId);
		}
		#endregion
		#region TableIsAlsoForConceptType instance accessors
		
		/// <summary>
		/// Get any TableIsAlsoForConceptType links between a given Table and a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType> GetLinks( global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table source, global::Neumont.Tools.ORMAbstraction.ConceptType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType>(source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType.TableDomainRoleId);
			foreach ( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TableIsAlsoForConceptType link between a given Tableand a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType GetLink( global::Neumont.Tools.RelationalModels.ConceptualDatabase.Table source, global::Neumont.Tools.ORMAbstraction.ConceptType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType>(source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType.TableDomainRoleId);
			foreach ( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship ColumnHasConceptTypeChild
	/// Description for
	/// Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ccbcab63-ade4-43fa-8e29-8a598b0969f5")]
	public partial class ColumnHasConceptTypeChild : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ColumnHasConceptTypeChild domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xccbcab63, 0xade4, 0x43fa, 0x8e, 0x29, 0x8a, 0x59, 0x8b, 0x09, 0x69, 0xf5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ColumnHasConceptTypeChild link in the same Partition as the given Column
		/// </summary>
		/// <param name="source">Column to use as the source of the relationship.</param>
		/// <param name="target">ConceptTypeChild to use as the target of the relationship.</param>
		public ColumnHasConceptTypeChild(global::Neumont.Tools.RelationalModels.ConceptualDatabase.Column source, global::Neumont.Tools.ORMAbstraction.ConceptTypeChild target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ColumnHasConceptTypeChild.ColumnDomainRoleId, source), new DslModeling::RoleAssignment(ColumnHasConceptTypeChild.ConceptTypeChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ColumnHasConceptTypeChild(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ColumnHasConceptTypeChild(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ColumnHasConceptTypeChild(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ColumnHasConceptTypeChild(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Column domain role code
		
		/// <summary>
		/// Column domain role Id.
		/// </summary>
		public static readonly global::System.Guid ColumnDomainRoleId = new global::System.Guid(0xbc7ea8a8, 0x8772, 0x4ca4, 0xb9, 0x14, 0xb7, 0x8b, 0x4b, 0x58, 0x33, 0x38);
		
		/// <summary>
		/// DomainRole Column
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild/Column.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild/Column.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConceptTypeChildPath", PropertyDisplayNameKey="Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild/Column.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("bc7ea8a8-8772-4ca4-b914-b78b4b583338")]
		public virtual global::Neumont.Tools.RelationalModels.ConceptualDatabase.Column Column
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.RelationalModels.ConceptualDatabase.Column)DslModeling::DomainRoleInfo.GetRolePlayer(this, ColumnDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ColumnDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Column of a ConceptTypeChild
		/// <summary>
		/// Gets a list of Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::Neumont.Tools.RelationalModels.ConceptualDatabase.Column> GetColumn(global::Neumont.Tools.ORMAbstraction.ConceptTypeChild element)
		{
			return new DslModeling::LinkedElementCollection<global::Neumont.Tools.RelationalModels.ConceptualDatabase.Column>(element, ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild domain role code
		
		/// <summary>
		/// ConceptTypeChild domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeChildDomainRoleId = new global::System.Guid(0xb162a279, 0xa4c1, 0x4271, 0xad, 0x37, 0x9c, 0xdd, 0xfc, 0x42, 0x17, 0x22);
		
		/// <summary>
		/// DomainRole ConceptTypeChild
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild/ConceptTypeChild.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild/ConceptTypeChild.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Column", PropertyDisplayNameKey="Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild/ConceptTypeChild.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("b162a279-a4c1-4271-ad37-9cddfc421722")]
		public virtual global::Neumont.Tools.ORMAbstraction.ConceptTypeChild ConceptTypeChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.ORMAbstraction.ConceptTypeChild)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptTypeChildPath of a Column
		/// <summary>
		/// Gets a list of ConceptTypeChildPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::Neumont.Tools.ORMAbstraction.ConceptTypeChild> GetConceptTypeChildPath(global::Neumont.Tools.RelationalModels.ConceptualDatabase.Column element)
		{
			return new DslModeling::LinkedElementCollection<global::Neumont.Tools.ORMAbstraction.ConceptTypeChild>(element, ColumnDomainRoleId);
		}
		#endregion
		#region Column link accessor
		/// <summary>
		/// Get the list of ColumnHasConceptTypeChild links to a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild> GetLinksToConceptTypeChildPath ( global::Neumont.Tools.RelationalModels.ConceptualDatabase.Column columnInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild>(columnInstance, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild.ColumnDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild link accessor
		/// <summary>
		/// Get the list of ColumnHasConceptTypeChild links to a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild> GetLinksToColumn ( global::Neumont.Tools.ORMAbstraction.ConceptTypeChild conceptTypeChildInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild>(conceptTypeChildInstance, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild.ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region ColumnHasConceptTypeChild instance accessors
		
		/// <summary>
		/// Get any ColumnHasConceptTypeChild links between a given Column and a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild> GetLinks( global::Neumont.Tools.RelationalModels.ConceptualDatabase.Column source, global::Neumont.Tools.ORMAbstraction.ConceptTypeChild target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild>(source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild.ColumnDomainRoleId);
			foreach ( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild link in links )
			{
				if ( target.Equals(link.ConceptTypeChild) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ColumnHasConceptTypeChild link between a given Columnand a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild GetLink( global::Neumont.Tools.RelationalModels.ConceptualDatabase.Column source, global::Neumont.Tools.ORMAbstraction.ConceptTypeChild target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild>(source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild.ColumnDomainRoleId);
			foreach ( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild link in links )
			{
				if ( target.Equals(link.ConceptTypeChild) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship UniquenessConstraintIsForUniqueness
	/// Description for
	/// Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5da169bb-5439-4f61-926f-6b789503511e")]
	public partial class UniquenessConstraintIsForUniqueness : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UniquenessConstraintIsForUniqueness domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5da169bb, 0x5439, 0x4f61, 0x92, 0x6f, 0x6b, 0x78, 0x95, 0x03, 0x51, 0x1e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UniquenessConstraintIsForUniqueness link in the same Partition as the given UniquenessConstraint
		/// </summary>
		/// <param name="source">UniquenessConstraint to use as the source of the relationship.</param>
		/// <param name="target">ConceptTypeChild to use as the target of the relationship.</param>
		public UniquenessConstraintIsForUniqueness(global::Neumont.Tools.RelationalModels.ConceptualDatabase.UniquenessConstraint source, global::Neumont.Tools.ORMAbstraction.ConceptTypeChild target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UniquenessConstraintIsForUniqueness.UniquenessConstraintDomainRoleId, source), new DslModeling::RoleAssignment(UniquenessConstraintIsForUniqueness.ConceptTypeChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UniquenessConstraintIsForUniqueness(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UniquenessConstraintIsForUniqueness(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UniquenessConstraintIsForUniqueness(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UniquenessConstraintIsForUniqueness(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region UniquenessConstraint domain role code
		
		/// <summary>
		/// UniquenessConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid UniquenessConstraintDomainRoleId = new global::System.Guid(0x2c58f935, 0xe736, 0x401f, 0xb2, 0x2f, 0xe3, 0x8f, 0x71, 0xab, 0x33, 0xe5);
		
		/// <summary>
		/// DomainRole UniquenessConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness/UniquenessConstraint.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness/UniquenessConstraint.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Uniqueness", PropertyDisplayNameKey="Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness/UniquenessConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2c58f935-e736-401f-b22f-e38f71ab33e5")]
		public virtual global::Neumont.Tools.RelationalModels.ConceptualDatabase.UniquenessConstraint UniquenessConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.RelationalModels.ConceptualDatabase.UniquenessConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, UniquenessConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UniquenessConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Column of a ConceptTypeChild
		/// <summary>
		/// Gets a list of Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::Neumont.Tools.RelationalModels.ConceptualDatabase.UniquenessConstraint> GetColumn(global::Neumont.Tools.ORMAbstraction.ConceptTypeChild element)
		{
			return new DslModeling::LinkedElementCollection<global::Neumont.Tools.RelationalModels.ConceptualDatabase.UniquenessConstraint>(element, ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild domain role code
		
		/// <summary>
		/// ConceptTypeChild domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeChildDomainRoleId = new global::System.Guid(0x78ab7c46, 0xd141, 0x4136, 0xb1, 0xda, 0x2f, 0x5a, 0x64, 0xe8, 0x20, 0xdc);
		
		/// <summary>
		/// DomainRole ConceptTypeChild
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness/ConceptTypeChild.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness/ConceptTypeChild.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Column", PropertyDisplayNameKey="Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness/ConceptTypeChild.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("78ab7c46-d141-4136-b1da-2f5a64e820dc")]
		public virtual global::Neumont.Tools.ORMAbstraction.ConceptTypeChild ConceptTypeChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.ORMAbstraction.ConceptTypeChild)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Uniqueness of a UniquenessConstraint
		/// <summary>
		/// Gets a list of Uniqueness.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::Neumont.Tools.ORMAbstraction.ConceptTypeChild> GetUniqueness(global::Neumont.Tools.RelationalModels.ConceptualDatabase.UniquenessConstraint element)
		{
			return new DslModeling::LinkedElementCollection<global::Neumont.Tools.ORMAbstraction.ConceptTypeChild>(element, UniquenessConstraintDomainRoleId);
		}
		#endregion
		#region UniquenessConstraint link accessor
		/// <summary>
		/// Get the list of UniquenessConstraintIsForUniqueness links to a UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness> GetLinksToUniqueness ( global::Neumont.Tools.RelationalModels.ConceptualDatabase.UniquenessConstraint uniquenessConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness>(uniquenessConstraintInstance, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness.UniquenessConstraintDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild link accessor
		/// <summary>
		/// Get the list of UniquenessConstraintIsForUniqueness links to a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness> GetLinksToColumn ( global::Neumont.Tools.ORMAbstraction.ConceptTypeChild conceptTypeChildInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness>(conceptTypeChildInstance, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness.ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region UniquenessConstraintIsForUniqueness instance accessors
		
		/// <summary>
		/// Get any UniquenessConstraintIsForUniqueness links between a given UniquenessConstraint and a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness> GetLinks( global::Neumont.Tools.RelationalModels.ConceptualDatabase.UniquenessConstraint source, global::Neumont.Tools.ORMAbstraction.ConceptTypeChild target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness>(source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness.UniquenessConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness link in links )
			{
				if ( target.Equals(link.ConceptTypeChild) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UniquenessConstraintIsForUniqueness link between a given UniquenessConstraintand a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness GetLink( global::Neumont.Tools.RelationalModels.ConceptualDatabase.UniquenessConstraint source, global::Neumont.Tools.ORMAbstraction.ConceptTypeChild target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness>(source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness.UniquenessConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness link in links )
			{
				if ( target.Equals(link.ConceptTypeChild) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship DomainIsForInformationTypeFormat
	/// Description for
	/// Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a9f82d26-1d87-4808-b618-37ff179466fc")]
	public partial class DomainIsForInformationTypeFormat : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainIsForInformationTypeFormat domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa9f82d26, 0x1d87, 0x4808, 0xb6, 0x18, 0x37, 0xff, 0x17, 0x94, 0x66, 0xfc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainIsForInformationTypeFormat link in the same Partition as the given Domain
		/// </summary>
		/// <param name="source">Domain to use as the source of the relationship.</param>
		/// <param name="target">InformationTypeFormat to use as the target of the relationship.</param>
		public DomainIsForInformationTypeFormat(global::Neumont.Tools.RelationalModels.ConceptualDatabase.Domain source, global::Neumont.Tools.ORMAbstraction.InformationTypeFormat target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainIsForInformationTypeFormat.DomainDomainRoleId, source), new DslModeling::RoleAssignment(DomainIsForInformationTypeFormat.InformationTypeFormatDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainIsForInformationTypeFormat(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainIsForInformationTypeFormat(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainIsForInformationTypeFormat(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainIsForInformationTypeFormat(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Domain domain role code
		
		/// <summary>
		/// Domain domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainDomainRoleId = new global::System.Guid(0xeec22052, 0x39cd, 0x4f93, 0xac, 0x66, 0x66, 0x34, 0xdd, 0x64, 0x23, 0xb4);
		
		/// <summary>
		/// DomainRole Domain
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat/Domain.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat/Domain.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InformationTypeFormat", PropertyDisplayNameKey="Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat/Domain.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("eec22052-39cd-4f93-ac66-6634dd6423b4")]
		public virtual global::Neumont.Tools.RelationalModels.ConceptualDatabase.Domain Domain
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.RelationalModels.ConceptualDatabase.Domain)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Domain of a InformationTypeFormat
		/// <summary>
		/// Gets a list of Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::Neumont.Tools.RelationalModels.ConceptualDatabase.Domain> GetDomain(global::Neumont.Tools.ORMAbstraction.InformationTypeFormat element)
		{
			return new DslModeling::LinkedElementCollection<global::Neumont.Tools.RelationalModels.ConceptualDatabase.Domain>(element, InformationTypeFormatDomainRoleId);
		}
		#endregion
		#region InformationTypeFormat domain role code
		
		/// <summary>
		/// InformationTypeFormat domain role Id.
		/// </summary>
		public static readonly global::System.Guid InformationTypeFormatDomainRoleId = new global::System.Guid(0x64e89755, 0x37f7, 0x43d6, 0xa6, 0xc5, 0x65, 0x4b, 0x1c, 0x31, 0x5d, 0x1b);
		
		/// <summary>
		/// DomainRole InformationTypeFormat
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat/InformationTypeFormat.DisplayName", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat/InformationTypeFormat.Description", typeof(global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Domain", PropertyDisplayNameKey="Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat/InformationTypeFormat.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("64e89755-37f7-43d6-a6c5-654b1c315d1b")]
		public virtual global::Neumont.Tools.ORMAbstraction.InformationTypeFormat InformationTypeFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Neumont.Tools.ORMAbstraction.InformationTypeFormat)DslModeling::DomainRoleInfo.GetRolePlayer(this, InformationTypeFormatDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InformationTypeFormatDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InformationTypeFormat of a Domain
		/// <summary>
		/// Gets InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstraction.InformationTypeFormat GetInformationTypeFormat(global::Neumont.Tools.RelationalModels.ConceptualDatabase.Domain element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainDomainRoleId) as global::Neumont.Tools.ORMAbstraction.InformationTypeFormat;
		}
		
		/// <summary>
		/// Sets InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInformationTypeFormat(global::Neumont.Tools.RelationalModels.ConceptualDatabase.Domain element, global::Neumont.Tools.ORMAbstraction.InformationTypeFormat newInformationTypeFormat)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainDomainRoleId, newInformationTypeFormat);
		}
		#endregion
		#region Domain link accessor
		/// <summary>
		/// Get the DomainIsForInformationTypeFormat link to a Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat GetLinkToInformationTypeFormat (global::Neumont.Tools.RelationalModels.ConceptualDatabase.Domain domainInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat>(domainInstance, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat.DomainDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Domain not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InformationTypeFormat link accessor
		/// <summary>
		/// Get the list of DomainIsForInformationTypeFormat links to a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat> GetLinksToDomain ( global::Neumont.Tools.ORMAbstraction.InformationTypeFormat informationTypeFormatInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat>(informationTypeFormatInstance, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat.InformationTypeFormatDomainRoleId);
		}
		#endregion
		#region DomainIsForInformationTypeFormat instance accessors
		
		/// <summary>
		/// Get any DomainIsForInformationTypeFormat links between a given Domain and a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat> GetLinks( global::Neumont.Tools.RelationalModels.ConceptualDatabase.Domain source, global::Neumont.Tools.ORMAbstraction.InformationTypeFormat target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat>(source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat.DomainDomainRoleId);
			foreach ( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainIsForInformationTypeFormat link between a given Domainand a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat GetLink( global::Neumont.Tools.RelationalModels.ConceptualDatabase.Domain source, global::Neumont.Tools.ORMAbstraction.InformationTypeFormat target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat>(source, global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat.DomainDomainRoleId);
			foreach ( global::Neumont.Tools.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
