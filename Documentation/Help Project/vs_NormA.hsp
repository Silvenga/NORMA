<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<HSProject ProjectType="0" Version="2.0.26" SaveDateTime="01/03/2007 14:13:19" DXPFileName="" TemplateName="HelpStudio Lite 2005 Style" SpellLastCheckDateTime="12:00:00 AM" Title="Neumont ORM Architect (NORMA)" SCCActivated="False" SCCProject="" HelpContextIDHeaderFile="" OutputDirectory="" AutoGenerateIndexEntries="True" AutoGenerateCategoryIndex="False" BuildDXProject="False" DefaultTopic="{12E9716E-59AA-4178-9EE7-A0743AE78E24}" Lite="True">
    <SpellIgnoreAllWordList/>
    <cat Name="Getting Started" Key="C1" AutoIndex="True"/>
    <cat Name="Tutorials" Key="C2" AutoIndex="True"/>
    <cat Name="ORM TECH RPT 1" Key="C3" AutoIndex="True"/>
    <cat Name="Support" Key="C4" AutoIndex="True"/>
    <cat Name="Microsoft Help 2.x Error Pages" Key="C5" AutoIndex="True"/>
    <cat Name="Dev Docs" Key="{69564419-AA92-4F5A-AEC7-E3054C4CA000}" AutoIndex="True"/>
    <cat Name="ORM TECH RPT 2" Key="{7B6F520C-C1B9-4D50-A678-EE1D9BB17AF7}" AutoIndex="True"/>
    <VariableValue Name="CopyrightNotice"><![CDATA[&copy; Neumont University. All Rights Reserved.]]></VariableValue>
    <file FileName="stopwordlist.txt" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image001.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image002.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image003.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image004.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image005.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image006.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image007.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image008.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image009.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image010.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image011.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image012.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image013.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image014.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image015.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image016.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image017.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image018.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image019.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image020.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image021.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image022.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image023.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image024.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image025.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image001.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image026.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image027.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image028.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image002.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image003.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image029.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image004.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image005.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image006.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image007.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image008.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image030.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image009.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image031.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image010.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image011.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image012.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image013.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image014.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image032.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image033.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image015.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image016.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image017.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image018.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image019.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image020.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image021.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image022.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image023.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image024.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image034.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image025.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image026.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image027.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image028.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image029.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image030.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image035.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image031.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image032.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image033.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image036.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image034.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image035.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image036.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image037.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image038.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image039.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image040.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image041.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image037.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image038.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image042.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image043.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image044.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image045.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image046.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image047.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image048.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image049.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image050.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image039.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image051.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image052.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image053.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image054.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image055.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image056.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image057.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image040.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image058.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image059.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image041.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image060.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image061.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image062.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image042.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image063.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image043.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image064.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image065.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image066.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image044.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image045.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image067.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image068.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image069.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image046.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image070.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image071.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image072.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image047.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image073.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image074.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image075.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image048.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image049.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image076.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image077.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image078.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image050.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image079.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image080.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image081.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image051.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image082.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image083.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image084.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image085.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image052.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image053.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image086.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image054.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image055.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image056.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image057.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image058.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image059.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image060.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image061.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image062.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image063.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image064.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image065.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image066.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image067.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image068.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image069.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image070.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image071.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image072.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image073.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image074.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image075.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image076.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image077.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image078.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image079.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image080.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image081.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image082.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image083.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image084.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image085.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image086.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image087.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image088.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image089.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image090.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image091.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image092.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image093.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image094.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image095.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image096.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image097.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image098.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image099.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image100.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image101.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image102.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image103.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\hs-tip.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image087.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image104.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image105.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image106.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image107.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image108.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image109.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image110.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image111.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image112.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image113.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image114.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image115.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image116.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image117.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image118.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image119.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image120.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image121.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image122.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image123.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image124.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image125.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image126.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image127.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image128.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image129.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image130.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image131.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image132.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image133.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image134.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image135.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image136.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image137.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image138.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image139.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image140.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image141.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image142.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image143.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image144.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image145.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image146.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image147.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image148.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image149.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image150.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image151.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image152.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image153.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image088.jpg" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image154.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image155.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image156.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image157.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image158.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image159.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image160.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image161.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image162.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image163.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image164.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image165.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image166.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image167.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image168.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image169.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image170.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image171.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image172.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image173.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image174.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image175.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image176.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image177.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image178.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image179.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image180.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image181.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image182.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image183.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image184.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image185.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image186.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image187.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image188.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image189.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image190.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image191.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image192.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image193.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image194.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image195.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image196.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image197.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image198.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image199.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image200.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image201.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image202.gif" CaptureInfo="" IncludeInOutput="True"/>
    <file FileName="images\Image203.gif" CaptureInfo="" IncludeInOutput="True"/>
    <Topic Key="{95CA4353-34B0-4493-B8AB-FF7BF1C9352E}" Name="_index_entry_not_found" Title="Empty Index Entry" ContentsTitle="Empty Index Entry" Status="In Progress" CreatedOn="23-09-2005 00:00:00" ModifiedOn="23-09-2005 00:00:00" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="False" IncludeInHelpFile="True" HelpContextIDs="" Category="C5">
        <Notes/>
        <K Value="@_vsipsample_index_entry_not_found"/>
        <s k="BodyText"><![CDATA[<H1>Empty Index Entry</H1>
<P>The index entry you selected has no target topics associated with it.</P>
<P>If you have chosen a parent entry, please select a child entry.</P><MSHelp:NoSearch>
<xml><MSHelp:NoSearch/></xml>]]></s>
    </Topic>
    <Topic Key="{11A66232-56ED-4B86-A42C-835E93506F4A}" Name="_topic_not_found" Title="Topic Not Found" ContentsTitle="Topic Not Found" Status="In Progress" CreatedOn="23-09-2005 00:00:00" ModifiedOn="23-09-2005 00:00:00" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="False" IncludeInHelpFile="True" HelpContextIDs="" Category="C5">
        <Notes/>
        <s k="BodyText"><![CDATA[<script type="text/javascript">
// ****************************************************************************
// *                       NavFailPage Parameter Insertion                    *
// ****************************************************************************

function navfailpageparam() {
        var keyString = "keywords=";
        var idxString = "index=";
        var urlString = "url=";
        var query = window.location.search;
        var j = 0;
        var delim;
        var i = query.indexOf(keyString);

        if (i >= 0) {
                i += keyString.length;
                delim = query.charAt(i);
                j = query.indexOf(delim, i+1);
                if (j > 0) document.getElementById("keywordsSpan").innerText = query.substring(i, j+1);
        }

        i = query.indexOf(idxString);
        if (i >= 0) {
                i += idxString.length;
                delim = query.charAt(i);
                j = query.indexOf(delim, i+1);
                if (j > 0) document.getElementById("indexSpan").innerText = query.substring(i, j+1);
        }

        i = query.indexOf(urlString);
        if (i >= 0) {
                i += urlString.length;
                delim = query.charAt(i);
                j = query.indexOf(delim, i+1);
                if (j > 0) document.getElementById("urlSpan").innerText = query.substring(i, j+1);
        }
}
</script>

<h1>Topic Not Found</h1>

<p>The link you just clicked was not able to connect to the target page.</p>

<p>Some possible reasons and remedies are as follows:</p>

<table class="msdn" cellspacing="0">
    <tbody>
        <tr valign="top">
            <th width="47%">Reason</th>

            <th width="53%">Remedy</th>
        </tr>

        <tr valign="top">
            <td width="47%">Destination topic is not part of the area you specified in the <b>Filtered by</b>
            field.</td>

            <td width="53%">Either select another filter or select <b>(no filter)</b>.</td>
        </tr>

        <tr valign="top">
            <td width="47%">The URL of the destination topic is incorrect or has changed.</td>

            <td width="53%">Use the index or the search function instead.</td>
        </tr>

        <tr valign="top">
            <td width="47%">Problems with the help installation.</td>

            <td width="53%">Rerun Setup for the product this help is related to and select the 'Repair'
            option.</td>
        </tr>
    </tbody>
</table>

<p>Additional help is available for filters, search, and the index.</p>

<p>Click <a href="javascript:history.back(-1)">Back</a> to return to the page you were on.</p>
<hr>

<p>The target parameters are:</p>
<p>Keyword: <span id="keywordsSpan"></span><br>
Index Moniker: <span id="indexSpan"></span><br>
URL: <span id="urlSpan"></span></p>
<script type="text/javascript">
    navfailpageparam()
</script>
<xml><MSHelp:NoSearch/></xml>]]></s>
    </Topic>
    <Topic Key="{C63D3736-E030-4720-B7BA-324FE505472F}" Name="ORM 2 Tech Report 1" Title="ORM 2 Graphical Notation" ContentsTitle="ORM 2 Graphical Notation" Status="In Progress" CreatedOn="09-02-2007 14:12:08" ModifiedOn="26-02-2007 13:52:12" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: center" align=center><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: 'Verdana','sans-serif'"><FONT face="Times New Roman"><FONT size=2>ORM 2 Graphical Notation<?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p></o:p></FONT></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: center" align=center><o:p><FONT face="Times New Roman" size=2>&nbsp;</FONT></o:p></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: center" align=center><I style="mso-bidi-font-style: normal"><SPAN style="FONT-SIZE: 11pt"><FONT face="Times New Roman"><FONT size=2>Terry Halpin<o:p></o:p></FONT></FONT></SPAN></I></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: center" align=center><I style="mso-bidi-font-style: normal"><SPAN style="FONT-SIZE: 5pt"><o:p><FONT face="Times New Roman" size=2>&nbsp;</FONT></o:p></SPAN></I></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: center" align=center><SPAN lang=DE style="FONT-SIZE: 10pt; mso-ansi-language: DE"><FONT face="Times New Roman">Neumont University<o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: center" align=center><SPAN lang=DE style="FONT-SIZE: 10pt; mso-ansi-language: DE"><FONT face="Times New Roman">terry@neumont.edu<o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: center" align=center><SPAN lang=DE style="FONT-SIZE: 2pt; mso-ansi-language: DE"><o:p><FONT face="Times New Roman" size=2>&nbsp;</FONT></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: center" align=center><SPAN lang=DE style="mso-ansi-language: DE"><o:p><FONT face="Times New Roman" size=2>&nbsp;</FONT></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 28.35pt 0pt; TEXT-ALIGN: justify"><B style="mso-bidi-font-weight: normal"><SPAN style="FONT-SIZE: 9pt; LAYOUT-GRID-MODE: line; mso-bidi-font-size: 12.0pt"><o:p><FONT face="Times New Roman" size=2>&nbsp;</FONT></o:p></SPAN></B></P>
<P class=MsoNormal style="MARGIN: 0in 28.35pt 0pt; TEXT-ALIGN: justify"><FONT face="Times New Roman"><FONT size=2><B style="mso-bidi-font-weight: normal"><SPAN style="FONT-SIZE: 9pt; LAYOUT-GRID-MODE: line; mso-bidi-font-size: 12.0pt">Abstract</SPAN></B><SPAN style="FONT-SIZE: 9pt; LAYOUT-GRID-MODE: line; mso-bidi-font-size: 12.0pt">: Object-role Modeling (ORM) is a fact-oriented modeling approach for expressing, transforming and querying information at a concept</SPAN><SPAN style="FONT-SIZE: 9pt; LAYOUT-GRID-MODE: line">ual level. </SPAN><SPAN style="FONT-SIZE: 9pt">Unlike Entity-Relationship modeling and Unified Modeling Language class diagramming, fact-oriented modeling is attribute-free, treating all elementary facts as relationships expressed in natural language sentences.<SPAN style="LAYOUT-GRID-MODE: line"> </SPAN>For information modeling, ORM graphical notations are typically far more expressive than other notations, and ORM's attribute-free nature promotes semantic stability and facilitates natural verbalization. Based on industrial experience that identified ways to improve current ORM languages and associated tools, a project is under way to provide open-source tool support for a second generation ORM (ORM 2), that has significant advances over current ORM technology. </SPAN><SPAN style="FONT-SIZE: 9pt; LAYOUT-GRID-MODE: line; mso-bidi-font-size: 12.0pt">This paper provides an overview of, and motivation for, the enhancements introduced by the ORM 2 graphical notation.</SPAN><SPAN style="LAYOUT-GRID-MODE: line"><o:p></o:p></SPAN></FONT></FONT></P>
<P class=MsoCaption style="MARGIN: 6pt 0in"><STRONG><FONT face="Times New Roman" size=2>Introduction</FONT></STRONG></P>
<P class=p1a style="MARGIN: 0in 0in 0pt"><FONT face="Times New Roman" size=2>Introduced in the mid 1970s, <I style="mso-bidi-font-style: normal">Object-Role Modeling</I> (<I style="mso-bidi-font-style: normal">ORM</I>) facilitates modeling, transforming, and querying business information in terms of the underlying <I style="mso-bidi-font-style: normal">facts</I> of interest, where all facts and rules may be verbalized in language easily understood by non-technical users of those business domains. Unlike Entity-Relationship (ER) modeling [6] and Unified Modeling Language (UML) class diagramming [31, 32, 33], ORM treats all elementary facts as relationships (unary, binary, ternary, etc.), thus regarding decisions for grouping facts into structures (e.g. attribute-based entity types, classes, relation schemes, XML schemas) as implementation concerns irrelevant to business semantics. By avoiding attributes in the base model, ORM enhances semantic stability and populatability, and facilitates natural verbalization. </FONT><A name=OLE_LINK1><FONT face="Times New Roman" color=#000000 size=2>For information modeling, fact-oriented graphical notations are far more expressive than ER and UML graphical notations. </FONT></A><FONT face="Times New Roman" size=2>Fact-oriented textual languages are based on formal subsets of native languages, so are easier to understand by business people than technical languages like the Object Constraint Language (OCL) [35]. Fact-oriented modeling includes procedures for mapping to attribute-based structures, such as those of ER or UML. </FONT></P>
<P class=p1a style="MARGIN: 0in 0in 0pt; TEXT-INDENT: 19.85pt"><FONT face="Times New Roman" size=2>The fact-oriented modeling approach comprises a family of closely related dialects. Some use the generic term "Object-Role Modeling" (ORM) [<SPAN style="mso-field-code: ' REF _Ref111628904 r  * MERGEFORMAT '">15</SPAN>], while others use different names such as Natural language Information Analysis Method (NIAM) [<SPAN style="mso-field-code: ' REF _Ref106006792 r  * MERGEFORMAT '">12</SPAN>, <SPAN style="mso-field-code: ' REF _Ref106005588 r  * MERGEFORMAT '">36</SPAN>], and Fully-Communication Oriented Information Modeling (FCO-IM) [<SPAN style="mso-field-code: ' REF _Ref34391888 r  * MERGEFORMAT '">1</SPAN>, <SPAN style="mso-field-code: ' REF _Ref106005988 r  * MERGEFORMAT '">2</SPAN>]. ORM languages include RIDL [<SPAN style="mso-field-code: ' REF _Ref106006965 r  * MERGEFORMAT '">30</SPAN>], LISA-D [<SPAN style="mso-field-code: ' REF _Ref111698970 r  * MERGEFORMAT '">26</SPAN>, <SPAN style="mso-field-code: ' REF _Ref106006991 r  * MERGEFORMAT '">27</SPAN>] and FORML [<SPAN style="mso-field-code: ' REF _Ref111628904 r  * MERGEFORMAT '">15</SPAN>]. Though notationally different, the Object-oriented Systems Model (OSM) [<SPAN style="mso-field-code: ' REF _Ref4130188 r  * MERGEFORMAT '">11</SPAN>] is a close relative to ORM, with its attribute-free approach. Commercial ORM tools include the ORM solution within Microsoft's Visio for Enterprise Architects [<SPAN style="mso-field-code: ' REF _Ref111699008 r  * MERGEFORMAT '">23</SPAN>], and the FCO-IM tool CaseTalk [<SPAN style="mso-field-code: ' REF _Ref106007367 r  * MERGEFORMAT '">5</SPAN>]. Free ORM tools include VisioModeler [<SPAN style="mso-field-code: ' REF _Ref106007859 r  * MERGEFORMAT '">34</SPAN>], Infagon [<SPAN style="mso-field-code: ' REF _Ref106007872 r  * MERGEFORMAT '">28</SPAN>], and academic prototypes such as Dogma Modeler [<SPAN style="mso-field-code: ' REF _Ref106008193 r  * MERGEFORMAT '">10</SPAN>], an ORM-based tool for specifying ontologies. An introduction to ORM is included in [14], and a detailed treatment in [15]. </FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0.3pt 0pt 0in; TEXT-INDENT: 19.85pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><FONT face="Times New Roman">Building on industrial experience that identified ways to improve current ORM languages and tools, our project aims to provide tool support for a second generation ORM (called <I style="mso-bidi-font-style: normal">ORM 2</I>), that has significant advances over current ORM technology in functionality and usability. <SPAN style="LAYOUT-GRID-MODE: line">This paper overviews and motivates enhancements introduced by the ORM 2 graphical notation, and discusses a tool under development to support it. The initial development team comprised of faculty and students at <?xml:namespace prefix = st1 ns = "urn:schemas-microsoft-com:office:smarttags" /><st1:place w:st="on"><st1:PlaceName w:st="on">Neumont</st1:PlaceName> <st1:PlaceType w:st="on">University</st1:PlaceType></st1:place> is being expanded to include external collaborators from industry and academia. </SPAN>The current implementation is coded in C# as a free, open-source plug-in to Microsoft Visual Studio .NET, using the new Microsoft Designer Framework Software Development Kit for building domain specific languages.<o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0.3pt 0pt 0in; TEXT-INDENT: 19.85pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt; LAYOUT-GRID-MODE: line"><FONT face="Times New Roman">The rest of this report is structured as follows. Section 2 focuses on improvements to the ORM graphical notation. Section 3 briefly discusses enhancements to the ORM textual notation. Section 4 summarizes the main results, suggests topics for further research, and lists references. An appendix includes sample schemas to illustrate the impact of changing to the new notation.<o:p></o:p></FONT></SPAN></P>]]></s>
    </Topic>
    <Topic Key="{624EC9C9-67AF-4A21-AA61-F6BC03BF8B04}" Name="Abstract Introduction" Title="Abstract Introduction" ContentsTitle="Abstract Introduction" Status="In Progress" CreatedOn="09-02-2007 14:12:08" ModifiedOn="20-02-2007 14:36:43" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class="">
<H1 class="">The ORM 2 Graphical Notation</H1>
<P class="">&nbsp;</P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><FONT face="Times New Roman">This technical report is concerned almost exclusively with the ORM 2 graphical notation. Later technical reports will discuss other aspects of ORM 2 tool support. We begin by summarizing the main objectives for the new ORM notation, and then examine specific notational areas in turn, including reasons for changes from the previous notation. <?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-INDENT: 19.85pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><FONT face="Times New Roman">Most of the ORM 2 figures in this report were drawn using an ORM 2 Visio stencil that our team created. Currently, this stencil may be used for drawing purposes only. In contrast, the ORM 2 modeling tool is intended to support automatic transformation between graphical and textual representations, as well as transformation to/from other schemas (e.g. relational, object, and XML schemas), and code generation (e.g. to DDL or program code). The tool is also intended to front-end other modeling tools (e.g. one might enter and transform an ORM schema to a relational schema for export to another database design tool). As schemas developed in the tool are fully exposed as XML, there is significant scope for inter-operability.</FONT></SPAN></P></DIV>]]></s>
    </Topic>
    <Topic Key="{01AA4BA5-22D1-4FFA-AC93-51E5D76D44A8}" Name="Main Objectives" Title="Main Objectives" ContentsTitle="Main Objectives" Status="In Progress" CreatedOn="09-02-2007 14:12:09" ModifiedOn="20-02-2007 14:38:06" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class="">
<H1 class="">Main Objectives</H1>
<P class="">&nbsp;</P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><FONT face="Times New Roman">While being far more expressive graphically than UML or industrial ER for static data models, ORM models tend to consume more space because of their attribute-free nature. This diagram size problem may be ameliorated by providing attribute-views on demand, and/or by redesigning the ORM graphic notation to be more compact. The first solution includes displaying "minor fact types" as attributes on an ORM diagram, as well as automatically generating attribute-based schemas for implementation targets (e.g. relational schemas, object schemas, and XML schemas). We postpone work on this first solution for now, instead focusing on a new ORM graphical notation that is more compact and hopefully more acceptable in other aspects. The main objectives for the ORM 2 graphical notation are:<?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt"><SPAN style="FONT-SIZE: 5pt"><o:p><FONT face="Times New Roman">&nbsp;</FONT></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.25in; mso-list: l0 level1 lfo1; tab-stops: list .5in"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'; mso-fareast-font-family: Tahoma"><SPAN style="mso-list: Ignore">⬢<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt"><FONT face="Times New Roman"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>More compact display of ORM models without compromising clarity<o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.25in; mso-list: l2 level1 lfo2; tab-stops: list .5in"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'; mso-fareast-font-family: Tahoma"><SPAN style="mso-list: Ignore">⬢<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt"><FONT face="Times New Roman"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>Improved internationalization (e.g. avoid English language symbols)<o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.25in; mso-list: l1 level1 lfo3; tab-stops: list .5in"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'; mso-fareast-font-family: Tahoma"><SPAN style="mso-list: Ignore">⬢<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt"><FONT face="Times New Roman"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>Notation changes that are reasonably acceptable to an identified short-list of key ORM users<o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.25in; mso-list: l1 level1 lfo3; tab-stops: list .5in"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'; mso-fareast-font-family: Tahoma"><SPAN style="mso-list: Ignore">⬢<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt"><FONT face="Times New Roman"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>Simplified drawing rules to reduce the effort to create a graphical editor<o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.25in; mso-list: l5 level1 lfo4; tab-stops: list .5in"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'; mso-fareast-font-family: Tahoma"><SPAN style="mso-list: Ignore">⬢<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt"><FONT face="Times New Roman"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>Full support of textual annotations (e.g. footnoting of textual rules)<o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.25in; mso-list: l4 level1 lfo5; tab-stops: list .5in"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'; mso-fareast-font-family: Tahoma"><SPAN style="mso-list: Ignore">⬢<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt"><FONT face="Times New Roman"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>Extended use of views for selectively displaying/suppressing detail<o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.25in; mso-list: l3 level1 lfo6; tab-stops: list .5in"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'; mso-fareast-font-family: Tahoma"><SPAN style="mso-list: Ignore">⬢<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt"><FONT face="Times New Roman"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>Support for new features (e.g. role path disambiguation, modalities, open world aspects)<o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.25in"><SPAN style="FONT-SIZE: 5pt"><o:p><FONT face="Times New Roman">&nbsp;</FONT></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><FONT face="Times New Roman"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>For convenience, we use the term "ORM1 notation" to refer to the ORM notation currently supported by Microsoft's Visio-based ORM solution, which we call the "Visio ORM1 tool". We use the term "ORM2 notation" for the new notation supported by our ORM 2 tool. The ORM2 notation typically yields schema diagrams that consume about 65% the size of an equivalent diagram in the ORM1 notation. See the appendix for a representative schema displayed in both the old and new notations. All English-specific symbols in the ORM1 notation have been replaced by language-neutral symbols to improve localization in different language communities. A survey was issued to eighteen ORM experts regarding the proposed ORM2 notation, and each change introduced by the new notation was acceptable to a majority of the responders.&nbsp;<SPAN style="mso-spacerun: yes">&nbsp;</SPAN></FONT></SPAN></P></DIV>]]></s>
    </Topic>
    <Topic Key="{5508619A-6B53-4B9F-9059-013534449D2E}" Name="Object Type Shapes" Title="Object Type Shapes" ContentsTitle="Object Type Shapes" Status="In Progress" CreatedOn="09-02-2007 14:12:09" ModifiedOn="21-02-2007 13:18:19" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class="">
<H1 class="">Object Type Shapes</H1>
<P class="">&nbsp;</P>
<P class=""><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA">In the ORM1 notation, object type (entity type and value type) shapes are depicted by named ellipses. While ellipses are faster for users to draw manually on paper, they consume more usable space than rectangles (hard or soft), especially when long names are involved. For ORM 2, the default shape for object types is a <I style="mso-bidi-font-style: normal">soft rectangle</I> (rectangle with rounded corners). Besides providing a more compact container for the enclosed text, this is consistent with the current notation for nested object types. The shape auto-sizes to provide appropriate white space around the text, while maintaining a convenient minimum size, and users may spread text over multiple lines (as in the Visio ORM1 tool). Text settings and controls follow existing conventions (i.e. text is displayed in a user-definable default style, individual text elements may be user-selected for alternate styles, text may be left/center/right justified, etc.). To make this notation change more acceptable, we allow the use of an <I style="mso-bidi-font-style: normal">ellipse</I> or a <I style="mso-bidi-font-style: normal">hard rectangle</I> as an alternative shape for object types, as determined by a configuration option. <SPAN style="mso-field-code: ' REF _Ref87091412  * MERGEFORMAT '">Figure <SPAN style="mso-no-proof: yes">1</SPAN></SPAN> shows some examples.</SPAN> </P>
<P class="">&nbsp;</P>
<P class=""><IMG class="" height=148 src="Images/Image001.gif" width=330></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT><A class="" name=_Ref87091412><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">1: Object type shapes in (a) old notation and new notations: (b) default; (c) and (d) alternatives. </FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If the ellipse option is chosen, the white space is reduced compared to the old notation. Object type shape examples in the rest of this document all use the default shape (soft rectangle). Of the 18 experts surveyed, 12 preferred the soft rectangle, 5 preferred the ellipse shape, and one preferred the hard rectangle.</FONT>&nbsp;</P></DIV>]]></s>
    </Topic>
    <Topic Key="{F6FFBF05-60FD-4EB9-AF27-63EF585238D3}" Name="Shapes and Readings for Predicates and Roles" Title="Shapes and Readings for Predicates and Roles" ContentsTitle="Shapes and Readings for Predicates and Roles" Status="In Progress" CreatedOn="09-02-2007 14:12:09" ModifiedOn="21-02-2007 13:18:47" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class="">
<H1 class=""><FONT face="Times New Roman">Shapes and Readings for Predicates and Roles</FONT></H1>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman">To save space, the size of the role boxes is significantly reduced. A line connecting a role box to an object type shape is always directed from the mid-point of an outer edge of the role box to the center of the object type shape (unlike the Visio ORM1 tool, which connects to the closest connection point on the object type shape). When using the ORM 2 stencil to connect a role to the object type, drag the role connector line onto the object type shape until the connection is confirmed by a red rectangle display around the object type. As with the current solution, predicate readings may be user-positioned beside the predicate shape. Figure 2 shows a simple example. Although there is no longer room to place a predicate reading inside a role box, as in Figure 2(a), this option was rarely used anyway. By default, all text is in 7 point Tahoma (the Visio ORM1 tool uses 8 point Arial).&nbsp; </FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=103 src="Images/Image002.gif" width=232></FONT></P>
<P class=""><A class="" name=_Ref87092623><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">2: The old role box size (a) is significantly reduced (b) with text in 7 point Tahoma.</FONT></P>
<P class=""><FONT face="Times New Roman">The reduced role box size still allows space for multiple single-role set-comparison constraints to be conveniently aligned, as shown in Figure 3. The old notation in Figure 3(a) is roomy enough to allow an additional set-comparison constraint between the role-pairs, without moving the other constraints. The new notation would require moving one of the constraints to make room for the third constraint, but since such cases are rare we believe this inconvenience to be minor and acceptable. The size of the constraint bubbles is slightly reduced in the new notation.</FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=73 src="Images/Image003.gif" width=362></FONT></P>
<P class=""><A class="" name=_Ref87093923><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">3: An example with set-comparison constraints in the old notation (a) and new notation (b). </FONT><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA"></P>
<P class="">As with the ORM1 notation for binary fact types, a forward predicate reading is read left-to-right or top-to-bottom, and an inverse predicate reading (pre-pended by "</SPAN><FONT face="Times New Roman">« ") is read right-to-left or bottom-to-top. For a binary fact type, forward and inverse predicate readings may be displayed together, separated by a slash without the "«" (as in the Visio ORM1 tool), or separately on either side of the predicate shape with the inverse reading pre-pended by "« ". At some future stage, we might replace the "«" symbol by an arrowhead (e.g. "<SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Wingdings 3'; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA; mso-bidi-font-family: 'Times New Roman'; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-char-type: symbol; mso-symbol-font-family: 'Wingdings 3'"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: 'Wingdings 3'">|</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA">"). The display of any predicate reading may be toggled on/off. Multi-line reading displays are allowed. <SPAN style="mso-field-code: ' REF _Ref87109999  * MERGEFORMAT '">Figure <SPAN style="mso-no-proof: yes">4</SPAN></SPAN> shows some of the possibilities. </SPAN></FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=130 src="Images/Image004.gif" width=460></FONT></P>
<P class=""><A class="" name=_Ref87109999><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">4: Forward andinverse predicate reading display in (a) ORM and (b) ORM 2.</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-INDENT: 19.85pt; TEXT-ALIGN: justify"><FONT face="Times New Roman"><SPAN style="FONT-SIZE: 10pt">The current ORM 2 stencil stores only one reading with the predicate shape (for now, other readings must be entered in a text box). The ORM 2 modeling tool, however, is much more flexible. For a fact type with n roles (n &gt; 0), ORM 2 allows predicate readings for all possible (n!) permutations of role orderings. For each such role ordering, one or more alias readings may be supplied (e.g. "is employed by" as an alias of "works for"). Query navigation in relational style from any role of an n-ary fact type is enabled by just n predicate readings (one starting at each role), but industrial modelers requested this additional flexibility. For non-binary fact types, at most one predicate reading is displayed on the diagram. ORM 2 supports fact type names (as distinct from fact type readings) for the fact type (e.g. "</SPAN><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Arial Narrow','sans-serif'">Birth</SPAN><SPAN style="FONT-SIZE: 10pt">" for </SPAN><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Arial Narrow','sans-serif'">Person was born on Date</SPAN><SPAN style="FONT-SIZE: 10pt">), though this is not normally displayed on the diagram. One use of fact type names is to generate a suitable target name for fact types that map to a single table or class. Multi-line fact type names are allowed.<?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p></o:p></SPAN></FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-INDENT: 19.85pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><FONT face="Times New Roman">The display of role names in square brackets may be toggled on/off by the user (e.g. using layers). Multi-line role names are allowed. The display toggle may be set globally or on an individual role basis. Although each fact type has at least one predicate reading, the display of predicate readings may be suppressed (e.g. to focus on role names). By default, role names are displayed in a different color (e.g. indigo). Role names may be positioned individually where the user desires. <SPAN style="mso-field-code: ' REF _Ref87107670  * MERGEFORMAT '">Figure <SPAN style="mso-no-proof: yes">5</SPAN></SPAN> shows some possibilities. The ORM 2 stencil does not yet provide special support for role names, but these may be entered in text boxes.<o:p></o:p></FONT></SPAN></P>
<P class=""><FONT face="Times New Roman"></FONT>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=40 src="Images/Image005.gif" width=378></FONT></P>
<P class=""><A class="" name=_Ref87107670><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">5: Role names may be displayed in square brackets.</FONT></P>
<P><FONT face="Times New Roman"></FONT></P></DIV>]]></s>
    </Topic>
    <Topic Key="{FE7AE1A2-DA17-44E3-AE59-DC175FF28734}" Name="Objectified Associations" Title="Objectified Associations" ContentsTitle="Objectified Associations" Status="In Progress" CreatedOn="09-02-2007 14:12:10" ModifiedOn="21-02-2007 13:19:05" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class="">
<H1 class=""><FONT face="Times New Roman">Objectified Associations</FONT></H1>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman">Apart from a reduction in size, the soft-rectangle notation for objectified associations is retained in ORM 2. &nbsp;Figure 6 shows a simple example. Although the shape is similar, the formal semantics for objectification have been updated for ORM 2, so the result of objectifying a binary or longer relationship type may now be viewed as an entity type that has a composite reference scheme whose reference projection bears an equality constraint to the fact type being objectified [22]. When using the ORM 2 stencil to connect a role to the nested object type, Ctrl-drag the role connector line onto the nested object type shape until the connection is confirmed by a red rectangle display around the object type.</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=106 src="Images/Image006.gif" width=517></FONT></P>
<P class=""><A class="" name=_Ref87109257><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">6: Nesting in (a) ORM 1 and (b) ORM 2.</FONT></P>
<P class=""><FONT face="Times New Roman">Moreover, <I class="">nesting of unary predicates</I> is now allowed (Figure 7 gives an example), as well as <I class="">nesting of predicates with non-spanning uniqueness constraints</I>, in accordance with new formal semantics and guidelines for objectification for ORM 2 [16, 22]. </FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=50 src="Images/Image007.gif" width=212></FONT></P>
<P class=""><A class="" name=_Ref115510094><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">7: ORM2 allows objectification of unary fact types.</FONT></P></DIV>]]></s>
    </Topic>
    <Topic Key="{FB12E246-850C-4AA0-A984-3E568E335AD0}" Name="Internal Uniqueness Constraints" Title="Internal Uniqueness Constraints" ContentsTitle="Internal Uniqueness Constraints" Status="In Progress" CreatedOn="09-02-2007 14:12:10" ModifiedOn="26-02-2007 13:54:29" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class="">
<H1 class=""><FONT face="Times New Roman">Internal Uniqueness Constraints</FONT></H1>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA"><EM>Internal uniqueness constraints</EM></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA"> in ORM 1 are indicated by arrow-tipped lines. ORM 2 replaces these by <EM>simple lines</EM>. Simple lines are faster to draw manually, and intuitively correspond to the common practice of underlining keys. The line for an individual role box is shorter than the box length to avoid ambiguity in interpretation. <SPAN style="mso-field-code: ' REF _Ref87111116  * MERGEFORMAT '">Figure <SPAN style="mso-no-proof: yes">8</SPAN></SPAN> shows some examples (the constraints may also be displayed below the predicate). In the current ORM notation, a primary uniqueness constraint is marked "P". In ORM 2, a <EM>preferred</EM> uniqueness constraint is indicated by a <EM>double line</EM> (intuitively corresponding to one common practice of doubly underlining primary keys when alternate keys exist) - see the bottom example. In ORM 2 the notion of preferred uniqueness is conceptual, corresponding to a business decision to prefer a particular identification scheme. By default, all ORM 2 constraints are displayed in violet color.</SPAN></FONT><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=146 src="Images/Image008.gif" width=168></FONT></P>
<P class=""><A class="" name=_Ref87111116><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">8: Internal uniqueness constraints in (a) ORM and (b) ORM 2.</FONT></P>
<P class=""><FONT face="Times New Roman">In the case of an internal uniqueness constraint that spans non-contiguous roles, a <I class="">dashed line</I> bridges the gap across the inner role(s) that are excluded from the constraint. If the association is elementary, such a case may arise only if the association is ternary or higher. For example, the upper constraint in Figure 9 spans the first and last roles. Of the 18 experts surveyed, 17 preferred the new internal constraint notation.</FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=37 src="Images/Image009.gif" width=221></FONT></P>
<P class=""><A class="" name=_Ref87111648><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">9: A uniqueness constraint over non-contiguous roles in (a) ORM and (b) ORM 2.</FONT></P></DIV>]]></s>
    </Topic>
    <Topic Key="{A78030FE-BE6B-4CD0-8040-25223A62B5F9}" Name="External Uniqueness Constraints" Title="External Uniqueness Constraints" ContentsTitle="External Uniqueness Constraints" Status="In Progress" CreatedOn="09-02-2007 14:12:10" ModifiedOn="21-02-2007 13:22:33" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class="">
<H1 class=""><FONT face="Times New Roman">External Uniqueness Constraints</FONT></H1>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA">In the ORM1 tool, <I style="mso-bidi-font-style: normal">external uniqueness</I> is denoted by a circled "<SPAN style="COLOR: purple">U</SPAN>" (for unique), modified to a circled "<SPAN style="COLOR: purple">P</SPAN>" (for "primary") if chosen as the primary reference scheme of an entity type. This notation is biased towards the English language, and has no resemblance to the notation for internal uniqueness. For international-ization and consistency, the ORM 2 notation uses a <I style="mso-bidi-font-style: normal">circled underline</I> for external uniqueness constraints, and a <I style="mso-bidi-font-style: normal">circled double underline</I> if the constraint provides the preferred identification scheme (see <SPAN style="mso-field-code: ' REF _Ref115511195  * MERGEFORMAT '">Figure <SPAN style="mso-no-proof: yes">10</SPAN></SPAN>). This is consistent with the new internal uniqueness constraint notation and the horizontal notation for relational schemas [<SPAN style="mso-field-code: ' REF _Ref111628904 r  * MERGEFORMAT '">15</SPAN>]. Of the 18 experts surveyed, 14 preferred this new constraint notation.</SPAN></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;<IMG class="" height=43 src="Images/Image010.gif" width=101></FONT></P>
<P class=""><A class="" name=_Ref115511195><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">10: External uniqueness constraints in (a) ORM and (b) ORM 2.</FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P></DIV>]]></s>
    </Topic>
    <Topic Key="{C9DA5D6B-4823-424A-81A4-1A435EAE3AC0}" Name="Mandatory Role Constraints" Title="Mandatory Role Constraints" ContentsTitle="Mandatory Role Constraints" Status="In Progress" CreatedOn="09-02-2007 14:12:10" ModifiedOn="21-02-2007 13:22:49" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class="">
<H1 class=""><FONT face="Times New Roman">Mandatory Role Constraints</FONT></H1>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman">The ORM1 tool indicates <I class="">simple mandatory constraints</I> by a solid dot either (a) at the intersection of an entity type shape and the line connecting it to a role, or (b) at the role end. Option (b) is needed to avoid ambiguity when an object type plays many mandatory roles whose connections to the object type are too close to distinguish which role the dot applies to. Currently, <I class="">disjunctive mandatory</I> (<I class="">inclusive-or</I>) <I class="">constraints</I> are depicted by placing the solid dot in a circle connected by dotted lines to the roles it applies to. ORM 2 retains this notation, except that the solid dot is consistently colored <I class="">violet</I> and a global <I class="">configuration option</I> determines the default placement of simple mandatory dots at the role or object type end. Users may override this global setting on an individual role basis. Figure11 shows some simple examples.</FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=217 src="Images/Image011.gif" width=453></FONT></P>
<P class=""><A class="" name=_Ref87150175></A><A class="" name=_Ref87113684><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">11: Mandatory constraints in (a) ORM and (b) ORM 2.</FONT></P></DIV>]]></s>
    </Topic>
    <Topic Key="{9B1BFC60-303C-4F6A-8C02-1547EB66D316}" Name="Set-comparison and Exclusive-Or Constraints" Title="Set-comparison and Exclusive-Or Constraints" ContentsTitle="Set-comparison and Exclusive-Or Constraints" Status="In Progress" CreatedOn="09-02-2007 14:12:11" ModifiedOn="21-02-2007 13:23:32" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class="">
<H1 class=""><FONT face="Times New Roman">Set-comparison and Exclusive-Or Constraints</FONT></H1>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><I class="">Subset, exclusion, and equality constraints</I>will continue to be denoted by a circle containing <SPAN style="FONT-SIZE: 10pt; COLOR: purple; FONT-FAMILY: Symbol; mso-ascii-font-family: 'Times New Roman'; mso-fareast-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA; mso-char-type: symbol; mso-symbol-font-family: Symbol"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: Symbol">Í</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA">, </SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: purple; FONT-FAMILY: Symbol; mso-ascii-font-family: 'Times New Roman'; mso-fareast-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA; mso-char-type: symbol; mso-symbol-font-family: Symbol"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: Symbol">´</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA">, <SPAN style="COLOR: purple">=</SPAN>&nbsp;</SPAN> respectively, connected to the associated roles with dashed lines (as in the Visio ORM1 tool), except that the ORM 2 shapes are slightly smaller, with refined symbols. In addition, ORM 2 will support the <I class="">n-ary version of the equality constraint</I>. <I class="">Exclusive-or</I> constraints will continue to be denoted by combining the circled ´with the circled dot, and users will have the option of displaying the two component constraints overlaid or separately (as in ORM 1). Figure 12 shows the basic shapes.</FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=76 src="Images/Image012.gif" width=170></FONT></P>
<P class=""><A class="" name=_Ref115512109><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">12:&nbsp;Set-comparison and Xorconstraints in (a) ORM and (b) ORM 2.</FONT></P></DIV>]]></s>
    </Topic>
    <Topic Key="{0529912A-C93A-4E92-9E8A-054C7B5BF86A}" Name="Frequency and Value Constraints" Title="Frequency and Value Constraints" ContentsTitle="Frequency and Value Constraints" Status="In Progress" CreatedOn="09-02-2007 14:12:11" ModifiedOn="22-02-2007 15:45:02" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class="">
<H1 class=""><FONT face="Times New Roman">Frequency and Value Constraints</FONT></H1>
<P class=""><B class=""></B><FONT face="Times New Roman">&nbsp;</FONT></P><FONT face="Times New Roman">
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN><EM>Frequency constraints</EM> will be denoted as in the Visio ORM1 tool, except that single symbols (</SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Symbol; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-char-type: symbol; mso-symbol-font-family: Symbol"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: Symbol">£</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt">, </SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Symbol; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-char-type: symbol; mso-symbol-font-family: Symbol"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: Symbol">³</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt">) replace double symbols (&lt;=, &gt;=), for example <SPAN style="COLOR: purple">2</SPAN>, </SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: purple; FONT-FAMILY: Symbol; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-char-type: symbol; mso-symbol-font-family: Symbol"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: Symbol">³</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: purple">3</SPAN><SPAN style="FONT-SIZE: 10pt">, <SPAN style="COLOR: purple">2..5</SPAN>. <EM>Value constraints</EM> are denoted as in ORM 1, except that many values may be displayed on a single line (e.g. <SPAN style="COLOR: purple">{'M', 'F'}</SPAN>, <SPAN style="COLOR: purple">{'a',..'z'}),</SPAN> and <EM>open ranges</EM> are supported (e.g. "<SPAN style="COLOR: purple">&gt; 0</SPAN>" for PositiveReal). <?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>ORM 2 allows value constraints to apply to <EM>roles</EM>, not just object types. For example, the metamodel fragment in <SPAN style="mso-field-code: ' REF _Ref115512625  * MERGEFORMAT '">Figure <SPAN style="mso-no-proof: yes">13</SPAN></SPAN> includes value constraints on the minimumMultiplicity and maximumMultiplicity roles. Of the 18 experts surveyed, all favored support for open ranges, and 17 favored support for role-based value constraints.<o:p></o:p></SPAN></P>
<P class=""></FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=67 src="Images/Image013.gif" width=183></FONT></P>
<P class=""><A class="" name=_Ref115512625><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">13: This Information Engineering metamodel fragment includes value constraints on roles.&nbsp;</FONT></P></DIV>]]></s>
    </Topic>
    <Topic Key="{2EFFE887-032E-435E-8C35-024C9B53D834}" Name="Ring constraints" Title="Ring constraints" ContentsTitle="Ring constraints" Status="In Progress" CreatedOn="09-02-2007 14:12:11" ModifiedOn="21-02-2007 13:24:48" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class="">
<H1 class=""><FONT face="Times New Roman">Ring constraints</FONT></H1>
<P class=""><B class=""></B><FONT face="Times New Roman">&nbsp;</FONT></P><FONT face="Times New Roman">
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt">The ORM1 Visio tool uses the following English abbreviations for various <I style="mso-bidi-font-style: normal">ring constraints</I>: ir = irreflexive, as = symmetric, ans = antisymmetric, it = intransitive, ac = acyclic, sym =symmetric. Ring constraints are displayed as a list of one or more of these options, appended to a ring symbol "<SUP>O</SUP>", and connected to the two relevant roles (if placed very close, the connection display is suppressed). For example, the reporting relationship is declared to be acyclic and intransitive as shown in <SPAN style="mso-field-code: ' REF _Ref87116484  * MERGEFORMAT '">Figure <SPAN style="mso-no-proof: yes">14</SPAN></SPAN>(a). <?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>This ORM1 notation for ring constraints has two main disadvantages: the abbreviations are specific to English (e.g. Japanese readers might not find "ir" to be a memorable choice for irreflexivity); also the ring constraint display tends to cross over other lines (as in the example).To remove the English bias, and help the user understand the semantics of the constraint, ORM 2 uses <I style="mso-bidi-font-style: normal">intuitive icons</I>. To reduce edge crossings, ORM 2 <I style="mso-bidi-font-style: normal">omits role links</I> if the predicate has just two roles played by the same object type (or compatible object types). For example, in ORM 2 the reporting relationship is declared to be acyclic and intransitive as shown in <SPAN style="mso-field-code: ' REF _Ref87116484  * MERGEFORMAT '">Figure <SPAN style="mso-no-proof: yes">14</SPAN></SPAN>(b).<o:p></o:p></SPAN></P>
<P class=""></FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=110 src="Images/Image014.gif" width=218></FONT></P>
<P class=""><A class="" name=_Ref87116484><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">14: Acyclic and Intransitive ring constraints depicted in (a) ORM and (b) ORM 2.</FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman">The ORM 2 icons for ring constraints are loosely based on my icons for teaching ring constraints, where small circles depict objects, arrows depict relationships, and a bar indicates what is forbidden (see Figure 15). </FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" style="WIDTH: 372px; HEIGHT: 153px" height=134 src="Images/Image015.gif" width=361 border=0><?xml:namespace prefix = v /><v:shapetype id=_x0000_t75 stroked="f" filled="f" path="m@4@5l@4@11@9@11@9@5xe" o:preferrelative="t" o:spt="75" coordsize="21600,21600">&nbsp;<v:stroke joinstyle="miter"></v:stroke><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"></v:f><v:f eqn="sum @0 1 0"></v:f><v:f eqn="sum 0 0 @1"></v:f><v:f eqn="prod @2 1 2"></v:f><v:f eqn="prod @3 21600 pixelWidth"></v:f><v:f eqn="prod @3 21600 pixelHeight"></v:f><v:f eqn="sum @0 0 1"></v:f><v:f eqn="prod @6 1 2"></v:f><v:f eqn="prod @7 21600 pixelWidth"></v:f><v:f eqn="sum @8 21600 0"></v:f><v:f eqn="prod @7 21600 pixelHeight"></v:f><v:f eqn="sum @10 21600 0"></v:f></v:formulas><v:path o:connecttype="rect" gradientshapeok="t" o:extrusionok="f"></v:path><o:lock aspectratio="t" v:ext="edit"></o:lock></v:shapetype></FONT><v:shape id=_x0000_s1026 style="MARGIN-TOP: 275.8pt; Z-INDEX: -1; MARGIN-LEFT: 0px; WIDTH: 270.5pt; POSITION: absolute; HEIGHT: 100.5pt; mso-position-horizontal: center" type="#_x0000_t75"><v:imagedata o:title="" src="file:///C:\DOCUME~1\acordes\LOCALS~1\Temp\msohtmlclip1\01\clip_image001.emz"></v:imagedata></v:shape></P>
<P class=""><A class="" name=_Ref87149437><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">15: The original icons used for teaching ring constraints.</FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman">Reflexive means the object bears the relationship to itself. Symmetric means that if the first bears the relationship to the second, then the second bears that relationship to the first. Transitive means that if the first bears the relationship to the second, and the second to the third, then the first bears the relationship to the third. Irreflexive means the object cannot bear the relationship to itself. Asymmetric means that if the first bears the relationship to the second, then the second cannot bear that relationship to the first. Intransitive means that if the first bears the relationship to the second, and the second to the third, then the first cannot bear the relationship to the third. Anti-symmetric means that if the objects are different, then if the first bears the relationship to the second, then the second cannot bear that relationship to the first. The different fills in the anti-symmetric icon indicate that the inverse relationship is forbidden only if the two objects differ (in the other icons, we allow that the objects may be the same). Acyclic means that a chain of one or more instances of that relationship cannot form a cycle (loop). The meaning of these original icons should be intuitively obvious.</FONT></P>
<P class=""><FONT face="Times New Roman">For diagramming purposes, these teaching icons they take up too much room, especially when combinations of ring constraints apply. So simplifying adaptations were made to ensure that the final icons are distinguishable on screen and in print, while maintaining a compact footprint. The proposed icons print clearly at 600 dpi, and are readable on screens at typical resolutions used for industrial modeling. They may be distinguished on low resolution screens by increasing the zoom level. </FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ORM 2 provides an icon for each the ten simple or combined ring constraint choices supported by the current Visio ORM1 tool (see Figure 16). In contrast to the teaching icons, arrow-heads are removed (they are assumed), and relevant pairs of constraints are collapsed to a single icon. While the simplified icons are less intuitive than the teaching icons, once their origin is explained it should be easy to remember their meaning. Of the 18 experts surveyed, 14 agreed to the new ring constraint icons. </FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=245 src="Images/Image016.gif" width=169></FONT></P>
<P class=""><A class="" name=_Ref115513562><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">16: ORM 2 icons for ring constraints.</FONT></P></DIV>]]></s>
    </Topic>
    <Topic Key="{294E0A64-6E56-4003-B089-0366435C3BDB}" Name="Subtyping" Title="Subtyping" ContentsTitle="Subtyping" Status="In Progress" CreatedOn="09-02-2007 14:12:12" ModifiedOn="21-02-2007 13:25:51" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class="">
<H1 class=""><FONT face="Times New Roman">Subtyping</FONT></H1>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P><FONT face="Times New Roman">
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt">The ORM1 arrow notation for subtyping will remain, perhaps supplemented by use of Euler diagrams as an alternative display option for simple cases. ORM 2 adds support for explicit display of <I style="mso-bidi-font-style: normal">subtype exclusion </I>(</SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: purple; FONT-FAMILY: Symbol; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-char-type: symbol; mso-symbol-font-family: Symbol"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: Symbol">?</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt">) <I style="mso-bidi-font-style: normal">and exhaustion </I>(</SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: purple; FONT-FAMILY: Wingdings; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-char-type: symbol; mso-symbol-font-family: Wingdings"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: Wingdings">¤</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt">) <I style="mso-bidi-font-style: normal">constraints</I>, overlaying them when combined, as shown in <SPAN style="mso-field-code: ' REF _Ref87156232  * MERGEFORMAT '">Figure <SPAN style="mso-no-proof: yes">17</SPAN></SPAN>. As such constraints are typically implied by other constraints in conjunction with subtype definitions, their display may be toggled on/off. Of the 18 experts surveyed, 17 approved this extension.<?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p></o:p></SPAN></P></FONT>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=96 src="Images/Image017.gif" width=214></FONT></P>
<P class=""><A class="" name=_Ref87156232><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">17&nbsp; Explicit display of exclusion and exhaustion constraints for a subtyping scheme.</FONT></P>
<P class=""><FONT face="Times New Roman">ORM 2 will allow both <I class="">defined subtypes and asserted subtypes</I> (no subtype definition provided). <I class="">Subtype definition</I>s will be supported in a high level formal language rather than mere comments, and may be displayed in text boxes on the diagram.</FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P></DIV>]]></s>
    </Topic>
    <Topic Key="{3BE21BA4-1546-4F9E-9D14-A4745337D2FD}" Name="Role Path Disambiguation" Title="Role Path Disambiguation" ContentsTitle="Role Path Disambiguation" Status="In Progress" CreatedOn="09-02-2007 14:12:12" ModifiedOn="21-02-2007 13:26:21" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class="">
<H1 class=""><FONT face="Times New Roman">Role Path Disambiguation</FONT></H1>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman">In ORM, it was possible to encounter constraints involving role paths where the diagram is ambiguous as to which role paths are intended. ORM 2 removes that ambiguity by enabling the display of role-sequence numbers to be toggled on/off. For example, the objectification example discussed earlier has implicit link fact types as shown in Figure 18(a) to enable navigation between Playing, Person and Sport. This objectification is treated as a view of the internal representation shown in Figure 18(b), where the role-pairs that feature as arguments of the equality constraint are highlighted by including their role sequence numbers (1.1, 1.2; 2.1, 2.2).</FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=149 src="Images/Image018.gif" width=477></FONT></P>
<P class=""><A class="" name=_Ref115516184><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">18&nbsp; Explication of the objectification in Figure 6 of Person plays Sport asPlaying.</FONT></P></DIV>]]></s>
    </Topic>
    <Topic Key="{7F36ED66-2FA4-4ED9-A04F-9C1EEFF82A22}" Name="Modalities" Title="Modalities" ContentsTitle="Modalities" Status="In Progress" CreatedOn="09-02-2007 14:12:12" ModifiedOn="21-02-2007 13:26:54" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class="">
<H1 class=""><FONT face="Times New Roman">Modalities</FONT></H1>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P><FONT face="Times New Roman">
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt">In ORM 2, business rules have a <I style="mso-bidi-font-style: normal">modality</I> that is either alethic or deontic [<SPAN style="mso-field-code: ' REF _Ref111699119 r  * MERGEFORMAT '">19</SPAN>]. <I style="mso-bidi-font-style: normal">Alethic</I> rules are necessarily true of the business domain (e.g. </SPAN><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Arial Narrow','sans-serif'">[<B style="mso-bidi-font-weight: normal">It is necessary that</B>] <B style="mso-bidi-font-weight: normal">Each</B> Person was born in <B style="mso-bidi-font-weight: normal">at most one</B> Country)</SPAN><SPAN style="FONT-SIZE: 10pt">, whereas <I style="mso-bidi-font-style: normal">deontic</I> rules are obligations that might be violated (e.g. </SPAN><B style="mso-bidi-font-weight: normal"><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Arial Narrow','sans-serif'">It is obligatory that each</SPAN></B><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Arial Narrow','sans-serif'"> Person is the husband of <B style="mso-bidi-font-weight: normal">at most one</B> Person</SPAN><SPAN style="FONT-SIZE: 10pt">). <?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>ORM 2 distinguishes modalities by using different colors (by default, violet for alethic and blue for deontic). A further mark (e.g. "</SPAN><SPAN style="FONT-SIZE: 8pt">o</SPAN><SPAN style="FONT-SIZE: 10pt">" for obligatory) will be added to deontic constraints to enable them to be distinguished by means other than color. A final decision on this mark is yet to be made.<o:p></o:p></SPAN></P>
<P class=""></FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P></DIV>]]></s>
    </Topic>
    <Topic Key="{D63EA8A1-D1FD-4A41-A5F8-6C714A5E5117}" Name="The ORM 2 Textual Notation" Title="The ORM 2 Textual Notation" ContentsTitle="The ORM 2 Textual Notation" Status="In Progress" CreatedOn="09-02-2007 14:12:12" ModifiedOn="22-02-2007 15:46:22" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class="">
<H1 class=""><FONT face="Times New Roman">The ORM 2 Textual Notation</FONT></H1>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman">As in the Visio ORM1 tool, all components of an ORM schema (e.g. fact types and graphical constraints) will have automated <I class="">verbalizations</I>. The ORM 2 constraint verbalization mechanism is superior in several ways to that of the ORM1 tool, and uses improvements discussed elsewhere [19]. Details of the improved verbalization support will be provided in subsequent technical reports.</FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Unlike the Visio ORM1 tool, the ORM 2 tool will also support a high level, formal<I class=""> textual language for inputting ORM schemas</I> (including fact types, constraints and derivation rules), <I class="">ORM</I> <I class="">queries</I>, and possibly population changes (fact addition and deletion). Although similar in many respects to the verbalization language, the input language will often enable constraints to be entered in a more concise form. The tool will generate code to implement the semantics conveyed by the textual language. The textual language will cover all the semantics conveyed by the graphical language, as well as additional semantics (e.g. constraints that cannot be captured graphically).</FONT></P>
<P class=""><FONT face="Times New Roman"><I class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Textual constraints</I>may be noted on the diagram by <I class="">footnote numbers</I>, with the textual reading of the constraints provided in <I class="">footnotes</I> that can be both printed and accessed interactively by clicking the footnote number. Figure 19 provides an example. Of the 18 experts surveyed, 17 approved the use of footnotes for textual constraints. </FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=101 src="Images/Image019.gif" width=194></FONT></P>
<P class=""><A class="" name=_Ref87256613><FONT face="Times New Roman">Figure </FONT></A><FONT face="Times New Roman">19&nbsp; Textual constraints appear as footnotes in ORM 2. </FONT></P>
<P class=""><I class=""></I><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><I class="">Derivation rules</I>may be specified for derived object types (subtype definitions) and derived fact types. ORM 2 allows <I class="">fully-derived subtypes </I>(full subtype definition provided), <I class="">partly-derived subtypes</I> (partial subtype definition provided) and <I class="">asserted subtypes</I> (no subtype definition provided). <I class="">Subtype definition</I>s will be supported as derivation rules in a high level formal language rather than mere comments, and may be displayed in text boxes as footnotes on the diagram. Iff-rules are used for full derivation, and if-rules for partial derivation. Here are sample rules in ORM 2"s textual language for fully and partly derived subtypes respectively:</FONT></P>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P class=""><FONT face="Times New Roman">&nbsp;</P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-INDENT: 19.85pt"><B style="mso-bidi-font-weight: normal"><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Arial Narrow','sans-serif'">Each</SPAN></B><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Arial Narrow','sans-serif'"> Australian <B style="mso-bidi-font-weight: normal">is a</B> Person <B style="mso-bidi-font-weight: normal">who</B> was born in Country 'AU'.<?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-INDENT: 19.85pt"><SPAN style="FONT-SIZE: 5pt; FONT-FAMILY: 'Arial Narrow','sans-serif'"><o:p>&nbsp;</o:p></SPAN></P>
<P class=""><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Arial Narrow','sans-serif'; mso-fareast-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN>Person<SUB>1</SUB> <B style="mso-bidi-font-weight: normal">is a</B> Grandparent <B style="mso-bidi-font-weight: normal">if</B> Person<SUB>1</SUB> is a parent of <B style="mso-bidi-font-weight: normal">some</B> Person<SUB>2</SUB> who is a parent of <B style="mso-bidi-font-weight: normal">some</B> Person<SUB>3</SUB>.</SPAN></FONT><FONT face="Times New Roman">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT></P></BLOCKQUOTE>
<P class="">
<P class=""><FONT face="Times New Roman"></FONT></P><FONT face="Times New Roman"><SPAN style="FONT-SIZE: 10pt">The final grammar for the textual language is still to be determined, but should support declaration of ORM models and queries in <I style="mso-bidi-font-style: normal">relational style</I>, <I style="mso-bidi-font-style: normal">attribute style</I>, and <I style="mso-bidi-font-style: normal">mixed style</I>. Relational style uses predicate readings (e.g. the subtype definitions above), while attribute style uses role names. Attribute style is especially useful for derivation rules and textual constraints of a mathematical nature (e.g. see <SPAN style="mso-field-code: ' REF _Ref87256613  * MERGEFORMAT '">Figure <SPAN style="mso-no-proof: yes">19</SPAN></SPAN>). <o:p></o:p></SPAN>
<P></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>As an example of a derivation rule for a derived fact type, we may define the uncle association in relational style thus: </SPAN><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Arial Narrow','sans-serif'">Person<SUB>1</SUB> is an uncle of Person<SUB>2</SUB> <B style="mso-bidi-font-weight: normal">iff</B> Person<SUB>1</SUB> is a brother of <B style="mso-bidi-font-weight: normal">a</B> Person<SUB>3</SUB> <B style="mso-bidi-font-weight: normal">who</B> is a parent of Person<SUB>2</SUB></SPAN><FONT size=3>. </FONT><SPAN style="FONT-SIZE: 10pt">Assuming the role names "brother" and "parent" are declared, we may also specify the rule in attribute style thus: </SPAN><B style="mso-bidi-font-weight: normal"><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Arial Narrow','sans-serif'">For each</SPAN></B><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Arial Narrow','sans-serif'"> Person: uncle = brother <B style="mso-bidi-font-weight: normal">of</B> parent</SPAN><FONT size=3>. </FONT><SPAN style="FONT-SIZE: 10pt">Further examples may be found elsewhere [<SPAN style="mso-field-code: ' REF _Ref111699119 r  * MERGEFORMAT '">19</SPAN>, <SPAN style="mso-field-code: ' REF _Ref107892776 r  * MERGEFORMAT '">21</SPAN>].<o:p></o:p></SPAN></P>
<P class=""></FONT></P></DIV>]]></s>
    </Topic>
    <Topic Key="{099EE617-CA80-4DDD-A273-4D409DE40844}" Name="Conclusion" Title="Conclusion" ContentsTitle="Conclusion" Status="In Progress" CreatedOn="09-02-2007 14:12:13" ModifiedOn="26-02-2007 13:58:09" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><FONT face="Times New Roman">This report discussed a project under way to specify and provide open source tool support for a second generation ORM (called ORM 2), that provides significant advances over current ORM technology. Proposed changes to the graphical notation were described, and their motivation explained. Results from a survey of ORM experts with regard to these changes were noted. Various enhancements to the ORM notation were examined, and some improvements from a tooling perspective were identified. <?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><FONT face="Times New Roman"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>The tools project team is currently researching extensions to ORM in several areas, including richer support for join constraints (e.g. distinguishing inner-outer join semantics, displaying complex join constraints, and role path disambiguation [<SPAN style="mso-field-code: ' REF _Ref107902423 r  * MERGEFORMAT '">20</SPAN>]), extended open/closed world semantics, and deontic/alethic constraint distinctions. <o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><FONT face="Times New Roman"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Parties who own a copy of Visio (Standard edition or higher) and who wish to explore the new notation using models of their own may download a zip file containing the Visio ORM 2 stencil and template, plus a sample model file from the following site: www.orm.net/ORM2_Beta.zip. This ORM 2 stencil is for drawing only - it does not generate code.<o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><FONT face="Times New Roman"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>At the time of writing, the ORM 2 modeling tool is in the early stages of development. Considerable progress has been made on entering ORM models, verbalizing them, and mapping them to object models, but mapping ORM schemas to relational and XML schemas has not yet begun. The diagrammer is currently limited to a single page diagrams. Future work is planned to support multi-page diagrams with layer toggles to hide/show features, and several abstraction mechanisms (e.g. decomposing models into multiple levels of refinement).<o:p></o:p></FONT></SPAN></P>]]></s>
    </Topic>
    <Topic Key="{345D5D6A-D2F2-4250-883C-4B7A871C0407}" Name="Acknowledgements" Title="Acknowledgements" ContentsTitle="Acknowledgements" Status="In Progress" CreatedOn="09-02-2007 14:12:13" ModifiedOn="21-02-2007 13:30:08" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class="">
<H1 class=""><FONT face="Times New Roman">Acknowledgements</FONT></H1>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman">This paper benefited from discussion with other members of the ORM 2 tool project team at Neumont University. The new notation for ring constraints is due largely to Tyler Young, Scott Baldwin, Nickolas Maly, and Jeremy Wilde. These students also created the ORM 2 Visio stencil, with technical assistance from Scott LeGendre (Microsoft) on use of dynamic glue. Other students who worked on the tool project include Aaron Bowen, Jaron Briggs, Orion Buhler, Adam Burt, Korvyn Dornseif, Paul Ewert, Darren Flynn, Brant Frank, Adam Greenwood, Corey Kaylor, Michelle Ouzts, Kevin Owen, Aaron Shumway, Joseph Tanner and Jeff Wilde. The team also includes five faculty members (Andy Carver, Ed Crowson, Matt Curland, Terry Halpin, and Tony Morgan) with Matt Curland as lead programmer. </FONT></P>
<P class=""><FONT face="Times New Roman">The following kindly responded to our survey on the ORM graphical notation: Don Baisley (Unisys, USA); Dick Barden (InConcept, USA); Scott Becker (Orthogonal Software, USA); Linda Bird (DSTC, Australia); Anthony Bloesch (Microsoft, USA); Necito dela Cruz (Guidant Corporation, USA); Dave Cuyler (Sandia National Labs, USA); Lance Delano (Microsoft, USA); Jan Dietz (Delft University of Technology, The Netherlands); Ken Evans (AMBO.biz Ltd , UK); Gordon Everest (University of Minnesota, USA); Brian Farish (Vertaasis, USA); Pat Hallock (InConcept, USA); Bill MacLean (Avnet, Inc, USA); John Miller (Perpetual Data Systems, USA); Borje Olsson (Object Role Consulting, Sweden); Erik Proper (Radbaud University Nijmegen, The Netherlands); Pieter Verheyden (STARLAB, University of Brussels).&nbsp;</FONT></P></DIV>]]></s>
    </Topic>
    <Topic Key="{54634E52-02AC-4379-94EF-FA9B84F786F6}" Name="References" Title="References" ContentsTitle="References" Status="In Progress" CreatedOn="09-02-2007 14:12:13" ModifiedOn="26-02-2007 14:02:23" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="False" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class="">
<H1 class=""><FONT face="Times New Roman">References</FONT></H1><A class="" name=_Ref98075154></A><A class="" name=_Ref98281398></A><A class="" name=_Ref65653997></A>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><A name=_Ref98075154></A><A name=_Ref98281398></A><A name=_Ref65653997></A><A name=_Ref34391888><SPAN style="mso-bookmark: _Ref65653997"><SPAN style="mso-bookmark: _Ref98281398"><SPAN style="mso-bookmark: _Ref98075154"><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">1.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Bakema, G., Zwart, J. &amp; van der Lek, H. 1994, 'Fully Communication Oriented NIAM', <I style="mso-bidi-font-style: normal">NIAM-ISDM 1994 Conf. Working Papers</I>, eds G. M. Nijssen &amp; J. Sharp, Albuquerque, NM, pp. L1-35.</FONT></FONT></FONT></SPAN></SPAN></SPAN></A><SPAN style="mso-bookmark: _Ref98075154"></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref106005988><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">2.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Bakema, G., Zwart, J. &amp; van der Lek, H. 2000, <I style="mso-bidi-font-style: normal">Fully Communication Oriented Information Modellin</I>g, Ten Hagen Stam, The </FONT></FONT></FONT></A><FONT face="Times New Roman"><FONT size=2><?xml:namespace prefix = st1 ns = "urn:schemas-microsoft-com:office:smarttags" /><st1:place w:st="on"><st1:country-region w:st="on"><SPAN style="mso-bookmark: _Ref106005988">Netherlands</SPAN></st1:country-region></st1:place><SPAN style="mso-bookmark: _Ref106005988">.</SPAN></FONT></FONT></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref111540142><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">3.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Bird, L., Goodchild, A. &amp; Halpin, T.A. 2000, 'Object Role Modeling and XML Schema', <I>Conceptual Modeling ' ER2000</I>, Proc. 19<SUP>th</SUP> Int. ER Conference, Salt Lake City, Springer LNCS 1920, pp. 309-322.</FONT></FONT></FONT></A></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref98249198><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">4.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Bloesch, A. &amp; Halpin, T. 1997, 'Conceptual queries using ConQuer-II', <I>Proc. ER'97: 16<SUP>th</SUP> Int. Conf. on conceptual modeling</I>, Springer LNCS, no. 1331, pp. 113-26.</FONT></FONT></FONT></A></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref106007367><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">5.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">CaseTalk website: http://www.casetalk.com/php/.</FONT></FONT></FONT></A></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref4129111><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">6.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Chen, P. P. 1976, 'The entity-relationship model'towards a unified view of data'. <I style="mso-bidi-font-style: normal">ACM Transactions on Database Systems</I>, 1(1), pp. 9</FONT></FONT></FONT></A></SPAN><SPAN style="mso-bookmark: _Ref98075154"><SPAN style="mso-bookmark: _Ref4129111"><FONT face="Times New Roman"><FONT size=2><SPAN style="FONT-FAMILY: Symbol; mso-ascii-font-family: Times; mso-hansi-font-family: Times; mso-char-type: symbol; mso-symbol-font-family: Symbol"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: Symbol">-</SPAN></SPAN>36.</FONT></FONT></SPAN></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref98240125><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">7.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Cuyler, D. &amp; Halpin, T. 2005, 'Two Meta-Models for Object-Role Modeling', <I>Information Modeling Methods and Methodologies, eds </I><SPAN style="mso-bidi-font-style: italic">J.<I> </I></SPAN>Krogstie, T. Halpin, &amp; K. Siau, Idea Publishing Group, Hershey PA, USA (pp. 17-42).</FONT></FONT></FONT></A></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref34387388><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">8.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Demey J., Jarrar M. &amp; Meersman R. 2002, 'A </FONT></FONT></FONT></A></SPAN><A href="http://www.starlab.vub.ac.be/publications/iswc02rml.pdf"><SPAN style="mso-bookmark: _Ref98075154"><SPAN style="mso-bookmark: _Ref34387388"><SPAN style="COLOR: windowtext; TEXT-DECORATION: none; text-underline: none"><FONT face="Times New Roman" size=2>Markup Language for ORM Business Rules</FONT></SPAN></SPAN></SPAN></A><SPAN style="mso-bookmark: _Ref98075154"><SPAN style="mso-bookmark: _Ref34387388"><FONT face="Times New Roman"><FONT size=2><I style="mso-bidi-font-style: normal">'</I>, in Schroeder M. &amp; Wagner G. (eds.), <I style="mso-bidi-font-style: normal">Proc. International Workshop on Rule Markup Languages for Business Rules on the Semantic Web</I> (RuleML-ISWC02 workshop), pp. 107-128, online at http://www.starlab.vub.ac.be/publications/STARpublications.htm.</FONT></FONT></SPAN></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref34391878><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">9.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">De Troyer, O. &amp; Meersman, R. 1995, 'A Logic Framework for a Semantics of Object Oriented Data Modeling', <I style="mso-bidi-font-style: normal">OOER'95, Proc. 14<SUP>th</SUP> International ER Conference</I>, Gold Coast, Australia, Springer LNCS 1021, pp. 238-249.</FONT></FONT></FONT></A></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref106008193><FONT color=#000000><FONT size=2><SPAN lang=DA style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt; mso-ansi-language: DA"><SPAN style="mso-list: Ignore">10.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN lang=DA style="mso-ansi-language: DA"><FONT face="Times New Roman">DogmaModeler: www.starlab.vub.ac.be/research/dogma/dogmamodeler/dm.htm.</FONT></SPAN></FONT></FONT></A></SPAN><SPAN style="mso-bookmark: _Ref98075154"><SPAN lang=DA style="mso-ansi-language: DA"><?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p></o:p></SPAN></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref4130188><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">11.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Embley, D.W. 1998, <I style="mso-bidi-font-style: normal">Object Database Management</I>, Addison-Wesley, </FONT></FONT></FONT></A><FONT face="Times New Roman"><FONT size=2><st1:place w:st="on"><st1:City w:st="on"><SPAN style="mso-bookmark: _Ref4130188">Reading</SPAN></st1:City><SPAN style="mso-bookmark: _Ref4130188"> <st1:State w:st="on">MA</st1:State>, <st1:country-region w:st="on">USA</st1:country-region></SPAN></st1:place><SPAN style="mso-bookmark: _Ref4130188">.</SPAN></FONT></FONT></SPAN></P>
<P class=reference0 style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; mso-list: l0 level1 lfo1; tab-stops: list .25in"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref106006792><FONT color=#000000><FONT size=2><SPAN style="FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">12.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Falkenberg, E. D. 1976, 'Concepts for modelling information', in Nijssen G. M. (ed) <I style="mso-bidi-font-style: normal">Proc 1976 IFIP Working Conf on Modelling in Data Base Management Systems</I>, Freudenstadt, Germany, North-Holland Publishing, pp. 95-109.</SPAN></FONT></FONT></A></SPAN><SPAN style="mso-bookmark: _Ref98075154"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><o:p></o:p></SPAN></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; mso-list: l0 level1 lfo1; tab-stops: list .25in"><SPAN style="mso-bookmark: _Ref98075154"><FONT face="Times New Roman"><FONT size=2><SPAN style="FONT-SIZE: 9pt; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">13.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt">Halpin, T. 1989, 'A Logical Analysis of Information Systems: static aspects of the data'oriented perspective', doctoral dissertation, <st1:place w:st="on"><st1:PlaceType w:st="on">University</st1:PlaceType> of <st1:PlaceName w:st="on">Queensland</st1:PlaceName></st1:place>.<o:p></o:p></SPAN></FONT></FONT></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref111698915><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">14.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Halpin, T. 1998, 'ORM/NIAM Object-Role Modeling', <I style="mso-bidi-font-style: normal">Handbook on Information Systems Architectures</I>, eds P. Bernus, K. Mertins &amp; G. Schmidt, Springer-Verlag, Berlin, pp. 81-101.</FONT></FONT></FONT></A></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref111628904><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">15.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Halpin, T. 2001, <I style="mso-bidi-font-style: normal">Information Modeling and Relational Databases</I>, Morgan Kaufmann, </FONT></FONT></FONT></A><FONT face="Times New Roman"><FONT size=2><st1:place w:st="on"><st1:City w:st="on"><SPAN style="mso-bookmark: _Ref111628904">San Francisco</SPAN></st1:City></st1:place><SPAN style="mso-bookmark: _Ref111628904">.</SPAN></FONT></FONT></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref111627706><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">16.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Halpin, T. 2003, 'Uniqueness Constraints on Objectified Associations', <I style="mso-bidi-font-style: normal">Journal of Conceptual Modeling</I>, Oct. 2003. URL: www.orm.net/pdf/JCM2003Oct.pdf.</FONT></FONT></FONT></A></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">17.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Halpin, T. 2004, 'Comparing Metamodels for ER, ORM and UML Data Models', <I>Advanced Topics in Database Research, vol. 3</I>, ed. K. Siau, Idea Publishing Group, Hershey PA, USA, Ch. II (pp. 23-44).</FONT></FONT></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">18.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Halpin, T. 2004, 'Information Modeling and Higher-Order Types', <I>Proc. CAiSE'04 Workshops</I>, vol. 1, (eds Grundspenkis, J. &amp; Kirkova, M.), Riga Tech. University, pp. 233-48. Online at http://www.orm.net/pdf/EMMSAD2004.pdf.</FONT></FONT></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref111699119><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">19.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Halpin, T. 2004, 'Business Rule Verbalization', <I>Information Systems Technology and its Applications</I>, Proc. ISTA-2004, (eds Doroshenko, A., Halpin, T. Liddle, S. &amp; Mayr, H), </FONT></FONT></FONT></A><FONT face="Times New Roman"><FONT size=2><st1:place w:st="on"><st1:City w:st="on"><SPAN style="mso-bookmark: _Ref111699119">Salt Lake City</SPAN></st1:City></st1:place><SPAN style="mso-bookmark: _Ref111699119">, Lec. Notes in Informatics, vol. P-48, pp. 39-52.</SPAN></FONT></FONT></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref107902423><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">20.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Halpin, T. 2005, 'Constraints on Conceptual Join Paths', <I>Information Modeling Methods and Methodologies, eds J. </I>Krogstie, T. Halpin, T.A. &amp; K. Siau, Idea Publishing Group, Hershey PA, USA, pp. 258-77.</FONT></FONT></FONT></A></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref107892776><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">21.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Halpin, T. 2005, 'Verbalizing Business Rules: Part 11', <I>Business Rules Journal</I>, Vol. 6, No. 6. URL:&nbsp;&nbsp;http://www.BRCommunity.com/a2005/b238.html.</FONT></FONT></FONT></A></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref107821601><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">22.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Halpin, T. 2005, 'Objectification', <I style="mso-bidi-font-style: normal">Proc. CAiSE'05 Workshops, vol. 1</I>, eds J. Calestro &amp; E. Teniente, FEUP Porto (June), pp. 519-31.</FONT></FONT></FONT></A></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref111699008><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">23.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Halpin, T., Evans, K, Hallock, P. &amp; MacLean, W. 2003, <I style="mso-bidi-font-style: normal">Database Modeling with Microsoft® Visio for </I></FONT></FONT></FONT></A><FONT face="Times New Roman"><FONT size=2><st1:City w:st="on"><SPAN style="mso-bookmark: _Ref111699008"><I style="mso-bidi-font-style: normal">Enterprise</I></SPAN></st1:City><SPAN style="mso-bookmark: _Ref111699008"><I style="mso-bidi-font-style: normal"> Architects</I>, Morgan Kaufmann, <st1:place w:st="on"><st1:City w:st="on">San Francisco</st1:City></st1:place>.</SPAN></FONT></FONT></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">24.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Halpin, T. &amp; Proper, H. 1995, 'Database schema transformation and optimization', <I>Proc. OOER'95: Object-Oriented and Entity-Relationship Modeling</I>, Springer LNCS, vol. 1021, pp. 191-203.</FONT></FONT></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><FONT size=2><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">25.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Halpin, T. &amp; Wagner, G. 2003, 'Modeling Reactive Behavior in ORM'. <I>Conceptual Modeling ' ER2003</I>, Proc. 22<SUP>nd</SUP> ER Conference, <st1:place w:st="on"><st1:City w:st="on">Chicago</st1:City></st1:place>, October 2003, Springer LNCS.</FONT></FONT></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref111698970><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; LAYOUT-GRID-MODE: line; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">26.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman"><SPAN lang=NL style="mso-ansi-language: NL">ter Hofstede, A. H. M., Proper, H. A. &amp; Weide, th. </SPAN>P. van der 1993, 'Formal definition of a conceptual language for the description and manipulation of information models', <I style="mso-bidi-font-style: normal">Information Systems</I>, vol. 18, no. 7, pp. 489-523.</FONT></FONT></FONT></A><SPAN style="LAYOUT-GRID-MODE: line"><o:p></o:p></SPAN></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.25in; VERTICAL-ALIGN: baseline; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; mso-layout-grid-align: none; punctuation-wrap: simple; mso-list: l0 level1 lfo1; tab-stops: list .25in"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref106006991><FONT face="Times New Roman"><FONT size=2><SPAN style="FONT-SIZE: 9pt; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore"><FONT color=#000000>27.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></SPAN></SPAN><SPAN lang=NL style="FONT-SIZE: 10pt; mso-ansi-language: NL"><FONT color=#000000>ter Hofstede A. H. M, Weide th. </FONT></SPAN></FONT></FONT></A></SPAN><FONT face="Times New Roman"><SPAN style="mso-bookmark: _Ref98075154"><SPAN style="mso-bookmark: _Ref106006991"><SPAN style="FONT-SIZE: 10pt">P. van der 1993, 'Expressiveness in conceptual data modeling', <I style="mso-bidi-font-style: normal">Data and Knowledge Engineering</I>, 10(1), pp. 65-100.</SPAN></SPAN></SPAN><SPAN style="mso-bookmark: _Ref98075154"><SPAN style="FONT-SIZE: 10pt"><o:p></o:p></SPAN></SPAN></FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.25in; VERTICAL-ALIGN: baseline; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; mso-layout-grid-align: none; punctuation-wrap: simple; mso-list: l0 level1 lfo1; tab-stops: list .25in"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref106007872><FONT face="Times New Roman"><FONT size=2><SPAN style="FONT-SIZE: 9pt; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore"><FONT color=#000000>28.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt"><FONT color=#000000>Infagon website: http://www.mattic.com/Infagon.html.</FONT></SPAN></FONT></FONT></A></SPAN><SPAN style="mso-bookmark: _Ref98075154"><SPAN style="FONT-SIZE: 10pt"><o:p></o:p></SPAN></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; mso-list: l0 level1 lfo1; tab-stops: list .25in"><FONT face="Times New Roman"><FONT size=2><SPAN style="mso-bookmark: _Ref98075154"><SPAN style="FONT-SIZE: 9pt; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">29.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><st1:City w:st="on"><SPAN style="FONT-SIZE: 10pt; COLOR: black">Lyons</SPAN></st1:City><SPAN style="FONT-SIZE: 10pt; COLOR: black">, J. 1995, <I style="mso-bidi-font-style: normal">Linguistic Semantics: An Introduction</I>, <st1:PlaceName w:st="on">Cambridge</st1:PlaceName> <st1:PlaceType w:st="on">University</st1:PlaceType> Press: <st1:place w:st="on"><st1:City w:st="on">Cambridge</st1:City>, <st1:country-region w:st="on">UK</st1:country-region></st1:place>.</SPAN></SPAN><SPAN style="mso-bookmark: _Ref98075154"><SPAN style="FONT-SIZE: 10pt"><o:p></o:p></SPAN></SPAN></FONT></FONT></P>
<P class=reference0 style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; mso-list: l0 level1 lfo1; tab-stops: list .25in"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref106006965><FONT color=#000000><FONT size=2><SPAN style="FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">30.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Meersman, R. M. 1982, <I style="mso-bidi-font-style: normal">The RIDL conceptual language</I>. Research report, Int. Centre for Information Analysis Services, Control Data Belgium, </SPAN></FONT></FONT></A><st1:place w:st="on"><st1:City w:st="on"><SPAN style="mso-bookmark: _Ref106006965"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Brussels</SPAN></SPAN></st1:City></st1:place><SPAN style="mso-bookmark: _Ref106006965"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">.</SPAN></SPAN></SPAN><SPAN style="mso-bookmark: _Ref98075154"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><o:p></o:p></SPAN></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; mso-list: l0 level1 lfo1; tab-stops: list .25in"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref111698859><FONT face="Times New Roman"><FONT size=2><SPAN style="FONT-SIZE: 9pt; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore"><FONT color=#000000>31.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt"><FONT color=#000000>Object Management Group 2003, <I style="mso-bidi-font-style: normal">UML 2.0 Infrastructure Specification</I>. Online: www.omg.org/uml.</FONT></SPAN></FONT></FONT></A></SPAN><SPAN style="mso-bookmark: _Ref98075154"><SPAN style="FONT-SIZE: 10pt"><o:p></o:p></SPAN></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; mso-list: l0 level1 lfo1; tab-stops: list .25in"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref111698874><FONT face="Times New Roman"><FONT size=2><SPAN style="FONT-SIZE: 9pt; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore"><FONT color=#000000>32.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt"><FONT color=#000000>Object Management Group 2003, <I style="mso-bidi-font-style: normal">UML 2.0 Superstructure Specification</I>. Online: www.omg.org/uml.</FONT></SPAN></FONT></FONT></A></SPAN><SPAN style="mso-bookmark: _Ref98075154"><SPAN style="FONT-SIZE: 10pt"><o:p></o:p></SPAN></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; mso-list: l0 level1 lfo1; tab-stops: list .25in"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref111698891><FONT face="Times New Roman"><FONT size=2><SPAN style="FONT-SIZE: 9pt; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore"><FONT color=#000000>33.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt"><FONT color=#000000>Rumbaugh J., Jacobson, I. &amp; Booch, G. 1999, <I style="mso-bidi-font-style: normal">The Unified Language Reference Manual</I>, Addison-Wesley, </FONT></SPAN></FONT></FONT></A><FONT face="Times New Roman"><st1:place w:st="on"><st1:City w:st="on"><SPAN style="mso-bookmark: _Ref111698891"><SPAN style="FONT-SIZE: 10pt">Reading</SPAN></SPAN></st1:City><SPAN style="mso-bookmark: _Ref111698891"><SPAN style="FONT-SIZE: 10pt">, <st1:State w:st="on">MA</st1:State></SPAN></SPAN></st1:place><SPAN style="mso-bookmark: _Ref111698891"><SPAN style="FONT-SIZE: 10pt">.</SPAN></SPAN></FONT></SPAN><SPAN style="mso-bookmark: _Ref98075154"><SPAN style="FONT-SIZE: 10pt"><o:p></o:p></SPAN></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; mso-list: l0 level1 lfo1; tab-stops: list .25in"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref106007859><FONT face="Times New Roman"><FONT size=2><SPAN lang=DA style="FONT-SIZE: 9pt; mso-bidi-font-size: 10.0pt; mso-ansi-language: DA"><SPAN style="mso-list: Ignore"><FONT color=#000000>34.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></SPAN></SPAN><SPAN lang=DA style="FONT-SIZE: 10pt; mso-ansi-language: DA"><FONT color=#000000>VisioModeler download site: http://www.microsoft.com/downloads/results.aspx?displaylang=en&amp; freeText=VisioModeler.</FONT></SPAN></FONT></FONT></A></SPAN><SPAN style="mso-bookmark: _Ref98075154"><SPAN lang=DA style="FONT-SIZE: 10pt; mso-ansi-language: DA"><o:p></o:p></SPAN></SPAN></P>
<P class=Reference style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-AUTOSPACE: ideograph-numeric; mso-layout-grid-align: auto; punctuation-wrap: hanging; mso-list: l0 level1 lfo1; tab-stops: list .25in; mso-vertical-align-alt: auto"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref475089666><FONT color=#000000><FONT size=2><SPAN style="FONT-SIZE: 9pt; LAYOUT-GRID-MODE: line; FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore">35.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><FONT face="Times New Roman">Warmer, J. &amp; Kleppe, A. 1999, <I style="mso-bidi-font-style: normal">The Object Constraint Language: precise modeling with UML</I>, Addison-Wesley.</FONT></FONT></FONT></A><A name=JGJSE95></A><A name=HPW96></A><A name=MHR93></A><A name=PS89></A><A name=PW95></A><A name=W90></A><SPAN style="LAYOUT-GRID-MODE: line"><o:p></o:p></SPAN></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.25in; VERTICAL-ALIGN: baseline; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; mso-layout-grid-align: none; punctuation-wrap: simple; mso-list: l0 level1 lfo1; tab-stops: list .25in"><SPAN style="mso-bookmark: _Ref98075154"><A name=_Ref106005588><FONT face="Times New Roman"><FONT size=2><SPAN style="FONT-SIZE: 9pt; mso-bidi-font-size: 10.0pt"><SPAN style="mso-list: Ignore"><FONT color=#000000>36.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt"><FONT color=#000000>Wintraecken J. 1990, <I style="mso-bidi-font-style: normal">The NIAM Information Analysis Method: Theory and Practice</I>, Kluwer, </FONT></SPAN></FONT></FONT></A><FONT face="Times New Roman"><st1:City w:st="on"><SPAN style="mso-bookmark: _Ref106005588"><SPAN style="FONT-SIZE: 10pt">Deventer</SPAN></SPAN></st1:City><SPAN style="mso-bookmark: _Ref106005588"><SPAN style="FONT-SIZE: 10pt">, The <st1:place w:st="on"><st1:country-region w:st="on">Netherlands</st1:country-region></st1:place>.</SPAN></SPAN></FONT></SPAN><SPAN style="FONT-SIZE: 10pt"><o:p></o:p></SPAN></P>
<P class=""><A class="" name=iswc02></A><FONT face="Times New Roman" size=2>&nbsp;</FONT></P></DIV>]]></s>
    </Topic>
    <Topic Key="{ACB37F39-F0B3-4869-9121-633769C567CF}" Name="Appendix- Sample models" Title="Appendix: Sample models" ContentsTitle="Appendix: Sample models" Status="In Progress" CreatedOn="09-02-2007 14:12:14" ModifiedOn="21-02-2007 13:33:26" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C3">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=""><B class=""><BR class="" clear=all></B>
<H1 class=""><FONT face="Times New Roman">Appendix: Sample models</FONT></H1>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman">To give a feeling for the difference made by the ORM 2 notation, a 3 page Diet model (minus subtype definitions, textual constraints, and some derivation rules) is shown in both the Visio ORM source model notation and the ORM 2 notation. With either notation, the mandatory role dots may be placed at either the object type end or the role end. The color fill for derived fact types is an optional choice.</FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=373 src="Images/Image020.gif" width=540></FONT></P>
<P class=""><FONT face="Times New Roman">Page 1:</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=299 src="Images/Image021.gif" width=470></FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=462 src="Images/Image022.gif" width=535></FONT></P>
<P class=""><FONT face="Times New Roman">Page 2: </FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=361 src="Images/Image023.gif" width=405></FONT></P>
<P class=""><FONT face="Times New Roman">Page 3:</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=311 src="Images/Image024.gif" width=573></FONT></P>
<P class=""><FONT face="Times New Roman">&nbsp;</FONT></P>
<P class=""><FONT face="Times New Roman"><IMG class="" height=285 src="Images/Image025.gif" width=460></FONT></P></DIV>]]></s>
    </Topic>
    <Topic Key="{12E9716E-59AA-4178-9EE7-A0743AE78E24}" Name="Neumont ORM Architect" Title="Title Page" ContentsTitle="Title Page" Status="Waiting Review" CreatedOn="15-02-2007 13:48:50" ModifiedOn="16-02-2007 14:54:27" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="False" IncludeInHelpFile="True" HelpContextIDs="" Category="C4">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=Section1>
<P class=MsoNoSpacing align=center><IMG id="Picture 1" height=120 src="Images/Image001.jpg" width=431></P>
<P class=MsoNoSpacing align=center>Neumont ORM Architect</P>
<P class=MsoNoSpacing align=center>for Visual Studio® 2005</P>
<P class=MsoNoSpacing align=center>&nbsp;</P>
<P class=MsoNoSpacing align=center>Revision 1.0</P>
<P class=MsoNoSpacing align=center>3/2007</P>
<P class=MsoNoSpacing align=center>&nbsp;</P>
<P class=MsoNoSpacing align=center>The Neumont ORM Architect (NORMA) tool is an ongoing development project by Faculty and Students at Neumont University, South Jordan, Utah</P>
<P class=MsoNoSpacing align=center>&nbsp;</P>
<P class=MsoNoSpacing align=center><A href="http://www.neumont.edu">http://www.neumont.edu</A></P>
<P class=MsoNoSpacing align=center><A href="http://sourceforge.net/projects/orm">http://sourceforge.net/projects/orm</A></P>
<P class=MsoNoSpacing align=center>&nbsp;</P>
<P class=MsoNoSpacing align=center>&nbsp;</P>
<P class=MsoNoSpacing align=center>©2007, Neumont University</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P></DIV>]]></s>
    </Topic>
    <Topic Key="{65F9333D-A2CC-416E-BD6A-ED0E91460E58}" Name="Creating a simple ORM schema using the NORMA tool" Title="Creating a simple ORM schema using the NORMA tool" ContentsTitle="Creating a simple ORM schema using the NORMA tool" Status="In Progress" CreatedOn="15-02-2007 13:51:47" ModifiedOn="01-03-2007 14:04:14" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C2">
        <Notes/>
        <K Value="schema"/>
        <K Value="Getting Started"/>
        <K Value="Using NORMA"/>
        <s k="BodyText"><![CDATA[<DIV class=Section1>
<P class=MsoNormal><IMG id="Picture 0" height=166 alt=dlgbmp.bmp src="Images/Image026.gif" width=480></P>
<P class=MsoNoSpacing>Creating a simple ORM schema using the NORMA tool</P>
<P class=MsoNoSpacing>(Adapted from the PowerPoint version, originally created by Dr. Terry Halpin)</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Completing this tutorial will help you to:</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Learn how to use basic functions while creating a basic ORM schema</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Prerequisites:</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; You must have already installed Visual Studio 2005, and the NORMA tool for Visual Studio.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing><IMG height=257 src="Images/Image027.gif" width=624></P>
<P class=MsoNoSpacing>&nbsp;&nbsp;&nbsp;&nbsp; Reference schemes: Patient(Nr); PatientName(); Drug(Name)</P>
<P class=MsoNoSpacing>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fact types:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Patient has PatientName.</P>
<P class=MsoNoSpacing>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Patient smokes.</P>
<P class=MsoNoSpacing>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Patient is allergic to Drug [allergy].</P>
<P class=MsoNoSpacing>Constraints:</P>
<P class=MsoNoSpacing><B>Each</B> Patient has <B>exactly one</B> PatientName.</P>
<P class=MsoNoSpacing><B>It is possible that the same</B> Patient is allergic to <B>more than one</B> Drug</P>
<P class=MsoNoSpacing><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; and that more than one</B> Patient is allergic to <B>the same</B> Drug.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>This would be a basic ORM schema for the above Reference scheme:</P>
<P class=MsoNoSpacing><IMG height=175 src="Images/Image028.gif" width=448></P>
<P class=MsoNoSpacing>We will now enter it into NORMA and then generate a database schema from it.</P>
<P class=MsoNoSpacing>We will begin by creating the ORM file, and later adding it a project (needed to generate DDL code).</P>
<P class=MsoNoSpacing>Alternatively, you may create a project to begin with.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Launch Visual Studio.</P>
<P class=MsoNoSpacing>Create a new file (File &gt; New &gt; File) </P>
<P class=MsoNoSpacing><IMG height=119 src="Images/Image002.jpg" width=406></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Select ORM category, Object-Role Modeling File template, and then press open.</P>
<P class=MsoNoSpacing><IMG height=349 src="Images/Image003.jpg" width=609></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing><IMG id="Object 5" height=491 src="Images/Image029.gif" width=625></P>
<P class=MsoNoSpacing><IMG height=55 src="Images/Image004.jpg" width=392><IMG height=88 src="Images/Image005.jpg" width=311></P>
<P class=MsoNoSpacing>Using the Fact Editor, type Patient(nr) has PatientName()", then press Ctrl-Enter.&nbsp; The object shapes will display in the document window.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Select and drag the shapes to obtain a better layout.&nbsp; Drag the mouse to select the predicate and object types, then align these shapes horizontally with the menu option Format &gt; Align &gt; Middles".&nbsp; Note that the Format option is only available when the shapes to be formatted are selected in the document window, and the alignment is based on the last shape that is selected.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>The predicate and object type are displayed with a pink line fill or outline, indicating an error state.</P>
<P class=MsoNoSpacing><IMG height=66 src="Images/Image006.jpg" width=301></P>
<P class=MsoNoSpacing>Here, the error on the predicate is that it has no uniqueness constraint.&nbsp; To view errors on an element, right-click the element"s Context-menu and select Validation Errors.</P>
<P class=MsoNoSpacing><IMG height=42 src="Images/Image007.jpg" width=624></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Alternatively, to see all errors look in the Error List window.</P>
<P class=MsoNoSpacing><IMG height=107 src="Images/Image008.jpg" width=590></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>We will add the required constraint and data type later, and at that point the pink error fills will disappear.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>The document window has two scroll bars.&nbsp; Use the bottom scroll bar to scroll horizontally.&nbsp; Use the side scroll bar to scroll vertically.&nbsp; To reposition any part of the diagram, select it, then either drag it or use the arrow keys to nudge it.</P>
<P class=MsoNoSpacing>To select all of the diagram, press Ctrl+A.</P>
<P class=MsoNoSpacing>To zoom in (magnify), press Ctrl+WheelUp (wheel mouse) or press Ctrl+Shift+LeftClick.</P>
<P class=MsoNoSpacing>To zoom out, press press Ctrl+WheelDown (wheel mouse) or press Ctrl+Shift+RightClick.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>You could enter all three fact types in the Fact Editor.&nbsp; Pressing Ctrl-Enter at the end of a line displays the fact type on that line.&nbsp; But instead, let"s enter the other fact types graphically.</P>
<P class=MsoNoSpacing>To add a unary predicate shape to the left of the Patient shape either:</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Click the Unary Fact Type" shape (<IMG height=23 src="Images/Image030.gif" width=137>) in the Toolbox, then click where you want to display the shape in the document window.</P>
<P class=MsoNoSpacing>OR</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Drag a Unary Fact Type" shape from the toolbox to where you want it.</P>
<P class=MsoNoSpacing><IMG height=64 src="Images/Image009.jpg" width=378></P>
<P class=MsoNoSpacing>Select the unary fact type by clicking just above its right-top corner.&nbsp; The Move Cursor (<IMG height=22 src="Images/Image031.gif" width=23>) appears to show the predicate is selected (not the role).</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Now right-click to see the validation error for the predicate.</P>
<P class=MsoNoSpacing><IMG height=47 src="Images/Image010.jpg" width=578></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Now select the role by clicking inside it.&nbsp; <IMG height=37 src="Images/Image011.jpg" width=45></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Now right-click to see the validation error for the role.</P>
<P class=MsoNoSpacing><IMG height=64 src="Images/Image012.jpg" width=565></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>To connect the role to the Patient shape:</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Select the role, drag the mouse pointer (which now displays as a role connector pointer) onto the Patient shape, and then release the mouse. </P>
<P class=MsoNoSpacing><IMG height=70 src="Images/Image013.jpg" width=162></P>
<P class=MsoNoSpacing><IMG height=73 src="Images/Image014.jpg" width=159></P>
<P class=MsoNoSpacing>Alternatively, click the Role Connector shape (<IMG height=32 src="Images/Image032.gif" width=139>) in the Toolbox, then click the role and the Patient shape.</P>
<P class=MsoNoSpacing>For practice, use Undo (select <IMG height=30 src="Images/Image033.gif" width=31>&nbsp;from the menu, or type Ctrl+Z) to remove the connection, and then use the alternative method to restore the connection.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>To add a predicate Reading, select the unary predicate shape and double-click it to open the ORM Reading Editor". </P>
<P class=MsoNoSpacing>&nbsp;<IMG height=72 src="Images/Image015.jpg" width=143></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Type Ssmokes⬝ after Patient and press the Enter key.&nbsp; The predicate reading should now appear next to the role.</P>
<P class=MsoNoSpacing><IMG height=72 src="Images/Image016.jpg" width=374></P>
<P class=MsoNoSpacing>To reposition a predicate reading in the document window select it then drag it to where you want.&nbsp; Use Format &gt; Align &gt; Middles to align the shapes horizontally.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>To change a predicate reading, select the reading on the predicate shape, then select the reading in the Reading Editor, and then edit as needed.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>To add the Drug entity type,&nbsp; drag the Entity Type shape from the Toolbox to the document window.</P>
<P class=MsoNoSpacing>It initially displays with a default name, e.g. SEntityType1⬝. </P>
<P class=MsoNoSpacing><IMG height=204 src="Images/Image017.jpg" width=584></P>
<P class=MsoNoSpacing>Change the name to SDrug⬝, either by editing it inplace or by editing the Name entry in the Properties window.</P>
<P class=MsoNoSpacing><IMG height=133 src="Images/Image018.jpg" width=293><IMG height=173 src="Images/Image019.jpg" width=190></P>
<P class=MsoNoSpacing>Add the reference mode Sname⬝ in the RefMode property either by typing it and hitting Enter <I>or </I>&nbsp;by selecting it from the drop-down list of pre-defined reference modes.&nbsp; The reference mode is then displayed on the diagram.</P>
<P class=MsoNoSpacing><IMG height=282 src="Images/Image020.jpg" width=247><IMG id="Picture 18" height=59 src="Images/Image021.jpg" width=86></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Click the Binary Fact Type shape in the Toolbox,&nbsp; and then click where you want to position it.&nbsp; Alternatively, you can drag the shape from the Toolbox to the document window.</P>
<P class=MsoNoSpacing><IMG id="Picture 19" height=152 src="Images/Image022.jpg" width=370></P>
<P class=MsoNoSpacing>To connect the left role, select it (click the mouse pointer inside it), then drag the mouse pointer to the Patient shape.</P>
<P class=MsoNoSpacing><IMG id="Picture 20" height=146 src="Images/Image023.jpg" width=307></P>
<P class=MsoNoSpacing>Similarly, select the right role and drag the pointer to connect it.</P>
<P class=MsoNoSpacing><IMG id="Picture 21" height=141 src="Images/Image024.jpg" width=296></P>
<P class=MsoNoSpacing>To add a reading for the new predicate, first select it (click its border so that the mouse pointer displays as: <IMG id="Picture 22" height=21 src="Images/Image034.gif" width=22>).</P>
<P class=MsoNoSpacing><IMG id="Picture 23" height=70 src="Images/Image025.jpg" width=164></P>
<P class=MsoNoSpacing>Double-Click the predicate, to invoke the ORM Reading Editor and then enter forward predicate reading Sis allergic to⬝ between SPatient⬝ and SDrug⬝.</P>
<P class=MsoNoSpacing><IMG id="Picture 24" height=76 src="Images/Image026.jpg" width=232></P>
<P class=MsoNoSpacing>The reading now displays on the diagram.</P>
<P class=MsoNoSpacing><IMG id="Picture 25" height=144 src="Images/Image027.jpg" width=361></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Select the left role of the patient name fact type, and then right-click to open its context menu and click Add Uniqueness Constraint⬝.</P>
<P class=MsoNoSpacing><IMG id="Picture 26" height=119 src="Images/Image028.jpg" width=306></P>
<P class=MsoNoSpacing>The constraint is then displayed.</P>
<P class=MsoNoSpacing><IMG id="Picture 27" height=66 src="Images/Image029.jpg" width=307></P>
<P class=MsoNoSpacing>Select the constraint, and then click the ORM Verbalization Browser to see the positive verbalization.</P>
<P class=MsoNoSpacing><IMG id="Picture 28" height=93 src="Images/Image030.jpg" width=400></P>
<P class=MsoNoSpacing>Click the <IMG id="Picture 29" height=24 src="Images/Image035.gif" width=29>&nbsp;button to see the negative verbalization.</P>
<P class=MsoNoSpacing><IMG id="Picture 30" height=119 src="Images/Image031.jpg" width=624></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Select the left role of the name fact type,&nbsp; and then right-click to open its context menu.&nbsp; Click SIs Mandatory⬝.</P>
<P class=MsoNoSpacing><IMG id="Picture 31" height=104 src="Images/Image032.jpg" width=309></P>
<P class=MsoNoSpacing>The mandatory role constraint is now displayed and its verbalization is added.</P>
<P class=MsoNoSpacing><IMG id="Picture 32" height=163 src="Images/Image033.jpg" width=379></P>
<P class=MsoNoSpacing>Click <IMG id="Picture 33" height=32 src="Images/Image036.gif" width=35>&nbsp;for the positive verbalization.</P>
<P class=MsoNoSpacing><IMG id="Picture 34" height=98 src="Images/Image034.jpg" width=552></P>
<P class=MsoNoSpacing>Click <IMG id="Picture 35" height=24 src="Images/Image035.gif" width=29>&nbsp;for the negative verbalization.</P>
<P class=MsoNoSpacing><IMG id="Picture 36" height=87 src="Images/Image035.jpg" width=591></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Select one role of the drug fact type and then hold the Shift key down and select the second role.&nbsp; Open the context menu by Right Clicking and click Add Uniqueness Constraint".</P>
<P class=MsoNoSpacing><IMG id="Picture 37" height=118 src="Images/Image036.jpg" width=261></P>
<P class=MsoNoSpacing>The constraint is now displayed.</P>
<P class=MsoNoSpacing><IMG id="Picture 38" height=166 src="Images/Image037.jpg" width=386></P>
<P class=MsoNoSpacing>In the Verbalization Browser, view the positive and negative verbalizations.</P>
<P class=MsoNoSpacing><IMG id="Picture 39" height=90 src="Images/Image038.jpg" width=624><IMG id="Picture 40" height=53 src="Images/Image039.jpg" width=624></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>By default, NORMA places the mandatory role dot at the role end instead of at the object type.</P>
<P class=MsoNoSpacing><IMG id="Picture 41" height=59 src="Images/Image040.jpg" width=296>vs.<IMG id="Picture 42" height=60 src="Images/Image041.jpg" width=295></P>
<P class=MsoNoSpacing>This helps to disambiguate the constraint when role attachments are very close together.</P>
<P class=MsoNoSpacing><IMG id="Picture 43" height=162 src="Images/Image037.gif" width=568></P>
<P class=MsoNoSpacing>VS.</P>
<P class=MsoNoSpacing><IMG id="Picture 44" height=160 src="Images/Image038.gif" width=560></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>To change this default (as well as many other options), open the Options Window (main menu: Tools &gt; Options⬦)&nbsp; and then select ORM Designer.</P>
<P class=MsoNoSpacing><IMG id="Picture 45" height=299 src="Images/Image042.jpg" width=129><IMG id="Picture 46" height=371 src="Images/Image043.jpg" width=624></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Double-click the field entry for Mandatory Dot Placement to toggle its value (from RoleBoxEnd to ObjectShapeEnd).</P>
<P class=MsoNoSpacing><IMG id="Picture 47" height=74 src="Images/Image044.jpg" width=412></P>
<P class=MsoNoSpacing>Alternatively, choose the desired option from the drop-down list.</P>
<P class=MsoNoSpacing><IMG id="Picture 48" height=81 src="Images/Image045.jpg" width=381></P>
<P class=MsoNoSpacing>To activate this choice, press OK (this remains your default preference until you change it).</P>
<P class=MsoNoSpacing><IMG id="Picture 49" height=118 src="Images/Image046.jpg" width=408></P>
<P class=MsoNoSpacing>The mandatory role dot is now displayed at the object type end.</P>
<P class=MsoNoSpacing><IMG id="Picture 50" height=152 src="Images/Image047.jpg" width=371></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>By default, NORMA sets data types to Unspecified" until you assign a specific data type.</P>
<P class=MsoNoSpacing><IMG id="Picture 51" height=146 src="Images/Image048.jpg" width=526></P>
<P class=MsoNoSpacing>If you wish to set a default data type, use the Options dialog to set the Initial (default) Data Type (e.g. to TextVariableLength), and then press OK.</P>
<P class=MsoNoSpacing><IMG id="Picture 52" height=275 src="Images/Image049.jpg" width=408><IMG id="Picture 53" height=74 src="Images/Image050.jpg" width=308></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing><IMG id="Picture 1" height=152 src="Images/Image039.gif" width=371></P>
<P class=MsoNoSpacing>Setting the default data type has no impact on the three object types, since you created them earlier.</P>
<P class=MsoNoSpacing>To set the data type for PatientName, select the PatientName shape, and then in its Properties grid select the DataType property and choose Text: Variable Length" from the drop-down list.&nbsp; Then enter 30 in the Length property.&nbsp; This sets the data type to varchar(30).</P>
<P class=MsoNoSpacing><IMG id="Picture 2" height=271 src="Images/Image051.jpg" width=336></P>
<P class=MsoNoSpacing>The pink error fill disappears, since the data type is set.&nbsp; <IMG id="Picture 3" height=31 src="Images/Image052.jpg" width=88></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>If you earlier selected the Snr⬝ refmode for Patient from the drop-down list, its data type is already set to unsigned integer.&nbsp; If not, change its data type to that now.</P>
<P class=MsoNoSpacing><IMG id="Picture 4" height=115 src="Images/Image053.jpg" width=276><IMG id="Picture 5" height=109 src="Images/Image054.jpg" width=338></P>
<P class=MsoNoSpacing>If you earlier selected the Sname⬝ refmode for Drug from the drop-down list, its data type is already set to variable length text.&nbsp; If not, change its data type to that now.&nbsp; Regardless, you still need to set the data type length (e.g. to 20).</P>
<P class=MsoNoSpacing><IMG id="Picture 6" height=196 src="Images/Image055.jpg" width=298></P>
<P class=MsoNoSpacing><B>Note</B>: Currently, NORMA uses the same portable data types as Visio.&nbsp; A later version will provide an improved set of data types that may be used with a wider range of targets.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Let"s add the role name Sallergy⬝ to the role played here by Drug.</P>
<P class=MsoNoSpacing><IMG id="Picture 7" height=69 src="Images/Image056.jpg" width=184></P>
<P class=MsoNoSpacing>To add a role name, select the role and then add the role name in the Name property in the Properties window.</P>
<P class=MsoNoSpacing><IMG id="Picture 8" height=173 src="Images/Image057.jpg" width=216></P>
<P class=MsoNoSpacing>The role name is displayed in square brackets on the diagram.&nbsp; Select then drag the role name to your preferred position near the role box.</P>
<P class=MsoNoSpacing><IMG id="Picture 9" height=104 src="Images/Image040.gif" width=242></P>
<P class=MsoNoSpacing>If desired, select the smokes role, and add the role name isSmoker.</P>
<P class=MsoNoSpacing><IMG id="Picture 10" height=72 src="Images/Image058.jpg" width=168><IMG id="Picture 11" height=141 src="Images/Image059.jpg" width=226></P>
<P class=MsoNoSpacing>This is purely to predetermine the precise attribute name for code generation.</P>
<P class=MsoNoSpacing><IMG id="Picture 12" height=125 src="Images/Image041.gif" width=314></P>
<P class=MsoNoSpacing><B>Note</B>: You may toggle display of role names on/off using the options dialog.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>The allergy fact type is m:n, so it will map to a table by itself when we generate a relational schema.&nbsp; The table name will be the name of the fact type, which by default is the fact type"s primary reading SPatientIsAllergicToDrug⬝.&nbsp; Select the fact type, and look at its name in the Properties window.</P>
<P class=MsoNoSpacing><IMG id="Picture 13" height=153 src="Images/Image060.jpg" width=336><IMG id="Picture 14" height=134 src="Images/Image061.jpg" width=224></P>
<P class=MsoNoSpacing>Edit the Name to SDrugAllergy⬝.&nbsp; This will now be used as the generated table name.</P>
<P class=MsoNoSpacing><IMG id="Picture 15" height=123 src="Images/Image062.jpg" width=207></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Next, make any adjustments to the figure and then save the file.&nbsp; Saving the file can be done in two ways.&nbsp; 1) By pressing the save (<IMG id="Picture 16" height=13 src="Images/Image042.gif" width=14>) icon on the main menu, or 2) by choosing the relevant Save option from the File menu.&nbsp; </P>
<P class=MsoNoSpacing><IMG id="Picture 17" height=236 src="Images/Image063.jpg" width=206></P>
<P class=MsoNoSpacing>Choose SaveAs" to save another copy f the model (entering your desired filename and folder destination).&nbsp; Choose Save All to save all the open files.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>You now have a simple ORM schema.&nbsp; You can now use this schema to generate various types of code.&nbsp; See other tutorials, to learn what you can do from here.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>See also:</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="Generating a Relational View using an ORM schema in NORMA.html">Generate Relational view</A></P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="Generating a DDL code using an ORM schema in NORMA.html">Generate DDL code</A></P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="Generating a other code types using an ORM schema in NORMA.html">Generate C#/Visual Basic Code</A></P>
<P class=MsoNormal>&nbsp;</P></DIV>]]></s>
    </Topic>
    <Topic Key="{9F0DB88C-853E-4678-9478-226F220AE040}" Name="Generating a DDL code using an ORM schema in NORMA" Title="Generating a DDL code using an ORM schema in NORMA" ContentsTitle="Generating a DDL code using an ORM schema in NORMA" Status="In Progress" CreatedOn="15-02-2007 14:21:54" ModifiedOn="15-02-2007 16:13:25" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C2">
        <Notes/>
        <K Value="DDL"/>
        <s k="BodyText"><![CDATA[<DIV class=Section1>
<P class=MsoNormal><IMG id="Picture 0" height=166 alt=dlgbmp.bmp src="Images/Image043.gif" width=480></P>
<P class=MsoNoSpacing>Generating a DDL code using an ORM schema in NORMA</P>
<P class=MsoNoSpacing>(Adapted from the PowerPoint version, originally created by Dr. Terry Halpin)</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Completing this tutorial will help you to:</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Use NORMA to generate a DDL script from an ORM schema</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Prerequisites:</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; You must have already installed Visual Studio 2005 and the NORMA tool for Visual Studio.</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; You must have a schema created using NORMA.</P>
<P class=MsoNoSpacing>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; See document SCreating a simple schema⬝ to learn how to create a simple schema.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Open your ORM file using the NORMA tool within a solution in Visual Studio 2005.&nbsp; Use a C# or VB template (e.g. Windows App, Console App, or Class Library).</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>In the Solution Explorer, right-click the Project name and then choose Add &gt; Existing Item.</P>
<P class=MsoNoSpacing><IMG id="Picture 1" height=247 src="Images/Image064.jpg" width=368></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>In the Add Existing Item dialog, click <IMG id="Picture 2" height=17 src="Images/Image065.jpg" width=20>&nbsp;to change to the Projects folder, and then select your ORM file.&nbsp; Press Add to add a copy of your ORM file to the project.</P>
<P class=MsoNoSpacing><IMG id="Picture 3" height=390 src="Images/Image066.jpg" width=598></P>
<P class=MsoNoSpacing>If you later want to make changes to the ORM file inside the project, do it to that copy.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Your ORM schema will map to a relational schema.&nbsp; See Generating Relational Schema" document.</P>
<P class=MsoNoSpacing><IMG id="Picture 4" height=188 src="Images/Image044.gif" width=416><IMG id="Picture 5" height=239 src="Images/Image045.gif" width=191></P>
<P class=MsoNoSpacing>The generated DDL script will represent the relational structure shown.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Select the ORM model file in the solution explorer.</P>
<P class=MsoNoSpacing><IMG id="Picture 6" height=160 src="Images/Image067.jpg" width=253></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>In the properties window, check that SORMCustomTool⬝ is the value for the CustomTool property.&nbsp; (This should be set by default)</P>
<P class=MsoNoSpacing><IMG id="Picture 7" height=139 src="Images/Image068.jpg" width=310></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>The ORMGeneratorSettings property should be visible in the dialog (if not, click a different item in Solution Explorer and reselect your ORM file).</P>
<P class=MsoNoSpacing><IMG id="Picture 8" height=226 src="Images/Image069.jpg" width=315></P>
<P class=MsoNoSpacing>Now click <IMG id="Picture 9" height=16 src="Images/Image046.gif" width=18>&nbsp;button at the right.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>The ORM Generator Selection dialog now appears.</P>
<P class=MsoNoSpacing><IMG id="Picture 10" height=461 src="Images/Image070.jpg" width=624></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Now select the target for code generation.&nbsp; (To generate DDL use a SQL implementation.)</P>
<P class=MsoNoSpacing>This example uses SQL_SQLServer".</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Press Save Changes.&nbsp; After clicking Save Changes, the generation takes a little while.&nbsp; When generation is complete, the dialog closes.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>In Solution Explorer, press the expand button for the ORM file to view the files below it.</P>
<P class=MsoNoSpacing><IMG id="Picture 11" height=261 src="Images/Image071.jpg" width=311></P>
<P class=MsoNoSpacing>Now select the relevant code file (e.g. ORM_Lab1.SQLServer.sql) and double-click it to open in the text editor to view the generated code.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing><IMG id="Picture 12" height=339 src="Images/Image072.jpg" width=624></P>
<P class=MsoNoSpacing>An extract from the code currently (2007 Feb) generated fro SQL Server is shown below.&nbsp; Notice that the column names and data types generated are not ideal.&nbsp; Much finer control over column name and type generation should be available in coming versions.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing><B>DO NOT</B> delete generated files from Solution Explorer.</P>
<P class=MsoNoSpacing>To remove generated files, open the ORM Generator Settings dialog from the properties window of the ORM file. Deselect the generator types that you do not want, and then click Save Changes. The unwanted generated files will then be removed.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>See also:</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="Generating a DDL code using an ORM schema in NORMA.html">Generating Relational View</A></P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="Generating a other code types using an ORM schema in NORMA.html">Generating other Code</A> </P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="Creating a simple ORM schema using the NORMA tool.html">Creating a simple ORM schema</A></P>
<P class=MsoNormal>&nbsp;</P></DIV>]]></s>
    </Topic>
    <Topic Key="{C8E88885-885D-4FE4-BEAE-DEAA34D46DF0}" Name="Generating a other code types using an ORM schema in NORMA" Title="Generating a other code types using an ORM schema in NORMA" ContentsTitle="Generating a other code types using an ORM schema in NORMA" Status="In Progress" CreatedOn="15-02-2007 14:22:22" ModifiedOn="15-02-2007 14:32:24" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C2">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=Section1>
<P class=MsoNormal><IMG id="Picture 0" height=166 alt=dlgbmp.bmp src="Images/Image047.gif" width=480></P>
<P class=MsoNoSpacing>Generating a other code types using an ORM schema in NORMA</P>
<P class=MsoNoSpacing>(Adapted from the PowerPoint version, originally created by Dr. Terry Halpin)</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Completing this tutorial will help you to:</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Use NORMA to generate other types of code from an ORM schema</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Prerequisites:</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; You must have already installed Visual Studio 2005 and the NORMA tool for Visual Studio.</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; You must have a schema created using NORMA.</P>
<P class=MsoNoSpacing>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; See document SCreating a simple schema⬝ to learn how to create a simple schema.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Open your ORM file using the NORMA tool within a solution in Visual Studio 2005.&nbsp; Use a C# or VB template (e.g. Windows App, Console App, or Class Library).&nbsp; <B>Note</B>: If you are going to generate C# or VB code, your project must be in the chosen language.&nbsp; This example will use C#.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>In the Solution Explorer, right-click the Project name and then choose Add &gt; Existing Item.</P>
<P class=MsoNoSpacing><IMG height=247 src="Images/Image073.jpg" width=368></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>In the Add Existing Item dialog, click <IMG height=17 src="Images/Image074.jpg" width=20>&nbsp;to change to the Projects folder, and then select your ORM file.&nbsp; Press Add to add a copy of your ORM file to the project.</P>
<P class=MsoNoSpacing><IMG height=390 src="Images/Image075.jpg" width=598></P>
<P class=MsoNoSpacing>If you later want to make changes to the ORM file inside the project, do it to that copy.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Your ORM schema will map to a relational schema.&nbsp; See Generating Relational Schema" document.</P>
<P class=MsoNoSpacing><IMG id="Picture 4" height=188 src="Images/Image048.gif" width=416><IMG id="Picture 5" height=239 src="Images/Image049.gif" width=191></P>
<P class=MsoNoSpacing>Your generated data layer will represent displayed relational view.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Select the ORM model file in the solution explorer.</P>
<P class=MsoNoSpacing><IMG id="Picture 6" height=160 src="Images/Image076.jpg" width=253></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>In the properties window, check that SORMCustomTool⬝ is the value for the CustomTool property.&nbsp; (This should be set by default)</P>
<P class=MsoNoSpacing><IMG id="Picture 7" height=139 src="Images/Image077.jpg" width=310></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>The ORMGeneratorSettings property should be visible in the dialog (if not, click a different item in Solution Explorer and reselect your ORM file).</P>
<P class=MsoNoSpacing><IMG id="Picture 8" height=226 src="Images/Image078.jpg" width=315></P>
<P class=MsoNoSpacing>Now click <IMG id="Picture 9" height=16 src="Images/Image050.gif" width=18>&nbsp;button at the right.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>The ORM Generator Selection dialog now appears.</P>
<P class=MsoNoSpacing><IMG id="Picture 1" height=462 src="Images/Image079.jpg" width=624></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Now select the target for code generation.&nbsp; For C# or VB (dependent on the type of project) choose PLiX_Implementation to generate code.&nbsp; Depending on the NORMA version, other options may be displayed here (e.g. OWL).</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Press Save Changes.&nbsp; After clicking Save Changes, the generation takes a little while.&nbsp; When generation is complete, the dialog closes.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>In Solution Explorer, press the expand button for the ORM file to view the files below it.</P>
<P class=MsoNoSpacing><IMG id="Picture 2" height=323 src="Images/Image080.jpg" width=283></P>
<P class=MsoNoSpacing>Now select the relevant code file (e.g. ORM_Lab1.Abstract.PLiX.cs) and double-click it to open in the text editor to view the generated code.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing><IMG id="Picture 3" height=341 src="Images/Image081.jpg" width=624></P>
<P class=MsoNoSpacing>C# was generated because we initially set up our project as a C# project.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>If we had instead created a Visual Basic project, then VB code would have been generated (with code file suffix .vb). In a VB project, Show All Files" needs to be selected in the Solution Explorer toolbar.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing><B>DO NOT</B> delete generated files from Solution Explorer.</P>
<P class=MsoNoSpacing>To remove generated files, open the ORM Generator Settings dialog from the properties window of the ORM file. Deselect the generator types that you do not want, and then click Save Changes. The unwanted generated files will then be removed.</P>
<P class=MsoNoSpacing>See also:</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="Generating a Relational View using an ORM schema in NORMA.html">Generating Relational View</A></P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="Generating a DDL code using an ORM schema in NORMA.html">Generating DDL Code</A> </P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="Creating a simple ORM schema using the NORMA tool.html">Creating a simple ORM schema</A></P>
<P class=MsoNormal>&nbsp;</P></DIV>]]></s>
    </Topic>
    <Topic Key="{01E56D06-3F64-47C1-A5BA-9100ABD6C077}" Name="Generating a Relational View using an ORM schema in NORMA" Title="Generating a Relational View using an ORM schema in NORMA" ContentsTitle="Generating a Relational View using an ORM schema in NORMA" Status="In Progress" CreatedOn="15-02-2007 14:22:48" ModifiedOn="15-02-2007 14:32:57" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C2">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=Section1>
<P class=MsoNormal><IMG id="Picture 0" height=166 alt=dlgbmp.bmp src="Images/Image051.gif" width=480></P>
<P class=MsoNoSpacing>Generating a Relational View using an ORM schema in NORMA</P>
<P class=MsoNoSpacing>(Adapted from the PowerPoint version, originally created by Dr. Terry Halpin)</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Completing this tutorial will help you to:</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Map an ORM schema to a Relational Table view</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Prerequisites:</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; You must have already installed Visual Studio 2005, and the NORMA tool for Visual Studio.</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; You must have a schema created using NORMA.</P>
<P class=MsoNoSpacing>o&nbsp;&nbsp; See document SCreating a simple schema⬝ to learn how to create a simple schema.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Open your ORM file using the NORMA tool.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Right-click in the document window and choose Extension manager.</P>
<P class=MsoNoSpacing><IMG id="Picture 1" height=163 src="Images/Image082.jpg" width=436></P>
<P class=MsoNoSpacing>In the Extension manager dialog, select Relational View and press OK.</P>
<P class=MsoNoSpacing><IMG id="Picture 2" height=272 src="Images/Image083.jpg" width=416></P>
<P class=MsoNoSpacing>Right-click the document tab and then select New Page à Relational View.</P>
<P class=MsoNoSpacing><IMG id="Picture 3" height=87 src="Images/Image084.jpg" width=303></P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Select the Relational view tab to see a diagram of the relational schema that is automatically generated as a live view of the ORM schema.</P>
<P class=MsoNoSpacing><IMG id="Picture 4" height=42 src="Images/Image085.jpg" width=187></P>
<P class=MsoNoSpacing>Drag the table shapes around to improve the layout.</P>
<P class=MsoNoSpacing><IMG id="Picture 5" height=192 src="Images/Image052.gif" width=191>à<IMG id="Picture 6" height=239 src="Images/Image053.gif" width=191></P>
<P class=MsoNoSpacing>Save your file to save the changes.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>Note: With large ORM models, live updating of the relational view can slow down the tool.&nbsp; It is best to turn off the relational view option in the Extension Manager until it is needed.&nbsp; Currently, some generated data types are less than ideal (e.g. bigint for patientNr).&nbsp; A later version of NORMA will provide finer control of the data types.</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>&nbsp;</P>
<P class=MsoNoSpacing>See also:</P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="Generating a DDL code using an ORM schema in NORMA.html">Generating DDL code</A></P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="Generating a other code types using an ORM schema in NORMA.html">Generating C#/Visual Basic Code</A> </P>
<P class=MsoNoSpacing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="Creating a simple ORM schema using the NORMA tool.html">Creating a simple ORM schema</A></P>
<P class=MsoNormal>&nbsp;</P></DIV>]]></s>
    </Topic>
    <Topic Key="{6D7777C8-349C-4710-8244-263D3D1A072F}" Name="FAQ Contents" Title="FAQ" ContentsTitle="FAQ" Status="Waiting Review" CreatedOn="15-02-2007 14:45:10" ModifiedOn="16-02-2007 14:44:55" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="False" HelpContextIDs="" Category="{69564419-AA92-4F5A-AEC7-E3054C4CA000}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=Section1>
<P class=MsoNormal><B>Dev Docs FAQ</B></P>
<P class=MsoNormal>This documentation is intended to be a <B>Table of Contents</B> to all the How-Tos related to developing the ORM Designer.</P>
<P class=MsoNormal>&nbsp;&nbsp; - These documents were pulled from the Neumont Development Team internal WIKI 2/2007.&nbsp; Many were authored by Matt Curland.</P>
<P class=MsoNormal><B>Contents</B></P>
<UL type=disc>
<LI class=MsoNormal><B>Acronyms and Other Information</B> 
<UL type=circle>
<LI class=MsoNormal><A href="Acronyms.html">Acronyms</A>- DMD, IMS, DSL, etc. </LI></UL>
<LI class=MsoNormal><B>Working with the core model</B> 
<UL type=circle>
<LI class=MsoNormal>How are...? 
<UL type=square>
<LI class=MsoNormal><A href="Constraints Modeled.html">Constraints modeled</A>- a description of the constraint object model elements, along with design analysis </LI></UL>
<LI class=MsoNormal>How to...? 
<UL type=square>
<LI class=MsoNormal><A href="Managing validation errors.html">Manage validation errors </A>- how to add model validation error elements to the object model 
<LI class=MsoNormal><A href="Deserialization fixup.html">Perform deserialization fixup</A>- how to ensure an internally consistent model state when a model file is loaded 
<LI class=MsoNormal><A href="HowToUseNamedElementDictionary.html">Use NamedElementDictionary</A>- how to use NamedElementDictionary to manage names for a set of model elements 
<LI class=MsoNormal><A href="HowToAddADataType.html">Add a data type</A>- how to add a data type to the model 
<LI class=MsoNormal><A href="HowToAttachRules.html">Attach a model rule</A>- how to attach classes marked with the Microsoft.VisualStudio.Modeling.RuleOn attribute to your model 
<LI class=MsoNormal><A href="SerializationExtensions.html">Change serialization output</A>- how to change the serialization behavior of model elements </LI></UL></LI></UL>
<LI class=MsoNormal><B>Working with UI elements</B> 
<UL type=circle>
<LI class=MsoNormal>How to...? 
<UL type=square>
<LI class=MsoNormal><A href="HowToAddCommandToMenu.html">Add a command to the menu</A>- step by step to add something to a Visual Studio menu 
<LI class=MsoNormal><A href="HowToAddOptionPageOptions.html">Add Option Page Options</A>- so you'd like to make something a global option? 
<LI class=MsoNormal><A href="HowToAddAToolWindow.html">Add tool window</A>- guide to implementing a tool window 
<LI class=MsoNormal><A href="HowToAddUITypeEditor.html">Add a UITypeEditor</A>- a brief comment on how to add a UITypeEditor 
<LI class=MsoNormal><A href="HowToAddAToolboxItem.html">Add a Toolbox item</A>- a basic step by step to add a new Toolbox item </LI></UL></LI></UL>
<LI class=MsoNormal><B>Working With Documentation</B> 
<UL type=circle>
<LI class=MsoNormal>How to...? 
<UL type=square>
<LI class=MsoNormal><A href="HowToUseXSDtoHTML.html">Use XSDtoHTML.xslt</A>- an XSDtoHTML.xslt walk through. </LI></UL></LI></UL></LI></UL>
<P class=MsoNormal>&nbsp;</P></DIV>]]></s>
    </Topic>
    <Topic Key="{978E7403-DE41-4BB2-AFAD-1661325F22FC}" Name="Acronyms" Title="Acronyms" ContentsTitle="Acronyms" Status="Waiting Review" CreatedOn="15-02-2007 14:46:44" ModifiedOn="16-02-2007 14:44:57" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="False" HelpContextIDs="" Category="{69564419-AA92-4F5A-AEC7-E3054C4CA000}">
        <Notes/>
        <s k="BodyText"><![CDATA[<H1 id=Acronyms>Acronyms</H1>
<UL>
<LI>ORM - Object Role Modeling </LI></UL>
<UL>
<LI>DD - Design Designer </LI>
<LI>DMD - Domain Model Designer </LI>
<LI>DSL - Domain Specific Language </LI>
<LI>IMS - In Memory Store </LI>
<LI>PNC - Persistence and Commitment </LI></UL>
<UL>
<LI>PLiX - Programming Language in XML </LI></UL>
<UL>
<LI>OIAL - ORM Intermediate Absorption Language </LI>
<LI>DIL - Database Intermediate Language </LI>
<LI>DCIL - Database Conceptual Intermediate Language </LI>
<LI>DDIL - Data Definition Intermediate Language </LI>
<LI>DMIL - Data Manipulation Intermediate Lanaguage </LI>
<LI>DILMS - Database Intermediate Language Management Statements </LI>
<LI>DILEP - Database Intermediate Language Expressions &amp; Predicates </LI>
<LI>DILDT - Database Intermediate Language Data Types </LI></UL>]]></s>
    </Topic>
    <Topic Key="{43027CA3-1909-4A49-9280-BC43068DE593}" Name="Constraints Modeled" Title="Constraints Modeled" ContentsTitle="Constraints Modeled" Status="Waiting Review" CreatedOn="15-02-2007 14:52:51" ModifiedOn="16-02-2007 14:45:11" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="False" HelpContextIDs="" Category="{69564419-AA92-4F5A-AEC7-E3054C4CA000}">
        <Notes/>
        <s k="BodyText"><![CDATA[<H1 id=HowareconstraintsrepresentedintheORMobjectmodel>How are constraints represented in the ORM object model?</H1>
<P>Constraints come in three flavors, <I>internal</I>, <I>single-column external</I>, and <I>multi-column external</I>. The object model code for adding each of these to the model is slightly different because of different aggregating objects (internal constraints aggregated by the FactType they are attached too, the external constraints are aggregated under the ORMModel) and different inheritance structures (internal and single-column externals inherit directly from ConstraintRoleSequence, multi-column constraints own a sequence of ConstraintRoleSequence objects). The design behind the current object model is discussed in the <I>Rationale and history of model design</I> section after the code snippets. </P>
<H2 id=ConstraintCreationSnippets>Constraint Creation Snippets</H2>
<P>Create a constraint and add a single Role to it for each of the three modeling styles. The Role must already be attached to a FactType for any of this code to work. Note that the external constraints will need more roles to pass model validation, but they are added in a similar fashion. </P>
<P><STRONG>Internal Constraint Sample</STRONG><BR><I>Add an internal uniqueness constraint to a FactType</I> </P><PRE class=wiki>FactType factType; // Already assigned
Role role; // Already assigned. Role.FactType must equal factType
Store store = factType.Store;
InternalUniquenessConstraint iuc = InternalUniquenessConstraint.CreateInternalUniquenessConstraint(store);
iuc.RoleCollection.Add(role); // This will automatically set iuc.FactType.
// Warning: You can set FactType before adding a Role, but do not set it after adding
// a role. FactType is a generated relationship property, and resetting it will destroy
// the old link, which will remove the newly created constraint from the model.
</PRE>
<P><STRONG>Single-Column External Constraint Sample</STRONG><BR><I>Add disjunctive mandatory constraint to model</I> </P><PRE class=wiki>Role role; // Already assigned
ORMModel model; // Already assigned
Store store = model.Store;
DisjunctiveMandatoryConstraint dmc = DisjunctiveMandatoryConstraint.CreateDisjunctiveMandatoryConstraint(store);
dmc.Model = model;
dmc.RoleCollection.Add(role);
</PRE>
<P><STRONG>Multi-Column External Constraint Sample</STRONG><BR><I>Add exclusion constraint to model</I> </P><PRE class=wiki>Role role; // Already assigned
ORMModel model; // Already assigned
Store store = model.Store;
ExclusionConstraint ec = ExclusionConstraint.CreateExclusionConstraint(store);
ec.Model = model;
MultiColumnExternalConstraintRoleSequence sequence = MultiColumnExternalConstraintRoleSequence.CreateMultiColumnExternalConstraintRoleSequence(store);
sequence.RoleCollection.Add(role);
ec.RoleSequenceCollection.Add(sequence);
</PRE>
<H2 id=ConstraintRetrievalSnippets>Constraint Retrieval Snippets </H2>
<P>Constraints are generally retrieved from a FactType or from a Role on a FactType. You can either look at individual collections (generately automatically from the IMS code spit), or look at the 'fact constraint' collections off the FactType. These determine the roles used by a constraint on the given fact type up front so you don't have to walk the hierarchies yourself. <STRONG>Walking Constraints on a FactType</STRONG> </P><PRE class=wiki>FactType factType;

// Walk the different constraint types directly
foreach (InternalConstraint ic in factType.InternalConstraintCollection)
{
	// process internal constraints
}
foreach (SingleColumnExternalConstraint scec in factType.SingleColumnExternalConstraintCollection)
{
	// process single column external constraints
}
foreach (MultiColumnExternalConstraint mcec in factType.MultiColumnExternalConstraintCollection)
{
	// process multi column external constraints
}

// Get a bool array with one row for each external constraint. A true
// cell represents a usage of the role in an external constraint
RoleMoveableCollection factRoles = factType.RoleCollection;
ICollection&lt;IFactConstraint&gt; externalFactConstraints = factType.ExternalFactConstraintCollection;
int externalCount = externalFactConstraints.Count;
bool[,] usedRoles = new bool[externalCount, factRoles.Count];
int externalIndex = 0;
foreach (IFactConstraint fc in externalFactConstraints)
{
	foreach (Role testRole in fc.RoleCollection)
	{
		usedRoles[externalIndex, factRoles.IndexOf(testRole)] = true;
	}
	++externalIndex;
}

// Determine the row and column of a role in each of the constraints
// attached to it, where the column is the position of the role in
// a ConstraintRoleSequence, and the row is the index of the sequence
// among all sequences in the constraint (0 for single-column constraints).
Role role;
int row;
int column;
foreach (ConstraintRoleSequence sequence in role.ConstraintRoleSequenceCollection)
{
	int column = sequence.RoleCollection.IndexOf(role);
	int row = 0;
	if (0 == (sequence.Constraint.RoleSequenceStyles &amp; RoleSequenceStyles.OneRoleSequence))
	{
		row = (sequence.Constraint as MultiColumnExternalConstraint).RoleSequenceCollection.IndexOf(sequence);
	}
}
</PRE>
<H1 id=Rationaleandhistoryofmodeldesign>Rationale and history of model design </H1>
<P>ORM constraints posed several modeling challenges because of competing requirements imposed by model size considerations and the coding ease offered by a standard model across all constraint types. There were several questions that needed to be easily answered with an object model query: </P>
<OL>
<LI>For a given FactType, return a collection of constraints currently attached to the fact. </LI>
<LI>For a given Role, determine which constraints are attached to the role. </LI>
<LI>Determine the full set of external constraints in a model. </LI></OL>
<P>Even this initial set of requirements causes some problems. At the pure conceptual level, a constraint consists of a sequence of role sequences. The ORM literal refers to these role sequences as <I>constraint arguments</I>. So, any constraint can be defined as an aggregate of the ORMModel object (aggregate is referred to as an <I>Embedding</I> relationship in the Domain Model Designer), and can be defined by relationship sequences with Role objects. However, this definition makes it very hard to determine which FactType instances are associated with a given constraint, as well as which roles from a fact type participate in the constraint once the fact itself is determined. So a model that naturally satisfies the second and third conditions makes the first conditional a deep model query. This poses a problem, especially given that the first condition is what is visibly shown to the ORM user. </P>
<H2 id=Initialnowpartlydefunctdesign>Initial (now partly defunct) design </H2>
<P>The initial constraint object model was fashioned with a broad conceptual pen that threw all constraint patterns into a single bucket. This model was later refined to greatly reduce the number of objects and relationships required to represent the majority of constraints. However, the original model still represents the conceptual under pinnings of how constraints should be conceptually viewed. Note that this discussion will use the current term <I>RoleSequence</I> instead of the original term <I>RoleSet</I>. All constraints can be modeled as a sequence of role sequences. For the general case, a role sequence (constraint argument, or ConstraintRoleSequence in code) contains one or more roles from one or more fact types. When multiple ConstraintRoleSequence instances are needed to define a constraint, then a valid model requires that the arity of each sequence be the same and that the role players for all rows in the same position in each role sequence are compatible. This pattern can be viewed as a two-dimensional matrix of roles where each row is equivalent to a ConstraintRoleSequence, and all cells in each column of the matrix must be compatible. This leads to the following layout for each of the ORM constraint types, complete the number of rows and columns required to specify the constraint. </P>
<P>
<TABLE class=wiki>
<TBODY>
<TR>
<TD><STRONG>Constraint</STRONG></TD>
<TD><STRONG>Usage</STRONG></TD>
<TD><STRONG>Rows</STRONG></TD>
<TD><STRONG>Columns</STRONG> </TD></TR>
<TR>
<TD>SimpleMandatory</TD>
<TD>Internal</TD>
<TD>1</TD>
<TD>1 </TD></TR>
<TR>
<TD>InternalUniqueness</TD>
<TD>Internal</TD>
<TD>1</TD>
<TD>1..* </TD></TR>
<TR>
<TD>Frequency</TD>
<TD>Internal</TD>
<TD>1</TD>
<TD>1..* </TD></TR>
<TR>
<TD>Ring</TD>
<TD>External</TD>
<TD>2</TD>
<TD>1 </TD></TR>
<TR>
<TD>ExternalUniqueness</TD>
<TD>External</TD>
<TD>&gt;=2</TD>
<TD>1 </TD></TR>
<TR>
<TD>DisjunctiveMandatory</TD>
<TD>External</TD>
<TD>&gt;=2</TD>
<TD>1 </TD></TR>
<TR>
<TD>Equality</TD>
<TD>External</TD>
<TD>&gt;=2</TD>
<TD>1..* </TD></TR>
<TR>
<TD>Exclusion</TD>
<TD>External</TD>
<TD>&gt;=2</TD>
<TD>1..* </TD></TR>
<TR>
<TD>Subset</TD>
<TD>External</TD>
<TD>&gt;=2</TD>
<TD>1..* </TD></TR></TBODY></TABLE></P>
<P>The one concession made between objects as this point was the existence of ExternalConstraint and InternalConstraint types. Both of these types inherited from <I>Constraint</I>, which was aggregated inside the ORMModel. The one difference was the an InternalConstraint had a single RoleSequence relationship, while an ExternalConstraint had a many-valued RoleSequenceCollection. </P>
<H2 id=FactConstraintrelationships>FactConstraint relationships </H2>
<P>The 'sequence of sequences' model matches the conceptual shape of constraints very well, but it does little to help draw them. The pseudo query to get each of the facts associated with a constraint from the raw model is <I>foreach role in each rolesequence, find the unique fact types from role.facttype</I>. This is a lot of model walking to do to get list of facts. Similarly, the constraints on a fact are defined as <I>foreach role in fact, find each rolesequence associated with role and each unique constraint associated with that rolesequence</I>. The immediate problem here is that a broad model walk is required to draw a fact type or a constraint. A more subtle problem is that there is no relationship directly from a fact to an associated constraint, which means that there is no object for external constraints lines in the shape model to attach to. The <STRONG>FactConstraint</STRONG> model relationships were added to alleviate this problem. </P>
<P>FactConstraints are implicit relationship objects that are generated and maintained automatically when roles are added/removed from ConstraintRoleSequences and ConstraintRoleSequences are add/removed from constraints. FactConstraints are links directly from the fact to the constraint. This allows the constraint to find all associated facts, and vice versa. All FactConstraint objects support the IFactConstraint interface, which defines associated Constraint, FactType, and RoleCollection. properties. <I>RoleCollection</I> is the (unordered) set of role owned by <I>FactType</I> that are used by <I>Constraint</I>. </P>
<P>The underlying implementation of FactConstraints is not worth tangenting on at this point. Suffice it to say that different constraints implement IFactConstraint differently, but a full (read-only) colletion of all internal and external constraints associated with a FactType can be retrieved with the FactType.FactConstraintCollection. This facilitates easy constraint drawing. All external constraints also have a <I>FactTypeCollection</I> property, while internal constraints have a <I>FactType</I> property. These implicit relationships (you should never add them yourself, just populate and associate the role sequences) allow for natural model navigation from all views of the fact type. </P>
<H2 id=Theproblemswiththeinitialdesign>The problems with the initial design</H2>
<P>This conceptually sound constraint object model got us a long way, but it became clear over time that there were some issues that would be harder to fix the longer we waited. </P>
<OL>
<LI>The number of objects create for single-row and single-column constraints was too high. The single-column external constraints required expensive role sequences so they could add one role to each. As shown in the breakdown below, an internal constraint required four objects beyond the constraint itself and a relationship object for each role in the constraint. This kind of overhead is not prohibitive when rarely used, but there is little reason to carry it when most (&gt;90%) of constraints are internal and most of the externals are single-column. 
<UL>
<LI>Itself </LI>
<LI>The aggregating ModelHasConstraint relationship object </LI>
<LI>Its ConstraintRoleSequence </LI>
<LI>A relationship to the ConstraintRoleSequence (note that this may have disappeared automatically for 1-1 relationships in future DSLTools drops). </LI>
<LI>An implicit link to implement IFactConstraint (called InternalFactConstraint) </LI>
<LI>One ConstraintRoleSequenceHasRole relationship object for each role </LI></UL></LI>
<LI>FactType relationships for internal constraints were implicitly created based on role associations, so there was no way to associate a fact type with a constraint with no roles. This leads to complications when creating new constraints. </LI>
<LI>Many known restrictions in the model were not inherent in the model. For example, all external constraints were modeled the same, even if only one column was needed. This required extra custom code to enforce the number of columns. </LI>
<LI>Past ORM implementations had shied away from attempting to paint all constraints with the same brush. </LI></OL>
<P>Clearly, an adjustment needed to be made. </P>
<H2 id=Modificationsfromoverlyconceptualinitialdesign>Modifications from overly conceptual initial design</H2>
<P>A number of radical modifications needed to be made to address these problems. </P>
<OL>
<LI>The Constraint base class was eliminated from the meta model and integrated directly into the code as the IConstraint interface. </LI>
<LI>InternalConstraint was changed to derive from ConstraintRoleSequence directly (eliminates extra links for all of those little internal constraints). </LI>
<LI>InternalConstraint was aggregated directly under FactType. This allowed IFactConstraint to be implemented directly on InternalConstraint (one less implicit object), and allows internal constraints to be parented and displayed before roles are added. The only loss here was that internal constraints no longer have unique names with initial values managed in the model, but I don't think anyone really cares about model-wide unique names for internal uniqueness constraints. </LI>
<LI>ExternalConstraint (the original model for all externals) was renamed MultiColumnExternalConstraint. </LI>
<LI>A new SingleColumnExternalConstraint was introduced. Like InternalConstraint, SingleColumnExternalConstraint derives directly from ConstraintRoleSequence, so multiple columns are not possible. From the conceptual matrix perspective discussed earlier, this model is equivalent to the transpose of what is actually being represented: The single row should be treated as <I>n</I> rows with a single column. From a practical standpoint, these means that all roles in the SingleColumnExternalConstraint role sequence must be compatible (clearly not a restriction on internal constraints). </LI>
<LI>The aggregation into the model implicit by having everyone derive from Constraint now needed to include multiple collections. External constraint name uniqueness is enforced across the model. </LI></OL>]]></s>
    </Topic>
    <Topic Key="{E460742C-1F35-477B-BC16-C66CF7FC05F8}" Name="Managing validation errors" Title="Managing validation errors" ContentsTitle="Managing validation errors" Status="Waiting Review" CreatedOn="15-02-2007 14:57:38" ModifiedOn="16-02-2007 14:45:13" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="False" HelpContextIDs="" Category="{69564419-AA92-4F5A-AEC7-E3054C4CA000}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=wikipage>
<DIV id=searchable>
<H1 id=HowdoImanagemodelvalidationerrors>How do I manage model validation errors? </H1>
<P>Model validation errors are an integral part of the ORM2 object model. Validation errors are implicit elements in the model that are added and removed in response to user actions. The user sees a model error as an entry in the Visual Studio Error List window. Validation errors are different than exceptions, which force a transaction to roll back and block the object model user from completing the action. </P>
<P>Validation errors are an integral part of the usability of any designer because they allow a user to progress towards a correct model using small steps instead of forcing a batch of small steps to be grouped together by the user. For example, roles in many ORM constraints must be compatible (the meaning of compatible is not important here). Compatibility can be broken by any number of innocent steps, such as changing a role player somewhere in a join path. However, the user should not be blocked from small edits with an Exception, they should simply see a new model validation error indicating that the constraint roles are no longer compatible. </P>
<H2 id=Whyarevalidationerrorspartofthecoreobjectmodel>Why are validation errors part of the core object model? </H2>
<P>There were two architecture options for implementing validation errors: </P>
<OL>
<LI>Make them a part of the object model and add/remove/modify them via rules inside a transaction. </LI>
<LI>Keep them separate from the object model and generate validation errors in response to events, which fire after the initial transaction and during undo/redo. </LI></OL>
<P>The first option was chosen because ORM validation rules are frequently complex and require extensive navigation through the object model to test the conditions and/or existence of indirectly connected objects. Deep model navigation is often not possible during events (especially in cases where items are deleted), so an event would be able to tell that validation was required, but would not be able to actually perform the validation because the object graph would already have been broken up. The complex nature of ORM model validation rules make it imperative to have deep navigation support, so the first option (validation errors are first-class model objects) was chosen for the ORM2 tool. </P>
<H2 id=Definingvalidationerrors>Defining validation errors </H2>
<P>Adding validation errors requires the following steps. Code examples are shown at the bottom of the page: </P>
<OL>
<LI><STRONG>Add your validation error to the object model</STRONG> using the Domain Model Designer to edit your .dmd file. There are two steps here: 
<UL>
<LI>Add a new object as a subtype of ModelError. Deriving from ModelError gives you automatic integration into the error list and provides a central location in the model to scan for errors. Add an inheritance relationship as follows: 
<UL>
<LI>Using the <I>Class</I> tool from the 'Domain Model Designer' toolbox to add a new class and rename your class appropriately (MyError) </LI>
<LI>Activate the <I>Inheritance</I> tool in the toolbox, click on ModelError (defined under ORMModel), then on MyError. </LI>
<LI>Right click on the new 'MyError' node shown under ModelError and choose 'Bring Definition Here' </LI></UL></LI>
<LI>Create a Reference relationship to the specific model element (MyElement) you're reporting an error on. The relationship role on the MyElement side should have cardinality one (you should only need to report a specific error once per object). The role cardinality on the error side will generally be one as well, unless the error is attached to multiple objects (for example, duplicate name errors have a collection all objects with the same name). The relationship should be a Reference instead of an Embedding because you are automatically embedded inside of ORMModel when you derive from ModelError. You can add the reference relationship as follows: 
<UL>
<LI>Activate the <I>Reference</I> tool in the toolbox, click on MyElement, then on MyError. </LI>
<LI>Select the role on the MyElement side (displayed as a 0 in a solid role triangle on the designer). In the Properties window, set the <I>Min</I> property to 1 to make this a non-optional role. </LI>
<LI>Select the role on the MyError side of the relationship (displayed as a * in an empty rectangle). In the Properties window, set the <I>Is Property Generator</I> property to true, <I>Min</I> to 1, and <I>Max</I> to 1. (Alternately, set <I>Max</I> to 0 for a 1 to many relationship with non-optional role players instead of a 1 to 1 with non-optional role players.) </LI>
<LI>Make sure the role and relationship names are what you want. </LI></UL></LI>
<LI>Change the delete propagation settings so that deleting MyElement automatically deletes MyError. This does not happen automatically because the relationship is set up as a reference instead of an embedding. When the code is generated, the primary containment style translates to the IsAggregate property in the MetaRole attribute. However, there is currently no UI mechanism for independently controlling the PropagateDelete settings for reference-style relationships (this will change with later incarnations of the Domain Model Designer tool). 
<UL>
<LI>Click MyElement to activate it. </LI>
<LI>If Domain Model Delete Behavior is not visible 
<UL>
<LI>In the menu click View &gt;&gt; Domain Model Designer &gt;&gt; View Delete Behavior Designer </LI></UL></LI>
<LI>In the Domain Model Delete Behavior Designer 
<UL>
<LI>Find in the list of items where Role is MyError and click that item. </LI>
<LI>Propagate delete should be checked. This says if I don't exist anymore then delete my error. </LI></UL></LI></UL></LI>
<LI>Make the relationship between MyElement and MyError inherit from ORMElementLink. 
<UL>
<LI>Right-click on the relationship connecting MyElement and MyError, then select "Show As Class". </LI>
<LI>Activate the <I>Inheritance</I> tool in the toolbox, click on ORMElementLink (defined under ModelElement &gt; ElementLink), then on the MyElementHasMyError class. </LI>
<LI>Right click on the new 'MyElementHasMyError' node shown under ORMElementLink and choose 'Bring Definition Here'. </LI></UL></LI>
<LI>Regenerate the object model. 
<UL>
<LI>Right click on the <I>ORMCore.dsldm.dsldmt</I> file in the Solution Explorer. If the Solution Explorer is not visible, go to <I>View</I> &gt; <I>Solution Explorer</I>. </LI>
<LI>Select <I>Run Custom Tool</I>. </LI></UL></LI></UL></LI>
<LI><STRONG>Override the abstract methods in the ModelError class</STRONG> in a partial class for MyError. 
<UL>
<LI>The <I>GenerateErrorText</I> method is used to generate text for the error message. The error text will appear in the Error List window, which can also include errors from other sources. Therefore, your error text should uniquely identify the model and the element in the model. For example, <I>A constraint has incompatibly roles.</I> is bad, <I>Constraint 'ExternalUniquenessConstraint1' has incompatible roles.</I> is better, and <I>Constraint 'ExternalUniquenessConstraint1' in model 'Model1' has incompatible roles.</I> is good. Note that the file name is provided automatically, so it should not be included in the error text itself. </LI>
<LI>The <I>RegenerateEvents</I> property getter returns enum values indicating when GenerateErrorText should be automatically called. The RegenerateErrorTextEvents enum has three values which can be combined. The <I>ModelNameChange</I> value will trigger a GenerateErrorText call when the model name changes. The <I>OwnerNameChange</I> value will trigger a GenerateErrorText call when the name of the owning element changes. The error owner is identified by an implementation of the IModelErrorOwner interface discussed below. Note that if the MyError element is also the IModelErrorOwner, then returning the <I>OwnerNameChange</I> value will result in a stack overflow. The <I>None</I> value can be returned if you don't use either a model or an element name to generate your error text (not recommended for good Error List citizenship). 
<UL>
<LI>Note that Whidbey Beta1 has a bug (Bug ID FDBK20321) that prevents the error list text from updating. If you want to test your auto-regenerate settings, search for <I>TaskCategory.BuildCompile</I> and (temporarily, please don't check it in) switch <I>BuildCompile</I> to <I>User</I>. Your errors will now list in the User section of the Task List window instead of in the Error List window and you'll be able to see the text regenerate on name changes. </LI></UL></LI></UL></LI></OL>
<OL>
<LI><STRONG>Implement the <I>IRepresentModelElements</I> interface</STRONG> on the MyError class to support double-click navigation from the Error List to an item on the design surface. IRepresentedModelElements has one method, <I>ModelElement[] GetRepresentedElements()</I>, which returns an array of the model elements associated with the error. The shapes representing the element are then located and selected. (As of this writing, only the first element is used, but this may change in the future, so return multiple elements if appropriate.) </LI>
<LI><STRONG>Implement the <I>IModelErrorOwner</I> interface</STRONG>. The ModelError framework uses the existence of this interface on an element to trigger a GenerateErrorText call (depending on the value returned by RegenerateEvents) when an element name changes, and during <A href="Deserialization fixup.html">deserialization fixup</A> to validate that the errors are correct. IModelErrorOwner has two members: 
<UL>
<LI>The <I>IEnumerable&lt;ModelError&gt; ErrorCollection {get;}</I> property returns a set of model errors associated with the object. </LI>
<LI>The <I>void ValidateErrors(INotifyElementAdded notifyAdded)</I> method is called during <A href="Deserialization fixup.html">deserialization fixup</A>&nbsp;to ensure that the deserialized model elements are valid and necessary, and to add new errors. Refer to the <A href="Deserialization fixup.html">deserialization fixup</A> discussion for more information on the expected behavior. </LI>
<LI>Where to implement IModelErrorOwner is up to the developer. The system only works if each model error is returned by at least one IModelErrorOwner.ErrorCollection iterator. Here are some guidelines on where to implement this interface: 
<UL>
<LI>If you created a 1-1 relationship between MyElement and MyError in step 1, then you will generally implement IModelErrorOwner on the MyElement class. </LI>
<LI>It is sometimes appropriate to implement IModelErrorOwner on the MyError class (such as with the duplicate name errors mentioned earlier). </LI>
<LI>In advanced cases where complex errors are attached to multiple elements, you can return the same ModelError from multiple IModelErrorOwner implementations. This allows you to get automatic renames from multiple elements. However, you will also be asked to validate the error multiple times during the fixup phase. You should only need to validate the error from one owner. </LI></UL></LI></UL></LI>
<LI><STRONG>Use rules to add/remove the MyError instance from the object model.</STRONG> You will often find that you need to run the same validation code for more than one rule, and that you can share this validation code with the IModelErrorOwner.ValidateErrors implementation. For example, the <I>ExternalConstraint.VerifyRoleSetCountForRule</I> method (in ORMModel\ObjectModel\Constraint.cs) is called by add rules for the ExternalConstraintHasRoleSet and ModelHasConstraint element links, a RemoveRule for ExternalConstraintHasRoleSet, and the IModelErrorOwner.ValidateErrors on the ExternalConstraint class. 
<UL>
<LI>The code to add an error to the model should follow a standard pattern. The error is created, the Model property is set, all referencing relationships are established, the <I>GenerateErrorText</I> method is called explicitly, and the INotifyAdded.ElementAdded method is called (during <A href="Deserialization fixup.html">deserialization fixup</A>). </LI>
<LI>If all of the role properties were set correctly in step 1, removing an error from the model can be done simply by calling the Remove() method on the error instance. </LI>
<LI>Make sure any rules you defined are properly <A href="HowToAttachRules.html">attached to the model</A>. </LI></UL></LI>
<LI>Validation errors are first-class elements in the object model and are serialized as any other element. You must define <A href="SerializationExtensions.html">serialization extensions</A> and modify the schema corresponding to your object model to successfully serialize and deserialize an .orm file containing your new error. </LI>
<LI>Model errors are automatically displayed in the task list, and navigating to an error (by double-clicking in the task list) will automatically select the offending item in a diagram. If a shape is not available for the offending item, then the ORM framework finds the aggregating parent of the element in the object model and attempts to find a shape for that object (re cursing up the chain as needed). For example, an error on a Role will activate the parent FactType because a Role does not have a presentation element directly associated with it. There are two additional problems beyond selection that require more developer feedback: 
<UL>
<LI>There are often common steps that can be taken automatically to help a user fix an error. For example, a common ORM error specifies that an internal uniqueness constraint is required on a FactType instance. Double clicking the error should not only select the fact, it should also add a new internal uniqueness constraint and activate the constraint so that roles can be added to it without additional work by the user. Additional activation actions can be performed by implementing the <I>IModelErrorActivation</I> interface on the shape that is automatically selected by the built-in task list navigation code. The IModelErrorActivation interface has one method, <I>void ActivateModelError(ModelError error)</I>. There is no specific pattern for implementing this method as UI gestures required for remedying a situation vary widely for different errors. Any implementation of ActivateModelError needs to gracefully handle errors that have no special activation steps. A broad IModelErrorActivation example can be found in trunk/ORMModel/ShapeModel/FactTypeShape.cs. The <I>FactTypeShape</I> implementation is also used to compensate for the lack of a direct presentation element on a role by changing the selection to a specific Role when the error is on a child Role. </LI>
<LI>The element that an error is present on will not always be directly displayed on the design surface. For example, a value type instance may have an unspecified data type error associated with it, but value types can be collapsed as part of the reference scheme pattern. This anomaly is handled by the <I>IProxyDisplayProvider</I> interface. During the recursive aggregation walk used to find a shape to select for the error, if the first element with a shape that is reached is the top-level model element, then the IProxyDisplayProvider is request from that element and the parent walk is repeated with feedback from this interface. IProxyDisplayProvider has one method, <I>ModelElement ElementDisplayedAs(ModelElement element)</I>. ElementDisplayedAs is called to retrieve an alternate model element to select as the error shape. IModelErrorActivation will be called on this shape, which may need additional code to work correctly with redirected errors. You should not need to implement IProxyDisplayProvider directly, but you may need to add code to the implementation in ORMDiagram.cs. </LI></UL></LI></OL>
<H2 id=Codeexamples:>Code examples: </H2>
<P><STRONG>Implementing a ModelError example</STRONG><BR><I>The non-generated partial for the TooFewRoleSetsError class</I> </P><PRE class=wiki>public partial class TooFewRoleSetsError : IRepresentModelElements
{
	#region Base overrides
	/// &lt;summary&gt;
	/// Generate text for the error
	/// &lt;/summary&gt;
	public override void GenerateErrorText()
	{
		Constraint parent = Constraint;
		string parentName = (parent != null) ? parent.Name : "";
		string currentText = Name;
		string newText = string.Format(ResourceStrings.ModelErrorConstraintHasTooFewRoleSetsText, parentName);
		if (currentText != newText)
		{
			Name = newText;
		}
	}
	/// &lt;summary&gt;
	/// Regenerate the error text when the constraint name changes
	/// &lt;/summary&gt;
	public override RegenerateErrorTextEvents RegenerateEvents
	{
		get
		{
			return RegenerateErrorTextEvents.OwnerNameChange;
		}
	}
	#endregion // Base overrides
	#region IRepresentModelElements Implementation
	/// &lt;summary&gt;
	/// Implements IRepresentModelElements.GetRepresentedElements
	/// &lt;/summary&gt;
	/// &lt;returns&gt;&lt;/returns&gt;
	protected ModelElement[] GetRepresentedElements()
	{
		return new ModelElement[] { Constraint };
	}
	ModelElement[] IRepresentModelElements.GetRepresentedElements()
	{
		return GetRepresentedElements();
	}
	#endregion // IRepresentModelElements Implementation
}
</PRE>
<P><STRONG>Implementing IModelErrorOwner example</STRONG><BR><I>The IModelErrorOwner implementation from the ExternalConstraint class</I> </P><PRE class=wiki>public partial class ExternalConstraint : IModelErrorOwner
{
	#region IModelErrorOwner Implementation
	IEnumerable&lt;ModelError&gt; IModelErrorOwner.ErrorCollection
	{
		get
		{
			return ErrorCollection;
		}
	}
	/// &lt;summary&gt;
	/// Implements IModelErrorOwner.ErrorCollection
	/// &lt;/summary&gt;
	[CLSCompliant(false)]
	protected IEnumerable&lt;ModelError&gt; ErrorCollection
	{
		get
		{
			TooManyRoleSetsError tooMany;
			TooFewRoleSetsError tooFew;
			if (null != (tooMany = TooManyRoleSetsError))
			{
				yield return tooMany;
			}
			if (null != (tooFew = TooFewRoleSetsError))
			{
				yield return tooFew;
			}
		}
	}
	/// &lt;summary&gt;
	/// Implements IModelErrorOwner.ValidateErrors
	/// Validate all errors on the external constraint. This
	/// is called during deserialization fixup when rules are
	/// suspended.
	/// &lt;/summary&gt;
	/// &lt;param name="notifyAdded"&gt;A callback for notifying
	/// the caller of all objects that are added.&lt;/param&gt;
	protected void ValidateErrors(INotifyElementAdded notifyAdded)
	{
		VerifyRoleSetCountForRule(notifyAdded);
	}
	void IModelErrorOwner.ValidateErrors(INotifyElementAdded notifyAdded)
	{
		ValidateErrors(notifyAdded);
	}
	#endregion // IModelErrorOwner Implementation
}
</PRE>
<P><STRONG>Creating a model error example</STRONG><BR><I>A snippet from the External.VerifyRoleSetCountForRule method to add a TooFewRoleSetsError to the model.</I> </P><PRE class=wiki>insufficientError = TooFewRoleSetsError.CreateTooFewRoleSetsError(store);
insufficientError.Model = Model;
insufficientError.Constraint = this;
insufficientError.GenerateErrorText();
if (notifyAdded != null)
{
	notifyAdded.ElementAdded(insufficientError, true);
}
</PRE></DIV></DIV>
<DIV class=buttons>
<FORM action=/orm2/wiki/HowToManageValidationErrors method=get>
<DIV>&nbsp;</DIV></FORM></DIV>]]></s>
    </Topic>
    <Topic Key="{4E54A76F-C27B-4BE2-9453-7D31C95FC531}" Name="Deserialization fixup" Title="Deserialization fixup" ContentsTitle="Deserialization fixup" Status="Waiting Review" CreatedOn="15-02-2007 14:59:48" ModifiedOn="16-02-2007 14:45:15" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="False" HelpContextIDs="" Category="{69564419-AA92-4F5A-AEC7-E3054C4CA000}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=wikipage>
<DIV id=searchable>
<H1 id=HowdoIensuremymodelisinternallyconsistentafterdeserialization>How do I ensure my model is internally consistent after deserialization?</H1>
<P>Deserialization is the process of transforming a file version of a model into a live, in-memory version of the model. Deserialization fixup, or post-load fixup, refers to the process of bringing a deserialized model into the same in-memory state it was in when it was serialized (saved). </P>
<H2 id=DeserializationChallenges>Deserialization Challenges </H2>
<P>Model rules are designed to keep a model internally consistent when it is loaded in memory, regardless of how the object model is created. As a general practice, rules are not run during deserialization because the model is loaded in a random order and is in an incomplete state until the load is complete. Therefore, most classes of rules are inappropriate during deserialization. For example: </P>
<UL>
<LI>Rules that create implicit elements that are serialized, such as model errors or implied links between objects, should not run during load because the objects they are creating are most likely just not loaded yet. Running these rules could result in duplicate elements being added to the model. </LI>
<LI>Rules that create implicit elements that are <I>not</I> serialized should run at some point during load, but often not immediately after an element is added due to possible incomplete states. <I>Not</I> running these rules results in required elements being missing from the model. </LI>
<LI>Rules that throw on invalid model state should not run until the full state has been deserialized. </LI></UL>
<P>In addition to internal model state, deserialization fixup also needs to deal with the <I>Notepad effect</I>. There is no protection for a text file on disk. Therefore, any on-disk changes that do not violate the file format required by the model loader will end up in the model. Model rules are not enforced for these changes, so the entire model is suspect after it is loaded. </P>
<P>Another subtle problem with serialization occurs due to the requirement to keep the file changes proportional to the number of model changes made during an editing session. In no case should a load and save produce a file modification (assuming the original saved file had not been subjected to the Notepad effect). In any system that saves some implicit elements (for example, implicit model errors are serialized by the ORM2 project), this means that the implicit elements loaded from the model file should be kept in favor of discarding and regenerating those elements. </P>
<H2 id=DeserializationFixupPhases>Deserialization Fixup Phases</H2>
<P>Deserialization fixup needs to be done in order. For example, all implicit elements should be added before any code runs to validate the model error state. Any elements added during fixup also need to be tracked explicitly because rules are no in effect, so add rules do not fire. The following list is an initial set of fixup phases that need to be run in order. This list can be extended, but the order must be maintained. Code executed during earlier phases may and are expected to add elements that need to be processed by later phases, but not vice versa (note that the fixup engine described below asserts this condition in a DEBUG build). </P>
<OL>
<LI>Add intrinsic elements. Intrinsics are elements that are needed in every model and are not serialized. For example, the ORM2 model has intrinsic ReferenceMode and DataType objects. </LI>
<LI>Add implicit elements. Implicit elements are created in a live model in response to model rules. If an implicit element is not written to the model file, then it needs to be recreated at this point. If validation errors are included as model elements, any new errors should be generated at this point. </LI>
<LI>Model error validation. The model should be in a complete state after implicit elements are added, but there is still a real chance that error elements were deserialized after the model load was completed. A discussion of using the IModelErrorOwner interface for fixup during this phase is discussed in <A href="Managing validation errors.html">HowToManageValidationErrors</A>. </LI>
<LI>Add implicit presentation elements. The presentation model should not be validated until the object model is in a fully loaded and consistent state. This first step after the model is fully validated adds implicit (non-serialized) elements to the presentation layer. For example, the ORM2 shape model implicitly attaches all link lines, so these do not need to be serialized. The link lines are readded at this stage. </LI>
<LI>Remove orphaned presentation elements. Some systems allow an <I>orphaned pel</I>, which means that a shape element can be displayed without one or more backing elements in the core model. ORM2 has no plans to support this notion, so all orphaned pels need to be removed. </LI></OL>
<H2 id=DeserializationFixupManagerandIDeserializationFixupListener>DeserializationFixupManager and IDeserializationFixupListener </H2>
<P>Obviously, it would be possible to put all fixup calls into one 'FixupModel' routine. However, it makes much more sense to formalize the process in an extensible fashion so that code can be placed alongside rules and code can be shared between rules and the fixup methods. The classes and interfaces formalizing deserialization fixup are in ORMModel\ObjectModel\DeserializationManager.cs. Adding new fixup procedures requires you to implement the IDeserializationFixupListener interface and then attach your implementation. The DeserializationManager class is instantiated by the ORMDesignerDocData/Load method and passed to the deserialization engine. You should not need to use this class directly. </P>
<H3 id=ImplementingIDeserializationFixupListener>Implementing IDeserializationFixupListener </H3>
<P>The IDeserializationFixupManager interface has five methods, the first two coming from the <I>INotifyElementAdded</I> interface. <I>ElementAdded</I> is called for each element added to the Store. (There are actually two ElementAdded methods (one with an addLinks parameter), but the second method is not called on fixup listeners.) <I>HasElements</I> is passed a fixup phase value and returns true if elements need to be processed for the phase. <I>ProcessElements</I> is called for a phase if HasElements returned true and should be used to fixup the current set of elements. Note that ProcessElements can be called multiple times if processing adds new elements that need to be processed by the given phase. <I>PhaseCompleted</I> is called when all listeners for the current phase returns false. The INotifyElementAdded and IDeserializationFixupManager interfaces are shown here for reference. </P><PRE class=wiki>/// &lt;summary&gt;
/// An interface for notifying when an element has been added
/// to a Store.
/// &lt;/summary&gt;
[CLSCompliant(true)]
public interface INotifyElementAdded
{
	/// &lt;summary&gt;
	/// An element has been added to a store
	/// &lt;/summary&gt;
	/// &lt;param name="element"&gt;The newly added element&lt;/param&gt;
	void ElementAdded(ModelElement element);
	/// &lt;summary&gt;
	/// An element has been added to a store
	/// &lt;/summary&gt;
	/// &lt;param name="element"&gt;The newly added element&lt;/param&gt;
	/// &lt;param name="addLinks"&gt;true if all links attached directly to the
	/// element should also be added. Defaults to false.&lt;/param&gt;
	void ElementAdded(ModelElement element, bool addLinks);
}
/// &lt;summary&gt;
/// An interface to provide an extensible plugin point
/// for managing deserialization fixups
/// &lt;/summary&gt;
public interface IDeserializationFixupListener : INotifyElementAdded
{
	/// &lt;summary&gt;
	/// Test if this listeners needs to process
	/// elements for the given deserialization phase.
	/// &lt;/summary&gt;
	/// &lt;param name="phase"&gt;An integer pulled from the
	/// phase enum passed to the DeserializationFixupManager constructor.&lt;/param&gt;
	/// &lt;param name="store"&gt;The context store&lt;/param&gt;
	/// &lt;returns&gt;true if this listener has elements for this phase&lt;/returns&gt;
	bool HasElements(int phase, Store store);
	/// &lt;summary&gt;
	/// Process elements for the specific fixup phase. Care
	/// must be taken when implementing this method to support
	/// additional elements added to the set as a result of the fixups
	/// occuring while processing elements. The implementation does not
	/// need to process the new elements immediately (although this is an
	/// option) because the calling code will continue to call HasElements/ProcessElements
	/// for each phase until all listeners have no elements.
	/// &lt;/summary&gt;
	/// &lt;param name="phase"&gt;An integer pulled from the
	/// phase enum passed to the deserialization manager constructor.&lt;/param&gt;
	/// &lt;param name="store"&gt;The context store&lt;/param&gt;
	/// &lt;param name="notifyAdded"&gt;The listener to notify if elements are added during fixup&lt;/param&gt;
	void ProcessElements(int phase, Store store, INotifyElementAdded notifyAdded);
	/// &lt;summary&gt;
	/// The phase is completed, meaning that all listeners currently return false from
	/// HasElements for this phase. PhaseCompleted should not be used to make additional
	/// model changes. It is provided as the correct time to make external fixups. For example,
	/// populate the task list after all model errors are in place.
	/// &lt;/summary&gt;
	/// &lt;param name="phase"&gt;An integer pulled from the
	/// phase enum passed to the deserialization manager constructor.&lt;/param&gt;
	/// &lt;param name="store"&gt;The context store&lt;/param&gt;
	void PhaseCompleted(int phase, Store store);
}
</PRE>
<P>A stock implementation of IDeserializationFixupListener is provided by the abstract DeserializationFixupListener base class. DeserializationFixupListener is a generic class that takes a single type parameter. The DeserializationFixupListener constructor requires a phase number. The user must override the ProcessElement method, and can optionally override the PhaseComplete method. Two sample implementations are shown here: </P>
<P><STRONG>ModelError Fixup Example</STRONG><BR><I>Watch for all elements that implement the IModelErrorOwner interface, defer to the elements to validate, then add elements to the task list (a non-ims entity) when the phase is completed. The type parameter for DeserializationFixupListener is specified as IModelErrorOwner, and the phase value passed to the base constructor is ORMDeserializationFixupPhase.ValidateErrors.</I> </P><PRE class=wiki>public abstract partial class ModelError
{
	/// &lt;summary&gt;
	/// Return a deserialization fixup listener. The listener
	/// validates all model errors and adds errors to the task provider.
	/// &lt;/summary&gt;
	[CLSCompliant(false)]
	public static IDeserializationFixupListener FixupListener
	{
		get
		{
			return new ModelErrorFixupListener();
		}
	}
	/// &lt;summary&gt;
	/// A listener class to validate and/or populate the ModelError
	/// collection on load, as well as populating the task list.
	/// &lt;/summary&gt;
	private class ModelErrorFixupListener : DeserializationFixupListener&lt;IModelErrorOwner&gt;
	{
		/// &lt;summary&gt;
		/// Create a new ModelErrorFixupListener
		/// &lt;/summary&gt;
		public ModelErrorFixupListener() : base((int)ORMDeserializationFixupPhase.ValidateErrors)
		{
		}
		/// &lt;summary&gt;
		/// Defer to the IModelErrorOwner.ValidateErrors method
		/// to fixup error problems.
		/// &lt;/summary&gt;
		/// &lt;param name="element"&gt;An IModelErrorOwner instance&lt;/param&gt;
		/// &lt;param name="store"&gt;The context store&lt;/param&gt;
		/// &lt;param name="notifyAdded"&gt;The listener to notify if elements are added during fixup&lt;/param&gt;
		protected override void ProcessElement(IModelErrorOwner element, Store store, INotifyElementAdded notifyAdded)
		{
			element.ValidateErrors(notifyAdded);
		}
		/// &lt;summary&gt;
		/// Add all model errors in the specific store to
		/// the task list.
		/// &lt;/summary&gt;
		/// &lt;param name="store"&gt;The context store&lt;/param&gt;
		protected override void PhaseCompleted(Store store)
		{
			IList errorLinks = store.ElementDirectory.GetElements(ModelHasError.MetaClassGuid);
			int linkCount = errorLinks.Count;
			for (int i = 0; i &lt; linkCount; ++i)
			{
				ModelHasError error = (ModelHasError)errorLinks[i];
				if (!error.IsRemoved)
				{
					ModelError.AddToTaskProvider(error);
				}
			}
		}
	}
}
</PRE>
<P><STRONG>ExternalFactConstraint Creation Example</STRONG><BR><I>Watch for all ExternalConstraint elements and ensure that the implicit ExternalFactConstraint element is added for each of these elements. The type parameter for DeserializationFixupListener is specified as ExternalConstraint, and the phase value passed to the base constructor is ORMDeserializationFixupPhase.AddImplicitElements. Note that the EnsureFactConstraintForRoleSet call defers to a private static function on the ExternalConstraint class so that code that runs both as a rule and during deserialization can be written once. The fixup listener gets the added responsibility of explicitly notifying the notifyAdded listener about newly added model elements. Also note that ExternalConstraint implements IModelErrorOwner, so these elements will be processed during both the AddImplicitElements and the ValidateErrors phase shown above.</I> </P><PRE class=wiki>public partial class ExternalConstraint : IModelErrorOwner
{
	/// &lt;summary&gt;
	/// Return a deserialization fixup listener. The listener
	/// adds the implicit InternalFactConstraint elements.
	/// &lt;/summary&gt;
	[CLSCompliant(false)]
	public static IDeserializationFixupListener FixupListener
	{
		get
		{
			return new ExternalConstraintFixupListener();
		}
	}
	/// &lt;summary&gt;
	/// Fixup listener implementation. Adds implicit ExternalFactConstraint relationships
	/// &lt;/summary&gt;
	private class ExternalConstraintFixupListener : DeserializationFixupListener&lt;ExternalConstraint&gt;
	{
		/// &lt;summary&gt;
		/// InternalFactConstraintFixupListener constructor
		/// &lt;/summary&gt;
		public ExternalConstraintFixupListener() : base((int)ORMDeserializationFixupPhase.AddImplicitElements)
		{
		}
		/// &lt;summary&gt;
		/// Process elements by added an InternalFactConstraint for
		/// each roleset
		/// &lt;/summary&gt;
		/// &lt;param name="element"&gt;An ExternalConstraint element&lt;/param&gt;
		/// &lt;param name="store"&gt;The context store&lt;/param&gt;
		/// &lt;param name="notifyAdded"&gt;The listener to notify if elements are added during fixup&lt;/param&gt;
		protected override void ProcessElement(ExternalConstraint element, Store store, INotifyElementAdded notifyAdded)
		{
			IList links = element.GetElementLinks(ExternalConstraintHasRoleSet.ExternalConstraintMetaRoleGuid);
			int linksCount = links.Count;
			for (int i = 0; i &lt; linksCount; ++i)
			{
				EnsureFactConstraintForRoleSet(links[i] as ExternalConstraintHasRoleSet);
				IList factLinks = element.GetElementLinks(ExternalFactConstraint.ExternalConstraintCollectionMetaRoleGuid);
				int factLinksCount = factLinks.Count;
				for (int j = 0; j &lt; factLinksCount; ++j)
				{
					// Notify that the link was added. Note that we set
					// addLinks to true here because we expect ExternalRoleConstraint
					// links to be attached to each ExternalFactConstraint
					notifyAdded.ElementAdded(factLinks[j] as ModelElement, true);
				}
			}
		}
	}
}
</PRE>
<H3 id=AttachingIDeserializationFixupListenerinstances>Attaching IDeserializationFixupListener instances </H3>
<P>The DeserializationFixupManager needs a list of phases and set of listeners that recognize those phases. The phases are provided via an enum type that is retrieved through the virtual ORMDesignerDocData.DeserializationFixupPhaseType property. The default implementation for this property returns <I>typeof(ORMDeserializationFixupPhase)</I>. The phase values in this enum are liberally spaced (100,200,etc) to leave plenty of room for additional phases. Once the core ORM2 model is shipped, the values of the existing phases should not be modified because derived model implementations can add additional fixup phases by defining their own enums based off the original values. </P>
<P>ORMDesignerDocData also provides a virtual DeserializationFixupListeners method to retrieve the listeners. The implementation of these two methods is shown here: </P><PRE class=wiki>public partial class ORMDesignerDocData : ModelingDocData
{
	/// &lt;summary&gt;
	/// Retrieve the phase enum to use with the
	/// deserialization manager.
	/// &lt;/summary&gt;
	protected virtual Type DeserializationFixupPhaseType
	{
		get
		{
			return typeof(ORMDeserializationFixupPhase);
		}
	}
	/// &lt;summary&gt;
	/// Return a set of listeners for deserialization fixup
	/// &lt;/summary&gt;
	protected virtual IEnumerable&lt;IDeserializationFixupListener&gt; DeserializationFixupListeners
	{
		get
		{
			foreach (object subStore in Store.SubStores.Values)
			{
				IDeserializationFixupListenerProvider provider = subStore as IDeserializationFixupListenerProvider;
				if (provider != null)
				{
					foreach (IDeserializationFixupListener listener in provider.DeserializationFixupListenerCollection)
					{
						yield return listener;
					}
				}
			}
		}
	}
}
</PRE>
<P>The easiest and recommended way to add a fix up listener is to extend the list of listeners in the DeserializationFixupListenerCollection properties in the ORMMetaModel and ORMShapeModel classes. As demonstrated in the ORMDocData.DeserializationFixupListeners code snippet above, these methods (that implement IDeserializationFixupListenerProvider.DeserializationFixupListenerCollection) can be retrieved at any time after the models are loaded via the Store.SubStores property. </P>
<P>As shown below, adding listeners can easily be done by simply adding a 'yield return' line to the existing implementation. You can see the ExternalConstraint.FixupListener and ModelError.FixupListener elements shown earlier on this page attached in the ORMMetaModel code shown here. The order of the returned elements does not matter. They are automatically sorted based on the value of the fixup phase they are associated with. </P><PRE class=wiki>public partial class ORMMetaModel
{
	/// &lt;summary&gt;
	/// Implements IDeserializationFixupListenerProvider.DeserializationFixupListenerCollection
	/// &lt;/summary&gt;
	protected static IEnumerable&lt;IDeserializationFixupListener&gt; DeserializationFixupListenerCollection
	{
		get
		{
			yield return MultiColumnExternalConstraint.FixupListener;
			yield return SingleColumnExternalConstraint.FixupListener;
			yield return NamedElementDictionary.GetFixupListener((int)ORMDeserializationFixupPhase.AddImplicitElements);
			yield return ModelError.FixupListener;
			yield return ReferenceMode.FixupListener;
			yield return ORMModel.DataTypesFixupListener;
		}
	}
}
</PRE>
<H2 id=Summary>Summary</H2>
<P>Deserialization fixup is a process that must be done to reach an internally consistent model state on load. The DeserializationFixupManager class and associated interfaces, stock implementations, and patterns offer an easy mechanism for adding fixup listeners. Project developers should consider load implications as they write rules, and especially as they create model errors. </P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{95651A90-31C0-415B-BA78-E52D5FE3F05C}" Name="HowToAttachRules" Title="How To Attach Rules" ContentsTitle="How To Attach Rules" Status="Waiting Review" CreatedOn="15-02-2007 15:01:20" ModifiedOn="16-02-2007 14:45:17" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="False" HelpContextIDs="" Category="{69564419-AA92-4F5A-AEC7-E3054C4CA000}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=wikipage>
<DIV id=searchable>
<H1 id=HowdoIattachmodelrules>How do I attach model rules? </H1>
<H2 id=Background>Background </H2>
<P>Model rules marked witha <I>RuleOn</I> attribute (from the Microsoft.VisualStudio.Modeling namespace) attached automatically in early preview releases of the Whitehorse technology stack (the set of components behind the DSLTools framework). The presence of the RuleOn attribute was originally discovered by reflecting on all classes in an assembly to look for this and other attributes. However, reflecting all types in an assembly has a number of negative performance implications and is no longer used to discover the domain metamodel. The core domain model generators now spit code that provides a restricted list of types to reflect on. This is sufficient for the reflection requires of the core object model. However, the designer is unaware of rule classes, so these need to be attached separately. </P>
<P>There is no way to provide a zero-impact solution to this problem. The current DSLTools recommended approach is to use their helper classes to reflect on one of your classes, which has a list of fields with all of the rule classes. However, there is an immediate problem with this approach and our code base: private rule classes are not supported. Rule classes are inherently good candidates for being private nested classes: Rule classes are never created or called directly by user code, there is no way to create a more-derived rule to replace an existing rule, code is often shared between multiple rules enforcing the same object model conditions, and the shared code is so context-sensitive that it is not appropriate for use outside of the heavily restricted rule context. In other words, making rule classes and all of the supporting code public in the object model is almost always a questionable design. The alternatives are to use <I>internal</I> methods and classes, or use a rule binding mechanism that supports private nested classes (like the original system). I consider any use of <I>internal</I> inherently evil in any system that is open for extensibility or may possibly be refactored in the future, so this was not considered appropriate for widespread use in the ORM codebase. </P>
<P>The ORM project uses a different approach for attaching rules, namely a list of rule classes in an xml file that generate the code necessary to attach the rules to the object model. The generator used is sensitive to nested classes and will spit the necessary code to correctly bind to nested types. </P>
<H2 id=Stepstoattachanewrule>Steps to attach a new rule </H2>
<OL>
<LI>Find the <I>*.AttachRules.xml</I> file for the object model you're working in. For the core model, this is the ORMCore.AttachRules.xml file. 
<LI>Add a new rule to the list of existing rules by adding a new Rule element with the class attribute set to the name of your class. 
<LI>The class name must start with the name of the public class, followed by any nested classes. A period (.) is used as a separator. 
<LI>The namespace attribute can be used if the class is in a namespace different than the meta model it is being attached to. However, use of this attribute should be exception, not the rule. </LI></OL>
<P>Saving the *.AttachRules.xml file (or simply moving to another editor) will regenerate the C# code necessary for rule attachment. <STRONG>Important:</STRONG> if you get an assert when the generated code runs, then one or more of your class names were not entered correctly and the meta model will fail to load. Use the debugger to look for null entries in the retVal parameter to discover where you made a mistake. </P>
<H2 id=Stepstoattachanewrulefile>Steps to attach a new rule file </H2>
<P>If you are creating an extension model and do no yet have a rule file, then you need to do the following: </P>
<OL>
<LI>Add a new xml file based on the ORMCore.AttachRules.xml. The root node should be called Rules and be in the <A class=ext-link href=""><SPAN class=icon>http://schemas.neumont.edu/ORM/SDK/AttachRulesGenerator</SPAN></A> namespace defined in the AttachRulesGenerator.xsd schema. 
<LI>If your project already has a Plix.xml file in the root project directory, then edit it. If not, create a new one following the pattern in the sample extension Plix.xml file. 
<LI>Following the sample, use the sourceFile element to link a data file (specified in the <I>file</I> attribute) to a transform file (specified in the <I>transformFile</I> attribute). All paths are relative to the plix.xml file. Save the plix.xml changes. 
<LI>Select your new attach rules xml file in the SolutionExplorer and set the 'Custom Tool' property in the Properties Window to 'NUPlixLoader'. This will generate the .cs file. If you do not see a new .cs file under your xml file, toggle the <I>Show All Files</I> button in the Solution Explorer toolbar. </LI></OL>
<P>The schema for attach rules xml files is described below (see How to use XSDtoHTML.xslt to regenerate the following html). </P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{D68240C2-3364-447A-BA68-4947562C5B38}" Name="SerializationExtensions" Title="Serialization Extensions" ContentsTitle="Serialization Extensions" Status="Waiting Review" CreatedOn="15-02-2007 15:05:07" ModifiedOn="16-02-2007 14:45:19" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="False" HelpContextIDs="" Category="{69564419-AA92-4F5A-AEC7-E3054C4CA000}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=wikipage>
<DIV id=searchable>
<H1 id=HowdoIchangetheserializationformatforamodelelement>How do I change the serialization format for a model element?</H1>
<P>The xml corresponding to an object in the ORM2 object model can be controlled by implementing the IORMCustomSerializedMetaModel and IORMCustomSerializedElement interfaces. These interfaces allow you to omit, rename, reorder, or remove elements from the serialized files. However, there is no need to implement these interfaces explicitly. The interfaces are generated automatically in responses to changes to serialization settings files included with individual object models. There are currently two serialization files, one for the core model (ORMCore.SerializationExtensions.xml) and one for the shape model (ORMShape.SerializationExtensions.xml). Changes to these files are translated to code via the SerializationExtensions.xslt file. The transform file is attached to the data files via settings in the Plix.xml file. The schema for serialization extension xml files is described below (see How to use XSDtoHTML.xslt to regenerate the following html). </P>
<P>Any changes to the *.<A href="SerializationExtensions.html">SerializationExtensions</A>.xml file should have corresponding changes in the ORM2Core.xsd or ORM2Diagram.xsd schema files. </P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{ADBCA908-F2D2-484F-AAA7-72BB03649871}" Name="HowToUseNamedElementDictionary" Title="How To Use Named Element Dictionary" ContentsTitle="How To Use Named Element Dictionary" Status="Waiting Review" CreatedOn="15-02-2007 15:37:04" ModifiedOn="16-02-2007 14:45:23" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="False" HelpContextIDs="" Category="{69564419-AA92-4F5A-AEC7-E3054C4CA000}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=wikipage>
<DIV id=searchable>
<H1 id=HowtousetheNamedElementDictionary>How to use the NamedElementDictionary </H1>
<P>The NamedElementDictionary is designed to create a dictionary on a set of NamedElement-derived objects with the Name property as the dictionary key. The dictionary handles providing initial names for newly added objects, handles or blocks duplicates depending on the transaction context, and is designed to work with minimal code. The developer implements simple interfaces on objects that participate in the aggregating collection and the provided NamedElementDictionary implementation does the rest. The named element dictionary has three parts: </P>
<UL>
<LI><STRONG>The Parent</STRONG> (implements INamedElementDictionaryParent) owns the dictionary. The dictionary is any object that implements the INamedElementDictionary interface. Generally, this is done by deriving from the NamedElementDictionary class, which is a stock implementation of the INamedElementDictionary interface. </LI>
<LI><STRONG>The Child</STRONG> (implements INamedElementDictionaryChild) is an element in the dictionary. The element can be located in the model via a name lookup in the dictionary. </LI>
<LI><STRONG>The Link</STRONG> between them. This is the ElementLink-derived object that is generated when a relationship is specified on an IMS diagram. </LI></UL>
<P>The full set of interfaces and the standard NamedElementDictionary implementation can be found in ORMModel\Framework\NamedElementDictionary.cs </P>
<H2 id=ImplementingtheParentLinkandParticipantinterfaces>Implementing the Parent, Link, and Participant interfaces</H2>
<P>The code snippets shown here demonstrate a simple implementation of the three interfaces. The participant and child implementations are never any more complicated than this, but the parent implementation gets more complicated when custom error handling is introduced to the dictionary. The sample shown creates a dictionary of ObjectType elements within the aggregating ORMModel. <STRONG>INamedElementDictionaryParent Sample</STRONG><BR><I>Create a dictionary on the aggregating object. One parent can support more than one type of dictionary, as shown in the full source at <A class=source href="https://projects.neumont.edu/orm2/browser/trunk/ORMModel/ObjectModel/ORMModel.cs">ORMModel\ObjectModel\ORMModel.cs</A></I> </P><PRE class=wiki>namespace Northface.Tools.ORM.ObjectModel
{
	public partial class ORMModel : INamedElementDictionaryParent
	{
		private NamedElementDictionary myObjectTypesDictionary = null;

		/// &lt;summary&gt;
		/// Returns the Object Types Dictionary
		/// &lt;/summary&gt;
		/// &lt;value&gt;The model ObjectTypesDictionary &lt;/value&gt;
		public INamedElementDictionary ObjectTypesDictionary
		{
			get
			{
				return myObjectTypesDictionary;
			}
		}
		INamedElementDictionary INamedElementDictionaryParent.GetCounterpartRoleDictionary(Guid parentMetaRoleGuid, Guid childMetaRoleGuid)
		{
			return GetCounterpartRoleDictionary(parentMetaRoleGuid, childMetaRoleGuid);
		}
		/// &lt;summary&gt;
		/// Implements INamedElementDictionaryParent.GetCounterpartRoleDictionary
		/// &lt;/summary&gt;
		/// &lt;param name="parentMetaRoleGuid"&gt;Guid&lt;/param&gt;
		/// &lt;param name="childMetaRoleGuid"&gt;Guid&lt;/param&gt;
		/// &lt;returns&gt;Dictionary for object types&lt;/returns&gt;
		public INamedElementDictionary GetCounterpartRoleDictionary(Guid parentMetaRoleGuid, Guid childMetaRoleGuid)
		{
			if (parentMetaRoleGuid == ModelHasObjectType.ModelMetaRoleGuid)
			{
				if (myObjectTypesDictionary == null)
				{
					myObjectTypesDictionary = new NamedElementDictionary();
				}
				return myObjectTypesDictionary;
			}
			return null;
		}
		object INamedElementDictionaryParent.GetAllowDuplicateNamesContextKey(Guid parentMetaRoleGuid, Guid childMetaRoleGuid)
		{
			return GetAllowDuplicateNamesContextKey(parentMetaRoleGuid, childMetaRoleGuid);
		}
		/// &lt;summary&gt;
		/// Implements INamedElementDictionaryParent.GetAllowDuplicateNamesContextKey
		/// &lt;/summary&gt;
		/// &lt;param name="parentMetaRoleGuid"&gt;Guid&lt;/param&gt;
		/// &lt;param name="childMetaRoleGuid"&gt;Guid&lt;/param&gt;
		/// &lt;returns&gt;&lt;/returns&gt;
		protected object GetAllowDuplicateNamesContextKey(Guid parentMetaRoleGuid, Guid childMetaRoleGuid)
		{
			// Use the default settings (allow duplicates during load time only)
			return null;
		}
	}
}
</PRE>
<P><STRONG>INamedElementDictionaryChild Sample</STRONG><BR><I>Mark the child element as participating in a dictionary on a parent reachable by following the specific element link through the object model</I> </P><PRE class=wiki>namespace Northface.Tools.ORM.ObjectModel
{
	public partial class ObjectType : INamedElementDictionaryChild
	{
		void INamedElementDictionaryChild.GetRoleGuids(out Guid parentMetaRoleGuid, out Guid childMetaRoleGuid)
		{
			GetRoleGuids(out parentMetaRoleGuid, out childMetaRoleGuid);
		}
		/// &lt;summary&gt;
		/// Implementation of INamedElementDictionaryChild.GetRoleGuids. Identifies
		/// this child as participating in the 'ModelHasObjectType' naming set.
		/// &lt;/summary&gt;
		/// &lt;param name="parentMetaRoleGuid"&gt;Guid&lt;/param&gt;
		/// &lt;param name="childMetaRoleGuid"&gt;Guid&lt;/param&gt;
		protected void GetRoleGuids(out Guid parentMetaRoleGuid, out Guid childMetaRoleGuid)
		{
			parentMetaRoleGuid = ModelHasObjectType.ModelMetaRoleGuid;
			childMetaRoleGuid = ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid;
		}
	}
}
</PRE>
<P><STRONG>INamedElementDictionaryLink Sample</STRONG><BR><I>Mark the link object as the defining relationship for a named element dictionary. The interface is implemented by deferring to the generated role properties associated with the link.</I> </P><PRE class=wiki>namespace Northface.Tools.ORM.ObjectModel
{
	public partial class ModelHasObjectType : INamedElementDictionaryLink
	{
		INamedElementDictionaryParent INamedElementDictionaryLink.ParentRolePlayer
		{
			get { return ParentRolePlayer; }
		}
		/// &lt;summary&gt;
		/// Implements INamedElementDictionaryLink.ParentRolePlayer
		/// Returns Model.
		/// &lt;/summary&gt;
		protected INamedElementDictionaryParent ParentRolePlayer
		{
			get { return Model; }
		}
		INamedElementDictionaryChild INamedElementDictionaryLink.ChildRolePlayer
		{
			get { return ChildRolePlayer; }
		}
		/// &lt;summary&gt;
		/// Implements INamedElementDictionaryLink.ChildRolePlayer
		/// Returns ObjectTypeCollection.
		/// &lt;/summary&gt;
		protected INamedElementDictionaryChild ChildRolePlayer
		{
			get { return ObjectTypeCollection; }
		}
	}
}
</PRE>
<H2 id=IntegratingtheDictionary>Integrating the Dictionary</H2>
<P>The stock NamedElementDictionary implementation relies on IMS rules and events to maintain the state of a given store. Both the rules and the events need help from the integrating project to work correctly. NamedElementDictionary events must be attached to a store by calling <I>NamedElementDictionary.AttachEventHandlers(Store)</I> from the ModelingDocData.AddPostLoadModelingEventHandlers override, and detached by calling <I>NamedElementDictionary.DetachEventHandlers(Store)</I> from the ModelingDocData.RemoveModelingEventHandlers override. In addition, initializing the dictionaries at load time through <A href="Deserialization fixup.html">deserialization fixup</A> must be performed by ensuring <I>NamedElementDictionary.GetFixupListener((int)ORMDeserializationFixupPhase.AddImplicitElements)</I> is included in the fixup list. Note that the fixup phase you use will be dependent on your model, but should fall under the implicit element category discussed with deserialization fixup. </P>
<P>Three rules must also be explicitly loaded into the store. You will generally have rules loaded along with one or more other object models, which is done by overriding the AllMetaModelTypes method for the meta model object. The core ORM meta model generates this method with data from the ORMCore.AttachRules.xml file, which is attached to the AttachRulesGenerator.xslt transform file. The following three lines of Xml (shown with the snippet of generated code) indicate the rules to attach. </P><PRE class=wiki>&lt;!-- Xml data --&gt;
&lt;arg:Rule class="NamedElementDictionary.ElementLinkAddedRule" namespace="Northface.Tools.ORM.Framework"/&gt;
&lt;arg:Rule class="NamedElementDictionary.ElementLinkRemovedRule" namespace="Northface.Tools.ORM.Framework"/&gt;
&lt;arg:Rule class="NamedElementDictionary.NamedElementChangedRule" namespace="Northface.Tools.ORM.Framework"/&gt;

// Generated snippet
typeof(Northface.Tools.ORM.Framework.NamedElementDictionary).GetNestedType("ElementLinkAddedRule", (BindingFlags.Public | BindingFlags.NonPublic)),
typeof(Northface.Tools.ORM.Framework.NamedElementDictionary).GetNestedType("ElementLinkRemovedRule", (BindingFlags.Public | BindingFlags.NonPublic)),
typeof(Northface.Tools.ORM.Framework.NamedElementDictionary).GetNestedType("NamedElementChangedRule", (BindingFlags.Public | BindingFlags.NonPublic)),
</PRE>
<H2 id=DuplicateNameHandling>Duplicate Name Handling </H2>
<P>One of the primary roles of the NamedElementDictionary is to determine how to handle duplicate names within the set. In many cases, a duplicate name is considered a model error, so the dictionary should generally throw an exception. However, if a duplicate already exists in a loaded model file, the editor should be able to load the file and report the error, so the dictionary should not throw during load. Tracking duplicates instead of blindly throwing is a powerful and fundamental feature of NamedElementDictionary. The INamedElementDictionary.GetElement(string elementName) method returns a LocatedElement structure that has two primary accessor properties, SingleElement and MultipleElements. MultipleElements, which returns a collection, will only be set if more than one element is associated with the name. However, for the simple and prevalent case where the elements are uniquely named, only the SingleElement property will return a value. </P>
<H3 id=Controllingwhenduplicatesareallowed>Controlling when duplicates are allowed </H3>
<P>The action to take when a duplicate element is encountered is explicitly controllable via the <I>INamedElementDictionaryParent.GetAllowDuplicateNamesContextKey</I> method. Returning null from this method tells NamedElementDictionary to use the default behavior, which is to allow duplicates if the ModelingDocData.LoadingKey is present in the ContextInfo of the current top-level transaction. GetAllowDuplicateNamesContextKey can also return the NamedElementDictionary.AllowDuplicateNamesKey/BlockDuplicateNamesKey to explicitly allow/block duplicate names in the dictionary without checking the current transaction context. Any other key value returned will be tested for existence in the ContextInfo of the current top-level transaction. Existence of the key element allows duplicates. </P>
<H3 id=Respondingtoduplicateelements>Responding to duplicate elements </H3>
<P>There are two actions that can be taken in response to a duplicate element being added, throw or accept the duplicate and track it. The exception used to throw can be set by an override of the <I>NamedElementDictionary.RaiseDuplicateNameException(NamedElement element, string requestedName)</I> method. This method is expected throw instead of returning, and should contain localized exception text (the default NamedElementDictionary implementation is not not localized and should not be used). </P>
<P>The alternate response to be take when a duplicate element is added is to store the duplicate in a collection and allow the duplicate. This process is managed by the IDuplicateNameCollectionManager interface. A default implementation of this interface is provided, but custom implementations can be passed to the NamedElementDictionary constructor. You will need a custom IDuplicateNameCollectionManager implementation if you want to represent duplicate names as model errors that are stored as part of the model. For example, in the core ORMModel, ObjectType is related to an ObjectTypeDuplicateNameError object via the generated DuplicateNameError role property. One ObjectTypeDuplicateNameError instance can reference many ObjectType instances, thus forming a collection of elements via the generated ObjectTypeCollection. Using a collection modeled with the store instead of an external collection (as with the default implementation) allows rich integration of NamedElementDictionary-controlled duplicate errors into the model. </P>
<P><STRONG>Full NamedElementDictionary Extension</STRONG><BR><I>A NamedElementDictionary-derived class that includes a custom exception, custom naming for new elements, and custom IDuplicateNameCollectionManager handling. Note the careful handling of both during transaction and after transaction handling (after transaction occurs during undo/redo operations), as well as the INotifyElementAdded callbacks required for <A href="Deserialization fixup.html">deserialization fixup</A>. Note that the INamedElementDictionaryParent implementation shown earlier creates this class in favor of a raw NamedElementDictionary.</I> </P><PRE class=wiki>namespace Northface.Tools.ORM.ObjectModel
{
	public partial class ORMModel
	{
		/// &lt;summary&gt;
		/// Dictionary used to set the initial names of object and value types and to
		/// generate model validation errors and exceptions for duplicate
		/// element names.
		/// &lt;/summary&gt;
		[CLSCompliant(false)]
		protected class ObjectTypeNamedElementDictionary : NamedElementDictionary
		{
			private class DuplicateNameManager : IDuplicateNameCollectionManager
			{
				#region IDuplicateNameCollectionManager Implementation
				ICollection IDuplicateNameCollectionManager.OnDuplicateElementAdded(ICollection elementCollection, NamedElement element, bool afterTransaction, INotifyElementAdded notifyAdded)
				{
					ObjectType objectType = (ObjectType)element;
					if (afterTransaction)
					{
						// We're not in a transaction, but the object model will be in
						// the state we need it because we put it there during a transaction.
						// Just return the collection from the current state of the object model.
						ObjectTypeDuplicateNameError error = objectType.DuplicateNameError;
						return (error != null) ? error.ObjectTypeCollection : null;
					}
					else
					{
						// Modify the object model to add the error.
						if (elementCollection == null)
						{
							ObjectTypeDuplicateNameError error = null;
							if (notifyAdded != null)
							{
								// During deserialization fixup, an error
								// may already be attached to the object. Track
								// it down and verify that it is a legitimate error.
								// If it is not legitimate, then generate a new one.
								error = objectType.DuplicateNameError;
								if (error != null &amp;&amp; !error.ValidateDuplicates(objectType))
								{
									error = null;
								}
							}
							if (error == null)
							{
								error = ObjectTypeDuplicateNameError.CreateObjectTypeDuplicateNameError(objectType.Store);
								objectType.DuplicateNameError = error;
								error.Model = objectType.Model;
								error.GenerateErrorText();
								if (notifyAdded != null)
								{
									notifyAdded.ElementAdded(error, true);
								}
							}
							elementCollection = error.ObjectTypeCollection;
						}
						else
						{
							// During deserialization fixup (notifyAdded != null), we need
							// to make sure that the element is not already in the collection
							ObjectTypeMoveableCollection typedCollection = (ObjectTypeMoveableCollection)elementCollection;
							if (notifyAdded == null || !typedCollection.Contains(objectType))
							{
								typedCollection.Add(objectType);
							}
						}
						return elementCollection;
					}
				}
				ICollection IDuplicateNameCollectionManager.OnDuplicateElementRemoved(ICollection elementCollection, NamedElement element, bool afterTransaction)
				{
					if (!afterTransaction)
					{
						// Just clear the error. A rule is used to remove the error
						// object itself when there is not longer a duplicate.
						((ObjectType)element).DuplicateNameError = null;
					}
					return elementCollection;
				}
				#endregion // IDuplicateNameCollectionManager Implementation
			}
			#region Constructors
			/// &lt;summary&gt;
			/// Default constructor for ObjectTypeNamedElementDictionary
			/// &lt;/summary&gt;
			public ObjectTypeNamedElementDictionary() : base(new DuplicateNameManager())
			{
			}
			#endregion // Constructors
			#region Base overrides
			/// &lt;summary&gt;
			/// Provide different base names for entity types and value types. The
			/// returned named pattern can contain a {0} indicating the localized
			/// location of the trailing number to appeand to ensure the element
			/// has a unique name. The number is appended on the end by default.
			/// &lt;/summary&gt;
			/// &lt;param name="element"&gt;The element to test&lt;/param&gt;
			/// &lt;returns&gt;A base name string pattern&lt;/returns&gt;
			protected override string GetRootNamePattern(NamedElement element)
			{
				ObjectType objectType = (ObjectType)element;
				return objectType.IsValueType ? ResourceStrings.ValueTypeDefaultNamePattern : ResourceStrings.EntityTypeDefaultNamePattern;
			}
			/// &lt;summary&gt;
			/// Raise an exception with text specific to a name in a model
			/// &lt;/summary&gt;
			/// &lt;param name="element"&gt;Element we're attempting to name&lt;/param&gt;
			/// &lt;param name="requestedName"&gt;The in-use requested name&lt;/param&gt;
			protected override void RaiseDuplicateNameException(NamedElement element, string requestedName)
			{
				throw new InvalidOperationException(string.Format(ResourceStrings.ModelExceptionNameAlreadyUsedByModel, requestedName));
			}
			#endregion // Base overrides
		}
	}
}
</PRE>
<H2 id=Summary>Summary </H2>
<P>The NamedElementDictionary provides a powerful, flexible, and extensible mechanism for associating multiple elements into a single named set. Parent, Child and Link elements are easily specified by implementing simple interfaces on the objects. All of the extensive rule and event work necessary to enable this feature are handled automatically for all relationships. While the implementation is non-trivial, it is also possible to directly integrate modeled collections of like-named items into the dictionary, allowing for a very flexible name tracking mechanism that can selectively allow duplicate names. </P>
<P>Note that the implementation could easily be modified to key off properties other than NamedElement.Name, but there have been no requirements for this support. Some of this functionality may also be redundant if the Whitehorse team adds direct support for Indexes into the meta model. However, the ability to allow duplicate names may be very difficult to support with an indexing mechanism. </P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{245D00D9-8259-4DB6-B229-A233CCD9D900}" Name="HowToAddADataType" Title="How To Add A Data Type" ContentsTitle="How To Add A Data Type" Status="Waiting Review" CreatedOn="15-02-2007 15:38:40" ModifiedOn="16-02-2007 14:45:27" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="False" HelpContextIDs="" Category="{69564419-AA92-4F5A-AEC7-E3054C4CA000}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=wikipage>
<DIV id=searchable>
<H1 id=HowdoIaddaportabledatatypetothemodel>How do I add a portable data type to the model?</H1>
<P>If you need a portable data type added to the model, e.g. text, follow the steps below: </P>
<H2 id=AddclasstoDMD>Add class to DMD</H2>
<OL>
<LI>Open ObjectModel\ORMCore.dmd</LI>
<LI>Use the Domain Model Designer "Class" toolbox tool to add a class to the model (at this point, it won't be connected to anything). </LI>
<LI>Click on the new class object (added in previous step) and hit F2 to edit it's name. </LI>
<LI>Using the Domain Model Designer "Inheritance" toolbox tool, click on the ORMModel.DataType class, scroll to your new class and click on it. This will make your new class inherit from ORMModel.DataType. </LI>
<LI>Right click on ORMModel.DataType.[your new class name] and select "Bring Definition Here" </LI>
<LI>Save the DMD file. </LI></OL>
<H2 id=RegeneratetheORMCore.dmd.mdfomtfile>Regenerate the ORMCore.dmd.mdfomt file </H2>
<OL>
<LI>Right click on ORMModel\ObjectModel\ORMCore.dmd.mdfomt and select "Run Custom Tool" </LI></OL>
<H2 id=Addlocalizedstrings>Add localized strings </H2>
<OL>
<LI>Open ObjectModel\ORMCore.dmd.resx </LI>
<LI>Add an entry named "Northface.Tools.ORM.ObjectModel.DataType.PortableDataType.[new type name].Text" </LI>
<LI>Give the new entry of value that represents the name of the new data type as it will be shown in the datatype properties drop-down. </LI>
<LI>Save the .resx file. </LI>
<LI>Open Resources\ResourceStrings.cs </LI>
<LI>Add a private resource id for the resource to the region named "Private resource ids". Example: <PRE class=wiki>private const string PortableDataTypeUnspecifiedText_Id = "Northface.Tools.ORM.ObjectModel.DataType.PortableDataType.Unspecified.Text";
</PRE></LI>
<LI>Add a public accessor for the private resource id to the region named "Public accessor properties". Example: <PRE class=wiki>/// &lt;summary&gt;
/// The descriptive text for a PortableDataType of Unspecified.
/// &lt;/summary&gt;
public static string PortableDataTypeUnspecifiedText
{
	get
	{
		return GetString(ResourceManagers.ObjectModel, PortableDataTypeUnspecifiedText_Id);
	}
}
</PRE></LI>
<LI>Save the file. </LI></OL>
<H2 id=Addthedatatypesclassandaddittothefixuplistener>Add the data type's class and add it to the fixup listener </H2>
<OL>
<LI>Open ObjectModel\DataType.cs </LI>
<LI>Add the name of the new data type to the PortableDataType enum <I>before</I> the UserDefined value. UserDefined must always be the last value in the list. </LI>
<LI>Add a public partial class for the new data type which overrides required methods inherited from the abstract DataType class. </LI>
<LI>Add a case for the new PortableDataType to the switch statement in IDeserializationFixupListener.PhaseCompleted(). Example: <PRE class=wiki>case PortableDataType.Unspecified:
	newType = typeof(UnspecifiedDataType);
	break;
</PRE></LI>
<LI>Compile and run. </LI></OL></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{E400CF7C-9459-44D3-B10F-9D707053F7EF}" Name="HowToAddCommandToMenu" Title="How To Add Command To Menu" ContentsTitle="How To Add Command To Menu" Status="In Progress" CreatedOn="15-02-2007 15:41:08" ModifiedOn="16-02-2007 14:45:30" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="False" HelpContextIDs="" Category="{69564419-AA92-4F5A-AEC7-E3054C4CA000}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=wikipage>
<DIV id=searchable>
<H1 id=AddingaCommandtoaMenu>Adding a Command to a Menu <A class=anchor title="Link to this section" href="https://projects.neumont.edu/orm2/wiki/HowToAddCommandToMenu#AddingaCommandtoaMenu">¶</A></H1>
<UL>
<LI>Open the SatDll/PkgCmdID.h file 
<UL>
<LI>add a new define for your command, just use the next id in the sequence. </LI>
<LI>If you are going to add a new command group also define that in this file. </LI></UL></LI>
<LI>Now open the SatDll/PkgCmd.ctc file 
<UL>
<LI>If you are adding a group find the NEWGROUPS_BEGIN section and create a new line that mimics existing ones but using the command id that you defined in PkgCmdID.h </LI>
<LI>Find the BUTTONS_BEGIN section and mimic existing commands but use the ID's you created, in the case of the group use an existing one if you did not define a new one. </LI></UL></LI>
<LI>Open the file ORMModel/Shell/ORMCommandSet.cs 
<UL>
<LI>At the bottom add a const with the name and id you created for your command in SatDll/PkgCmdID.h </LI>
<LI>Just above that there a number of CommandID fields defined, create a new one for your command. </LI>
<LI>In the constructor are a number of menu commands being created, you will need to make one for your command. 
<UL>
<LI>Commands that will always be visible should use the MenuCommand object. </LI>
<LI>Commands that need to change status based on selection or other state should use the DynamicStatusMenuCommand. </LI></UL></LI>
<LI>For either menu type you will need to create a method that can be used as the target of an EventHandler delegate to handle the menu click event, this method's name will need to be replaced in the creation of the menu item. This is where you would put the code to execute the desired behavior of your menu item. </LI>
<LI>For dynamic menus you will also need to make and event handler method for the status event. </LI></UL></LI></UL>
<H3 id=Thefollowingonlyappliestodynamicmenus.>The following only applies to dynamic menus. <A class=anchor title="Link to this section" href="https://projects.neumont.edu/orm2/wiki/HowToAddCommandToMenu#Thefollowingonlyappliestodynamicmenus.">¶</A></H3>
<UL>
<LI>Open ORMModel/Shell/ORMDocView.cs 
<UL>
<LI>At the top is the ORMDesignerCommands enum, this is a flag, so only values that are a power of 2 should be entered. You will need to create a new value for your command. </LI>
<LI>Now go to the SetCommandStatus method, in here you can test what is selected and set the flag to control whether your command will be enabled or visible. </LI></UL></LI></UL>
<P>Now the menu should be ready for consumption. After building the application use the install.bat to make it available to the experimental branch. You will then need to run setup on this branch by executing: </P><PRE class=wiki> devenv /Setup /RootSuffix Exp
</PRE>
<P>from a Visual Studio .NET 2005 command prompt. </P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{B78D3997-1D8D-40EC-9DCA-83EB637CC04B}" Name="HowToAddOptionPageOptions" Title="How To Add Option Page Options" ContentsTitle="How To Add Option Page Options" Status="In Progress" CreatedOn="15-02-2007 15:42:06" ModifiedOn="16-02-2007 14:45:33" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="False" HelpContextIDs="" Category="{69564419-AA92-4F5A-AEC7-E3054C4CA000}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=wikipage>
<DIV id=searchable>
<H1 id=HowdoIaddanOptiontotheToolsOptionpage>How do I add an Option to the Tools Option page? <A class=anchor title="Link to this section" href="https://projects.neumont.edu/orm2/wiki/HowToAddOptionPageOptions#HowdoIaddanOptiontotheToolsOptionpage">¶</A></H1>
<P>If you need a configuration option added to the tools options page, e.g. mandatory role dot placement, follow the steps below (see Changeset <A class=changeset title="Adding option to ToolsOptions page for displaying role names on diagram" href="https://projects.neumont.edu/orm2/changeset/14">[14]</A>): </P>
<H2 id=LocalizeStrings>Localize Strings <A class=anchor title="Link to this section" href="https://projects.neumont.edu/orm2/wiki/HowToAddOptionPageOptions#LocalizeStrings">¶</A></H2>
<OL>
<LI>Open <A class=source href="https://projects.neumont.edu/orm2/browser/trunk/ORMModel/ShapeModel/ORMDiagram.resx">ORMModel\ShapeModel\ORMDiagram.resx</A> (localization of strings) </LI>
<LI>Add a Name and Value (with Comment, of course) for the display name of the option (its label) and a description of that option to appear at the bottom of the tools options page </LI></OL>
<TABLE class=wiki>
<TBODY>
<TR>
<TD><STRONG>Name</STRONG></TD>
<TD><STRONG>Value</STRONG></TD>
<TD><STRONG>Comment </STRONG></TD></TR>
<TR>
<TD>OptionsPage.Property.RoleNameDisplay.DisplayName</TD>
<TD>Display Role Names</TD>
<TD>The display name for the Display Role Names option. </TD></TR>
<TR>
<TD>OptionsPage.Property.RoleNameDisplay.Description</TD>
<TD>Object Types can have Role Names associated with them. This options turns the display of role names On or Off.</TD>
<TD>The description for the Display Role Names option. </TD></TR></TBODY></TABLE>
<H2 id=MapLocalizedStrings>Map Localized Strings <A class=anchor title="Link to this section" href="https://projects.neumont.edu/orm2/wiki/HowToAddOptionPageOptions#MapLocalizedStrings">¶</A></H2>
<OL>
<LI>Open <A class=source href="https://projects.neumont.edu/orm2/browser/trunk/ORMModel/Resources/ResourceStrings.cs">ORMModel\Resources\ResourceStrings.cs</A> (localization mapping into a C# class) </LI>
<LI>Add a public resource ID to the <I>ResourceStrings</I> class <PRE class=wiki>/// &lt;summary&gt;
/// Description of the Role Name Display option
/// &lt;/summary&gt;
public const string OptionsPagePropertyRoleNameDisplayDescriptionId = "OptionsPage.Property.RoleNameDisplay.Description";
/// &lt;summary&gt;
/// Display Name of the Role Name Display option
/// &lt;/summary&gt;
public const string OptionsPagePropertyRoleNameDisplayDisplayNameId = "OptionsPage.Property.RoleNameDisplay.DisplayName";
</PRE></LI></OL>
<H2 id=WireUpOptionsinToolsOptionsDialog>Wire Up Options in ToolsOptions Dialog <A class=anchor title="Link to this section" href="https://projects.neumont.edu/orm2/wiki/HowToAddOptionPageOptions#WireUpOptionsinToolsOptionsDialog">¶</A></H2>
<OL>
<LI>Open <A class=source href="https://projects.neumont.edu/orm2/browser/trunk/ORMModel/Shell/OptionsPage.cs">ORMModel\Shell\OptionsPage.cs</A> </LI>
<LI>Create an <I>enum</I> with all of your possible options in the <I>Northface.Tools.ORM.Shell</I> namespace, not in the <I>OptionsPage</I> class. <PRE class=wiki>/// &lt;summary&gt;
/// Provide options for showing and hiding role names on object types
/// &lt;/summary&gt;
public enum RoleNameDisplay
{
	/// &lt;summary&gt;
	/// Show role names
	/// &lt;/summary&gt;
	On,
	/// &lt;summary&gt;
	/// Hide role names
	/// &lt;/summary&gt;
	Off,
}
</PRE></LI>
<LI>Add Fields. The default constant value should be used to initialize both the static and instance fields to support the first load of the page for the current user. <PRE class=wiki>private const RoleNameDisplay RoleNameDisplay_Default = RoleNameDisplay.On;
private static RoleNameDisplay myCurrentRoleNameDisplay = RoleNameDisplay_Default;
private RoleNameDisplay myRoleNameDisplay = RoleNameDisplay_Default;
</PRE></LI>
<LI>Add Properties. The attributes assign the localized strings to be used in the dialog window <PRE class=wiki>/// &lt;summary&gt;
/// Display of role names
/// &lt;/summary&gt;
[DefaultValue(RoleNameDisplay_Default)]
[LocalizedCategory(ResourceStrings.OptionsPageCategoryAppearanceId)]
[LocalizedDescription(ResourceStrings.OptionsPagePropertyRoleNameDisplayDescriptionId)]
[LocalizedDisplayName(ResourceStrings.OptionsPagePropertyRoleNameDisplayDisplayNameId)]
public RoleNameDisplay RoleNameDisplay
{
	get { return myRoleNameDisplay; }
	set { myRoleNameDisplay = value; }
}

/// &lt;summary&gt;
/// Current VS session-wide setting for RoleNameDisplay
/// &lt;/summary&gt;
public static RoleNameDisplay CurrentRoleNameDisplay
{
	get { return myCurrentRoleNameDisplay; }
}
</PRE></LI>
<LI>Update the <I>LoadSettingsFromStorage</I> method to set the current model settings to the cached values from the registry <PRE class=wiki>myCurrentRoleNameDisplay = myRoleNameDisplay;
</PRE></LI>
<LI>Update the <I>OnActivate</I> method to set the dialog's settings to the current model settings <PRE class=wiki>myRoleNameDisplay = myCurrentRoleNameDisplay;
</PRE></LI>
<LI>Update the <I>OnApply</I> method to set the current model settings to the newly changed settings in the dialog 
<OL>
<LI>Add test to get out early if possible (see the fourth comparison) <PRE class=wiki>// Get out early if none of the settings have changed
if (myCurrentMandatoryDotPlacement == myMandatoryDotPlacement &amp;&amp;
	myCurrentObjectifiedFactShape == myObjectifiedFactShape &amp;&amp;
	myCurrentObjectTypeShape == myObjectTypeShape &amp;&amp;
	myCurrentRoleNameDisplay == myRoleNameDisplay)
{
	return;
}
</PRE></LI>
<LI>Set the new options <PRE class=wiki>myCurrentRoleNameDisplay = myRoleNameDisplay;
</PRE></LI></OL></LI></OL>
<H2 id=VerifytheToolsOptionsWindowContainsNewOptions>Verify the Tools Options Window Contains New Options <A class=anchor title="Link to this section" href="https://projects.neumont.edu/orm2/wiki/HowToAddOptionPageOptions#VerifytheToolsOptionsWindowContainsNewOptions">¶</A></H2>
<OL>
<LI>Run the ORM Designer tool </LI>
<LI>Select <I>Tools</I> &gt; <I>Options</I> from the Visual Studio menu </LI>
<LI>Choose the <I>ORM Designer</I> element in the options tree (left side of the dialog) </LI>
<LI>Your new option (e.g. <I>Display Role Names</I>) should appear in the grid at the right, and your description should activate when you active your option </LI></OL>
<H2 id=HowdoIaccessthecurrentsettingforanoption>How do I access the current setting for an option? <A class=anchor title="Link to this section" href="https://projects.neumont.edu/orm2/wiki/HowToAddOptionPageOptions#HowdoIaccessthecurrentsettingforanoption">¶</A></H2>
<P>This example locates the setting for the shape of object types (see the <I>ShapeGeometry</I> property of the <I>ObjectTypeShape</I> class in <A class=source href="https://projects.neumont.edu/orm2/browser/trunk/ORMModel/ShapeModel/ObjectTypeShapes.cs">ORMModel\ShapeModel\ObjectTypeShapes.cs</A>), and determines the correct method of drawing that shape. </P><PRE class=wiki>/// &lt;summary&gt;
/// Get the shape of an object type. Controllable via the ORM Designer
/// tab on the options page.
/// &lt;/summary&gt;
public override ShapeGeometry ShapeGeometry
{
	get
	{
		ShapeGeometry useShape;
		switch (Shell.OptionsPage.CurrentObjectTypeShape)
		{
			case Shell.ObjectTypeShape.Ellipse:
				useShape = ShapeGeometries.Ellipse; // EllipseShapeGeometryEx.ShapeGeometry
				break;
			case Shell.ObjectTypeShape.HardRectangle:
				useShape = ShapeGeometries.Rectangle;
				break;
			case Shell.ObjectTypeShape.SoftRectangle:
			default:
				useShape = ShapeGeometries.RoundedRectangle;
				break;
		}
		return useShape;
	}
}</PRE></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{BD723601-AA28-4393-8C66-9858E541AE10}" Name="HowToAddAToolWindow" Title="How To Add A Tool Window" ContentsTitle="How To Add A Tool Window" Status="In Progress" CreatedOn="15-02-2007 15:43:10" ModifiedOn="16-02-2007 14:45:35" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="False" HelpContextIDs="" Category="{69564419-AA92-4F5A-AEC7-E3054C4CA000}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=wikipage>
<DIV id=searchable>
<H1 id=HowToAddaToolWindow>How To Add a Tool Window <A class=anchor title="Link to this section" href="https://projects.neumont.edu/orm2/wiki/HowToAddAToolWindow#HowToAddaToolWindow">¶</A></H1>
<P>First you'll need a way to display your tool window, so you might want to check out <A class=wiki href="https://projects.neumont.edu/orm2/wiki/HowToAddCommandToMenu">HowToAddCommandToMenu</A>. </P>
<UL>
<LI>First generate a GUID for your tool window, you can use uuidgen from a .Net command prompt to do this. Keep this value around you'll need it in a few places, pasting it into notepad might be a good idea. </LI>
<LI>Open ORMModel/Shell/ProjectItems/ORMDesigner.vrg 
<UL>
<LI>You need to mimic the two sets of entries that start out <PRE class=wiki> [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\8.0Exp\ToolWindows\
</PRE>Take note of the GUID that follows this point, you need to replace all occurences of it in your new copy with the GUID that you generated for your tool window. </LI></UL></LI>
<LI>Now you need to create a new class that inherits from <TT>Microsoft.VisualStudio.EnterpriseTools.Shell.ToolWindow</TT>. It should have a constructor that accepts a <TT>System.IServiceProvider</TT> and passes it to the base constructor with the same signature. 
<UL>
<LI>Give the class a <TT>Guid</TT> attribute and use your previously generated attribute. You did put it in notepad like suggested right? </LI>
<LI>Also add the <TT>CLSCompliant(false)</TT> attribute. </LI></UL></LI>
<LI>Now open ORMModel/Shell/ORMPackage.cs file 
<UL>
<LI>In the <TT>Initialize</TT> method create a new instance of your tool window and pass it in a call to <TT>AddToolWindow</TT>. </LI>
<LI>Create a read-only property for retrieving your tool window, mimic the behavior of the existing ones so that it will use the one that was created and registered with the ORMPackage class. </LI></UL></LI></UL>
<P>Now your tool window should be ready for display, if you are using a menu to activate it you should go to that code and add a call to the property you created to get the tool window and then call <TT>Show()</TT> on it. </P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{349822ED-858E-41CA-A88B-F866CB28BD32}" Name="HowToAddUITypeEditor" Title="How To Add UI Type Editor" ContentsTitle="How To Add UI Type Editor" Status="In Progress" CreatedOn="15-02-2007 15:44:06" ModifiedOn="16-02-2007 14:45:37" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="False" HelpContextIDs="" Category="{69564419-AA92-4F5A-AEC7-E3054C4CA000}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=wikipage>
<DIV id=searchable>
<H1 id=HowToAddUITypeEditor>How To Add UITypeEditor <A class=anchor title="Link to this section" href="https://projects.neumont.edu/orm2/wiki/HowToAddUITypeEditor#HowToAddUITypeEditor">¶</A></H1>
<P>WARNING: this is a very brief overview of how to do this, there are certainly many gaps. </P>
<UL>
<LI>Create a class that inherits from <TT>System.Drawing.Design.UITypeEditor</TT> </LI>
<LI>Override <TT>UITypeEditorEditStyle</TT> to return the desired value. </LI>
<LI>Override <TT>EditValue</TT>, this is where the code to display a <TT>ListBox</TT> or <TT>Form</TT> is loaded and displayed. 
<UL>
<LI>To display a modal dialog first get the service editor: <PRE class=wiki>IWindowsFormsEditorService edSvc = (IWindowsFormsEditorService)provider.GetService(typeof(IWindowsFormsEditorService));
</PRE></LI>
<LI>Then call <TT>edSvc.ShowDialog(myForm)</TT> to display it, presuming you have a variable myForm that holds an instance of your custom editing dialog. </LI>
<LI>It does not automatically deal with canceling out so be prepared to cope with this if you care. </LI></UL></LI>
<LI>Now you should return the value that should be assigned to the property being modified, or the original value if no changes should be made. </LI>
<LI>The editor needs to be associated with the property that will use it with an attribute similar to: <PRE class=wiki> [System.ComponentModel.Editor(typeof(Northface.Tools.ORM.ObjectModel.Editors.ReadingTextEditor), typeof(System.Drawing.Design.UITypeEditor))]
</PRE></LI></UL></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{AA33A76F-480E-4D5E-9FF7-43D693B68AA6}" Name="HowToAddAToolboxItem" Title="How To Add A Toolbox Item" ContentsTitle="How To Add A Toolbox Item" Status="In Progress" CreatedOn="15-02-2007 15:45:31" ModifiedOn="16-02-2007 14:45:41" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="False" HelpContextIDs="" Category="{69564419-AA92-4F5A-AEC7-E3054C4CA000}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=wikipage>
<DIV id=searchable>
<H1 id=HowdoIaddaToolboxitemtotheToolboxview>How do I add a Toolbox item to the Toolbox view? <A class=anchor title="Link to this section" href="https://projects.neumont.edu/orm2/wiki/HowToAddAToolboxItem#HowdoIaddaToolboxitemtotheToolboxview">¶</A></H1>
<P>If you need a toolbox option added to the tools options page, e.g. frequency constraint, follow the steps below (see Changeset <A class=changeset title="Adding option to ToolsOptions page for displaying role names on diagram" href="https://projects.neumont.edu/orm2/changeset/14">[14]</A>): </P>
<H2 id=LocalizeStrings>Localize Strings <A class=anchor title="Link to this section" href="https://projects.neumont.edu/orm2/wiki/HowToAddAToolboxItem#LocalizeStrings">¶</A></H2>
<OL>
<LI>Open <A class=source href="https://projects.neumont.edu/orm2/browser/trunk/ORMModel/ShapeModel/ORMShape.ims">ORMModel\ShapeModel\ORMShape.ims</A> </LI>
<LI>Follow the pattern below to add the new toolbox item in metamodel:diagrams:diagram. ORMShape.dmd should update automatically. <PRE class=wiki>&lt;toolboxitem toolboxitemid="Toolbox.FrequencyConstraint.Item.Id" position="57" bitmapresourceid="Toolbox.FrequencyConstraint.Bitmap.Id" captionresourceid="Toolbox.FrequencyConstraint.Caption.Id" tooltipresourceid="Toolbox.FrequencyConstraint.Tooltip.Id" toolboxtab="Toolbox.DefaultTabName" cshkeywordid="" /&gt;
</PRE></LI>
<LI>Create the toolbox item icon in the Resources directory (see other icons already present). </LI>
<LI>Add the resource identifier to <A class=source href="https://projects.neumont.edu/orm2/browser/trunk/ORMModel/Resources/ResourceStrings.cs">Resources\ResourceStrings.cs</A> similar to the following example: <PRE class=wiki>/// &lt;summary&gt;
/// The identifier for a FrequencyConstraint toolbox item
/// &lt;/summary&gt;
public const string ToolboxFrequencyConstraintItemId = "Toolbox.FrequencyConstraint.Item.Id";
</PRE></LI>
<LI>If you need to add a custom filter string to the item (required for custom toolbox actions), then associate the resource id with the custom filter attribute in ORMDesignerEditorFactory.GetToolboxItems in <A class=source href="https://projects.neumont.edu/orm2/browser/trunk/ORMModel/Shell/ORMEditorFactory.cs">Shell\ORMEditorFactory.cs</A>. </LI>
<LI>If necessary, recognize custom filters in ShapeModel.ORMDiagram.OnViewMouseEnter in <A class=source href="https://projects.neumont.edu/orm2/browser/trunk/ORMModel/ShapeModel/ORMDiagram.cs">ShapeModel\ORMDiagram.cs</A>. </LI>
<LI>Add resources to <A class=source href="https://projects.neumont.edu/orm2/browser/trunk/ORMModel/ShapeModel/ORMShape.dmd.resx">ShapeModel\ORMShape.dmd.resx</A>. 
<OL>
<LI>Add Toolbox.[item name].Caption.Id, Toolbox.[item name].Item.Id, and Toolbox.[item name].Tooltip.Id to the strings category. </LI>
<LI>Add icon file to the icons category. </LI></OL></LI></OL></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{152A7B57-B9C6-4CDF-8593-6630B3BF9E1C}" Name="HowToUseXSDtoHTML" Title="How To Use XSD to HTML" ContentsTitle="How To Use XSD to HTML" Status="In Progress" CreatedOn="15-02-2007 15:46:34" ModifiedOn="16-02-2007 14:45:44" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="False" HelpContextIDs="" Category="{69564419-AA92-4F5A-AEC7-E3054C4CA000}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=wikipage>
<DIV id=searchable>
<H1 id=HowToUseXSDtoHTML.xslt>How To Use XSDtoHTML.xslt <A class=anchor title="Link to this section" href="https://projects.neumont.edu/orm2/wiki/HowToUseXSDtoHTML.xslt#HowToUseXSDtoHTML.xslt">¶</A></H1>
<OL>
<LI>In Visual Studio's Solution Explorer right-click on the XSD file that you want to use. </LI>
<LI>Click on "Open With...". </LI>
<LI>Double-click "XML Editor". </LI>
<LI>Add &lt;?xml-stylesheet type="text/xsl" href="XSDtoHTML.xslt"?&gt; below the &lt;?xml version="1.0" encoding="utf-8"?&gt; tag. </LI>
<LI>In Visual Studio's main-menu click on "XML-&gt;Show XSL Output". </LI>
<LI>Right-click the HTML document. </LI>
<LI>Click on "View Source". </LI>
<LI>Press Control+A tnd then Control+C to copy the HTML. </LI>
<LI>To use the HTML in a wiki you must use the { { { \r\n #!html \r\n ~HTMLGOESHERE~ \r\n } } } tag. </LI></OL></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{0E43E58B-4598-418A-AF6E-7AE6214EAFA2}" Name="Tech RPT 2 - Title Page" Title="ORM 2 Constraint Verbalization" ContentsTitle="ORM 2 Constraint Verbalization" Status="Complete" CreatedOn="22-02-2007 14:02:59" ModifiedOn="22-02-2007 15:25:09" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{7B6F520C-C1B9-4D50-A678-EE1D9BB17AF7}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=Section1>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>&nbsp;</P>
<DIV>
<P class=MsoNormal>&nbsp;</P></DIV>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>ORM 2 Constraint Verbalization</P>
<P class=MsoNormal align=center>Part 1</P>
<P class=MsoNormal align=center>&nbsp;</P>
<DIV>
<P class=MsoNormal align=center>Technical Report ORM2-02, June 2006</P></DIV>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center><I>Terry Halpin, Matt Curland</I></P>
<P class=MsoNormal align=center><I>and the CS445 Class<A title="" href="file:///C:/Documents%20and%20Settings/acordes/My%20Documents/Quarter%207/CS%20390%20Projects%20V/Help%20Project/Docs/Re-Created%20for%20Project/$$_HelpStudioWRDIMP_Document1165006608.html#_ftn1" name=_ftnref1><B>[1]</B></A></I></P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center><IMG height=35 src="Images/Image088.jpg" width=146></P>
<P class=MsoNormal align=center>&nbsp;</P>
<P class=MsoNormal align=center><A href="http://www.neumont.edu/">www.neumont.edu</A></P>
<P class=MsoNormal>&nbsp;</P></DIV>
<DIV><BR clear=all>
<HR align=left width="33%" SIZE=1>

<DIV id=ftn1>
<P class=MsoFootnoteText><A title="" href="#_ftnref1" name=_ftn1>[1]</A> Baldwin, S., Briggs, J., Burt, A., Dornseif, K.,Flynn, D., Kaylor, C., Maly, N., Ouzts, M., Owen, K., Wilde, J., &amp; Young, T.</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{A83F3A92-5CEA-4677-8E88-4C62535D78A3}" Name="Tech RPT 2 - Contents" Title="Contents" ContentsTitle="Contents" Status="Complete" CreatedOn="22-02-2007 14:03:00" ModifiedOn="23-02-2007 13:26:03" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{7B6F520C-C1B9-4D50-A678-EE1D9BB17AF7}">
        <Notes/>
        <s k="BodyText"><![CDATA[<FONT face="Times New Roman"><B style="mso-bidi-font-weight: normal"><SPAN style="FONT-SIZE: 10pt">
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: center" align=center><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: 'Verdana','sans-serif'"><?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p>&nbsp;</o:p></SPAN></P>
<OL style="MARGIN-TOP: 0in" type=1>
<LI class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify; mso-list: l4 level1 lfo1"><FONT size=3><A href="Tech RPT 2 - Introduction.html">Introduction</A></FONT></LI></OL>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.75in; TEXT-INDENT: -0.25in; mso-list: l2 level2 lfo2"><SPAN style="mso-list: Ignore"><FONT size=3>1.1</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN><FONT size=3>Formal Items and text style</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.75in; TEXT-INDENT: -0.25in; mso-list: l2 level2 lfo2"><SPAN style="mso-list: Ignore"><FONT size=3>1.2</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN><FONT size=3>Hyphen Binding</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.75in; TEXT-INDENT: -0.25in; mso-list: l2 level2 lfo2"><SPAN style="mso-list: Ignore"><FONT size=3>1.3</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN><FONT size=3>Predicate Reading Choices</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.75in; TEXT-INDENT: -0.25in; mso-list: l2 level2 lfo2"><SPAN style="mso-list: Ignore"><FONT size=3>1.4</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN><FONT size=3>Object Variable Names</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.75in; TEXT-INDENT: -0.25in; mso-list: l2 level2 lfo2"><SPAN style="mso-list: Ignore"><FONT size=3>1.5</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN><FONT size=3>Personal and Impersonal Pronouns</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.75in; TEXT-INDENT: -0.25in; mso-list: l2 level2 lfo2"><SPAN style="mso-list: Ignore"><FONT size=3>1.6</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN><FONT size=3>Positive, Negative, and Default Form</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.75in; TEXT-INDENT: -0.25in; mso-list: l2 level2 lfo2"><SPAN style="mso-list: Ignore"><FONT size=3>1.7</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN><FONT size=3>Modality</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.75in; TEXT-INDENT: -0.25in; mso-list: l2 level2 lfo2"><SPAN style="mso-list: Ignore"><FONT size=3>1.8</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN><FONT size=3>Relational, Attribute, and Mixed Styles</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.75in; TEXT-INDENT: -0.25in; mso-list: l2 level2 lfo2"><SPAN style="mso-list: Ignore"><FONT size=3>1.9</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN><FONT size=3>Context</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.25in"><o:p><FONT size=3>&nbsp;</FONT></o:p></P>
<OL style="MARGIN-TOP: 0in" type=1 start=2>
<LI class=MsoNormal style="MARGIN: 0in 0in 0pt; mso-list: l4 level1 lfo1"><FONT size=3><A href="Tech RPT 2 - Uniqueness Constraints.html">Uniqueness Constraints</A></FONT></LI></OL>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.75in; TEXT-INDENT: -0.25in; mso-list: l3 level2 lfo3"><SPAN style="mso-list: Ignore"><FONT size=3>2.1</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN><FONT size=3>Internal Uniqueness Constraint (UCI)</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 1.5in; TEXT-INDENT: -0.5in; mso-list: l3 level3 lfo3"><SPAN style="mso-list: Ignore"><FONT size=3>2.1.1</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><FONT size=3>Unary predicate</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 1.5in; TEXT-INDENT: -0.5in; mso-list: l3 level3 lfo3"><SPAN style="mso-list: Ignore"><FONT size=3>2.1.2</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><FONT size=3>Binary predicate</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 1.5in; TEXT-INDENT: -0.5in; mso-list: l3 level3 lfo3"><SPAN style="mso-list: Ignore"><FONT size=3>2.1.3</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><FONT size=3>N-ary predicate</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.75in; TEXT-INDENT: -0.25in; mso-list: l3 level2 lfo3"><SPAN style="mso-list: Ignore"><FONT size=3>2.2</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN><FONT size=3>External Uniqueness Constraint (UCE)</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 1.5in; TEXT-INDENT: -0.5in; mso-list: l3 level3 lfo3"><SPAN style="mso-list: Ignore"><FONT size=3>2.2.1</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><FONT size=3>Binaries with predicate readings from the unconstrained roles</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 1.5in; TEXT-INDENT: -0.5in; mso-list: l3 level3 lfo3"><SPAN style="mso-list: Ignore"><FONT size=3>2.2.2</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><FONT size=3>Binaries without predicate readings from the unconstrained roles</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt"><o:p><FONT size=3>&nbsp;</FONT></o:p></P>
<OL style="MARGIN-TOP: 0in" type=1 start=3>
<LI class=MsoNormal style="MARGIN: 0in 0in 0pt; mso-list: l4 level1 lfo1"><FONT size=3><A href="Tech RPT 2 - Mandatory Constraints.html">Mandatory Constraints</A></FONT></LI></OL>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.75in; TEXT-INDENT: -0.25in; mso-list: l1 level2 lfo4"><SPAN style="mso-list: Ignore"><FONT size=3>3.1</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN><FONT size=3>Simple Mandatory Constraint (sMaC)</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 1.5in; TEXT-INDENT: -0.5in; mso-list: l1 level3 lfo4"><SPAN style="mso-list: Ignore"><FONT size=3>3.1.1</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><FONT size=3>Unary predicate</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 1.5in; TEXT-INDENT: -0.5in; mso-list: l1 level3 lfo4"><SPAN style="mso-list: Ignore"><FONT size=3>3.1.2</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><FONT size=3>Binary predicate</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 1.5in; TEXT-INDENT: -0.5in; mso-list: l1 level3 lfo4"><SPAN style="mso-list: Ignore"><FONT size=3>3.1.3</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><FONT size=3>N-ary predicate</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.75in; TEXT-INDENT: -0.25in; mso-list: l1 level2 lfo4"><SPAN style="mso-list: Ignore"><FONT size=3>3.2</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN><FONT size=3>Disjunctive Mandatory (Inclusive-Or) Constraint (DMaC)</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 1.5in; TEXT-INDENT: -0.5in; mso-list: l1 level3 lfo4"><SPAN style="mso-list: Ignore"><FONT size=3>3.2.1</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><FONT size=3>Unary predicates</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 1.5in; TEXT-INDENT: -0.5in; mso-list: l1 level3 lfo4"><SPAN style="mso-list: Ignore"><FONT size=3>3.2.2</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><FONT size=3>Unary and Binary predicates</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 1.5in; TEXT-INDENT: -0.5in; mso-list: l1 level3 lfo4"><SPAN style="mso-list: Ignore"><FONT size=3>3.2.3</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><FONT size=3>Unary and/or Binary and/or N-ary predicates</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.75in; TEXT-INDENT: -0.25in; mso-list: l1 level2 lfo4"><SPAN style="mso-list: Ignore"><FONT size=3>3.3</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN><FONT size=3>Combined Mandatory/Unique (Exactly-one) Constraint (CMU)</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt"><o:p><FONT size=3>&nbsp;</FONT></o:p></P>
<OL style="MARGIN-TOP: 0in" type=1 start=4>
<LI class=MsoNormal style="MARGIN: 0in 0in 0pt; mso-list: l4 level1 lfo1"><FONT size=3><A href="Tech RPT 2 - Implementation.html">Implementation</A></FONT></LI></OL>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.75in; TEXT-INDENT: -0.25in; mso-list: l0 level2 lfo5"><SPAN style="mso-list: Ignore"><FONT size=3>4.1</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN><FONT size=3>Dynamic Verbalization Requirements</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.75in; TEXT-INDENT: -0.25in; mso-list: l0 level2 lfo5"><SPAN style="mso-list: Ignore"><FONT size=3>4.2</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN><FONT size=3>Constructing a Verbalization Phase</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 1.5in; TEXT-INDENT: -0.5in; mso-list: l0 level3 lfo5"><SPAN style="mso-list: Ignore"><FONT size=3>4.2.1</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><FONT size=3>Concatenation Approach to Verbalization</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 1.5in; TEXT-INDENT: -0.5in; mso-list: l0 level3 lfo5"><SPAN style="mso-list: Ignore"><FONT size=3>4.2.2</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><FONT size=3>Field Replacement Approach to Verbalization</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.75in; TEXT-INDENT: -0.25in; mso-list: l0 level2 lfo5"><SPAN style="mso-list: Ignore"><FONT size=3>4.3</FONT><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN><FONT size=3>Combining Verbalization Snippets</FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt"><o:p><FONT size=3>&nbsp;</FONT></o:p></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 13.5pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 'Times New Roman','serif'; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA"><FONT size=4><A href="Tech RPT 2 - References.html">References</A></FONT></SPAN></SPAN></B></FONT></P>]]></s>
    </Topic>
    <Topic Key="{2766F2D8-6CF1-4792-8350-E9CB0F35481C}" Name="Tech RPT 2 - Introduction" Title="Introduction" ContentsTitle="Introduction" Status="Waiting Review" CreatedOn="22-02-2007 14:03:00" ModifiedOn="22-02-2007 15:26:43" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{7B6F520C-C1B9-4D50-A678-EE1D9BB17AF7}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=Section1>
<P class=MsoNormal><B>1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Introduction</B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Automated verbalization of constraints in Object-Role Modeling (ORM) was proposed long ago [e.g. 1], and a basic implementation is provided by Microsoft's ORM source model solution [2]. More recently, several improvements to the verbalization procedure have been proposed [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]. Currently, an open source tool called NORMA (Neumont ORM Architect)<A title="" href="file:///C:/Documents%20and%20Settings/acordes/My%20Documents/Quarter%207/CS%20390%20Projects%20V/Help%20Project/Docs/Re-Created%20for%20Project/$$_HelpStudioWRDIMP_Document5165008681.html#_ftn1" name=_ftnref1>[1]</A> is being developed to support the next generation of ORM (ORM 2) [19]. As part of this development, enhanced verbalization support is being included. This document summarizes the main aspects of the verbalization procedures for some ORM constraints that are implemented in this new tool. The discussion is restricted to the English language, but support for other languages is planned for later.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The verbalization is generated from the model, and not used to input models (for that, a separate and typically more concise input language is being devised). Apart from object-placeholder positioning, predicates are treated as unstructured character strings. For example, with the predicate "... originated from ..." no attempt is made to parse the text into a verb ("originated") and preposition ("from"). The English verbalization assumes that object type names are singular (not plural). For example, "Person" should be used instead of "Persons". Although this is common practice, modelers should be aware that use of plurals may lead to awkward verbalizations.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A name=BM_1_></A>This technical report covers only uniqueness and mandatory constraints. The following technical report covers the other main categories of graphical constraints. For a future release, it is planned to support verbalization of additional constraints, such as relevant constraints over unrestricted join-paths (e.g. complex external-uniqueness and set-comparison constraints).</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B>1.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Formal Items and Text Style</B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Constraint verbalizations are comprised of a sequence of textual items that are object type names, full or partial predicate readings (used in relational-style or mixed-style verbalizations), role names (used in attribute-style or mixed style verbalizations), or <I>formal items</I> (quantifiers, pronouns, numbers, predefined text etc.). Formal items are comprised of pseudo-reserved words, and should be displayed in a different <I>text style</I> from the rest of the verbalization sentence. This text style should be globally selectable by the user as a configuration option. In this document, the <B>bold</B> style is used. Words within formal items are only pseudo-reserved, not fully reserved, since some of them may be used within a predicate reading. The text style indicates whether the word is being treated as a formal item. For example, in the following verbalization, only the second "a" is a formal item; the first "a" is just part of the predicate reading "is a resident of". While both instances of "a" have the meaning of an existential quantifier, only the second "a" formally communicates this meaning to the system.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Each</B>Person is a resident of <B>a</B> Country</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B>1.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hyphen Binding</B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If a hyphen within a predicate reading immediately precedes an object-placeholder, the word before it should be treated as an adjective that is bound to the object-type name for purposes of constraint verbalization (and the hyphen is elided in the verbalization). If a hyphen is followed by a space, some words, and an object place-holder, then the word just before it, as well as the words separating it from the object-placeholder, are bound to the object-type name for constraint verbalization. If the hyphen is followed by a non-space character, it is treated simply as part of the predicate (like any other character). Hyphen binding is left/right symmetric, so "most- influential Person" and "Person of highest -influence" would behave similarly, keeping the modifiers with Person irrespective of quantifiers. Also Student has Preference -1could be used instead of Student has first- Preference.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For example, uniqueness constraints on the first role of the following fact types are verbalized as shown.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Person has first- GivenName.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: Wingdings; mso-ascii-font-family: 'Arial Narrow'; mso-fareast-font-family: 'Times New Roman'; mso-hansi-font-family: 'Arial Narrow'; mso-bidi-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA; mso-char-type: symbol; mso-symbol-font-family: Wingdings"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: Wingdings">à&nbsp;&nbsp; </SPAN></SPAN><B>Each</B> Person has <B>at most one</B> first GivenName.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Person has very- high IQ&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: Wingdings; mso-ascii-font-family: 'Arial Narrow'; mso-fareast-font-family: 'Times New Roman'; mso-hansi-font-family: 'Arial Narrow'; mso-bidi-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA; mso-char-type: symbol; mso-symbol-font-family: Wingdings"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: Wingdings">à&nbsp;&nbsp;&nbsp;</SPAN></SPAN><B>Each</B> Person has <B>at most one</B> very high IQ.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Person drives a semi-trailer for Company&nbsp;&nbsp;<SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: Wingdings; mso-ascii-font-family: 'Arial Narrow'; mso-fareast-font-family: 'Times New Roman'; mso-hansi-font-family: 'Arial Narrow'; mso-bidi-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA; mso-char-type: symbol; mso-symbol-font-family: Wingdings"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: Wingdings">à&nbsp;&nbsp; </SPAN></SPAN><B>Each</B> Person drives a semi-trailer for <B>at most one</B> Company.</P>
<P class=MsoNormal><B></B>&nbsp;</P>
<P class=MsoNormal><B>1.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Predicate Reading Choices </B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>For many constraints, more elegant verbalizations are obtained if predicate readings are supplied that start from a constrained role. If multiple predicate readings are available for the same fact type, then the verbalization of a constraint on a role will use a reading from that role if available.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B>1.4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object Variable Names </B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If an object type is referenced only once in the body of a constraint verbalization, its name is left unaltered. If an object type is referenced two or more times, instances that may be different may be distinguished by subscripting (e.g. <B>If</B>Person<SUB>1</SUB> is a parent of Person<SUB>2</SUB> <B>then</B> ...). Multiple occurrences of a single object variable may also be distinguished by introducing the variable with a universal quantifier (e.g. <B>For each</B>), and then back-referencing by the pronoun (e.g. <B>that</B>), so long as no other variable of that type occurs in the reference path (e.g. <B>For each</B>Person: <B>if that</B> Person smokes <B>then that</B> Person is cancer-prone).</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For localization to some languages (e.g. Chinese), pronouns (e.g. "<B>that</B>", "<B>who</B>", "<B>itself</B>") which fit well in English do not always have natural equivalents. In such cases, subscripted variables should always be used. </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B>1.5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Personal and Impersonal Pronouns</B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The modeler may declare any object type to be personal (it is impersonal by default). In English, the pronoun "<B>who</B>" is used in certain contexts for personal object types, and <B>that</B>" is used for impersonal object types. For example, the following verbalizations capture two subset constraints between unaries:</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Each</B>Person<B> who</B> smokes is cancer-prone.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Each</B> Car<B> that</B> smokes is due for a service.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B>1.6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Positive, Negative, and Default Form</B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Many, but not all, constraints may be verbalized in different forms (positive, negative, or default). The <I>positive</I> <I>form</I> is generally used first, and emphasizes what must hold for a satisfying population (e.g. <B>Each</B>Person has <B>at most one </B>Gender). The <I>negative</I> <I>form</I> indicates how the constraint may be violated, and is useful for discussing counterexamples (e.g. <B>It is impossible that the same</B>Person has <B>more than one</B> Gender). The <I>default form</I> is used to indicate what is implied by the absence of a constraint. For example, the absence of a uniqueness constraint on the second role of Person has Gendermay be verbalized as <B>It is possible that more than one</B>Person has <B>the same</B> Gender.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B>1.7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Modality</B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>By default, constraint verbalizations in positive form are assumed to be alethic in nature (logical or physical necessities). As a user option, this may be made explicit in the positive form of a verbalization by prepending "<B>It is necessary that</B>", or in some cases appending "<B>It is necessary that</B>" to the For-list. If a constraint is declared to be deontic (indicated graphically by a different color and a mark such as "o" for "obligatory"), its positive verbalization uses "<B>It is obligatory that</B>" instead of "<B>It is necessary that</B>".</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Negative and default verbalizations include the relevant modality indicator: "<B>possible</B>" and "<B>impossible</B>" for alethic; "<B>permitted</B>" and "<B>forbidden</B>" for deontic.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B>1.8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Relational, Attribute, and Mixed Styles</B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Verbalizations in relational style use predicate readings (e.g. <B>Each</B>Person was born in <B>at most one</B> Country). Verbalizations in attribute style use role names (e.g. <B>Each</B>Person has <B>at most one</B> birthCountry). Verbalizations in mixed style use both predicate readings and role names. Relational style is used by default.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B>1.9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Context</B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Some constraints may be conveniently verbalized by declaring the <I>local context</I> (the fact types that contain the constrained elements) and then referring to that context. This is especially useful for some external constraints (e.g. <B>Context:</B>Room is in Building; Room has RoomNr. <B>In this context</B>, <B>each</B> Building, RoomNr <B>combination is associated with at most one</B> Room). Otherwise the constraint context is <I>global</I>.</P>
<P class=MsoNormal>&nbsp;</P></DIV>
<DIV><BR clear=all>
<HR align=left width="33%" SIZE=1>

<DIV id=ftn1>
<P class=MsoFootnoteText><A title="" href="#_ftnref1" name=_ftn1>[1]</A> https://sourceforge.net/projects/orm</P></DIV></DIV>]]></s>
    </Topic>
    <Topic Key="{CD615016-64F2-4319-AC31-F73F59B1C829}" Name="Tech RPT 2 - Uniqueness Constraints" Title="Uniqueness Constraints" ContentsTitle="Uniqueness Constraints" Status="Waiting Review" CreatedOn="22-02-2007 14:03:05" ModifiedOn="22-02-2007 15:24:56" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{7B6F520C-C1B9-4D50-A678-EE1D9BB17AF7}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=Section1>
<P class=MsoNormal><B>2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Uniqueness Constraints</B></P>
<P class=MsoNormal><B></B>&nbsp;</P>
<P class=MsoNormal><B>2.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Internal Uniqueness Constraint (UCI)</B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B><I>2.1.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Unary predicate</I></B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=50 src="Images/Image154.gif" width=538></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I></I>&nbsp;</P>
<P class=MsoNormal>The top verbalization pattern above (by default without the necessity operator) is used for the <I>positive, relational, alethic form</I> of the constraint verbalization.<I> A</I> may be any object type (entity type or value type). <I>R</I> is a unary predicate. If the necessity operator is included, "<B>Each</B>" is replaced by "<B>each</B>". For subsequent patterns, we will typically not bother stating this option. The bottom pattern above may be used for the <I>negative form</I> of the constraint verbalization. </P>
<P class=MsoNormal>By default, fact types are assumed to set-based rather than bag-based, so the left-hand diagram above is interpreted as equivalent to the right-hand diagram. If we add support for bag populations, a new notation and verbalization will be introduced for "bag fact types". The unary case is a special case of a predicate with a spanning uniqueness constraint. All such cases include a verbalization for the set-based nature (no duplicate instances in the population of the fact type).</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (+ve)&nbsp; <B>Each </B>Person <B>occurs at most once in the population of </B>Person smokes. </P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (-ve)&nbsp;&nbsp; <B>It is impossible that the same </B>Person <B>occurs more than once in the population of </B>Person smokes.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The unary predicate case has no deontic, attribute-style, or contextual form.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B><I>2.1.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Binary predicate</I></B></P>
<P class=MsoNormal><B><I></I></B>&nbsp;</P>
<P class=MsoNormal><I>UC on a single role that starts a predicate reading</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=71 src="Images/Image155.gif" width=405></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>In the above pattern, <I>A</I> and <I>B</I> may be any object types (entity or value), not necessarily distinct. <I>R</I> is a predicate reading starting from <I>A</I>'s role (where no predicate text precedes the object type name in the fact type reading). A predicate reading <I>S</I> in the other direction may or may not be present. The <I>positive and negative forms of the relational, alethic </I>constraint verbalization patterns are shown.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (+ve) <B>Each</B>Person was born in <B>at most one</B> Country.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(-ve)&nbsp; <B>It is impossible that the same</B>Person was born in <B>more than one</B> Country.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>Deontic</I>readings use these patterns with the relevant substitution of modality operators.</P>
<P class=MsoNormal><IMG height=71 src="Images/Image156.gif" width=405></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (+ve)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>It is obligatory that each</B>Person has <B>at most one</B> SocialSecurityNumber.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(-ve)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>It is forbidden that the same</B>Person has <B>more than one</B> SocialSecurityNumber.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </P>
<P class=MsoNormal>From now on, we will typically omit diagrams for deontic cases.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The <I>absence</I> of a UC on the role played by B may be indicated by the following <I>default </I>verbalization. There is no deontic version of this default, as the absence of a constraint is always interpreted alethically.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>It is possible that the same</B><I>B S</I> <B>more than one</B> <I>A</I>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- if <I>S</I> is available.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>It is possible that more than one</B><I>A R</I> <B>the same</B> <I>B</I>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- if <I>S</I> is unavailable</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<B>It is possible that the same</B>Country is the birthplace of <B>more than one</B> Person.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>It is possible that more than one</B>Person was born in<I> </I><B>the same</B> Country.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=62 src="Images/Image157.gif" width=321></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The case when <I>A</I> = <I>B</I> (shown above) is simply a special case of the previous pattern.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (+ve, alethic) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<B>Each</B>Person has <B>at most one</B> Person as father.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(-ve, alethic)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>It is impossible that the same</B>Person has <B>more than one</B> Person as father.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(+ve, deontic) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<B>It is obligatory that each</B>Person is a husband of <B>at most one</B> Person.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(-ve, deontic)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>It is forbidden that the same</B>Person is a husband of <B>more than one </B>Person.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>There is no contextual form for this constraint pattern, but an <I>attribute style</I> is available if and only if a role name is provided for the co-role of the constrained role, as shown below. This relies on the schema being well-formed (for each object type, its far role names are distinct, with the exception that symmetric predicates may have roles with the same name). The deontic versions prepend "<B>It is obligatory that</B>" to the positive form, and replace "<B>impossible</B>" by "<B>forbidden</B>" in the negative form. </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=39 src="Images/Image158.gif" width=410></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Each</B>Person <B>has at most one</B> birthCountry.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is impossible that the same</B> Person <B>has more than one</B> birthCountry.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>UC on a single role with a predicate reading including some front text (before the role's object type)</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=38 src="Images/Image159.gif" width=431></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>In this case, the predicate <I>ftR</I> includes some <I>front text</I> (<I>ft</I>) that precedes the name of the role's object type in the fact type reading. For example, the previous birth fact type may be rephrased as "the birth of Person occurred in Country", using the front text "the birth of". Such front text wordings are rare in practice, at least in English. The patterns for the alethic, relational verbalizations are shown above. These include the case where <I>A</I> = <I>B</I>. The deontic versions are obtained in the usual way. We do not support attribute-style for this case.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Person, the birth of <B>that</B> Person occurred in <B>at most one</B> Country.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>For each</B> Person, <B>it is impossible that </B>the birth of <B>that</B> Person occurred in<B> more than one</B> Country.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>UC on a single role that does not start a predicate reading</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=38 src="Images/Image160.gif" width=423></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The above pattern may be used for the positive and negative, relational, alethic verbalizations. The readings may be adapted for deontic versions as discussed earlier. Optionally, the positive alethic form may append "<B>it is necessary that</B>" to "<B>For each</B><I>A</I>". The "<B>For each</B><I>A</I>" should be separated from the remainder of the verbalization by a comma (as shown) and/or cursor-return-linefeed. This comment also applies to later cases (where a list of one or more items follows "<B>For each</B>").</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Person,<B>at most one</B>Country is the birthplace of <B>that</B> Person.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>For each</B> Person, <B>it is impossible that more than one</B> Country is the birthplace of <B>that</B> Person.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The above pattern is used whether or not <I>A</I> is identical to <I>B</I>. If <I>A</I> is identical to <I>B</I>, there is no need to distinguish the instances of <I>A</I> by subscripting (see below).</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=63 src="Images/Image161.gif" width=338></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Person, <B>at most one</B> Person is the father of <B>that</B> Person.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>For each</B> Person,<B> it is impossible that more than one</B> Person is the father of <B>that</B> Person.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If the <I>inverse predicate has front text</I>, this front text (ft) precedes the numeric quantifier in the above patterns, as shown in the alethic patterns below. It is possible that <I>A</I> = <I>B</I>. The deontic versions are adapted as usual. The predicate text always maintains its placeholder places, and may even include trailing text (the examples below are based on the fact type readings "in Country was born Person" and "in Country Person was born"). Such wordings are rare in English.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=38 src="Images/Image162.gif" width=432></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Person, in<B>at most one</B>Country was born <B>that</B> Person.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>For each</B> Person, <B>it is impossible that </B>in<B> more than one</B> Country was born <B>that</B> Person.</P>
<P class=MsoNormal><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For each</B>Person, in<B>at most one</B>Country <B>that</B> Person was born.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B> Person, <B>it is impossible that </B>in<B> more than one</B> Country <B>that</B> Person was born.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>1:1 predicates</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=15 hspace=12 src="Images/Image163.gif" width=34 align=left>This case is handled by verbalizing the two uniqueness constraints individually according to the patterns discussed earlier, so introduces no new work.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>Preferred identification</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=95 src="Images/Image164.gif" width=317></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If a simple, preferred identification scheme is depicted explicitly, as shown above, where <I>A</I> is an entity type and <I>B</I> is any object type, the mandatory (see later) and uniqueness constraints are verbalized followed by the preferred identification declaration.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Example:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>This association with</B>CountryCode <B>provides the preferred identification scheme for</B> Country.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If a simple, preferred identification scheme is depicted implicitly (using a parenthesized reference mode as shown in the left-hand diagram below), the below pattern is used. In this case, the object type <I>Aref</I> must be a value type. There are no deontic, negative, or attribute versions of a preferred identification verbalization.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=37 src="Images/Image165.gif" width=382></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Example: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>This </B>Code <B>value provides the preferred identifier for</B> Country.</P>
<P class=MsoNormal><I>Spanning UC</I></P>
<P class=MsoNormal><I></I>&nbsp;</P>
<P class=MsoNormal><IMG height=209 src="Images/Image166.gif" width=487></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The five cases for a spanning UC on a binary predicate are shown above. There are two aspects of the constraint verbalization: (a) restriction of the population to a set rather than a bag; (b) many:many nature. The set restriction patterns are shown above. The first +ve/-ve pattern pair (for the case when a forward predicate reading <I>R</I> is available) may be used for all cases: If only the inverse predicate <I>S</I> is supplied, the object types could be ordered <I>B</I>, <I>A</I> if this is easier (effectively reusing the first pattern); the ring binary case merely makes <I>A</I> = <I>B</I>. There is no deontic version of the set restriction.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp; (+ve)&nbsp; <B>Each </B>Person, Language <B>combination occurs at most once in the population of </B>Person speaks Language.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(-ve)&nbsp; <B>It is impossible that the same </B>Person, Language <B>occurs more than once in the population of </B>Person speaks Language.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The many-to-many nature of the relationship is verbalized alethically by applying the default verbalization for the lack of a UC on each of the two roles. This gives the following <I>positive, alethic, relational </I>patterns.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=169 src="Images/Image167.gif" width=501></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>It is possible that the same</B>Person speaks <B>more than one</B> Language </P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>and that the same</B> Language is spoken by <B>more than one</B> Person.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; It is possible that the same</B>Person speaks <B>more than one</B> Language </P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>and that more than one</B> Person speaks <B>the same</B> Language.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is possible that more than one</B> Language is spoken by <B>the same</B> Person</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>and that the same</B> Language is spoken by <B>more than one</B> Person.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- <I>aliter: reverse the conjuncts</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; It is possible that the same</B>Person likes <B>more than one</B> Person </P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>and that the same</B> Person is liked by <B>more than one</B> Person.</P>
<P class=MsoNormal>Note: For the ring binary case with only one predicate reading provided, there is a mild ambiguity for the conjunct with no lead reading (see second conjunct in the following example), but this is considered acceptable as the chance of misinterpretation is low, e.g.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; It is possible that the same</B>Person likes <B>more than one</B> Person </P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>and that more than one</B> Person likes <B>the same</B> Person.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The spanning UC constraint has <I>no negative verbalization</I>. Verbalization of its <I>deontic</I> version is obtained by replacing the "<B>possible</B>" modality in the above patterns by "<B>permitted</B>". For example, in an economically deprived country the following deontic rule might not apply, even though its alethic version does apply: </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It is permitted that the same </B>Person owns <B>more than one</B> Vehicle </P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>and that the same</B> Vehicle is owned by <B>more than one</B> Person.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>An <I>attribute</I> style version may be supported using the following alethic pattern (use "<B>permitted</B>" if deontic). If only one role name is supplied, a <I>mixed style </I>version may be supported, using the relational style for the unnamed role. If no role names are supplied, there are no attribute or mixed style readings. Support for this is low priority. </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=34 src="Images/Image168.gif" width=369></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Example:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>It is possible that the same</B>Person has <B>more than one</B> carDriven </P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>and that the same</B> Car <B>has more than one</B> driver.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>For those rare cases where the <I>predicate has front text</I>, the above patterns are adapted by placing the front text before the first quantifier. We do not support attribute style for such rare cases. For example:</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=33 src="Images/Image169.gif" width=394></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The following example is based on the fact type readings "when young Person played Sport / during youth-hood Sport was played by Person".</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Example:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>It is possible that </B>when young<B> the same</B> Person played <B>more than one</B> Sport </P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>and that </B>during youth-hood<B> the same</B> Sport was played by <B>more than one</B> Person.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B><I>2.1.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N-ary predicate (3 or more roles)</I></B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>We restrict our attention to uniqueness constraints that are legal for elementary fact types. Any attempt to verbalize an illegal case returns a relevant model error. There are two legal cases: the UC spans <I>n</I>-1 roles; the UC spans all <I>n</I> roles (<I>n</I> ³3). We consider these cases in turn.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>UC over all but one role</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=63 src="Images/Image170.gif" width=367></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The <I>A</I><SUB>1</SUB> .. <I>A<SUB>n</SUB></I> (<I>n</I> ³2) and <I>B</I> object types are entity or value types, are not necessarily contiguous, and are not necessarily distinct. The UC spans just the roles played by <I>A</I><SUB>1</SUB> .. <I>A<SUB>n</SUB></I>. The <I>alethic positive and negative relational</I> verbalization patterns are shown above. For the positive, alethic case, "<B>it is necessary that</B>" may optionally be appended after the For-list. It doesn't matter which role starts the predicate reading <I>R</I>, but the primary predicate reading is selected by default. The object type names are placed in their normal positions within the mixfix predicate, prepended by the formal items shown. If the predicate <I>R</I> has front text, the pattern is still the same (see fourth example below). The universal quantifier reading "<B>for each</B>" is used by default, but the alternative reading "<B>given any</B>" could be supported as a user chosen alternative. If the same object type plays more than one role in the predicate, its instances must be distinguished by subscripting. For <I>n</I>-ary predicates, <I>no attribute style</I> version of constraints is supported.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (+ve)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Student <B>and</B> Course</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>that</B> Student in <B>that</B> Course obtained <B>at most one</B> Rating.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (-ve)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is impossible that the same</B>Student in <B>the same</B> Course obtained <B>more than one</B> Rating.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(+ve)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Person<SUB>1, </SUB>Person<SUB>2 </SUB><B>and</B> Year</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>that</B> Person<SUB>1</SUB> supervised <B>that</B> Person<SUB>2</SUB> in <B>that</B> Year for <B>at most one</B> Period.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(-ve)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is impossible that </B></P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>the same</B> Person<SUB>1</SUB> supervised <B>the same </B>Person<SUB>2</SUB> in <B>the same </B>Year for <B>more than one</B> Period.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(ft)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>For each</B> Student <B>and</B> Course</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in normal circumstamces <B>that</B> Student in <B>that</B> Course obtained <B>at most one</B> Rating.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The <I>deontic</I> versions are obtained by the rules discussed earlier.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (+ve)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>It is obligatory that for each</B>Room <B>and</B> HourSlot</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>that</B> Room at <B>that</B> HourSlot is booked for <B>at most one</B> Course.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(-ve)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is forbidden that</B></P>
<P class=MsoNormal><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the same</B>Room <B>at the same</B> HourSlot is booked for <B>more than one</B> Course.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>Spanning UC</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=63 src="Images/Image171.gif" width=468></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The object types <I>A</I><SUB>1</SUB> .. <I>A<SUB>n</SUB></I> (<I>n</I> ³3) are entity or value types, and are not necessarily distinct. If the same object type plays more than one role in the predicate, its instances must be distinguished by subscripting. The alethic positive reading of the set restriction aspect is shown above. Front text makes no difference. No deontic version is supported. </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Each</B>Person, Sport, Country <B>combination occurs at most once in the population of</B></P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Person played Sport for Country.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; It is impossible that the same </B>Person, Sport, Country <B>combination occurs more than once in the population</B></P>
<P class=MsoNormal><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; of </B>Person played Sport for Country.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The many:many: ⬦ many nature of the relationship is verbalized by conjoining the default readings for the lack of an <I>n</I>-1 uniqueness constraint on each <I>n</I>-1 role combination (i.e. for an <I>n</I>-ary predicate, we indicate for each of its <I>n</I> roles the consequence of not uniquely constraining the other <I>n</I>-1 roles). This leads to a list of <I>n</I> possibilities, with exactly one object type occurrence preceded by "<B>more than one</B>" and the other object type occurrences preceded by "<B>the same</B>". This generates a sentence pattern where "<B>more than one</B>" begins in the last object type position, then moves progressively to the first object type position, so the "<B>more than one</B>" instances line up on a diagonal, with "<B>the same</B>" in all other positions (italics are used here to display the diagonal, but are not used in the actual verbalization). </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=53 src="Images/Image172.gif" width=429></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The alethic positive pattern is shown above. If the same object type plays more than one role in the predicate, its instances must be distinguished by subscripting. </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Example:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>It is possible that the same</B>Person played <B>the same</B> Sport for <B>more than one</B> Country</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>and that the same</B> Person played <B>more than one</B> Sport for <B>the same</B> Country</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>and that more than one</B> Person played <B>the same</B> Sport for <B>the same</B> Country.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The binary case considered earlier is simply a special case of this pattern, except that subscripts are not required for that case. Note that it is incorrect to simplify the verbalization to a single pass through the predicate, prepending each object type name by "<B>more than one</B>". </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The <I>deontic</I> version is obtained by replacing "<B>possible</B>" by "<B>permitted</B>" in the above pattern. No negative version is supported.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B>2.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; External Uniqueness Constraint (UCE)</B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>For now, we support just basic and nested cases involving binary predicates, where the join path of the constraint is simple. Complex join paths (e.g. [}6] pp. 2-3) will be supported at a later stage.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B><I>2.2.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Binaries with predicate readings from the unconstrained roles (no nesting)</I></B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=95 src="Images/Image173.gif" width=318></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The object types may be entity or value types. The object types <I>B</I><SUB>1</SUB> ⬦ <I>Bn</I> are not necessarily distinct. If two or more of the <I>B<SUB>i</SUB></I> are identical, their instances in the verbalization must be distinguished by subscripting. The <I>positive and negative, alethic, relational</I> verbalization patterns are shown above. These patterns assume we have predicate readings starting (without front text) from each of the <I>n</I> roles of <I>A</I> (<I>n</I> ³2) shown here that are not spanned by the external uniqueness constraint. The <I>deontic </I>versions prepend the positive reading by "<B>It is obligatory that</B>" and replace "<B>impossible</B>" in the negative reading by "<B>forbidden</B>".</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +ve:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Building <B>and</B> RoomNr</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>at most one</B> Room is in <B>that</B> Building <B>and</B> has <B>that</B> RoomNr.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-ve:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>It is impossible that more than one</B>Room</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is in <B>the same</B> Building <B>and</B> has <B>the same</B> RoomNr.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ve:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Node<SUB>1</SUB> <B>and</B> Node<SUB>2</SUB></P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>at most one</B> Arrow is from <B>that</B> Node<SUB>1</SUB> <B>and</B> is to <B>that</B> Node<SUB>2</SUB>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; -- e.g. subtype-supertype connections</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-ve:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>It is impossible that more than one</B>Arrow</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is from <B>the same</B> Node<SUB>1</SUB> <B>and</B> is to <B>the same</B> Node<SUB>2</SUB>.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The above patterns do not work if any of the predicates have <I>front text</I>. For example, consider the fact types: "the location of Room is in Building; the local number for Room is RoomNr". For <I>front text</I> cases we instead use the contextual verbalization pattern discussed next (without context, general patterns that cater for front text cases where <I>A</I> may be identical to some of the <I>B</I> object types are awkward). </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>Contextual verbalization</I>is possible, by predeclaring the fact types as the local context for the constraint. The positive and negative, alethic versions are shown below. The deontic versions are obtained by adapting these as discussed as above. These patterns work whether or not the predicates have front text.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=89 src="Images/Image174.gif" width=451></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +ve:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Context</B>: Room is in Building; Room has RoomNr.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>In this context</B>, <B>each</B> Building, RoomNr <B>combination is associated with</B> <B>at most one</B> Room.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-ve:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Context</B>: Room is in Building; Room has RoomNr.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>In this context</B>, <B>it is impossible that</B></P>
<P class=MsoNormal><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the same </B>Building, RoomNr <B>combination is associated with</B> <B>more than one</B> Room.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(ft)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Context</B>: the location of Room is in Building; the local number for Room is RoomNr.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>In this context</B>, <B>each</B> Building, RoomNr <B>combination is associated with</B> <B>at most one</B> Room</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If role names exist for all the constrained roles, an attribute-style reading is possible, but we do not support it at this stage. </P>
<P class=MsoNormal><B><I>2.2.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Binaries without predicate readings from the unconstrained roles (no nesting)</I></B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If one or more of the unconstrained roles does not start a predicate reading, then contextual verbalization must be used for relational style. The pattern is as for the case just considered except that in declaring the context the primary readings of the fact types <I>F</I><SUB>1</SUB> .. <I>F<SUB>n</SUB></I> are used. Front text makes no difference. Deontic readings are adapted as before.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=89 src="Images/Image175.gif" width=451></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +ve:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Context</B>: Building includes Room; RoomNr is of Room.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>In this context</B>, <B>each</B> Building, RoomNr <B>combination</B> <B>is associated with</B> <B>at most one</B> Room.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-ve:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Context</B>: Building includes Room; RoomNr is of Room.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>In this context</B>, <B>it is impossible that</B></P>
<P class=MsoNormal><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the same </B>Building, RoomNr <B>combination is associated with</B> <B>more than one</B> Room.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>Preferred identification</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=88 src="Images/Image176.gif" width=333></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If the external uniqueness constraint is a declared preferred (double line), the constraint is verbalized as before (for the relevant pattern), followed by indication of the preferred identifier, as shown above.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Example:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>The unique </B>Building, RoomNr<B> combination provides the preferred identifier for </B>Room.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B><I></I></B>&nbsp;</P>
<P class=MsoNormal><B><I>2.2.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Nested binary</I></B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=74 src="Images/Image177.gif" width=371></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The nested object type <I>C</I> is an entity type, but all other object types may be entity or value types, not necessarily distinct. For the two fact types <I>F</I><SUB>1</SUB> and <I>F</I><SUB>2</SUB>, the primary reading is used; it does not matter which roles start a predicate reading, or whether there is front text. It is an error to declare the external uniqueness constraint as the preferred identifier. The positive, alethic, relational verbalization pattern is shown. </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Example:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Context</B>: Country plays Sport <B>is objectified as</B> Play; Play achieved Rank.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>In this context, each</B> Sport, Rank <B>combination is associated with at most one</B> Country.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The deontic version is obtained by prepending "<B>It is obligatory that</B>". No negative or attribute-style verbalizations are supported.</P>
<P class=MsoNormal>&nbsp;</P></DIV>]]></s>
    </Topic>
    <Topic Key="{C1659E4B-F2AD-4D12-A92A-B858A2405F76}" Name="Tech RPT 2 - Mandatory Constraints" Title="Mandatory Constraints" ContentsTitle="Mandatory Constraints" Status="Waiting Review" CreatedOn="22-02-2007 14:03:11" ModifiedOn="22-02-2007 15:24:53" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{7B6F520C-C1B9-4D50-A678-EE1D9BB17AF7}">
        <Notes/>
        <s k="BodyText"><![CDATA[<DIV class=Section1>
<P class=MsoNormal><B>3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mandatory Constraints</B></P>
<P class=MsoNormal><B></B>&nbsp;</P>
<P class=MsoNormal><B>3.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Simple Mandatory Constraint (SMaC)</B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B><I>3.1.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Unary predicate</I></B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=61 src="Images/Image178.gif" width=421></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The object type <I>A</I> may be an entity type or a value type. The alethic, positive, relational verbalizations are shown above on the left, while the deontic versions are shown on the right. This pattern is rare for the alethic case because for that case the object type could simply be renamed to include the meaning of the predicate <I>R</I>. The deontic version is more likely to occur, and is obtained by prepending "<B>It is obligatory that</B>". No negative or attribute-style verbalizations are supported. Unless the fact type is declared to allow bag populations, the implied UC is also verbalized (ignored here). To save space in later cases, we will typically not show the deontic diagrams.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Each</B>Square is rectangular in shape.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is obligatory that each</B> Doctor is licensed.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Once a week <B>each</B> Employee has a day off.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B><I>3.1.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Binary predicate</I></B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>Mandatory role starts a predicate reading</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=71 src="Images/Image179.gif" width=323></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The object types may be entity or value types. The <I>alethic, positive and negative relational</I> verbalizations are shown above. The quantifier "<B>any</B>" is used instead of "<B>some</B>" to remove a minor ambiguity in this context.&nbsp; If the user requests an <I>advanced</I> version of this verbalization, then "<B>a</B>" or "<B>an</B>" is used instead of "some" depending on whether the name of B starts with a consonant or vowel respectively (this feature is low priority, and is too simplistic for those cases where consonants are silent (e.g. "a Hourglass") and is also locale dependent (e.g. "a Herb"). As usual, the <I>deontic</I> versions prepend "<B>it is obligatory that</B>" to the positive form, and replace "<B>impossible</B>" by "<B>forbidden</B>" in the negative form.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Each</B>Person was born in <B>some</B> Country.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is impossible that any</B> Person was born in <B>no</B> Country.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is obligatory that each</B> Immigrant has <B>some</B> Passport</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is forbidden that any</B> Immigrant has <B>no</B> Passport.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Each</B> Person likes <B>some</B> Person. </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>An <I>attribute-style </I>reading is available if and only if <I>B</I>'s role is named. The positive and negative alethic forms are shown below. The deontic versions prepend "<B>It is obligatory that</B>" to the positive form, and replace "<B>impossible</B>" by "<B>forbidden</B>" in the negative form.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=38 src="Images/Image180.gif" width=319></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Each Person has some</B>birthCountry.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is impossible that any</B> Person <B>has no</B> birthCountry.</P>
<P class=MsoNormal><I>Mandatory role with a predicate reading including some front text (before the role's object type)</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=38 src="Images/Image181.gif" width=323></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>In this case, the predicate <I>ftR</I> includes some <I>front text</I> (<I>ft</I>) that precedes the name of the role's object type in the fact type reading. For example, the fact type reading "the birth of Person occurred in Country" uses the front text "the birth of". Such front text wordings are rare in English. The patterns for the alethic, relational verbalizations, shown above, simply insert the front text before the quantifier in the previous patterns. The ambiguity for the uniqueness constraint case does not occur here. These include the case where <I>A</I> = <I>B</I>. The deontic versions are obtained in the usual way. We do not support attribute-style for this case.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The birth of <B>each</B> Person occurred in <B>some</B> Country.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is impossible that </B>the birth of <B>any</B> Person occurred in<B> no</B> Country.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>Mandatory role does not start a predicate reading</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=38 src="Images/Image182.gif" width=378></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The positive and negative, alethic, relational verbalization patterns are shown above. For the positive, alethic case, "<B>It is necessary that</B>" may optionally be appended after the For-list. Other comments apply as for the previous case (deontic versions etc.).</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Person, <B>some</B> Country is the birthplace of <B>that</B> Person.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>For each</B> Employee, <B>it is impossible that no</B> Country is the birthplace of <B>that</B> Person.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If <I>A</I> and <I>B</I> are identical, their instances in the verbalization must be distinguished by subscripting as shown below (this is just a special case of the above pattern).</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=62 src="Images/Image183.gif" width=302></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Person<SUB>1</SUB>, <B>some</B> Person<SUB>2</SUB> is liked by <B>that</B> Person<SUB>1</SUB>.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>For each</B> Person<SUB>1</SUB>, <B>it is impossible that no</B> Person<SUB>2</SUB> is liked by <B>that</B> Person<SUB>1</SUB>.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If the <I>inverse predicate has front text</I>, this front text (ft) precedes the numeric quantifier in the above patterns, as shown in the alethic patterns below. If <I>A</I> = <I>B </I>subscripting is used. The deontic versions are adapted as usual. The predicate text always maintains its placeholder places, and may even include trailing text (the examples below are based on the fact type readings "in Country was born Person", "in Country Person was born" and "fortunately Person is liked by Person"). Such wordings are rare in English.</P>
<P class=MsoNormal><IMG height=38 src="Images/Image184.gif" width=375></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=62 src="Images/Image185.gif" width=301></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Person, in<B>some</B>Country was born <B>that</B> Person.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>For each</B> Person, <B>it is impossible that </B>in<B> no</B> Country was born <B>that</B> Person.</P>
<P class=MsoNormal><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For each</B>Person, in<B>some</B>Country <B>that</B> Person was born.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>For each</B> Person, <B>it is impossible that </B>in<B> no</B> Country <B>that</B> Person was born.</P>
<P class=MsoNormal><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For each</B>Person<SUB>1</SUB>, fortunately <B>some</B> Person<SUB>2</SUB> is liked by <B>that</B> Person<SUB>1</SUB>.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>For each</B> Person<SUB>1</SUB>, <B>it is impossible that </B>fortunately<B> no</B> Person<SUB>2</SUB> is liked by <B>that</B> Person<SUB>1</SUB>.</P>
<P class=MsoNormal><B><I>3.1.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N-ary predicate</I></B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>Mandatory role starts a predicate reading</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=58 src="Images/Image186.gif" width=268></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The positive, alethic, relational verbalization pattern is shown above. No negative version is supported (as negative verbalizations are cumbersome for this case). No subscripting is needed to distinguish different instances of the same object type. The deontic version prepends "<B>It is obligatory that</B>".</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Each</B>Programmer codes in <B>some</B> ProgrammingLanguage at <B>some</B> SkillLevel.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Each</B>Person eats <B>some</B> Food cooked by <B>some</B> Person.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is obligatory that each</B> Translator knows <B>some</B> ForeignLanguage at <B>some</B> SkillLevel.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If the predicate has <I>front text</I>, this is placed in front of the universal quantifier, as shown below.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=58 src="Images/Image187.gif" width=272></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Example:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; When hungry<B>each</B>Person eats <B>some</B> Food cooked by <B>some</B> Person.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>Mandatory role does not start a predicate reading</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=49 src="Images/Image188.gif" width=271><IMG height=49 src="Images/Image189.gif" width=277></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If <I>A</I> plays only one role in the predicate, the positive, alethic, relational verbalization is as shown above. No negative version is supported (too awkward). The deontic version is obtained by appending "<B>it is obligatory that</B>" to the For-list. Optionally, the alethic versions may append "<B>it is necessary that</B>" to the For-list.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Programmer, <B>some</B> ProgrammingLanguage<B> is coded in by that </B>Programmer at <B>some</B> SkillLevel.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>For each</B>Translator, <B>it is obligatory that some</B> ForeignLanguage is known by <B>that</B> Translator at <B>some</B> SkillLevel.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If <I>A</I> plays more than one role in the predicate, its different instances must be distinguished by subscripting. The positive, alethic, relational verbalization is as shown below. No negative version is supported. The deontic version appends "<B>It is obligatory that</B>" to the For-list.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=49 src="Images/Image190.gif" width=334></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Example:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Person<SUB>1</SUB>, <B>some</B> Food cooked by <B>some</B> Person<SUB>2</SUB> is eaten by <B>that </B>Person<SUB>1</SUB>.</P>
<P class=MsoNormal><B></B>&nbsp;</P>
<P class=MsoNormal>For the two patterns above, if the predicate <I>R</I> has <I>front text</I>, this is placed in front of the first existential quantifier, as shown below.</P>
<P class=MsoNormal><B></B>&nbsp;</P>
<P class=MsoNormal><IMG height=46 src="Images/Image191.gif" width=575></P>
<P class=MsoNormal><B></B>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Example:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Person<SUB>1</SUB>, when ready <B>some</B> Food cooked by <B>some</B> Person<SUB>2</SUB> is eaten by <B>that </B>Person<SUB>1</SUB>.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B>3.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Disjunctive Mandatory (Inclusive-Or) Constraint (DMaC)</B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B><I>3.2.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Unary predicates</I></B></P>
<P class=MsoNormal><B><I></I></B>&nbsp;</P>
<P class=MsoNormal><IMG height=99 src="Images/Image192.gif" width=425></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Here <I>R</I><SUB>1</SUB> .. <I>R<SUB>n</SUB></I> are <I>n</I> unary predicates (<I>n</I> ³2). The <I>alethic, positive and negative relational</I> verbalizations are shown above. Users should understand that "<B>or</B>" in verbalizations always means inclusive-or. The <I>deontic</I> versions prepend "<B>it is obligatory that</B>" to the positive form, and replace "<B>impossible</B>" by "<B>forbidden</B>" in the negative form. There is no attribute-style version.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Each</B>Person is male <B>or</B> is female.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is impossible that some</B> Person <B>participates in none of the following</B>:</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Person is male; Person is female.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Each</B> Plant is male <B>or</B> is female <B>or</B> is hermaphroditic.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is obligatory that each</B> Vehicle is purchased <B>or</B> is rented. </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If even one of the predicates has <I>front text</I>, the pattern changes to that shown below.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=99 src="Images/Image193.gif" width=425></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Example:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>For each</B>Person, when hungry <B>that</B> Person eats <B>or</B> when thirsty <B>that</B> Person drinks.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B><I>3.2.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Unary and/or Binary predicates</I></B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>Each constrained role starts a predicate reading</I></P>
<P class=MsoNormal><IMG height=117 src="Images/Image194.gif" width=390></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The <I>n</I> predicates <I>R</I><SUB>1</SUB> .. <I>R<SUB>n</SUB></I> (<I>n</I> ³2) are either unary or binary. The <I>B</I> object types are not necessarily distinct. The predicates may be all binary, all unary, or a mix of binary and unaries. Hence this pattern includes the unary-only, positive pattern just discussed as a special case. The <I>alethic, positive relational</I> verbalizations are shown above. Remove "<B>some</B><I>B<SUB>i</SUB></I>" for each unary predicate <I>R<SUB>i</SUB></I>, and <I>verbalize all the binaries before all the unaries</I> (if we swap the disjuncts in the first example below to yield "<B>Each</B>Lecturer is tenured <B>or</B> is contracted until <B>some</B> Date", it is not as obvious that "until <B>some</B> Date" applies only to the contracted lecturers).</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>No negative reading is supported. For the all-binary case, a negative reading is possible (<B>It is impossible that some</B><I>A R<SUB>1</SUB> </I><B>no</B><I> B<SUB>1</SUB> </I><B>and</B><I> R<SUB>2</SUB> </I><B>no</B><I> B<SUB>2</SUB> </I><B>and</B> ⬦<I> R<SUB>n</SUB></I> <B>no</B> <I>B<SUB>n </SUB></I>)but it is not worth the trouble to support this as it doesn't cater for unaries, and the previous pattern for unaries-only doesn't work for binaries if <I>A</I> plays more than one role in one of the predicates. No attribute version is supported (one may be easily be devised, but it is no clearer than the relational version). The <I>deontic</I> version prepends "<B>it is obligatory that</B>" to the positive form.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Each</B>Lecturer is contracted until <B>some</B> Date <B>or</B> is tenured.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is obligatory that each</B> Vehicle was purchased on <B>some</B> Date <B>or</B> was rented on <B>some</B> Date.. </P>
<P class=MsoNormal><I></I>&nbsp;</P>
<P class=MsoNormal><I>Front text adaptation:</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If even one of the predicates in the previous case has <I>front text</I>, then the following pattern is used instead. For those <I>R<SUB>i</SUB> </I>predicates without front text, the <I>ft<SUB>i</SUB></I> term is ignored.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=117 src="Images/Image195.gif" width=394></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Example:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Person, when hungry <B>that</B> Person eats <B>some</B> Food</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>or</B> when thirsty <B>that</B> Person drinks.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>Some constrained roles do not start a predicate reading</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=117 src="Images/Image196.gif" width=427></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>This pattern is used so long as at least one of the constrained roles does not start a predicate reading, and no predicate has front text. The diagram illustrates just one case. For binary fact types, if a predicate reading <I>R<SUB>i</SUB></I> from the constrained role is available, use it to form the disjunct "<B>that</B><I>A R<SUB>i</SUB></I> <B>some</B> <I>B<SUB>i</SUB></I>"; otherwise use the alternate predicate reading <I>S<SUB>i</SUB> </I>to form the disjunct "<B>some</B><I>B<SUB>i</SUB></I><B> </B><I>S<SUB>i</SUB></I><B> that</B> <I>A</I>". For each unary predicate <I>R<SUB>i</SUB></I>, use the disjunct "<B>that</B><I>A R<SUB>i</SUB></I>". Verbalize all the binaries before all the unaries. The <I>positive, alethic, relational</I> pattern is shown above. No negative or attribute versions are supported, as these are awkward or add no clarity. The deontic version prepends "<B>It is obligatory that</B>", making it clear that the scope of the modal operator includes the whole disjunction (placing the modal operator after the For-list would result in ambiguity, since the scope might be incorrectly be taken to exclude the second disjunct  consider the second example<I> </I>below with the obligation operator placed at the end of the first line instead of the start).</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Lecturer,</P>
<P class=MsoNormal><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; some</B>Date is the contract-expiry date for <B>that</B> Lecturer</P>
<P class=MsoNormal><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or </B><B>that</B> Lecturer is tenured.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is obligatory that for each</B> Vehicle, </P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>some</B> Date was the purchase-date for <B>that</B> Vehicle</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>or</B> <B>some</B> Date was the rental-date for <B>that</B> Vehicle. </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If any of the predicates has <I>front text</I>, the above pattern is adapted as shown below to place the front text before the "<B>that</B>" (for a predicate reading from the constrained role) and before the "<B>some</B>" for a predicate reading from the unconstrained role. The diagram shows front text for all predicates. If there is no front text for some predicate, the <I>ft</I> term in the pattern is ignored.&nbsp; </P>
<P class=MsoNormal><IMG height=121 src="Images/Image197.gif" width=343></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Example:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Person, when hungry <B>that</B> Person eats <B>some</B> Food</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>or</B> to address a thirst <B>some </B>Liquid is drunk by <B>that</B> Person.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B><I>3.2.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Unary and/or Binary and/or N-ary predicates</I></B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>These patterns simply generalize the previous unary and/or binary patterns, by including "<B>some</B>" before the additional object type instances. No subscripting is needed to distinguish instances of the same type.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>Each constrained role starts a predicate reading</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The <I>positive, alethic relational</I> pattern is shown below. The object types are not necessarily distinct. Each predicate <I>R<SUB>i</SUB></I> may have <I>ni</I> roles (<I>ni</I> ³0) following the role played by <I>A</I>. So the predicates may all be of different arity (unary upwards), and the object types may or may not be the same. Verbalize all the binaries before all the unaries. No negative or attribute versions are supported, as these are awkward or add no clarity. The <I>deontic</I> version prepends "<B>it is obligatory that</B>" to the positive form. </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=154 src="Images/Image198.gif" width=413></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Each </B>Partner became the husband of <B>some</B> Partner on <B>some</B> Date </P>
<P class=MsoNormal><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or </B>became the wife of <B>some</B> Partner on <B>some</B> Date.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>It is obligatory that each</B> Vehicle was purchased from <B>some</B> BranchNr of <B>some</B> AutoRetailer <B>or</B> is rented. </P>
<P class=MsoNormal><I></I>&nbsp;</P>
<P class=MsoNormal><I>Front text adaptation:</I></P>
<P class=MsoNormal><I></I>&nbsp;</P>
<P class=MsoNormal>If even one of the predicates in the previous case has <I>front text</I>, then the following pattern is used instead. Here if any <I>R<SUB>i</SUB> </I>predicate contains front text, this is simply included as part of the predicate reading.</P>
<P class=MsoNormal><I></I>&nbsp;</P>
<P class=MsoNormal><I>Some constrained roles do not start a predicate reading</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=158 src="Images/Image199.gif" width=414></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The <I>positive, alethic relational</I> pattern is shown above. The object types are not necessarily distinct. If <I>A</I> plays more than one role in at least one of the <I>R<SUB>i</SUB></I> predicates, subscript its instances to distinguish them.&nbsp; Each predicate <I>R<SUB>i</SUB></I> may have <I>ni</I> roles (<I>ni</I> ³0) plus the role played by <I>A</I>. Verbalize all the non-unaries before all the unaries. No negative or attribute versions are supported, as these are awkward or add no clarity. The deontic version prepends "<B>It is obligatory that</B>" to the positive form.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each </B>Partner<SUB>1</SUB>, on <B>some</B> Date <B>that</B> Partner<SUB>1</SUB> became the husband of <B>some</B> Partner<SUB>2</SUB></P>
<P class=MsoNormal><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or </B>on <B>some</B> Date <B>that</B> Partner<SUB>1</SUB> became the wife of <B>some</B> Partner<SUB>2</SUB>.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is obligatory that for each</B> Vehicle,&nbsp;<B>some</B> BranchNr of <B>some</B> AutoRetailer sold <B>that</B> Vehicle</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>or</B> <B>that</B> Vehicle is rented. </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><B>3.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Combined Mandatory/Unique (Exactly-one) Constraint (CMU)</B></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If a role has both a simple uniqueness and a mandatory constraint, and both constraints are selected for verbalization (e.g. by selecting the fact type), then if the configuration option to verbalize constraints in combined form is set to Yes, both constraints may be combined in a single, more compact verbalization as shown below. The main idea to use "<B>exactly one</B>" to abbreviate "<B>some </B>(<B>at least one</B>)<B> and at most one</B>". The current Visio tool supports this option for constraint input prompts, but does not support it for output verbalization. No unary predicate version is supported (as the set restriction aspect of a UC has no deontic form, but the mandatory constraint does). No <I>n</I>-ary version is supported (as a simple UC on an <I>n</I>-ary violates the <I>n</I>-1 rule).</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>Constrained role starts a predicate reading</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=67 src="Images/Image200.gif" width=454></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The verbalization pattern above is used for the <I>positive, relational, alethic form</I> of the constraint verbalization. The object types <I>A</I> and <I>B</I> are not necessarily distinct (so the right hand-hand diagram is simply a special case of the bottom left-hand diagram). No negative or attribute-style form is supported. The <I>deontic</I> version prepends "<B>it is obligatory that</B>" to the positive form. </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Each</B>Person was born in <B>exactly one</B> Country.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>It is obligatory that each</B> Immigrant has <B>exactly one</B> Passport</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Each</B> Person is identical to <B>exactly one</B> Person. </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>Front text adaptation:</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If the predicate contains front text, the verbalization pattern is adapted to that shown below, placing the front text before the first "<B>that</B>". This includes the case where <I>A</I> is identical to <I>B</I>.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=33 src="Images/Image201.gif" width=331></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Example:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each </B>Person, the birth of <B>that</B> Person occurred in <B>exactly one</B> Country.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>Constrained role does not start a predicate reading</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=95 src="Images/Image202.gif" width=326></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>The verbalization pattern above is used for the <I>positive, relational, alethic form</I> of the constraint verbalization. If the object types <I>A </I>and <I>B</I> are identical (bottom diagram), their instances must be distinguished by subscripting. No negative or attribute-style form is supported. The deontic version is obtained by appending "<B>it is obligatory that</B>" to the For-list. Optionally, the alethic versions may append "<B>it is necessary that</B>" to the For-list.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Examples:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each</B>Person, <B>exactly one</B> Country was the birthplace of <B>that </B>Person.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>For each</B> Immigrant, <B>it is obligatory that exactly one</B> Passport belongs to <B>that</B> Immigrant.</P>
<P class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>For each</B> Person<SUB>1</SUB>, <B>exactly one</B> Person<SUB>2</SUB> is identical to <B>that</B> Person<SUB>1</SUB>. </P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><I>Front text adaptation:</I></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>If the predicate contains front text, the verbalization pattern is adapted to that shown below, placing the front text before the "<B>exactly one</B>" quantifier. This includes the case where <I>A</I> is identical to <I>B</I>.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal><IMG height=33 src="Images/Image203.gif" width=325></P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>Example: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>For each </B>Person, in<B>exactly one</B>Country was born <B>that</B> Person.</P>
<P class=MsoNormal>&nbsp;</P>
<P class=MsoNormal>That completes the verbalization patterns for all uniqueness and mandatory constraints (with the exception of uniqueness constraints over complex join paths). Verbalization of other constraint types will be discussed in the next Technical Report.</P></DIV>]]></s>
    </Topic>
    <Topic Key="{9EAD38AF-9937-4BB8-8D17-157BA2ABCD43}" Name="Tech RPT 2 - Implementation" Title="Implementation" ContentsTitle="Implementation" Status="Complete" CreatedOn="22-02-2007 14:03:12" ModifiedOn="23-02-2007 14:11:53" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{7B6F520C-C1B9-4D50-A678-EE1D9BB17AF7}">
        <Notes/>
        <s k="BodyText"><![CDATA[<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; mso-list: l2 level1 lfo5; tab-stops: list .25in"><B style="mso-bidi-font-weight: normal"><FONT size=3>Implementation<?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p></o:p></FONT></B></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><B style="mso-bidi-font-weight: normal"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></B></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt">Implementing a verbalization pattern must be approached carefully because of the eventual size of any implementation. As you can tell from this document, which discusses only a subset of the possible constraints that need to be verbalized in an ORM tool, the number of potential variations is very high. A conservative estimate is that a full ORM verbalization implementation coded by hand would have 10,000-15,000 lines of code, or about 6 man months (again a conservative estimate) to create an initial implementation. Incremental maintenance costs on such an implementation would also be extremely high due to the size of the code. To succeed both short term and long term we decided to use a pattern-driven generative approach to implementing the code.<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><B style="mso-bidi-font-weight: normal"><SPAN style="FONT-SIZE: 10pt">4.1<SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Dynamic Verbalization Requirements<o:p></o:p></SPAN></B></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt">The rules for verbalization of a given constraint pattern are constant, but the actual text used for different parts of the verbalization depends on a number of environment-specific factors.<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></P>
<BLOCKQUOTE dir=ltr style="MARGIN-RIGHT: 0px">
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt">1. The most obvious environmental factor is output language. Although our reference implementation uses English verbalization phrases, verbalization in other languages should incur only incremental additional implementation costs.<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt">2. The same verbalization engine should be able to render different output formats. The NORMA tool's verbalization window will display html, but we may want different html for a report view, and plain text in other views. The same verbalization engine should be able to handle outputs in all of these formats.<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt">3. Personal verbalization preferences are also an environment factor. For example, by default we do not show the implied 'it is necessary that' before positive alethic constraints. However, any skilled user should be able to choose to see the explicit form, or phrase it as 'the following condition is necessary: '. Other verbalization text should be equally flexible.<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><?xml:namespace prefix = st1 ns = "urn:schemas-microsoft-com:office:smarttags" /><st1:metricconverter w:st="on" ProductID="4. A"><SPAN style="FONT-SIZE: 10pt">4. A</SPAN></st1:metricconverter><SPAN style="FONT-SIZE: 10pt"> skilled user should be able to easily adapt the verbalization output to the current target audience for the tool. Examples include an ORM instructor who would like to emphasize a specific quantifier in a lecture, or a consultant who would like to replace the default deontic 'it is obligatory that' with 'One ought to ensure that' or even the personalized '<I>CompanyName</I> policy requires that'.<o:p></o:p></SPAN></P></BLOCKQUOTE>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt">The goal of dynamic verbalization is to output verbalization that is easily verified by the reader. If the reader prefers a language other than English, then verbalize in the other language. If the reader wants a full report instead of individual diagram selections, then the same verbalization engine should be able to produce both a standalone printed report and a website of mini-reports for each object type, fact type, and constraint. Similarly, if readers want to see their company name mentioned in company-specific business rules, they should have this flexibility.<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 19.5pt; TEXT-INDENT: -19.5pt; TEXT-ALIGN: justify; mso-list: l0 level2 lfo1; tab-stops: list 19.5pt"><B style="mso-bidi-font-weight: normal"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-list: Ignore">4.2<SPAN style="FONT: 7pt 'Times New Roman'"><FONT face=Verdana>&nbsp;&nbsp;&nbsp;&nbsp; </FONT></SPAN></SPAN></SPAN></B><B style="mso-bidi-font-weight: normal"><SPAN style="FONT-SIZE: 10pt">Constructing a Verbalization Phrase<o:p></o:p></SPAN></B></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><B style="mso-bidi-font-weight: normal"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></B></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt">There are two approaches that can be used to generate a verbalization phrase. Both are combinations of user-provided predicate text and text particles provided by the verbalization engine. The first approach uses <I style="mso-bidi-font-style: normal">concatentation</I>,<I style="mso-bidi-font-style: normal"> </I>where pieces of a phrase are constructed by combining particles in a specific order. The second approach uses <I style="mso-bidi-font-style: normal">field replacement</I>, where the particles specify the location and order of the particles surrounding them. Let's break down the verbalized phrase '</SPAN><FONT face=Verdana><B style="mso-bidi-font-weight: normal"><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Arial Narrow','sans-serif'">Each</SPAN></B><SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Arial Narrow','sans-serif'"> Person was born in <B style="mso-bidi-font-weight: normal">some</B> Country</SPAN><SPAN style="FONT-SIZE: 10pt">' using both approaches.<o:p></o:p></SPAN></FONT></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.5in; TEXT-ALIGN: justify; mso-list: l0 level3 lfo1; tab-stops: list .5in"><B style="mso-bidi-font-weight: normal"><I style="mso-bidi-font-style: normal"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-list: Ignore">4.2.1<SPAN style="FONT: 7pt 'Times New Roman'"><FONT face=Verdana>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT></SPAN></SPAN></SPAN></I></B><B style="mso-bidi-font-weight: normal"><I style="mso-bidi-font-style: normal"><SPAN style="FONT-SIZE: 10pt">Concatenation Approach to Verbalization<o:p></o:p></SPAN></I></B></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><B style="mso-bidi-font-weight: normal"><I style="mso-bidi-font-style: normal"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></I></B></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt">To use concatenation to verbalize this phrase requires 7 strings to be combined in the correct order. The first three strings form the predicate text, which requires arity+1 strings for any predicate text. In this case, the leading and trailing strings of the binary predicate are empty, but that information is still required. The three predicate strings are {"", " was born in ", ""}. In addition to the predicate strings, we can round out the user-provided data with the object type names {"Person", "Country"}. The verbalization engine then provides the universal quantifier "each " and the existential quantifier "some ". The specified pattern (a simple mandatory constraint on a binary predicate where predicate text is available such that the mandatory role begins the reading) is now built as follows (using + to mean concatenation). Though not shown here, each verbalization starts with an initial capital letter and ends in a period "."<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 2pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>"" + "each " + "Person" + " was born in " + "some " + "Country" + ""<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 2pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt">In practice, generating formatted text makes this significantly more complicated because each particle must include formatting specifications before and after the text, thus tripling the number of text particles necessary to complete the phrase.<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-INDENT: 19.85pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.5in; TEXT-ALIGN: justify; mso-list: l0 level3 lfo1; tab-stops: list .5in"><B style="mso-bidi-font-weight: normal"><I style="mso-bidi-font-style: normal"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-list: Ignore">4.2.2<SPAN style="FONT: 7pt 'Times New Roman'"><FONT face=Verdana>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT></SPAN></SPAN></SPAN></I></B><B style="mso-bidi-font-weight: normal"><I style="mso-bidi-font-style: normal"><SPAN style="FONT-SIZE: 10pt">Field Replacement Approach to Verbalization<o:p></o:p></SPAN></I></B></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><B style="mso-bidi-font-weight: normal"><I style="mso-bidi-font-style: normal"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></I></B></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt">The field replacement approach uses numbered replacement fields. We'll show these in the format required for the .NET System.String.Format function, which uses (regular expression) "\{\d+\}" to denote a zero-based replacement field in a format string. For example, "{0}" in a format string is the placeholder for the first replacement field. The Format function takes a format string as the first argument, followed by arguments for the replacement fields. For our current phrase, the predicate text is "{0} was born in {1}" and the quantifiers become "each {0}" and "some {0}". The equation now looks like:<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 5pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt"><SPAN style="FONT-SIZE: 10pt">REPLACE("{0} was born in {1}", REPLACE("each {0}", "Person"), REPLACE("some {0}", "Country"))<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt"><SPAN style="FONT-SIZE: 2pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt"><SPAN style="FONT-SIZE: 5pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt"><SPAN style="FONT-SIZE: 10pt">Note that there are immediate advantages to this approach.<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.25in; mso-list: l3 level1 lfo2; tab-stops: list .5in"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-list: Ignore">1)<SPAN style="FONT: 7pt 'Times New Roman'"><FONT face=Verdana>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT></SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt">The model stores a single predicate text with replacement fields instead of arity+1 strings.<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.25in; mso-list: l3 level1 lfo2; tab-stops: list .5in"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-list: Ignore">2)<SPAN style="FONT: 7pt 'Times New Roman'"><FONT face=Verdana>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT></SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt">Adding formatting specifications to verbalization-provided quantifiers does not add any additional snippets.<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.25in; mso-list: l3 level1 lfo2; tab-stops: list .5in"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-list: Ignore">3)<SPAN style="FONT: 7pt 'Times New Roman'"><FONT face=Verdana>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT></SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt">Order dependency is eliminated: "each" may come before "Person" in English, but there is a strong likelihood that other languages will have some quantifiers either after or around a given replacement field. Using the concatenation approach would require either new code for each language or before/after specification for every phrase. Using the replacement approach removes all ordering and formatting considerations from the code by placing the onus for ordering specification on the snippet specifications.<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.25in"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt"><SPAN style="FONT-SIZE: 10pt">Using field replacement exclusively in the ORM2 verbalization engine allows all <I style="mso-bidi-font-style: normal">snippets </I>to be specified as user-modifiable data. Concatenation is used for generating lists only. Using field replacements simplifies the verbalization engine and enables data-driven snippet sets to be specified according to both language and user preferences. The snippets are considered dynamic data; how they are combined is specified statically for each verbalized model element.<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt"><B style="mso-bidi-font-weight: normal"><o:p><FONT size=3>&nbsp;</FONT></o:p></B></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 19.5pt; TEXT-INDENT: -19.5pt; TEXT-ALIGN: justify; mso-list: l0 level2 lfo1; tab-stops: list 19.5pt"><B style="mso-bidi-font-weight: normal"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-list: Ignore">4.3<SPAN style="FONT: 7pt 'Times New Roman'"><FONT face=Verdana>&nbsp;&nbsp;&nbsp;&nbsp; </FONT></SPAN></SPAN></SPAN></B><B style="mso-bidi-font-weight: normal"><SPAN style="FONT-SIZE: 10pt">Combining Verbalization Snippets<o:p></o:p></SPAN></B></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><B style="mso-bidi-font-weight: normal"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></B></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt">The process of implementing verbalization phrases for a given constraint involves identifying the required snippets and how to combine the snippets with user-provided data. This paper specifies a number of factors that are used to determine how constraints are verbalized. For example, the verbalization pattern used can depend on the availability of a predicate for a given reading order. The patterns used when a forward reading is available are radically different from the pattern used when only the reverse reading is available or when the forward reading contains front text. However, regardless of the pattern, the basic approach is the same: Recursively provide a set of replacement fields to populate either a model-provided (predicate text) or verbalization-engine-provided format string.<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>As previously discussed, even with all of the formatting work moved to a set of data-driven snippets, the size of a hand-written verbalization implementation is prohibitively large. To keep the implementation costs within reach and to easily verify fidelity with the specification we use an XML/XSLT-based generative approach for snippet creation. The generative approach repeatedly cycles through three steps:<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 5pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; mso-list: l4 level1 lfo3; tab-stops: list .5in"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-list: Ignore">1)<SPAN style="FONT: 7pt 'Times New Roman'"><FONT face=Verdana>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT></SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt">Schematize: <I style="mso-bidi-font-style: normal">Determine an XML schema that represents the patterns and conditions expressed in the verbalization specification.</I><o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.25in; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 5pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; mso-list: l4 level1 lfo3; tab-stops: list .5in"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-list: Ignore">2)<SPAN style="FONT: 7pt 'Times New Roman'"><FONT face=Verdana>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT></SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt">Populate: <I style="mso-bidi-font-style: normal">Populate the XML document with information from the schema.</I><o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 5pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; mso-list: l4 level1 lfo3; tab-stops: list .5in"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-list: Ignore">3)<SPAN style="FONT: 7pt 'Times New Roman'"><FONT face=Verdana>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT></SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt">Generate: <I style="mso-bidi-font-style: normal">Map the patterns and conditions represented in the XML document to code.</I><o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 5pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt">A fragment from our generation document shows the verbalization specification for a single-role mandatory constraint on both unary and binary predicates.<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 5pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN lang=FR style="FONT-SIZE: 10pt; mso-ansi-language: FR">&lt;Constraint type="MandatoryConstraint" patternGroup="SetConstraint"&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN lang=FR style="FONT-SIZE: 10pt; mso-ansi-language: FR"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><SPAN style="FONT-SIZE: 10pt">&lt;!-- 3.1.1 unary predicate --&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;!-- Each A R --&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;ConstrainedRoles constraintArity="1" factArity="1" sign="positive"&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;Snippet ref="ImpliedModalNecessityOperator"&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;Snippet ref="UniversalQuantifier"&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;Fact/&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;/Snippet&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;/Snippet&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;/ConstrainedRoles&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;!-- 3.1.2 binary predicate --&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;ConstrainedRoles constraintArity="1" factArity="2"&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;ConditionalReading&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;!-- mandatory constraint starts reading relational style --&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;!-- Each A R some B --&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;ReadingChoice match="RequireLeadReading"&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;Snippet ref="ImpliedModalNecessityOperator"&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;Fact readingChoice="Conditional"&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;PredicateReplacement match="included"&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 7">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;Snippet ref="UniversalQuantifier"/&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;/PredicateReplacement&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;PredicateReplacement&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 7">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;Snippet ref="ExistentialQuantifier"/&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;/PredicateReplacement&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;/Fact&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;/Snippet&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;/ReadingChoice&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;!-- mandatory role does NOT start reading --&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;!-- For each A, some B S that A --&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;ReadingChoice&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;Snippet ref="ForEachCompactQuantifier"&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;IterateRoles match="included" listStyle="SimpleList"/&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;Snippet ref="ImpliedModalNecessityOperator"&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;Fact&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 7">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;PredicateReplacement match="included"&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 8">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;Snippet ref="DefiniteArticle"/&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 7">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;/PredicateReplacement&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 7">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;PredicateReplacement&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 8">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;Snippet ref="ExistentialQuantifier"/&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 7">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;/PredicateReplacement&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;/Fact&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;/Snippet&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;/Snippet&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;/ReadingChoice&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;/ConditionalReading&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;/ConstrainedRoles&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt">&lt;/Constraint&gt;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt">This XML, along with similar XML used to generate the default snippet values, provides the full input for simple mandatory constraints on unary and binary predicates. The XML tags fall into four categories:<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 5pt"><o:p>&nbsp;</o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; mso-list: l1 level1 lfo4; tab-stops: list .5in"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-list: Ignore">1)<SPAN style="FONT: 7pt 'Times New Roman'"><FONT face=Verdana>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT></SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt">Type and pattern identification (Constraint). These tags tell the code generator which class to generate (in this case, MandatoryConstraint) and the type of pattern to recognize (SetConstraint).<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; mso-list: l1 level1 lfo4; tab-stops: list .5in"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-list: Ignore">2)<SPAN style="FONT: 7pt 'Times New Roman'"><FONT face=Verdana>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT></SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt">Snippet references (Snippet). Each snippet tag has the same number of child XML elements as replacement fields in the snippet.<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; mso-list: l1 level1 lfo4; tab-stops: list .5in"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-list: Ignore">3)<SPAN style="FONT: 7pt 'Times New Roman'"><FONT face=Verdana>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT></SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt">Conditional patterns (ConstraintRoles, ConditionalReading, ReadingChoice). These nodes translate into conditional branching instructions in code and represent conditions such as the availability of a predicate that starts with a specific role, the number of roles affected by the current constraint, or the arity of facts attached to that constraint.<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0in 0in 0pt 0.5in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; mso-list: l1 level1 lfo4; tab-stops: list .5in"><SPAN style="FONT-SIZE: 10pt"><SPAN style="mso-list: Ignore">4)<SPAN style="FONT: 7pt 'Times New Roman'"><FONT face=Verdana>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT></SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt">Other iteration and replacement constructs (IterateRoles, Fact, PredicateReplacement). These nodes create code to extract replacement fields from the current context element for use in the containing snippets. For example, the <I style="mso-bidi-font-style: normal">Fact</I> element represents the predicate text (complete with replacement fields) from the ORM model. The default replacement fields are the object type names, but each object type can be wrapped in another snippet. The match="include" attribute refers to the roles from the context constraint object. The PredicateReplacement elements for the last Fact entry in the sample XML indicates that we should wrap all constrained roles with the <I style="mso-bidi-font-style: normal">DefiniteArticle</I> snippet, all other roles with the <I style="mso-bidi-font-style: normal">ExistentialQuantifier</I> snippet.<o:p></o:p></SPAN></P>]]></s>
    </Topic>
    <Topic Key="{26E407A8-488A-4981-9AC0-5307464E7931}" Name="Tech RPT 2 - References" Title="References" ContentsTitle="References" Status="In Progress" CreatedOn="22-02-2007 14:03:12" ModifiedOn="28-02-2007 14:09:44" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="False" IncludeInHelpFile="True" HelpContextIDs="" Category="{7B6F520C-C1B9-4D50-A678-EE1D9BB17AF7}">
        <Notes/>
        <s k="BodyText"><![CDATA[<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref112569903><FONT color=#000000><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">1.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T.A. &amp; Harding, J. 1993, 'Automated support for verbalization of conceptual schemas', <I style="mso-bidi-font-style: normal">Proc. 4th Workshop on Next Generation CASE Tools</I>, eds S. Brinkkemper &amp; F. Harmsen, Univ. Twente Memoranda Informatica 93-32, pp. 151-161, </SPAN></FONT></A><?xml:namespace prefix = st1 ns = "urn:schemas-microsoft-com:office:smarttags" /><st1:place w:st="on"><st1:City w:st="on"><SPAN style="mso-bookmark: _Ref112569903"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Paris</SPAN></SPAN></st1:City></st1:place><SPAN style="mso-bookmark: _Ref112569903"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"> (June).</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref112570055><FONT color=#000000><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">2.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T. A., Evans, K, Hallock, P. &amp; MacLean, W. 2003, <I>Database Modeling with Microsoft<SUP>®</SUP> Visio for </I></SPAN></FONT></A><st1:City w:st="on"><SPAN style="mso-bookmark: _Ref112570055"><I><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Enterprise</SPAN></I></SPAN></st1:City><SPAN style="mso-bookmark: _Ref112570055"><I><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"> Architects</SPAN></I></SPAN><SPAN style="mso-bookmark: _Ref112570055"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">, Morgan Kaufmann, <st1:place w:st="on"><st1:City w:st="on">San Francisco</st1:City></st1:place>.</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref112570313><FONT color=#000000><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">3.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T.A. 2003, 'Verbalizing Business Rules: Part 1', <I>Business Rules Journal</I>, Vol.&nbsp;4, No.&nbsp;4, (April&nbsp;2003), URL:&nbsp;&nbsp;</SPAN></FONT></A><A href="http://www.brcommunity.com/a2003/b199.html"><FONT size=2><SPAN style="mso-bookmark: _Ref112570313"><SPAN style="COLOR: windowtext; FONT-FAMILY: 'Times New Roman','serif'; TEXT-DECORATION: none; text-underline: none">http://www.BRCommunity.com/a2003/b138.html</SPAN></SPAN><SPAN style="mso-bookmark: _Ref112570313"></SPAN></FONT></A><SPAN style="mso-bookmark: _Ref112570313"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">.</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref112570337><FONT color=#000000><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">4.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T.A. 2003, 'Verbalizing Business Rules: Part 2', <I style="mso-bidi-font-style: normal">Business Rules Journal</I>, Vol.&nbsp;4, No.&nbsp;5, (June 2003), URL:&nbsp;&nbsp;http://www.BRCommunity.com//a2003/b152.html.</SPAN></FONT></A><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref51832596><FONT color=#000000><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">5.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T. A. 2003, 'Verbalizing Business Rules: Part 3', <I style="mso-bidi-font-style: normal">Business Rules Journal</I>, Vol. 4, No. 8 (August 2003), URL:&nbsp;</SPAN></FONT></A><A href="http://www.brcommunity.com/a2003/b152.html"><SPAN style="mso-bookmark: _Ref51832596"><SPAN style="FONT-SIZE: 10pt; COLOR: windowtext; FONT-FAMILY: 'Times New Roman','serif'; TEXT-DECORATION: none; text-underline: none">http://www.BRCommunity.com/a2003/b163.html</SPAN></SPAN></A><SPAN style="mso-bookmark: _Ref51832596"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">.</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"> <o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref57891989><FONT color=#000000><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">6.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T. A. 2003, 'Verbalizing Business Rules: Part 4', <I style="mso-bidi-font-style: normal">Business Rules Journal</I>, Vol. 4, No. 10 (October 2003), URL:&nbsp;</SPAN></FONT></A><A href="http://www.brcommunity.com/a2003/b172.html"><SPAN style="mso-bookmark: _Ref57891989"><SPAN style="FONT-SIZE: 10pt; COLOR: windowtext; FONT-FAMILY: 'Times New Roman','serif'; TEXT-DECORATION: none; text-underline: none">http://www.BRCommunity.com/a2003/b172.html</SPAN></SPAN></A><SPAN style="mso-bookmark: _Ref57891989"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">.</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">7.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><A name=_Ref63934562><FONT color=#000000>Halpin, T. A. 2004, 'Verbalizing Business Rules: Part 5', <I style="mso-bidi-font-style: normal">Business Rules Journal</I>, Vol. 5, No. 2 (February 2004), URL:&nbsp;http://www.BRCommunity.com/a2004/b179.html.</FONT></A><o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref112570369><FONT color=#000000><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">8.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T. A. 2004, 'Verbalizing Business Rules: Part 6', <I style="mso-bidi-font-style: normal">Business Rules Journal</I>, Vol. 5, No. 4 (April, 2004), URL:&nbsp;http://www.BRCommunity.com</SPAN></FONT></A><A name=_Ref71106859><SPAN style="mso-bookmark: _Ref112570369"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><FONT color=#000000>/a2004/b183.html.</FONT></SPAN></SPAN></A><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref112570375><FONT color=#000000><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">9.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T. A. 2004, 'Verbalizing Business Rules: Part 7', <I style="mso-bidi-font-style: normal">Business Rules Journal</I>, Vol. 5, No. 7 (July, 2004), URL:&nbsp;http://www.BRCommunity.com/a2004/b198.html.</SPAN></FONT></A><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref112570385><FONT color=#000000><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">10.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T. A. 2004, 'Verbalizing Business Rules: Part 8', <I style="mso-bidi-font-style: normal">Business Rules Journal</I>, Vol. 5, No. 9 (September, 2004), URL:&nbsp;http://www.BRCommunity.com/a2004/b205.html.</SPAN></FONT></A><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref112570394><FONT color=#000000><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">11.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T. A. 2004, 'Verbalizing Business Rules: Part 9', <I style="mso-bidi-font-style: normal">Business Rules Journal</I>, Vol. 5, No. 12 (December, 2004), URL:&nbsp;</SPAN></FONT></A><FONT size=2><SPAN style="mso-bookmark: _Ref112570394"><SPAN style="FONT-FAMILY: 'Times New Roman','serif'; mso-bidi-font-family: Arial">http://www.BRCommunity.com/a2004/b215.html</SPAN></SPAN><SPAN style="mso-bookmark: _Ref112570394"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">.</SPAN></SPAN></FONT><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref112570409><FONT color=#000000><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">12.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T. 2004, 'Business Rule Verbalization', <I style="mso-bidi-font-style: normal">Information Systems Technology and its Applications</I>, Proc. ISTA-2004, (eds Doroshenko, A., Halpin, T. Liddle, S. &amp; Mayr, H), </SPAN></FONT></A><st1:place w:st="on"><st1:City w:st="on"><SPAN style="mso-bookmark: _Ref112570409"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Salt Lake City</SPAN></SPAN></st1:City></st1:place><SPAN style="mso-bookmark: _Ref112570409"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">, Lec. Notes in Informatics, vol. P-48, pp. 39-52.</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref112570420><FONT color=#000000><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">13.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T. A. 2005, 'Verbalizing Business Rules: Part 10', <I style="mso-bidi-font-style: normal">Business Rules Journal</I>, Vol. 6, No. 4 (April, 2005), URL:&nbsp;</SPAN></FONT></A><A href="http://www.brcommunity.com/a2005/b229.html"><SPAN style="mso-bookmark: _Ref112570420"><SPAN style="FONT-SIZE: 10pt; COLOR: windowtext; FONT-FAMILY: 'Times New Roman','serif'; TEXT-DECORATION: none; text-underline: none">http://www.BRCommunity.com/a2005/b229.html</SPAN></SPAN></A><SPAN style="mso-bookmark: _Ref112570420"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">.</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref112570434><FONT color=#000000><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">14.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T. A. 2005, 'Verbalizing Business Rules: Part 11', <I style="mso-bidi-font-style: normal">Business Rules Journal</I>, Vol. 6, No. 6 (June 2005), URL:&nbsp;&nbsp;</SPAN></FONT></A><A href="http://www.brcommunity.com/a2005/b238.html"><SPAN style="mso-bookmark: _Ref112570434"><SPAN style="FONT-SIZE: 10pt; COLOR: windowtext; FONT-FAMILY: 'Times New Roman','serif'; TEXT-DECORATION: none; text-underline: none">http://www.BRCommunity.com/a2005/b238.html</SPAN></SPAN></A><SPAN style="mso-bookmark: _Ref112570434"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">.</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref138056470><FONT color=#000000><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">15.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T. 2005, 'Verbalizing Business Rules: Part 12', <I>Business Rules Journal</I>, Vol. 6, No. 10 (Oct. 2005), URL: </SPAN></FONT></A><A href="http://www.brcommunity.com/a2005/b252.html"><SPAN style="mso-bookmark: _Ref138056470"><SPAN style="FONT-SIZE: 10pt; COLOR: windowtext; FONT-FAMILY: 'Times New Roman','serif'; TEXT-DECORATION: none; text-underline: none">http://www.BRCommunity.com/a2005/b252.html</SPAN></SPAN></A><SPAN style="mso-bookmark: _Ref138056470"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">.</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref131996786><FONT color=#000000><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">16.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T. 2005, 'Verbalizing Business Rules: Part 13', <I>Business Rules Journal</I>, Vol. 6, No. 12 (December 2005), URL: http://www.BRCommunity.com/a2005/b261.html.</SPAN></FONT></A><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref131996819><FONT color=#000000><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">17.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T. 2006, 'Verbalizing Business Rules: Part 14', <I>Business Rules Journal</I>, (in press).</SPAN></FONT></A><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref131996835><FONT color=#000000><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><SPAN style="mso-list: Ignore">18.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T. 2006, 'Verbalizing Business Rules: Part 15', <I>Business Rules Journal</I>, (in press).</SPAN></FONT></A><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'"><o:p></o:p></SPAN></P>
<P class=Body style="MARGIN: 0in 0in 0pt 0.25in; TEXT-INDENT: -0.25in; TEXT-ALIGN: justify; tab-stops: list .25in; mso-list: l0 level1 lfo1"><A name=_Ref112570815><FONT color=#000000><SPAN lang=DA style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'; mso-ansi-language: DA"><SPAN style="mso-list: Ignore">19.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">Halpin, T. 2005, </SPAN></FONT></A><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'">'ORM 2', <I>On the Move to Meaningful Internet Systems 2005: OTM 2005 Workshops</I>, eds. </SPAN><SPAN lang=DA style="FONT-SIZE: 10pt; FONT-FAMILY: 'Times New Roman','serif'; mso-ansi-language: DA">R. Meersman, Z. Tari, P. Herrero et al., Cyprus. Springer LNCS 3762, pp 676-87.<o:p></o:p></SPAN></P>]]></s>
    </Topic>
    <Topic Key="{5172E870-4B5D-4F30-B839-7F42BE385AEB}" Name="Dev Docs Title" Title="Development Documentation" ContentsTitle="Development Documentation" Status="In Progress" CreatedOn="26-02-2007 14:09:12" ModifiedOn="26-02-2007 14:12:05" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="{69564419-AA92-4F5A-AEC7-E3054C4CA000}">
        <Notes/>
        <s k="BodyText"><![CDATA[<P align=center><IMG alt="" src="images\Image001.jpg" border=0></P>
<P align=center>Development Documentation</P>
<P align=center>&nbsp;</P>
<P align=center>This documentation is currently under compilation.</P>
<P align=center>Please visit NORMA project site on Sourceforge.net for development information and FAQ.</P>
<P align=center><A href="http://sourceforge.net/projects/orm">http://sourceforge.net/projects/orm</A></P>]]></s>
    </Topic>
    <Topic Key="{874017A5-F3F4-43BD-BF4D-20B301C9C4CA}" Name="FAQ Title page" Title="FAQ" ContentsTitle="FAQ" Status="In Progress" CreatedOn="26-02-2007 14:13:23" ModifiedOn="26-02-2007 14:15:08" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="True" IncludeInHelpFile="True" HelpContextIDs="" Category="C4">
        <Notes/>
        <s k="BodyText"><![CDATA[<P align=center><IMG alt="" src="images\Image001.jpg" border=0></P>
<P align=center>Frequently Asked Questions</P>
<P align=center>&nbsp;</P>
<P align=center>This documentation is currently under compilation.</P>
<P align=center>Please visit NORMA project site on Sourceforge.net for and FAQ.</P>
<P align=center><A href="http://sourceforge.net/projects/orm">http://sourceforge.net/projects/orm</A></P>
<P align=center>NORMA Forum: <A href="http://sourceforge.net/forum/?group_id=158881">http://sourceforge.net/forum/?group_id=158881</A></P>]]></s>
    </Topic>
    <Topic Key="{146A422E-53CB-4B28-9389-E45CD52C6F9B}" Name="Tutorials" Title="Title Page" ContentsTitle="Title Page" Status="In Progress" CreatedOn="01-03-2007 14:08:40" ModifiedOn="01-03-2007 14:11:44" LayoutName="" AllStyleSheets="True" AllScripts="True" AutoGenerateIndexEntry="False" IncludeInHelpFile="True" HelpContextIDs="" Category="C4">
        <Notes/>
        <s k="BodyText"><![CDATA[<P align=center><IMG alt="" src="images\Image001.jpg" border=0></P>
<P align=center><FONT size=3><U>Available Tutorials</U></FONT></P>
<P align=center>- <A href="Creating a simple ORM schema using the NORMA tool.html">Creating a simple ORM schema using the NORMA tool</A></P>
<P align=center>- <A href="Generating a Relational View using an ORM schema in NORMA.html">Generating a Relational View using an ORM schema</A></P>
<P align=center>- <A href="Generating a DDL code using an ORM schema in NORMA.html">Generating DDL code using an ORM schema</A></P>
<P align=center>- <A href="Generating a other code types using an ORM schema in NORMA.html">Generating other code types using an ORM schema</A>&nbsp;</P>
<P align=center>&nbsp;</P>
<P align=center>Please visit NORMA project site on Sourceforge.net for and FAQ.</P>
<P align=center><A href="http://sourceforge.net/projects/orm">http://sourceforge.net/projects/orm</A></P>
<P align=center>NORMA Forum: </P>
<P align=center><A href="http://sourceforge.net/forum/?group_id=158881">http://sourceforge.net/forum/?group_id=158881</A></P>]]></s>
    </Topic>
    <GlossaryItems/>
    <Nodes>
        <n key="{E17D6A99-A9A8-4B39-94AE-3619589E96A0}" nt="1" ct="1" c="Introduction" i="-1" cfn="" tid="{12E9716E-59AA-4178-9EE7-A0743AE78E24}" url=""/>
        <n key="{6B67E0C1-C2A5-44FF-B08C-26999C0E7B71}" nt="1" ct="1" c="ORM Reference Tech Report 1" i="-1" cfn="" tid="{C63D3736-E030-4720-B7BA-324FE505472F}" url="">
            <n key="{1A72DF72-578B-4BF1-8DED-C6CC5CB1BDC4}" nt="1" ct="1" c="Abstract Introduction" i="-1" cfn="" tid="{624EC9C9-67AF-4A21-AA61-F6BC03BF8B04}" url=""/>
            <n key="{40060FDC-C718-4967-B715-15E7A82FA31B}" nt="1" ct="1" c="" i="-1" cfn="" tid="{01AA4BA5-22D1-4FFA-AC93-51E5D76D44A8}" url=""/>
            <n key="{17EA19FD-8106-4F08-9B73-0EB2D3ABF86A}" nt="1" ct="1" c="" i="-1" cfn="" tid="{5508619A-6B53-4B9F-9059-013534449D2E}" url=""/>
            <n key="{61CA3041-EFC1-4744-AB6E-4F08B73DF04C}" nt="1" ct="1" c="" i="-1" cfn="" tid="{F6FFBF05-60FD-4EB9-AF27-63EF585238D3}" url=""/>
            <n key="{3003AC24-F46C-4B8A-9EE2-9A8C7232671C}" nt="1" ct="1" c="" i="-1" cfn="" tid="{FE7AE1A2-DA17-44E3-AE59-DC175FF28734}" url=""/>
            <n key="{13E9DE94-0A86-4C43-9FF8-D3E09AF6030F}" nt="1" ct="1" c="" i="-1" cfn="" tid="{FB12E246-850C-4AA0-A984-3E568E335AD0}" url=""/>
            <n key="{744555F5-228E-4D10-A9B5-6A1805A788A9}" nt="1" ct="1" c="" i="-1" cfn="" tid="{A78030FE-BE6B-4CD0-8040-25223A62B5F9}" url=""/>
            <n key="{83539395-47D9-4A78-B20D-63283792250F}" nt="1" ct="1" c="" i="-1" cfn="" tid="{C9DA5D6B-4823-424A-81A4-1A435EAE3AC0}" url=""/>
            <n key="{82477E61-4B20-4BB2-B467-99542D39BC54}" nt="1" ct="1" c="" i="-1" cfn="" tid="{9B1BFC60-303C-4F6A-8C02-1547EB66D316}" url=""/>
            <n key="{8E277103-371E-412B-8F67-BE6F1288ECC2}" nt="1" ct="1" c="" i="-1" cfn="" tid="{0529912A-C93A-4E92-9E8A-054C7B5BF86A}" url=""/>
            <n key="{6D8F782C-F44E-4FAA-A8AC-846C708CA474}" nt="1" ct="1" c="" i="-1" cfn="" tid="{2EFFE887-032E-435E-8C35-024C9B53D834}" url=""/>
            <n key="{3CD2CA4D-D3E6-4A36-A02B-24B12001CAD3}" nt="1" ct="1" c="" i="-1" cfn="" tid="{294E0A64-6E56-4003-B089-0366435C3BDB}" url=""/>
            <n key="{7F8839EE-6CDB-438C-9811-23045C881AAE}" nt="1" ct="1" c="" i="-1" cfn="" tid="{3BE21BA4-1546-4F9E-9D14-A4745337D2FD}" url=""/>
            <n key="{7D0D9079-6E77-4734-B06B-26F4666BBB94}" nt="1" ct="1" c="" i="-1" cfn="" tid="{7F36ED66-2FA4-4ED9-A04F-9C1EEFF82A22}" url=""/>
            <n key="{BD4C1B98-C681-4973-9AD3-91F09B26F0DA}" nt="1" ct="1" c="" i="-1" cfn="" tid="{D63EA8A1-D1FD-4A41-A5F8-6C714A5E5117}" url=""/>
            <n key="{43C5D7E3-2A56-40ED-A25E-C8C428983FA9}" nt="1" ct="1" c="" i="-1" cfn="" tid="{099EE617-CA80-4DDD-A273-4D409DE40844}" url=""/>
            <n key="{9FF3A957-8C01-4B3E-B39A-970D3B9A2E24}" nt="1" ct="1" c="" i="-1" cfn="" tid="{345D5D6A-D2F2-4250-883C-4B7A871C0407}" url=""/>
            <n key="{806303CB-312C-4BF2-830D-B22A2C9CC594}" nt="1" ct="1" c="" i="-1" cfn="" tid="{54634E52-02AC-4379-94EF-FA9B84F786F6}" url=""/>
            <n key="{6C376BBA-9F90-4D34-9315-B7DE66EAF646}" nt="1" ct="1" c="" i="-1" cfn="" tid="{ACB37F39-F0B3-4869-9121-633769C567CF}" url=""/>
        </n>
        <n key="{73262F11-99EA-455B-A69A-53FE56D6DC59}" nt="1" ct="1" c="ORM 2 Constraint Verbalization" i="-1" cfn="" tid="{0E43E58B-4598-418A-AF6E-7AE6214EAFA2}" url="">
            <n key="{DA895A9B-2233-4091-9905-AA0E3CE41250}" nt="1" ct="1" c="Contents" i="-1" cfn="" tid="{A83F3A92-5CEA-4677-8E88-4C62535D78A3}" url=""/>
            <n key="{E1A537E9-4191-44EA-8601-26415DCF9CEE}" nt="1" ct="1" c="Introduction" i="-1" cfn="" tid="{2766F2D8-6CF1-4792-8350-E9CB0F35481C}" url=""/>
            <n key="{F273B4A3-BDCD-42D0-99E7-D309F109FE89}" nt="1" ct="1" c="Uniqueness Constraints" i="-1" cfn="" tid="{CD615016-64F2-4319-AC31-F73F59B1C829}" url=""/>
            <n key="{237F8299-0CDF-411C-B907-AE6BB55FB97B}" nt="1" ct="1" c="Mandatory Constraints" i="-1" cfn="" tid="{C1659E4B-F2AD-4D12-A92A-B858A2405F76}" url=""/>
            <n key="{A0409E4C-8451-4BAE-AAB8-9669871548B4}" nt="1" ct="1" c="Implementation" i="-1" cfn="" tid="{9EAD38AF-9937-4BB8-8D17-157BA2ABCD43}" url=""/>
            <n key="{19D969E1-0EF5-48DD-B425-CD6FA377E48F}" nt="1" ct="1" c="References" i="-1" cfn="" tid="{26E407A8-488A-4981-9AC0-5307464E7931}" url=""/>
        </n>
        <n key="{8AD29060-429B-4ED4-B754-8C337523D348}" nt="1" ct="1" c="Tutorials" i="-1" cfn="" tid="{146A422E-53CB-4B28-9389-E45CD52C6F9B}" url="">
            <n key="{098248E2-C2A4-479E-BD53-B6DCBF20C468}" nt="1" ct="1" c="Creating a Simple Diagram" i="-1" cfn="" tid="{65F9333D-A2CC-416E-BD6A-ED0E91460E58}" url=""/>
            <n key="{6A9056A1-6AE7-4305-B9DE-82B961541589}" nt="1" ct="1" c="DDL Code Generation" i="-1" cfn="" tid="{9F0DB88C-853E-4678-9478-226F220AE040}" url=""/>
            <n key="{E0AD5E80-23CE-4547-AC52-49DC3F981DB4}" nt="1" ct="1" c="Other Code Generation" i="-1" cfn="" tid="{C8E88885-885D-4FE4-BEAE-DEAA34D46DF0}" url=""/>
            <n key="{066DC30B-215C-4276-9C52-9E1B62690277}" nt="1" ct="1" c="" i="-1" cfn="" tid="{01E56D06-3F64-47C1-A5BA-9100ABD6C077}" url=""/>
        </n>
        <n key="{89DDC6C4-03D2-402F-AB5F-FDA76E5608BA}" nt="1" ct="1" c="Development Documentation" i="-1" cfn="" tid="{5172E870-4B5D-4F30-B839-7F42BE385AEB}" url=""/>
        <n key="{C4407534-5A03-4ED7-9EE5-C59833EB05AC}" nt="1" ct="1" c="FAQ" i="-1" cfn="" tid="{874017A5-F3F4-43BD-BF4D-20B301C9C4CA}" url="">
            <n key="{BC5D249D-4F0A-4C92-B1DD-47C8A72BE779}" nt="0" ct="2" c="Sourceforge" i="-1" cfn="" tid="" url="http://sourceforge.net/projects/orm"/>
        </n>
    </Nodes>
    <Tasks/>
    <BuildProfiles>
        <BuildProfile ID="{ED61CAAF-B217-429E-92BD-C78484CA18E6}" Name="Default" OutputDirectory="Build\Default\" CompileHelpFile="True" HTMLHelpVersion="2" H2Namespace="NeumontORMArchitect" H2FileID="NeumontORMArchitect" H2PlugIn="Neumont.Tools.ORM" HelpFileName="Build\vs_NormA.hxs" UseBuildFlags="False" ProjectTitle="Neumont ORM Architect" RemoveOutputFiles="False" BuildFlags="" IncludeInBuild="True" DefaultTopicID="" LocaleID="0">
            <TemplateProperty Name="CopyrightNotice">(c)2005, Neumont University.  All rights reserved.</TemplateProperty>
        </BuildProfile>
    </BuildProfiles>
    <ProjectProperties/>
</HSProject>

