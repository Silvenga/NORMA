<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:oil="http://schemas.orm.net/OIAL" xmlns:odt="http://schemas.orm.net/ORMDataTypes">
	<xsl:output indent="yes" cdata-section-elements="no" method="xml"/>
	<xsl:template match="/">
		<xsl:apply-templates select="*"/>
	</xsl:template>
	<xsl:template match="oil:model">
		<xsl:comment>THIS DOCUMENT TYPE DEFINITION (DTD) WAS GENERATED BY THE ORM2 TOOL</xsl:comment>
		<xsl:variable name="modelName" select="@name"/>
		<xsl:text disable-output-escaping="yes">&lt;!DOCTYPE  </xsl:text><xsl:value-of select="$modelName"/>
		<xsl:text>[</xsl:text>
		<xsl:text disable-output-escaping="yes">&lt;!ELEMENT </xsl:text>
		<xsl:value-of select="$modelName"/>
		<xsl:text> (</xsl:text>
		<xsl:for-each select="oil:conceptType">
			<xsl:value-of select="concat(@name,'Elements')"/>
			<xsl:if test="following-sibling::*">
				<xsl:text>, </xsl:text>
			</xsl:if>
		</xsl:for-each>
		<xsl:text>)</xsl:text>
		<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
		<xsl:for-each select="oil:conceptType">
			<xsl:text disable-output-escaping="yes">&lt;!ELEMENT </xsl:text>
			<xsl:value-of select="concat(@name,'Elements')"/>
			<xsl:text> (</xsl:text>
			<xsl:value-of select="@name"/>
			<xsl:text>*</xsl:text>
			<xsl:text>)</xsl:text>
			<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
		</xsl:for-each>
		<xsl:apply-templates select="//oil:conceptType"/>
		<xsl:text disable-output-escaping="yes">]&gt;</xsl:text>
	</xsl:template>
	<xsl:template match="oil:conceptType">
		<xsl:text disable-output-escaping="yes">&lt;!ELEMENT </xsl:text>
		<xsl:value-of select="@name"/>
		<xsl:choose>
			<xsl:when test="child::oil:conceptTypeRef | child::oil:conceptType">
				<xsl:text> (</xsl:text>
				<xsl:for-each select="oil:conceptType | oil:conceptTypeRef">
					<xsl:value-of select="@name"/>
					<xsl:variable name="MandatoryLevel" select="@mandatory"/>
						<xsl:choose>
							<xsl:when test="$MandatoryLevel='true' or $MandatoryLevel='alethic' or $MandatoryLevel='1'">
								<xsl:choose>
									<xsl:when test="self::oil:conceptTypeRef">
										<xsl:text>+</xsl:text>
									</xsl:when>
									<xsl:otherwise>
										<!--Exactly one is default in DTD-->
									</xsl:otherwise>
								</xsl:choose>
							</xsl:when>
					</xsl:choose>
					<xsl:if test="following-sibling::oil:conceptType | following-sibling::oil:conceptTypeRef">
						<xsl:text>, </xsl:text>
					</xsl:if>
				</xsl:for-each>
				<xsl:text>)</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text> EMPTY</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
		<xsl:choose>
			<xsl:when test="oil:informationType">
				<xsl:text disable-output-escaping="yes">&lt;</xsl:text>
				<xsl:text>!ATTLIST </xsl:text>
				<xsl:value-of select="@name"/>
				<xsl:for-each select="oil:informationType">
					<xsl:variable name="MandatoryLevel" select="@mandatory"/>
					<xsl:text> </xsl:text>
					<xsl:value-of select="@name"/>
					<xsl:variable name="InformationTypeFormat" select="/oil:model/oil:informationTypeFormats/child::*[@name = current()/@name]"/>
					<xsl:choose>
						<xsl:when test="$InformationTypeFormat/odt:enumeration">
							<xsl:text> (</xsl:text>
							<xsl:for-each select="$InformationTypeFormat/odt:enumeration">
								<xsl:value-of select="@value"/>
								<xsl:if test="following-sibling::*">
									<xsl:text> | </xsl:text>
								</xsl:if>
							</xsl:for-each>
							<xsl:text>)</xsl:text>
							<xsl:choose>
								<xsl:when test="$MandatoryLevel='alethic' or $MandatoryLevel = 'true' or $MandatoryLevel = '1'">
									<xsl:text> #REQUIRED</xsl:text>
								</xsl:when>
								<xsl:when test="$MandatoryLevel='deontic'">
									<xsl:text> </xsl:text>
								</xsl:when>
								<xsl:when test="$MandatoryLevel = 'false' or $MandatoryLevel='0'">
									<xsl:text> #IMPLIED</xsl:text>
								</xsl:when>
							</xsl:choose>
						</xsl:when>
						<xsl:when test="oil:singleRoleUniquenessConstraint[@isPreferred='true']">
							<xsl:text> CDATA</xsl:text>
							<xsl:text disable-output-escaping="yes"> #REQUIRED</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<xsl:text> CDATA</xsl:text>
							<xsl:choose>
								<xsl:when test="$MandatoryLevel='alethic' or $MandatoryLevel = 'true' or $MandatoryLevel = '1'">
									<xsl:text> #REQUIRED</xsl:text>
								</xsl:when>
								<xsl:when test="$MandatoryLevel='deontic'">
									<xsl:text> </xsl:text>
								</xsl:when>
								<xsl:when test="$MandatoryLevel = 'false'">
									<xsl:text> #IMPLIED</xsl:text>
								</xsl:when>
							</xsl:choose>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
				<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="oil:informationTypeFormats">
		<xsl:text disable-output-escaping="yes">&lt;!ATTLIST </xsl:text>
	</xsl:template>
	
	<xsl:template name="MajorObjects">
		<xsl:for-each select="oil:conceptType">
			<xsl:text disable-output-escaping="yes">&lt;!ELEMENT </xsl:text>
			<xsl:value-of select="@name"/>
			<xsl:text>Elements</xsl:text>
			<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
		</xsl:for-each>
	</xsl:template>
</xsl:stylesheet>