#region Common Public License Copyright Notice
/**************************************************************************\
* Neumont Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Neumont.Tools.ORM.ExtensionExample
{
	/// <summary>
	/// DomainClass MyCustomExtensionElement
	/// Description for Neumont.Tools.ORM.ExtensionExample.MyCustomExtensionElement
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ExtensionExample.MyCustomExtensionElement.DisplayName", typeof(global::Neumont.Tools.ORM.ExtensionExample.ExtensionDomainModel), "Neumont.Tools.ORM.ExtensionExample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ExtensionExample.MyCustomExtensionElement.Description", typeof(global::Neumont.Tools.ORM.ExtensionExample.ExtensionDomainModel), "Neumont.Tools.ORM.ExtensionExample.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("14db7e59-72e3-441f-9993-88fb3e3c01b3")]
	public partial class MyCustomExtensionElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MyCustomExtensionElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x14db7e59, 0x72e3, 0x441f, 0x99, 0x93, 0x88, 0xfb, 0x3e, 0x3c, 0x01, 0xb3);
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public MyCustomExtensionElement(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public MyCustomExtensionElement(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
		#region TestProperty domain property code
		
		/// <summary>
		/// TestProperty domain property Id.
		/// </summary>
		public static readonly global::System.Guid TestPropertyDomainPropertyId = new global::System.Guid(0x6825c613, 0x7e2a, 0x4d14, 0x82, 0x77, 0x0d, 0xb3, 0xb8, 0x6b, 0x12, 0x10);
		
		/// <summary>
		/// Storage for TestProperty
		/// </summary>
		private global::System.String testPropertyPropertyStorage = "Default value";
		
		/// <summary>
		/// Gets or sets the value of TestProperty domain property.
		/// Description for
		/// Neumont.Tools.ORM.ExtensionExample.MyCustomExtensionElement.TestProperty
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::Neumont.Tools.ORM.ExtensionExample.Design.TestElementPicker), typeof(global::System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ExtensionExample.MyCustomExtensionElement/TestProperty.DisplayName", typeof(global::Neumont.Tools.ORM.ExtensionExample.ExtensionDomainModel), "Neumont.Tools.ORM.ExtensionExample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ExtensionExample.MyCustomExtensionElement/TestProperty.Description", typeof(global::Neumont.Tools.ORM.ExtensionExample.ExtensionDomainModel), "Neumont.Tools.ORM.ExtensionExample.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Default value")]
		[DslModeling::DomainObjectId("6825c613-7e2a-4d14-8277-0db3b86b1210")]
		public global::System.String TestProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return testPropertyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TestPropertyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyCustomExtensionElement.TestProperty domain property.
		/// </summary>
		internal sealed partial class TestPropertyPropertyHandler : DslModeling::DomainPropertyValueHandler<MyCustomExtensionElement, global::System.String>
		{
			private TestPropertyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyCustomExtensionElement.TestProperty domain property value handler.
			/// </summary>
			public static readonly TestPropertyPropertyHandler Instance = new TestPropertyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyCustomExtensionElement.TestProperty domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TestPropertyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MyCustomExtensionElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.testPropertyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyCustomExtensionElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.testPropertyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CustomEnum domain property code
		
		/// <summary>
		/// CustomEnum domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomEnumDomainPropertyId = new global::System.Guid(0x26aaf88d, 0x2051, 0x4d87, 0xb8, 0x63, 0xbf, 0x33, 0x0d, 0x71, 0x23, 0xbb);
		
		/// <summary>
		/// Storage for CustomEnum
		/// </summary>
		private TestEnumeration customEnumPropertyStorage = Neumont.Tools.ORM.ExtensionExample.TestEnumeration.Zero;
		
		/// <summary>
		/// Gets or sets the value of CustomEnum domain property.
		/// Description for
		/// Neumont.Tools.ORM.ExtensionExample.MyCustomExtensionElement.CustomEnum
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ExtensionExample.MyCustomExtensionElement/CustomEnum.DisplayName", typeof(global::Neumont.Tools.ORM.ExtensionExample.ExtensionDomainModel), "Neumont.Tools.ORM.ExtensionExample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ExtensionExample.MyCustomExtensionElement/CustomEnum.Description", typeof(global::Neumont.Tools.ORM.ExtensionExample.ExtensionDomainModel), "Neumont.Tools.ORM.ExtensionExample.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Neumont.Tools.ORM.ExtensionExample.TestEnumeration.Zero)]
		[DslModeling::DomainObjectId("26aaf88d-2051-4d87-b863-bf330d7123bb")]
		public TestEnumeration CustomEnum
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customEnumPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomEnumPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyCustomExtensionElement.CustomEnum domain property.
		/// </summary>
		internal sealed partial class CustomEnumPropertyHandler : DslModeling::DomainPropertyValueHandler<MyCustomExtensionElement, TestEnumeration>
		{
			private CustomEnumPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyCustomExtensionElement.CustomEnum domain property value handler.
			/// </summary>
			public static readonly CustomEnumPropertyHandler Instance = new CustomEnumPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyCustomExtensionElement.CustomEnum domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomEnumDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed TestEnumeration GetValue(MyCustomExtensionElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customEnumPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyCustomExtensionElement element, TestEnumeration newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				TestEnumeration oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customEnumPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ExtensionExample
{
	/// <summary>
	/// DomainClass ObjectTypeRequiresMeaningfulNameError
	/// Description for
	/// Neumont.Tools.ORM.ExtensionExample.ObjectTypeRequiresMeaningfulNameError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ExtensionExample.ObjectTypeRequiresMeaningfulNameError.DisplayName", typeof(global::Neumont.Tools.ORM.ExtensionExample.ExtensionDomainModel), "Neumont.Tools.ORM.ExtensionExample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ExtensionExample.ObjectTypeRequiresMeaningfulNameError.Description", typeof(global::Neumont.Tools.ORM.ExtensionExample.ExtensionDomainModel), "Neumont.Tools.ORM.ExtensionExample.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b9448302-beb4-451e-bfd8-cb824201784c")]
	public partial class ObjectTypeRequiresMeaningfulNameError : global::Neumont.Tools.ORM.ObjectModel.ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectTypeRequiresMeaningfulNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb9448302, 0xbeb4, 0x451e, 0xbf, 0xd8, 0xcb, 0x82, 0x42, 0x01, 0x78, 0x4c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectTypeRequiresMeaningfulNameError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectTypeRequiresMeaningfulNameError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
