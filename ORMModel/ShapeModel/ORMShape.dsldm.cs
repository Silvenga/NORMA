//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Common Public License Copyright Notice
// /**************************************************************************\
// * Neumont Object-Role Modeling Architect for Visual Studio                 *
// *                                                                          *
// * Copyright © Neumont University. All rights reserved.                     *
// *                                                                          *
// * The use and distribution terms for this software are covered by the      *
// * Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
// * can be found in the file CPL.txt at the root of this distribution.       *
// * By using this software in any fashion, you are agreeing to be bound by   *
// * the terms of this license.                                               *
// *                                                                          *
// * You must not remove this notice, or any other, from this software.       *
// \**************************************************************************/
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.InheritBaseModel("2b131234-7959-458d-834f-2dc0769ce683")]
	[Microsoft.VisualStudio.Modeling.InheritBaseModel("91d59b16-e488-4a28-8d51-59273ad5bf2e")]
	[Microsoft.VisualStudio.Modeling.InheritBaseModel("83ad9e12-0e90-47cd-8e2f-a79f8d9c7288")]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ORMShapeModel.MetaModelGuidString, "Neumont.Tools.ORM.ShapeModel.ORMShapeModel")]
	public  partial class ORMShapeModel : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region ORMShapeModel's Generated MetaClass Code
		/// <summary>
		/// MetaModel Guid String
		/// </summary>
		public const System.String MetaModelGuidString = "c52fb9a5-6bf4-4267-8716-71d74c7aa89c";
		/// <summary>
		/// MetaModel Guid
		/// </summary>
		public static readonly System.Guid MetaModelGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ORMShapeModel.MetaModelGuidString);
		/// <summary>
		/// Default Constructor called by the IMS -- do not call directly
		/// </summary>
		public ORMShapeModel() : base()
		{
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMShapeModel(Microsoft.VisualStudio.Modeling.Store store) : base(store.DefaultPartition, Neumont.Tools.ORM.ShapeModel.ORMShapeModel.MetaModelGuid)
		{
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMShapeModel(Microsoft.VisualStudio.Modeling.Partition partition) : base(partition, Neumont.Tools.ORM.ShapeModel.ORMShapeModel.MetaModelGuid)
		{
		}
		#endregion

	}
	#region ORMShapeModel's ResourceManager Code
	public  partial class ORMShapeModel
	{
		private static System.Resources.ResourceManager resourceManager = null;
		/// <summary>
		/// The base name of this models resources.
		/// </summary>
		public const string ResourceBaseName = "Neumont.Tools.ORM.ShapeModel.ORMShapeModel";
		/// <summary>
		/// Returns the SubStore's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override System.Resources.ResourceManager ResourceManager
		{
			get
			{
				return Neumont.Tools.ORM.ShapeModel.ORMShapeModel.SingletonResourceManager;
			}
		}
		/// <summary>
		/// A internal object used for synchronization.
		/// </summary>
		private static object internalSyncObject;
		/// <summary>
		/// Gets the internal object used for synchronization.
		/// </summary>
		private static object InternalSyncObject 
		{
			get 
			{
				if (internalSyncObject == null) 
				{
					object o = new object();
					System.Threading.Interlocked.CompareExchange(ref internalSyncObject, o, null);
				}
				return internalSyncObject;
			}
		}
		/// <summary>
		/// Gets the Singleton ResourceManager for this SubStore
		/// </summary>
		public static System.Resources.ResourceManager SingletonResourceManager
		{
			get
			{
				if (Neumont.Tools.ORM.ShapeModel.ORMShapeModel.resourceManager == null)
				{
					lock (Neumont.Tools.ORM.ShapeModel.ORMShapeModel.InternalSyncObject)
					{
						if (Neumont.Tools.ORM.ShapeModel.ORMShapeModel.resourceManager == null)
						{
							Neumont.Tools.ORM.ShapeModel.ORMShapeModel.resourceManager = new System.Resources.ResourceManager(ResourceBaseName, typeof(Neumont.Tools.ORM.ShapeModel.ORMShapeModel).Assembly);
						}
					}
				}
				return Neumont.Tools.ORM.ShapeModel.ORMShapeModel.resourceManager;
			}
		}
	}
	#endregion
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	public sealed class ORMShapeModelCopyClosure : Microsoft.VisualStudio.Modeling.IElementVisitorFilter
	{
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> metaRolesMember;
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMShapeModelCopyClosure()
		{
			#region Initialize MetaData Table
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">MetaRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="metaRelationshipInfo">MetaRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public  Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleInfo, Microsoft.VisualStudio.Modeling.MetaRelationshipInfo metaRelationshipInfo, Microsoft.VisualStudio.Modeling.ElementLink targetRelationship)
		{
			return this.MetaRoles.ContainsKey(sourceRoleInfo.Id) ? Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes : Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetRoleInfo">MetaRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public  Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.ElementLink elementLink, Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleInfo, Microsoft.VisualStudio.Modeling.ModelElement targetRolePlayer)
		{
			foreach (Microsoft.VisualStudio.Modeling.MetaRoleInfo metaRoleInfo in elementLink.MetaRelationship.MetaRoles)
			{
				if (metaRoleInfo != targetRoleInfo && this.MetaRoles.ContainsKey(metaRoleInfo.Id))
				{
					return Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes;
				}
			}
			return Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> MetaRoles
		{
			get
			{
				if (this.metaRolesMember == null)
				{
					this.metaRolesMember = new System.Collections.Generic.Dictionary<System.Guid, System.Guid>();
				}
				return this.metaRolesMember;
			}
		}

	}
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	public sealed class ORMShapeModelRemoveClosure : Microsoft.VisualStudio.Modeling.IElementVisitorFilter
	{
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> metaRolesMember;
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMShapeModelRemoveClosure()
		{
			#region Initialize MetaData Table
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">MetaRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="metaRelationshipInfo">MetaRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public  Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleInfo, Microsoft.VisualStudio.Modeling.MetaRelationshipInfo metaRelationshipInfo, Microsoft.VisualStudio.Modeling.ElementLink targetRelationship)
		{
			return Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetRoleInfo">MetaRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public  Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.ElementLink elementLink, Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleInfo, Microsoft.VisualStudio.Modeling.ModelElement targetRolePlayer)
		{
			return this.MetaRoles.ContainsKey(targetRoleInfo.Id) ? Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes : Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> MetaRoles
		{
			get
			{
				if (this.metaRolesMember == null)
				{
					this.metaRolesMember = new System.Collections.Generic.Dictionary<System.Guid, System.Guid>();
				}
				return this.metaRolesMember;
			}
		}

	}
	#region ORMShapeModel's Generated Closure Code
	public  partial class ORMShapeModel
	{
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.IElementVisitorFilter copyClosureMember;
		/// <summary>
		/// RemoveClosure cache
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.IElementVisitorFilter removeClosureMember;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override Microsoft.VisualStudio.Modeling.IElementVisitorFilter GetClosureFilter(Microsoft.VisualStudio.Modeling.ClosureType type, System.Collections.ICollection rootElements)
		{
			switch (type)
			{
				case Microsoft.VisualStudio.Modeling.ClosureType.CopyClosure:
					return ORMShapeModel.CopyClosure;
				case Microsoft.VisualStudio.Modeling.ClosureType.RemoveClosure:
					return ORMShapeModel.RemoveClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.IElementVisitorFilter CopyClosure
		{
			get
			{
				if (ORMShapeModel.copyClosureMember == null)
				{
					ORMShapeModel.copyClosureMember = new ORMShapeModelCopyClosure();
				}
				return ORMShapeModel.copyClosureMember;
			}
		}
		/// <summary>
		/// RemoveClosure cache
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.IElementVisitorFilter RemoveClosure
		{
			get
			{
				if (ORMShapeModel.removeClosureMember == null)
				{
					ORMShapeModel.removeClosureMember = new ORMShapeModelRemoveClosure();
				}
				return ORMShapeModel.removeClosureMember;
			}
		}
	}
	#endregion
	/// <summary>
	/// 
	/// </summary>
	public  partial class ORMShapeModel : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region ORMShapeModel's AllGeneratedMetaModelTypes Code
		/// <summary>
		/// Virtual method that returns a collection of all types for metamodel 
		/// </summary>
		protected sealed override System.Type[] AllGeneratedMetaModelTypes()
		{
			System.Type[] typeArray = new System.Type[]
			{
				typeof(Neumont.Tools.ORM.ShapeModel.ORMShapeModel),
				typeof(Neumont.Tools.ORM.ShapeModel.ORMBaseShape),
				typeof(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape),
				typeof(Neumont.Tools.ORM.ShapeModel.ObjectTypeShapeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape),
				typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShapeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ShapeModel.ExternalConstraintShape),
				typeof(Neumont.Tools.ORM.ShapeModel.ExternalConstraintShapeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ShapeModel.FrequencyConstraintShape),
				typeof(Neumont.Tools.ORM.ShapeModel.FrequencyConstraintShapeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ShapeModel.RingConstraintShape),
				typeof(Neumont.Tools.ORM.ShapeModel.RingConstraintShapeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ShapeModel.FloatingTextShape),
				typeof(Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape),
				typeof(Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShapeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ShapeModel.ReadingShape),
				typeof(Neumont.Tools.ORM.ShapeModel.ReadingShapeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ShapeModel.ValueConstraintShape),
				typeof(Neumont.Tools.ORM.ShapeModel.ValueConstraintShapeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ShapeModel.RoleNameShape),
				typeof(Neumont.Tools.ORM.ShapeModel.RoleNameShapeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ShapeModel.ORMBaseBinaryLinkShape),
				typeof(Neumont.Tools.ORM.ShapeModel.RolePlayerLink),
				typeof(Neumont.Tools.ORM.ShapeModel.RolePlayerLinkElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ShapeModel.SubtypeLink),
				typeof(Neumont.Tools.ORM.ShapeModel.SubtypeLinkElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ShapeModel.ExternalConstraintLink),
				typeof(Neumont.Tools.ORM.ShapeModel.ExternalConstraintLinkElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ShapeModel.ValueRangeLink),
				typeof(Neumont.Tools.ORM.ShapeModel.ValueRangeLinkElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ShapeModel.LinkConnectorShape),
				typeof(Neumont.Tools.ORM.ShapeModel.LinkConnectorShapeElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ShapeModel.ORMDiagram),
				typeof(Neumont.Tools.ORM.ShapeModel.ORMDiagramElementFactoryCreator),
				typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder),
				typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrderElementFactoryCreator),

			};
			return typeArray;
		}
		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public  partial class ORMShapeModel : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region ORMShapeModel's GeneratedReflectedMetaAttributes Code
		/// <summary>
		/// Virtual method that returns a collection of all fields for all types in metamodel ORMShapeModel
		/// </summary>
		protected sealed override Microsoft.VisualStudio.Modeling.MetaFieldInfo[] GeneratedReflectedMetaAttributes()
		{
			Microsoft.VisualStudio.Modeling.MetaFieldInfo[] typeArray = new Microsoft.VisualStudio.Modeling.MetaFieldInfo[]
			{
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ShapeModel.ORMBaseShape), "UpdateCounter", Neumont.Tools.ORM.ShapeModel.ORMBaseShape.UpdateCounterMetaAttributeGuid, typeof(Neumont.Tools.ORM.ShapeModel.ORMBaseShape.ORMBaseShapeUpdateCounterFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape), "ShapeName", Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ShapeNameMetaAttributeGuid, typeof(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ObjectTypeShapeShapeNameFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape), "ReferenceModeName", Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ReferenceModeNameMetaAttributeGuid, typeof(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ObjectTypeShapeReferenceModeNameFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape), "ExpandRefMode", Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ExpandRefModeMetaAttributeGuid, typeof(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ObjectTypeShapeExpandRefModeFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape), "ConstraintDisplayPosition", Neumont.Tools.ORM.ShapeModel.FactTypeShape.ConstraintDisplayPositionMetaAttributeGuid, typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape.FactTypeShapeConstraintDisplayPositionFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape), "DisplayRoleNames", Neumont.Tools.ORM.ShapeModel.FactTypeShape.DisplayRoleNamesMetaAttributeGuid, typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape.FactTypeShapeDisplayRoleNamesFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape), "RolesPosition", Neumont.Tools.ORM.ShapeModel.FactTypeShape.RolesPositionMetaAttributeGuid, typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape.FactTypeShapeRolesPositionFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape), "ObjectTypeName", Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape.ObjectTypeNameMetaAttributeGuid, typeof(Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape.ObjectifiedFactTypeNameShapeObjectTypeNameFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ShapeModel.ReadingShape), "ReadingText", Neumont.Tools.ORM.ShapeModel.ReadingShape.ReadingTextMetaAttributeGuid, typeof(Neumont.Tools.ORM.ShapeModel.ReadingShape.ReadingShapeReadingTextFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ShapeModel.ValueConstraintShape), "ValueRangeText", Neumont.Tools.ORM.ShapeModel.ValueConstraintShape.ValueRangeTextMetaAttributeGuid, typeof(Neumont.Tools.ORM.ShapeModel.ValueConstraintShape.ValueConstraintShapeValueRangeTextFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ShapeModel.RoleNameShape), "RoleName", Neumont.Tools.ORM.ShapeModel.RoleNameShape.RoleNameMetaAttributeGuid, typeof(Neumont.Tools.ORM.ShapeModel.RoleNameShape.RoleNameShapeRoleNameFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(Neumont.Tools.ORM.ShapeModel.ORMDiagram), "AutoPopulateShapes", Neumont.Tools.ORM.ShapeModel.ORMDiagram.AutoPopulateShapesMetaAttributeGuid, typeof(Neumont.Tools.ORM.ShapeModel.ORMDiagram.ORMDiagramAutoPopulateShapesFieldHandler)),

			};
			return typeArray;
		}
		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public  partial class ORMShapeModel : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region ORMShapeModel's GeneratedReflectedMetaRoleAttributes Code
		/// <summary>
		/// Virtual method that returns a collection of all fields for all types in metamodel ORMShapeModel
		/// </summary>
		protected sealed override Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[] GeneratedReflectedMetaRoles()
		{
			Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[] typeArray = new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[]
			{
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder), "FactTypeShape", Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder.FactTypeShapeMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder), "RoleDisplayOrderCollection", Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder.RoleDisplayOrderCollectionMetaRoleGuid),

			};
			return typeArray;
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ORMBaseShape.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.ORMBaseShape")]
	public abstract partial class ORMBaseShape : Microsoft.VisualStudio.Modeling.Diagrams.NodeShape
	{
		#region ORMBaseShape's Generated Shape Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "55131f4b-0f9a-408d-bed0-79451ba7f4f0";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ORMBaseShape.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

		#region UpdateCounter's Generated  Field Code
		#region UpdateCounter's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		internal const System.String UpdateCounterMetaAttributeGuidString = "85e23ba2-451a-4cd3-b233-64973e6133f6";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		internal static readonly System.Guid UpdateCounterMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ORMBaseShape.UpdateCounterMetaAttributeGuidString);
		#endregion

		#region UpdateCounter's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.LongDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage=true, FieldHandlerType=typeof(ORMBaseShapeUpdateCounterFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ORMBaseShape.UpdateCounterMetaAttributeGuidString, "Neumont.Tools.ORM.ShapeModel.ORMBaseShape.UpdateCounter")]
		private  System.Int64 UpdateCounter
		{
			get
			{
				return oRMBaseShapeUpdateCounterFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				oRMBaseShapeUpdateCounterFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ORMBaseShapeUpdateCounterFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ORMBaseShape.UpdateCounter field
		/// </summary>
		private static ORMBaseShapeUpdateCounterFieldHandler	oRMBaseShapeUpdateCounterFieldHandler	= ORMBaseShapeUpdateCounterFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ORMBaseShape.UpdateCounter
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ORMBaseShapeUpdateCounterFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler<Neumont.Tools.ORM.ShapeModel.ORMBaseShape,System.Int64>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ORMBaseShapeUpdateCounterFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ORMBaseShape.UpdateCounter field handler
			/// </summary>
			/// <value>ORMBaseShapeUpdateCounterFieldHandler</value>
			public static ORMBaseShapeUpdateCounterFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ShapeModel.ORMBaseShape.oRMBaseShapeUpdateCounterFieldHandler != null)
					{
						return Neumont.Tools.ORM.ShapeModel.ORMBaseShape.oRMBaseShapeUpdateCounterFieldHandler;
					}
					else
					{
						// The static constructor in ORMBaseShape will assign this value to
						// Neumont.Tools.ORM.ShapeModel.ORMBaseShape.oRMBaseShapeUpdateCounterFieldHandler, so just instantiate one and return it
						return new ORMBaseShapeUpdateCounterFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ORMBaseShape.UpdateCounter field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ShapeModel.ORMBaseShape.UpdateCounterMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
	}
	#region ORMBaseShape's Generated Constructor Code
	public abstract partial class ORMBaseShape
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ORMBaseShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ShapeForAttribute(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType))]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.ObjectTypeShape")]
	public  partial class ObjectTypeShape : Neumont.Tools.ORM.ShapeModel.ORMBaseShape
	{
		#region ObjectTypeShape's Generated Shape Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "00c1f246-d8f1-4eea-ac88-39ba238143a8";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

		#region ShapeName's Generated  Field Code
		#region ShapeName's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ShapeNameMetaAttributeGuidString = "b70a72b8-282e-403a-aad6-50d75a2f071c";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ShapeNameMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ShapeNameMetaAttributeGuidString);
		#endregion

		#region ShapeName's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(XPathExpression="/ObjectTypeShape/SubjectHasPresentation.Subject/Subject", ReverseXPathExpression="/NamedElement/SubjectHasPresentation.Presentation/Presentation", RealAttributeName="Name", ProxyAttributeName="Name", FieldHandlerType=typeof(ObjectTypeShapeShapeNameFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ShapeNameMetaAttributeGuidString, "Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ShapeName")]
		public  System.String ShapeName
		{
			get
			{
				return objectTypeShapeShapeNameFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeShapeShapeNameFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeShapeShapeNameFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectTypeShape.ShapeName field
		/// </summary>
		private static ObjectTypeShapeShapeNameFieldHandler	objectTypeShapeShapeNameFieldHandler	= ObjectTypeShapeShapeNameFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectTypeShape.ShapeName
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeShapeShapeNameFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementPassThroughFieldHandler<Neumont.Tools.ORM.ShapeModel.ObjectTypeShape,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeShapeShapeNameFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectTypeShape.ShapeName field handler
			/// </summary>
			/// <value>ObjectTypeShapeShapeNameFieldHandler</value>
			public static ObjectTypeShapeShapeNameFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.objectTypeShapeShapeNameFieldHandler != null)
					{
						return Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.objectTypeShapeShapeNameFieldHandler;
					}
					else
					{
						// The static constructor in ObjectTypeShape will assign this value to
						// Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.objectTypeShapeShapeNameFieldHandler, so just instantiate one and return it
						return new ObjectTypeShapeShapeNameFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectTypeShape.ShapeName field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ShapeNameMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region ReferenceModeName's Generated  Field Code
		#region ReferenceModeName's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ReferenceModeNameMetaAttributeGuidString = "55d073e6-a77b-4440-a881-b2a8222b6c8b";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ReferenceModeNameMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ReferenceModeNameMetaAttributeGuidString);
		#endregion

		#region ReferenceModeName's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(XPathExpression="/ObjectTypeShape/SubjectHasPresentation.Subject/Subject", ReverseXPathExpression="/ObjectType/SubjectHasPresentation.Presentation/Presentation", RealAttributeName="ReferenceModeString", ProxyAttributeName="ReferenceModeString", FieldHandlerType=typeof(ObjectTypeShapeReferenceModeNameFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ReferenceModeNameMetaAttributeGuidString, "Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ReferenceModeName")]
		public  System.String ReferenceModeName
		{
			get
			{
				return objectTypeShapeReferenceModeNameFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectTypeShapeReferenceModeNameFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeShapeReferenceModeNameFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectTypeShape.ReferenceModeName field
		/// </summary>
		private static ObjectTypeShapeReferenceModeNameFieldHandler	objectTypeShapeReferenceModeNameFieldHandler	= ObjectTypeShapeReferenceModeNameFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectTypeShape.ReferenceModeName
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeShapeReferenceModeNameFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementPassThroughFieldHandler<Neumont.Tools.ORM.ShapeModel.ObjectTypeShape,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeShapeReferenceModeNameFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectTypeShape.ReferenceModeName field handler
			/// </summary>
			/// <value>ObjectTypeShapeReferenceModeNameFieldHandler</value>
			public static ObjectTypeShapeReferenceModeNameFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.objectTypeShapeReferenceModeNameFieldHandler != null)
					{
						return Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.objectTypeShapeReferenceModeNameFieldHandler;
					}
					else
					{
						// The static constructor in ObjectTypeShape will assign this value to
						// Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.objectTypeShapeReferenceModeNameFieldHandler, so just instantiate one and return it
						return new ObjectTypeShapeReferenceModeNameFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectTypeShape.ReferenceModeName field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ReferenceModeNameMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
		#region ExpandRefMode's Generated  Field Code
		#region ExpandRefMode's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ExpandRefModeMetaAttributeGuidString = "b2415bb1-1c83-4f0b-b2c3-58b67bc620dd";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ExpandRefModeMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ExpandRefModeMetaAttributeGuidString);
		#endregion

		#region ExpandRefMode's Generated Property Code

		private System.Boolean expandRefModePropertyStorage = false;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ObjectTypeShapeExpandRefModeFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ExpandRefModeMetaAttributeGuidString, "Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ExpandRefMode")]
		public  System.Boolean ExpandRefMode
		{
			get
			{
				return expandRefModePropertyStorage;
			}
		
			set
			{
				objectTypeShapeExpandRefModeFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectTypeShapeExpandRefModeFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectTypeShape.ExpandRefMode field
		/// </summary>
		private static ObjectTypeShapeExpandRefModeFieldHandler	objectTypeShapeExpandRefModeFieldHandler	= ObjectTypeShapeExpandRefModeFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectTypeShape.ExpandRefMode
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectTypeShapeExpandRefModeFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ShapeModel.ObjectTypeShape,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectTypeShapeExpandRefModeFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectTypeShape.ExpandRefMode field handler
			/// </summary>
			/// <value>ObjectTypeShapeExpandRefModeFieldHandler</value>
			public static ObjectTypeShapeExpandRefModeFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.objectTypeShapeExpandRefModeFieldHandler != null)
					{
						return Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.objectTypeShapeExpandRefModeFieldHandler;
					}
					else
					{
						// The static constructor in ObjectTypeShape will assign this value to
						// Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.objectTypeShapeExpandRefModeFieldHandler, so just instantiate one and return it
						return new ObjectTypeShapeExpandRefModeFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectTypeShape.ExpandRefMode field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ShapeModel.ObjectTypeShape.ExpandRefModeMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ObjectTypeShape</param>
			protected sealed override System.Boolean GetValue(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape element)
			{
				return element.expandRefModePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape element, System.Boolean value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Boolean oldValue)
			{
				oldValue = element.expandRefModePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.expandRefModePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
	}
	#region ObjectTypeShape's Generated Constructor Code
	public  partial class ObjectTypeShape
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeShape CreateObjectTypeShape(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateObjectTypeShape(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeShape CreateAndInitializeObjectTypeShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectTypeShape(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeShape CreateObjectTypeShape(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ObjectTypeShape)partition.ElementFactory.CreateElement(typeof(ObjectTypeShape));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectTypeShape CreateAndInitializeObjectTypeShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectTypeShape)partition.ElementFactory.CreateElement(typeof(ObjectTypeShape), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectTypeShape
	/// <summary>
	/// ObjectTypeShape Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ShapeModel.ObjectTypeShape))]
	public sealed class ObjectTypeShapeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectTypeShapeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ShapeModel.ObjectTypeShape( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectTypeShapeElementFactoryCreator Instance
		{
			get
			{
				return new ObjectTypeShapeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ShapeForAttribute(typeof(Neumont.Tools.ORM.ObjectModel.FactType))]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.FactTypeShape.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.FactTypeShape")]
	public  partial class FactTypeShape : Neumont.Tools.ORM.ShapeModel.ORMBaseShape
	{
		#region FactTypeShape's Generated Shape Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "8e440a3b-275e-42f7-868b-d5d473158acd";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.FactTypeShape.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

		#region ConstraintDisplayPosition's Generated  Field Code
		#region ConstraintDisplayPosition's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ConstraintDisplayPositionMetaAttributeGuidString = "802767fd-de7d-4541-b42b-90b613dfe22d";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ConstraintDisplayPositionMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.FactTypeShape.ConstraintDisplayPositionMetaAttributeGuidString);
		#endregion

		#region ConstraintDisplayPosition's Generated Property Code

		private Neumont.Tools.ORM.ShapeModel.ConstraintDisplayPosition constraintDisplayPositionPropertyStorage = Neumont.Tools.ORM.ShapeModel.ConstraintDisplayPosition.Top;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(Neumont.Tools.ORM.ShapeModel.ConstraintDisplayPosition),DefaultEnumerationValueName="Top")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(FactTypeShapeConstraintDisplayPositionFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.FactTypeShape.ConstraintDisplayPositionMetaAttributeGuidString, "Neumont.Tools.ORM.ShapeModel.FactTypeShape.ConstraintDisplayPosition")]
		public  Neumont.Tools.ORM.ShapeModel.ConstraintDisplayPosition ConstraintDisplayPosition
		{
			get
			{
				return constraintDisplayPositionPropertyStorage;
			}
		
			set
			{
				factTypeShapeConstraintDisplayPositionFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FactTypeShapeConstraintDisplayPositionFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FactTypeShape.ConstraintDisplayPosition field
		/// </summary>
		private static FactTypeShapeConstraintDisplayPositionFieldHandler	factTypeShapeConstraintDisplayPositionFieldHandler	= FactTypeShapeConstraintDisplayPositionFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FactTypeShape.ConstraintDisplayPosition
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FactTypeShapeConstraintDisplayPositionFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ShapeModel.FactTypeShape,Neumont.Tools.ORM.ShapeModel.ConstraintDisplayPosition>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FactTypeShapeConstraintDisplayPositionFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FactTypeShape.ConstraintDisplayPosition field handler
			/// </summary>
			/// <value>FactTypeShapeConstraintDisplayPositionFieldHandler</value>
			public static FactTypeShapeConstraintDisplayPositionFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ShapeModel.FactTypeShape.factTypeShapeConstraintDisplayPositionFieldHandler != null)
					{
						return Neumont.Tools.ORM.ShapeModel.FactTypeShape.factTypeShapeConstraintDisplayPositionFieldHandler;
					}
					else
					{
						// The static constructor in FactTypeShape will assign this value to
						// Neumont.Tools.ORM.ShapeModel.FactTypeShape.factTypeShapeConstraintDisplayPositionFieldHandler, so just instantiate one and return it
						return new FactTypeShapeConstraintDisplayPositionFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FactTypeShape.ConstraintDisplayPosition field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ShapeModel.FactTypeShape.ConstraintDisplayPositionMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the FactTypeShape</param>
			protected sealed override Neumont.Tools.ORM.ShapeModel.ConstraintDisplayPosition GetValue(Neumont.Tools.ORM.ShapeModel.FactTypeShape element)
			{
				return element.constraintDisplayPositionPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ShapeModel.FactTypeShape element, Neumont.Tools.ORM.ShapeModel.ConstraintDisplayPosition value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref Neumont.Tools.ORM.ShapeModel.ConstraintDisplayPosition oldValue)
			{
				oldValue = element.constraintDisplayPositionPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.constraintDisplayPositionPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region DisplayRoleNames's Generated  Field Code
		#region DisplayRoleNames's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String DisplayRoleNamesMetaAttributeGuidString = "9607af0f-2e12-4215-b8a5-91b67c1a9f08";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid DisplayRoleNamesMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.FactTypeShape.DisplayRoleNamesMetaAttributeGuidString);
		#endregion

		#region DisplayRoleNames's Generated Property Code

		private Neumont.Tools.ORM.ShapeModel.DisplayRoleNames displayRoleNamesPropertyStorage = Neumont.Tools.ORM.ShapeModel.DisplayRoleNames.UserDefault;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(Neumont.Tools.ORM.ShapeModel.DisplayRoleNames),DefaultEnumerationValueName="UserDefault")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(FactTypeShapeDisplayRoleNamesFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.FactTypeShape.DisplayRoleNamesMetaAttributeGuidString, "Neumont.Tools.ORM.ShapeModel.FactTypeShape.DisplayRoleNames")]
		public  Neumont.Tools.ORM.ShapeModel.DisplayRoleNames DisplayRoleNames
		{
			get
			{
				return displayRoleNamesPropertyStorage;
			}
		
			set
			{
				factTypeShapeDisplayRoleNamesFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FactTypeShapeDisplayRoleNamesFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FactTypeShape.DisplayRoleNames field
		/// </summary>
		private static FactTypeShapeDisplayRoleNamesFieldHandler	factTypeShapeDisplayRoleNamesFieldHandler	= FactTypeShapeDisplayRoleNamesFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FactTypeShape.DisplayRoleNames
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FactTypeShapeDisplayRoleNamesFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ShapeModel.FactTypeShape,Neumont.Tools.ORM.ShapeModel.DisplayRoleNames>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FactTypeShapeDisplayRoleNamesFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FactTypeShape.DisplayRoleNames field handler
			/// </summary>
			/// <value>FactTypeShapeDisplayRoleNamesFieldHandler</value>
			public static FactTypeShapeDisplayRoleNamesFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ShapeModel.FactTypeShape.factTypeShapeDisplayRoleNamesFieldHandler != null)
					{
						return Neumont.Tools.ORM.ShapeModel.FactTypeShape.factTypeShapeDisplayRoleNamesFieldHandler;
					}
					else
					{
						// The static constructor in FactTypeShape will assign this value to
						// Neumont.Tools.ORM.ShapeModel.FactTypeShape.factTypeShapeDisplayRoleNamesFieldHandler, so just instantiate one and return it
						return new FactTypeShapeDisplayRoleNamesFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FactTypeShape.DisplayRoleNames field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ShapeModel.FactTypeShape.DisplayRoleNamesMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the FactTypeShape</param>
			protected sealed override Neumont.Tools.ORM.ShapeModel.DisplayRoleNames GetValue(Neumont.Tools.ORM.ShapeModel.FactTypeShape element)
			{
				return element.displayRoleNamesPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ShapeModel.FactTypeShape element, Neumont.Tools.ORM.ShapeModel.DisplayRoleNames value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref Neumont.Tools.ORM.ShapeModel.DisplayRoleNames oldValue)
			{
				oldValue = element.displayRoleNamesPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.displayRoleNamesPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region RolesPosition's Generated  Field Code
		#region RolesPosition's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		internal const System.String RolesPositionMetaAttributeGuidString = "89244439-fbb1-4deb-bff3-69d47cb90a6b";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		internal static readonly System.Guid RolesPositionMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.FactTypeShape.RolesPositionMetaAttributeGuidString);
		#endregion

		#region RolesPosition's Generated Property Code

		private System.Double rolesPositionPropertyStorage = 0;
		
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.DoubleDomainAttribute(MinValue=-1.79769313486232E+307,MaxValue=1.79769313486232E+307)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(FactTypeShapeRolesPositionFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.FactTypeShape.RolesPositionMetaAttributeGuidString, "Neumont.Tools.ORM.ShapeModel.FactTypeShape.RolesPosition")]
		private  System.Double RolesPosition
		{
			get
			{
				return rolesPositionPropertyStorage;
			}
		
			set
			{
				factTypeShapeRolesPositionFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FactTypeShapeRolesPositionFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FactTypeShape.RolesPosition field
		/// </summary>
		private static FactTypeShapeRolesPositionFieldHandler	factTypeShapeRolesPositionFieldHandler	= FactTypeShapeRolesPositionFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FactTypeShape.RolesPosition
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FactTypeShapeRolesPositionFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ShapeModel.FactTypeShape,System.Double>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FactTypeShapeRolesPositionFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FactTypeShape.RolesPosition field handler
			/// </summary>
			/// <value>FactTypeShapeRolesPositionFieldHandler</value>
			public static FactTypeShapeRolesPositionFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ShapeModel.FactTypeShape.factTypeShapeRolesPositionFieldHandler != null)
					{
						return Neumont.Tools.ORM.ShapeModel.FactTypeShape.factTypeShapeRolesPositionFieldHandler;
					}
					else
					{
						// The static constructor in FactTypeShape will assign this value to
						// Neumont.Tools.ORM.ShapeModel.FactTypeShape.factTypeShapeRolesPositionFieldHandler, so just instantiate one and return it
						return new FactTypeShapeRolesPositionFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FactTypeShape.RolesPosition field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ShapeModel.FactTypeShape.RolesPositionMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the FactTypeShape</param>
			protected sealed override System.Double GetValue(Neumont.Tools.ORM.ShapeModel.FactTypeShape element)
			{
				return element.rolesPositionPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ShapeModel.FactTypeShape element, System.Double value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Double oldValue)
			{
				oldValue = element.rolesPositionPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.rolesPositionPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region RoleDisplayOrderCollection's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public Neumont.Tools.ORM.ObjectModel.RoleMoveableCollection RoleDisplayOrderCollection
		{
			get { return new Neumont.Tools.ORM.ObjectModel.RoleMoveableCollection(this, Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder.FactTypeShapeMetaRoleGuid, Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder.RoleDisplayOrderCollectionMetaRoleGuid); }
		}
		#endregion
	}
	#region Collection Classes for FactTypeShape
	/// <summary>
	/// Neumont.Tools.ORM.ShapeModel.FactTypeShape Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class FactTypeShapeMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public FactTypeShapeMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape) && !value.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape) && !rolePlayer.GetType().IsSubclassOf(typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(Neumont.Tools.ORM.ShapeModel.FactTypeShape[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>Neumont.Tools.ORM.ShapeModel.FactTypeShape at that index</returns>
		public Neumont.Tools.ORM.ShapeModel.FactTypeShape this[System.Int32 index]
		{
			get { return (Neumont.Tools.ORM.ShapeModel.FactTypeShape)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ShapeModel.FactTypeShape to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(Neumont.Tools.ORM.ShapeModel.FactTypeShape value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ShapeModel.FactTypeShape to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(Neumont.Tools.ORM.ShapeModel.FactTypeShape value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ShapeModel.FactTypeShape to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(Neumont.Tools.ORM.ShapeModel.FactTypeShape value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The Neumont.Tools.ORM.ShapeModel.FactTypeShape to insert into the list</param>
		public void Insert(System.Int32 index, Neumont.Tools.ORM.ShapeModel.FactTypeShape value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The Neumont.Tools.ORM.ShapeModel.FactTypeShape to remove from the list</param>
		public void Remove(Neumont.Tools.ORM.ShapeModel.FactTypeShape value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(Neumont.Tools.ORM.ShapeModel.FactTypeShape rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, Neumont.Tools.ORM.ShapeModel.FactTypeShape rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region FactTypeShape's Generated Constructor Code
	public  partial class FactTypeShape
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeShape CreateFactTypeShape(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFactTypeShape(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeShape CreateAndInitializeFactTypeShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeShape(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeShape CreateFactTypeShape(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FactTypeShape)partition.ElementFactory.CreateElement(typeof(FactTypeShape));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeShape CreateAndInitializeFactTypeShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeShape)partition.ElementFactory.CreateElement(typeof(FactTypeShape), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeShape
	/// <summary>
	/// FactTypeShape Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShape))]
	public sealed class FactTypeShapeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeShapeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ShapeModel.FactTypeShape( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeShapeElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeShapeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ShapeForAttribute(typeof(Neumont.Tools.ORM.ObjectModel.MultiColumnExternalConstraint))]
	[Microsoft.VisualStudio.Modeling.ShapeForAttribute(typeof(Neumont.Tools.ORM.ObjectModel.SingleColumnExternalConstraint))]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ExternalConstraintShape.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.ExternalConstraintShape")]
	public  partial class ExternalConstraintShape : Neumont.Tools.ORM.ShapeModel.ORMBaseShape
	{
		#region ExternalConstraintShape's Generated Shape Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "00a08f56-73ba-4c8f-8fa1-ae61b8fc1cae";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ExternalConstraintShape.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

	}
	#region ExternalConstraintShape's Generated Constructor Code
	public  partial class ExternalConstraintShape
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintShape CreateExternalConstraintShape(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateExternalConstraintShape(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintShape CreateAndInitializeExternalConstraintShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeExternalConstraintShape(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintShape CreateExternalConstraintShape(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ExternalConstraintShape)partition.ElementFactory.CreateElement(typeof(ExternalConstraintShape));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintShape CreateAndInitializeExternalConstraintShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ExternalConstraintShape)partition.ElementFactory.CreateElement(typeof(ExternalConstraintShape), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ExternalConstraintShape
	/// <summary>
	/// ExternalConstraintShape Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ShapeModel.ExternalConstraintShape))]
	public sealed class ExternalConstraintShapeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintShapeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ShapeModel.ExternalConstraintShape( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ExternalConstraintShapeElementFactoryCreator Instance
		{
			get
			{
				return new ExternalConstraintShapeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ShapeForAttribute(typeof(Neumont.Tools.ORM.ObjectModel.FrequencyConstraint))]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.FrequencyConstraintShape.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.FrequencyConstraintShape")]
	public  partial class FrequencyConstraintShape : Neumont.Tools.ORM.ShapeModel.ExternalConstraintShape
	{
		#region FrequencyConstraintShape's Generated Shape Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "ec47cd7d-023b-4971-8b5b-1242dbc7356f";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.FrequencyConstraintShape.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

	}
	#region FrequencyConstraintShape's Generated Constructor Code
	public  partial class FrequencyConstraintShape
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraintShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintShape CreateFrequencyConstraintShape(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFrequencyConstraintShape(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintShape CreateAndInitializeFrequencyConstraintShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFrequencyConstraintShape(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraintShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintShape CreateFrequencyConstraintShape(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FrequencyConstraintShape)partition.ElementFactory.CreateElement(typeof(FrequencyConstraintShape));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FrequencyConstraintShape CreateAndInitializeFrequencyConstraintShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FrequencyConstraintShape)partition.ElementFactory.CreateElement(typeof(FrequencyConstraintShape), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FrequencyConstraintShape
	/// <summary>
	/// FrequencyConstraintShape Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ShapeModel.FrequencyConstraintShape))]
	public sealed class FrequencyConstraintShapeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FrequencyConstraintShapeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ShapeModel.FrequencyConstraintShape( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FrequencyConstraintShapeElementFactoryCreator Instance
		{
			get
			{
				return new FrequencyConstraintShapeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ShapeForAttribute(typeof(Neumont.Tools.ORM.ObjectModel.RingConstraint))]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.RingConstraintShape.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.RingConstraintShape")]
	public  partial class RingConstraintShape : Neumont.Tools.ORM.ShapeModel.ExternalConstraintShape
	{
		#region RingConstraintShape's Generated Shape Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "61b334c5-d37f-4a74-90e9-ac793d35bdf1";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.RingConstraintShape.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

	}
	#region RingConstraintShape's Generated Constructor Code
	public  partial class RingConstraintShape
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraintShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraintShape CreateRingConstraintShape(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateRingConstraintShape(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraintShape CreateAndInitializeRingConstraintShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRingConstraintShape(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraintShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraintShape CreateRingConstraintShape(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (RingConstraintShape)partition.ElementFactory.CreateElement(typeof(RingConstraintShape));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RingConstraintShape CreateAndInitializeRingConstraintShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RingConstraintShape)partition.ElementFactory.CreateElement(typeof(RingConstraintShape), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RingConstraintShape
	/// <summary>
	/// RingConstraintShape Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ShapeModel.RingConstraintShape))]
	public sealed class RingConstraintShapeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RingConstraintShapeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ShapeModel.RingConstraintShape( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RingConstraintShapeElementFactoryCreator Instance
		{
			get
			{
				return new RingConstraintShapeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.FloatingTextShape.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.FloatingTextShape")]
	public abstract partial class FloatingTextShape : Neumont.Tools.ORM.ShapeModel.ORMBaseShape
	{
		#region FloatingTextShape's Generated Shape Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "0904999f-d9c5-4c4e-a08f-f8dd4b2f29a3";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.FloatingTextShape.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

	}
	#region FloatingTextShape's Generated Constructor Code
	public abstract partial class FloatingTextShape
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected FloatingTextShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ShapeForAttribute(typeof(Neumont.Tools.ORM.ObjectModel.ObjectType))]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape")]
	public  partial class ObjectifiedFactTypeNameShape : Neumont.Tools.ORM.ShapeModel.FloatingTextShape
	{
		#region ObjectifiedFactTypeNameShape's Generated Shape Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "7fd5183a-8bc2-43bb-8474-a0a2d558d90a";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

		#region ObjectTypeName's Generated  Field Code
		#region ObjectTypeName's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ObjectTypeNameMetaAttributeGuidString = "4c9bb78d-6290-455e-b844-e7bcc01676f8";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ObjectTypeNameMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape.ObjectTypeNameMetaAttributeGuidString);
		#endregion

		#region ObjectTypeName's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(XPathExpression="/ObjectifiedFactTypeNameShape/SubjectHasPresentation.Subject/Subject", ReverseXPathExpression="/NamedElement/SubjectHasPresentation.Presentation/Presentation", RealAttributeName="Name", ProxyAttributeName="Name", FieldHandlerType=typeof(ObjectifiedFactTypeNameShapeObjectTypeNameFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape.ObjectTypeNameMetaAttributeGuidString, "Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape.ObjectTypeName")]
		public  System.String ObjectTypeName
		{
			get
			{
				return objectifiedFactTypeNameShapeObjectTypeNameFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				objectifiedFactTypeNameShapeObjectTypeNameFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ObjectifiedFactTypeNameShapeObjectTypeNameFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ObjectifiedFactTypeNameShape.ObjectTypeName field
		/// </summary>
		private static ObjectifiedFactTypeNameShapeObjectTypeNameFieldHandler	objectifiedFactTypeNameShapeObjectTypeNameFieldHandler	= ObjectifiedFactTypeNameShapeObjectTypeNameFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ObjectifiedFactTypeNameShape.ObjectTypeName
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ObjectifiedFactTypeNameShapeObjectTypeNameFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementPassThroughFieldHandler<Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ObjectifiedFactTypeNameShapeObjectTypeNameFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ObjectifiedFactTypeNameShape.ObjectTypeName field handler
			/// </summary>
			/// <value>ObjectifiedFactTypeNameShapeObjectTypeNameFieldHandler</value>
			public static ObjectifiedFactTypeNameShapeObjectTypeNameFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape.objectifiedFactTypeNameShapeObjectTypeNameFieldHandler != null)
					{
						return Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape.objectifiedFactTypeNameShapeObjectTypeNameFieldHandler;
					}
					else
					{
						// The static constructor in ObjectifiedFactTypeNameShape will assign this value to
						// Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape.objectifiedFactTypeNameShapeObjectTypeNameFieldHandler, so just instantiate one and return it
						return new ObjectifiedFactTypeNameShapeObjectTypeNameFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ObjectifiedFactTypeNameShape.ObjectTypeName field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape.ObjectTypeNameMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
	}
	#region ObjectifiedFactTypeNameShape's Generated Constructor Code
	public  partial class ObjectifiedFactTypeNameShape
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectifiedFactTypeNameShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectifiedFactTypeNameShape CreateObjectifiedFactTypeNameShape(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateObjectifiedFactTypeNameShape(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectifiedFactTypeNameShape CreateAndInitializeObjectifiedFactTypeNameShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeObjectifiedFactTypeNameShape(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectifiedFactTypeNameShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectifiedFactTypeNameShape CreateObjectifiedFactTypeNameShape(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ObjectifiedFactTypeNameShape)partition.ElementFactory.CreateElement(typeof(ObjectifiedFactTypeNameShape));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ObjectifiedFactTypeNameShape CreateAndInitializeObjectifiedFactTypeNameShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ObjectifiedFactTypeNameShape)partition.ElementFactory.CreateElement(typeof(ObjectifiedFactTypeNameShape), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ObjectifiedFactTypeNameShape
	/// <summary>
	/// ObjectifiedFactTypeNameShape Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape))]
	public sealed class ObjectifiedFactTypeNameShapeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ObjectifiedFactTypeNameShapeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ShapeModel.ObjectifiedFactTypeNameShape( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ObjectifiedFactTypeNameShapeElementFactoryCreator Instance
		{
			get
			{
				return new ObjectifiedFactTypeNameShapeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ShapeForAttribute(typeof(Neumont.Tools.ORM.ObjectModel.ReadingOrder))]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ReadingShape.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.ReadingShape")]
	public  partial class ReadingShape : Neumont.Tools.ORM.ShapeModel.FloatingTextShape
	{
		#region ReadingShape's Generated Shape Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c567ed6d-d0a6-4fd8-a974-c567aa309d5e";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ReadingShape.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

		#region ReadingText's Generated  Field Code
		#region ReadingText's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ReadingTextMetaAttributeGuidString = "22bf9cf7-715c-4159-9ef0-1bdf98647f9c";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ReadingTextMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ReadingShape.ReadingTextMetaAttributeGuidString);
		#endregion

		#region ReadingText's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(XPathExpression="/ReadingShape/SubjectHasPresentation.Subject/Subject", ReverseXPathExpression="/Reading/SubjectHasPresentation.Presentation/Presentation", RealAttributeName="ReadingText", ProxyAttributeName="ReadingText", FieldHandlerType=typeof(ReadingShapeReadingTextFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ReadingShape.ReadingTextMetaAttributeGuidString, "Neumont.Tools.ORM.ShapeModel.ReadingShape.ReadingText")]
		public  System.String ReadingText
		{
			get
			{
				return readingShapeReadingTextFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				readingShapeReadingTextFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ReadingShapeReadingTextFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ReadingShape.ReadingText field
		/// </summary>
		private static ReadingShapeReadingTextFieldHandler	readingShapeReadingTextFieldHandler	= ReadingShapeReadingTextFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ReadingShape.ReadingText
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ReadingShapeReadingTextFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementPassThroughFieldHandler<Neumont.Tools.ORM.ShapeModel.ReadingShape,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ReadingShapeReadingTextFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ReadingShape.ReadingText field handler
			/// </summary>
			/// <value>ReadingShapeReadingTextFieldHandler</value>
			public static ReadingShapeReadingTextFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ShapeModel.ReadingShape.readingShapeReadingTextFieldHandler != null)
					{
						return Neumont.Tools.ORM.ShapeModel.ReadingShape.readingShapeReadingTextFieldHandler;
					}
					else
					{
						// The static constructor in ReadingShape will assign this value to
						// Neumont.Tools.ORM.ShapeModel.ReadingShape.readingShapeReadingTextFieldHandler, so just instantiate one and return it
						return new ReadingShapeReadingTextFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ReadingShape.ReadingText field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ShapeModel.ReadingShape.ReadingTextMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
	}
	#region ReadingShape's Generated Constructor Code
	public  partial class ReadingShape
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingShape CreateReadingShape(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateReadingShape(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingShape CreateAndInitializeReadingShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeReadingShape(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingShape CreateReadingShape(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ReadingShape)partition.ElementFactory.CreateElement(typeof(ReadingShape));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ReadingShape CreateAndInitializeReadingShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ReadingShape)partition.ElementFactory.CreateElement(typeof(ReadingShape), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ReadingShape
	/// <summary>
	/// ReadingShape Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ShapeModel.ReadingShape))]
	public sealed class ReadingShapeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ReadingShapeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ShapeModel.ReadingShape( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ReadingShapeElementFactoryCreator Instance
		{
			get
			{
				return new ReadingShapeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ShapeForAttribute(typeof(Neumont.Tools.ORM.ObjectModel.ValueConstraint))]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ValueConstraintShape.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.ValueConstraintShape")]
	public  partial class ValueConstraintShape : Neumont.Tools.ORM.ShapeModel.FloatingTextShape
	{
		#region ValueConstraintShape's Generated Shape Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "b65f916a-06a5-4efe-bbf9-8d8e55b5c7eb";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ValueConstraintShape.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

		#region ValueRangeText's Generated  Field Code
		#region ValueRangeText's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ValueRangeTextMetaAttributeGuidString = "107e2630-8d2f-43fd-b58a-76577e85cdfa";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ValueRangeTextMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ValueConstraintShape.ValueRangeTextMetaAttributeGuidString);
		#endregion

		#region ValueRangeText's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(XPathExpression="/ValueConstraintShape/SubjectHasPresentation.Subject/Subject", ReverseXPathExpression="/ValueConstraint/SubjectHasPresentation.Presentation/Presentation", RealAttributeName="Text", ProxyAttributeName="Text", FieldHandlerType=typeof(ValueConstraintShapeValueRangeTextFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ValueConstraintShape.ValueRangeTextMetaAttributeGuidString, "Neumont.Tools.ORM.ShapeModel.ValueConstraintShape.ValueRangeText")]
		public  System.String ValueRangeText
		{
			get
			{
				return valueConstraintShapeValueRangeTextFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				valueConstraintShapeValueRangeTextFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ValueConstraintShapeValueRangeTextFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ValueConstraintShape.ValueRangeText field
		/// </summary>
		private static ValueConstraintShapeValueRangeTextFieldHandler	valueConstraintShapeValueRangeTextFieldHandler	= ValueConstraintShapeValueRangeTextFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ValueConstraintShape.ValueRangeText
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ValueConstraintShapeValueRangeTextFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementPassThroughFieldHandler<Neumont.Tools.ORM.ShapeModel.ValueConstraintShape,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ValueConstraintShapeValueRangeTextFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ValueConstraintShape.ValueRangeText field handler
			/// </summary>
			/// <value>ValueConstraintShapeValueRangeTextFieldHandler</value>
			public static ValueConstraintShapeValueRangeTextFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ShapeModel.ValueConstraintShape.valueConstraintShapeValueRangeTextFieldHandler != null)
					{
						return Neumont.Tools.ORM.ShapeModel.ValueConstraintShape.valueConstraintShapeValueRangeTextFieldHandler;
					}
					else
					{
						// The static constructor in ValueConstraintShape will assign this value to
						// Neumont.Tools.ORM.ShapeModel.ValueConstraintShape.valueConstraintShapeValueRangeTextFieldHandler, so just instantiate one and return it
						return new ValueConstraintShapeValueRangeTextFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ValueConstraintShape.ValueRangeText field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ShapeModel.ValueConstraintShape.ValueRangeTextMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
	}
	#region ValueConstraintShape's Generated Constructor Code
	public  partial class ValueConstraintShape
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueConstraintShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraintShape CreateValueConstraintShape(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateValueConstraintShape(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraintShape CreateAndInitializeValueConstraintShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueConstraintShape(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueConstraintShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraintShape CreateValueConstraintShape(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ValueConstraintShape)partition.ElementFactory.CreateElement(typeof(ValueConstraintShape));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueConstraintShape CreateAndInitializeValueConstraintShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueConstraintShape)partition.ElementFactory.CreateElement(typeof(ValueConstraintShape), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueConstraintShape
	/// <summary>
	/// ValueConstraintShape Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ShapeModel.ValueConstraintShape))]
	public sealed class ValueConstraintShapeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueConstraintShapeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ShapeModel.ValueConstraintShape( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueConstraintShapeElementFactoryCreator Instance
		{
			get
			{
				return new ValueConstraintShapeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ShapeForAttribute(typeof(Neumont.Tools.ORM.ObjectModel.Role))]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.RoleNameShape.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.RoleNameShape")]
	public  partial class RoleNameShape : Neumont.Tools.ORM.ShapeModel.FloatingTextShape
	{
		#region RoleNameShape's Generated Shape Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "2cb7393c-4502-4c59-979d-94d6c89b4080";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.RoleNameShape.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

		#region RoleName's Generated  Field Code
		#region RoleName's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String RoleNameMetaAttributeGuidString = "5713319e-4003-4766-9ad3-143a048cb611";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid RoleNameMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.RoleNameShape.RoleNameMetaAttributeGuidString);
		#endregion

		#region RoleName's Generated Property Code

		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(XPathExpression="/RoleNameShape/SubjectHasPresentation.Subject/Subject", ReverseXPathExpression="/NamedElement/SubjectHasPresentation.Presentation/Presentation", RealAttributeName="Name", ProxyAttributeName="Name", FieldHandlerType=typeof(RoleNameShapeRoleNameFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.RoleNameShape.RoleNameMetaAttributeGuidString, "Neumont.Tools.ORM.ShapeModel.RoleNameShape.RoleName")]
		public  System.String RoleName
		{
			get
			{
				return roleNameShapeRoleNameFieldHandler.GetFieldValue(this);
			}
		
			set
			{
				roleNameShapeRoleNameFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RoleNameShapeRoleNameFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for RoleNameShape.RoleName field
		/// </summary>
		private static RoleNameShapeRoleNameFieldHandler	roleNameShapeRoleNameFieldHandler	= RoleNameShapeRoleNameFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for RoleNameShape.RoleName
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RoleNameShapeRoleNameFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementPassThroughFieldHandler<Neumont.Tools.ORM.ShapeModel.RoleNameShape,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RoleNameShapeRoleNameFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the RoleNameShape.RoleName field handler
			/// </summary>
			/// <value>RoleNameShapeRoleNameFieldHandler</value>
			public static RoleNameShapeRoleNameFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ShapeModel.RoleNameShape.roleNameShapeRoleNameFieldHandler != null)
					{
						return Neumont.Tools.ORM.ShapeModel.RoleNameShape.roleNameShapeRoleNameFieldHandler;
					}
					else
					{
						// The static constructor in RoleNameShape will assign this value to
						// Neumont.Tools.ORM.ShapeModel.RoleNameShape.roleNameShapeRoleNameFieldHandler, so just instantiate one and return it
						return new RoleNameShapeRoleNameFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the RoleNameShape.RoleName field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ShapeModel.RoleNameShape.RoleNameMetaAttributeGuid;
				}
			}
		}
		#endregion
		#endregion
		
	}
	#region RoleNameShape's Generated Constructor Code
	public  partial class RoleNameShape
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleNameShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleNameShape CreateRoleNameShape(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateRoleNameShape(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleNameShape CreateAndInitializeRoleNameShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRoleNameShape(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleNameShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleNameShape CreateRoleNameShape(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (RoleNameShape)partition.ElementFactory.CreateElement(typeof(RoleNameShape));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RoleNameShape CreateAndInitializeRoleNameShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RoleNameShape)partition.ElementFactory.CreateElement(typeof(RoleNameShape), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RoleNameShape
	/// <summary>
	/// RoleNameShape Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ShapeModel.RoleNameShape))]
	public sealed class RoleNameShapeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RoleNameShapeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ShapeModel.RoleNameShape( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RoleNameShapeElementFactoryCreator Instance
		{
			get
			{
				return new RoleNameShapeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ORMBaseBinaryLinkShape.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.ORMBaseBinaryLinkShape")]
	public abstract partial class ORMBaseBinaryLinkShape : Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShape
	{
		#region ORMBaseBinaryLinkShape's Generated Shape Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "ceff4339-48d0-4ffe-b052-2f9da167b1db";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ORMBaseBinaryLinkShape.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

	}
	#region ORMBaseBinaryLinkShape's Generated Constructor Code
	public abstract partial class ORMBaseBinaryLinkShape
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected ORMBaseBinaryLinkShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ShapeForAttribute(typeof(Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole))]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.RolePlayerLink.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.RolePlayerLink")]
	public  partial class RolePlayerLink : Neumont.Tools.ORM.ShapeModel.ORMBaseBinaryLinkShape
	{
		#region RolePlayerLink's Generated Shape Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "2b3f0aae-b1b1-4727-8862-5c34b494b499";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.RolePlayerLink.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

	}
	#region RolePlayerLink's Generated Constructor Code
	public  partial class RolePlayerLink
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RolePlayerLink(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RolePlayerLink CreateRolePlayerLink(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateRolePlayerLink(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RolePlayerLink CreateAndInitializeRolePlayerLink(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRolePlayerLink(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RolePlayerLink(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RolePlayerLink CreateRolePlayerLink(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (RolePlayerLink)partition.ElementFactory.CreateElement(typeof(RolePlayerLink));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RolePlayerLink CreateAndInitializeRolePlayerLink(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RolePlayerLink)partition.ElementFactory.CreateElement(typeof(RolePlayerLink), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RolePlayerLink
	/// <summary>
	/// RolePlayerLink Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ShapeModel.RolePlayerLink))]
	public sealed class RolePlayerLinkElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RolePlayerLinkElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ShapeModel.RolePlayerLink( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RolePlayerLinkElementFactoryCreator Instance
		{
			get
			{
				return new RolePlayerLinkElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ShapeForAttribute(typeof(Neumont.Tools.ORM.ObjectModel.SubtypeFact))]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.SubtypeLink.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.SubtypeLink")]
	public  partial class SubtypeLink : Neumont.Tools.ORM.ShapeModel.ORMBaseBinaryLinkShape
	{
		#region SubtypeLink's Generated Shape Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "87ddaeda-1fd8-4433-bb1e-7482c7f471a7";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.SubtypeLink.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

	}
	#region SubtypeLink's Generated Constructor Code
	public  partial class SubtypeLink
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubtypeLink(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubtypeLink CreateSubtypeLink(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateSubtypeLink(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubtypeLink CreateAndInitializeSubtypeLink(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSubtypeLink(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SubtypeLink(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubtypeLink CreateSubtypeLink(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (SubtypeLink)partition.ElementFactory.CreateElement(typeof(SubtypeLink));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SubtypeLink CreateAndInitializeSubtypeLink(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SubtypeLink)partition.ElementFactory.CreateElement(typeof(SubtypeLink), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SubtypeLink
	/// <summary>
	/// SubtypeLink Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ShapeModel.SubtypeLink))]
	public sealed class SubtypeLinkElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SubtypeLinkElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ShapeModel.SubtypeLink( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SubtypeLinkElementFactoryCreator Instance
		{
			get
			{
				return new SubtypeLinkElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ShapeForAttribute(typeof(Neumont.Tools.ORM.ObjectModel.ExternalFactConstraint))]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ExternalConstraintLink.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.ExternalConstraintLink")]
	public  partial class ExternalConstraintLink : Neumont.Tools.ORM.ShapeModel.ORMBaseBinaryLinkShape
	{
		#region ExternalConstraintLink's Generated Shape Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "8815e6d8-238b-422c-a4b3-29fdc8de9ea5";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ExternalConstraintLink.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

	}
	#region ExternalConstraintLink's Generated Constructor Code
	public  partial class ExternalConstraintLink
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintLink(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintLink CreateExternalConstraintLink(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateExternalConstraintLink(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintLink CreateAndInitializeExternalConstraintLink(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeExternalConstraintLink(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintLink(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintLink CreateExternalConstraintLink(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ExternalConstraintLink)partition.ElementFactory.CreateElement(typeof(ExternalConstraintLink));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ExternalConstraintLink CreateAndInitializeExternalConstraintLink(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ExternalConstraintLink)partition.ElementFactory.CreateElement(typeof(ExternalConstraintLink), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ExternalConstraintLink
	/// <summary>
	/// ExternalConstraintLink Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ShapeModel.ExternalConstraintLink))]
	public sealed class ExternalConstraintLinkElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ExternalConstraintLinkElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ShapeModel.ExternalConstraintLink( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ExternalConstraintLinkElementFactoryCreator Instance
		{
			get
			{
				return new ExternalConstraintLinkElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ShapeForAttribute(typeof(Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint))]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ValueRangeLink.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.ValueRangeLink")]
	public  partial class ValueRangeLink : Neumont.Tools.ORM.ShapeModel.ORMBaseBinaryLinkShape
	{
		#region ValueRangeLink's Generated Shape Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "374e43c3-c294-49c4-8a61-3c3ca5fc86e8";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ValueRangeLink.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

	}
	#region ValueRangeLink's Generated Constructor Code
	public  partial class ValueRangeLink
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRangeLink(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeLink CreateValueRangeLink(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateValueRangeLink(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeLink CreateAndInitializeValueRangeLink(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeValueRangeLink(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRangeLink(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeLink CreateValueRangeLink(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ValueRangeLink)partition.ElementFactory.CreateElement(typeof(ValueRangeLink));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ValueRangeLink CreateAndInitializeValueRangeLink(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ValueRangeLink)partition.ElementFactory.CreateElement(typeof(ValueRangeLink), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ValueRangeLink
	/// <summary>
	/// ValueRangeLink Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ShapeModel.ValueRangeLink))]
	public sealed class ValueRangeLinkElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ValueRangeLinkElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ShapeModel.ValueRangeLink( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ValueRangeLinkElementFactoryCreator Instance
		{
			get
			{
				return new ValueRangeLinkElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.LinkConnectorShape.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.LinkConnectorShape")]
	public  partial class LinkConnectorShape : Microsoft.VisualStudio.Modeling.Diagrams.NodeShape
	{
		#region LinkConnectorShape's Generated Shape Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "51770447-28e0-4bff-977f-2d2625f7978d";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.LinkConnectorShape.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

	}
	#region LinkConnectorShape's Generated Constructor Code
	public  partial class LinkConnectorShape
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public LinkConnectorShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LinkConnectorShape CreateLinkConnectorShape(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateLinkConnectorShape(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LinkConnectorShape CreateAndInitializeLinkConnectorShape(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeLinkConnectorShape(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public LinkConnectorShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LinkConnectorShape CreateLinkConnectorShape(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (LinkConnectorShape)partition.ElementFactory.CreateElement(typeof(LinkConnectorShape));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static LinkConnectorShape CreateAndInitializeLinkConnectorShape(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (LinkConnectorShape)partition.ElementFactory.CreateElement(typeof(LinkConnectorShape), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for LinkConnectorShape
	/// <summary>
	/// LinkConnectorShape Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ShapeModel.LinkConnectorShape))]
	public sealed class LinkConnectorShapeElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public LinkConnectorShapeElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ShapeModel.LinkConnectorShape( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static LinkConnectorShapeElementFactoryCreator Instance
		{
			get
			{
				return new LinkConnectorShapeElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.ComponentModel.ToolboxItemFilterAttribute(ORMDiagram.ORMDiagramDefaultFilterString, System.ComponentModel.ToolboxItemFilterType.Require)]
	
	[Microsoft.VisualStudio.Modeling.MetaToolboxItem("Toolbox.EntityType.Item.Id", 0, "Toolbox.EntityType.Bitmap.Id", "Toolbox.EntityType.Caption.Id", "Toolbox.EntityType.Tooltip.Id", "Toolbox.DefaultTabName")]
	[Microsoft.VisualStudio.Modeling.MetaToolboxItem("Toolbox.ValueType.Item.Id", 5, "Toolbox.ValueType.Bitmap.Id", "Toolbox.ValueType.Caption.Id", "Toolbox.ValueType.Tooltip.Id", "Toolbox.DefaultTabName")]
	[Microsoft.VisualStudio.Modeling.MetaToolboxItem("Toolbox.ObjectifiedFactType.Item.Id", 7, "Toolbox.ObjectifiedFactType.Bitmap.Id", "Toolbox.ObjectifiedFactType.Caption.Id", "Toolbox.ObjectifiedFactType.Tooltip.Id", "Toolbox.DefaultTabName")]
	[Microsoft.VisualStudio.Modeling.MetaToolboxItem("Toolbox.UnaryFactType.Item.Id", 10, "Toolbox.UnaryFactType.Bitmap.Id", "Toolbox.UnaryFactType.Caption.Id", "Toolbox.UnaryFactType.Tooltip.Id", "Toolbox.DefaultTabName")]
	[Microsoft.VisualStudio.Modeling.MetaToolboxItem("Toolbox.BinaryFactType.Item.Id", 15, "Toolbox.BinaryFactType.Bitmap.Id", "Toolbox.BinaryFactType.Caption.Id", "Toolbox.BinaryFactType.Tooltip.Id", "Toolbox.DefaultTabName")]
	[Microsoft.VisualStudio.Modeling.MetaToolboxItem("Toolbox.TernaryFactType.Item.Id", 20, "Toolbox.TernaryFactType.Bitmap.Id", "Toolbox.TernaryFactType.Caption.Id", "Toolbox.TernaryFactType.Tooltip.Id", "Toolbox.DefaultTabName")]
	[Microsoft.VisualStudio.Modeling.MetaToolboxItem("Toolbox.RoleConnector.Item.Id", 21, "Toolbox.RoleConnector.Bitmap.Id", "Toolbox.RoleConnector.Caption.Id", "Toolbox.RoleConnector.Tooltip.Id", "Toolbox.DefaultTabName")]
	[Microsoft.VisualStudio.Modeling.MetaToolboxItem("Toolbox.SubtypeConnector.Item.Id", 22, "Toolbox.SubtypeConnector.Bitmap.Id", "Toolbox.SubtypeConnector.Caption.Id", "Toolbox.SubtypeConnector.Tooltip.Id", "Toolbox.DefaultTabName")]
	[Microsoft.VisualStudio.Modeling.MetaToolboxItem("Toolbox.InternalUniquenessConstraint.Item.Id", 23, "Toolbox.InternalUniquenessConstraint.Bitmap.Id", "Toolbox.InternalUniquenessConstraint.Caption.Id", "Toolbox.InternalUniquenessConstraint.Tooltip.Id", "Toolbox.DefaultTabName")]
	[Microsoft.VisualStudio.Modeling.MetaToolboxItem("Toolbox.ExternalUniquenessConstraint.Item.Id", 25, "Toolbox.ExternalUniquenessConstraint.Bitmap.Id", "Toolbox.ExternalUniquenessConstraint.Caption.Id", "Toolbox.ExternalUniquenessConstraint.Tooltip.Id", "Toolbox.DefaultTabName")]
	[Microsoft.VisualStudio.Modeling.MetaToolboxItem("Toolbox.EqualityConstraint.Item.Id", 35, "Toolbox.EqualityConstraint.Bitmap.Id", "Toolbox.EqualityConstraint.Caption.Id", "Toolbox.EqualityConstraint.Tooltip.Id", "Toolbox.DefaultTabName")]
	[Microsoft.VisualStudio.Modeling.MetaToolboxItem("Toolbox.ExclusionConstraint.Item.Id", 40, "Toolbox.ExclusionConstraint.Bitmap.Id", "Toolbox.ExclusionConstraint.Caption.Id", "Toolbox.ExclusionConstraint.Tooltip.Id", "Toolbox.DefaultTabName")]
	[Microsoft.VisualStudio.Modeling.MetaToolboxItem("Toolbox.InclusiveOrConstraint.Item.Id", 45, "Toolbox.InclusiveOrConstraint.Bitmap.Id", "Toolbox.InclusiveOrConstraint.Caption.Id", "Toolbox.InclusiveOrConstraint.Tooltip.Id", "Toolbox.DefaultTabName")]
	[Microsoft.VisualStudio.Modeling.MetaToolboxItem("Toolbox.SubsetConstraint.Item.Id", 55, "Toolbox.SubsetConstraint.Bitmap.Id", "Toolbox.SubsetConstraint.Caption.Id", "Toolbox.SubsetConstraint.Tooltip.Id", "Toolbox.DefaultTabName")]
	[Microsoft.VisualStudio.Modeling.MetaToolboxItem("Toolbox.FrequencyConstraint.Item.Id", 57, "Toolbox.FrequencyConstraint.Bitmap.Id", "Toolbox.FrequencyConstraint.Caption.Id", "Toolbox.FrequencyConstraint.Tooltip.Id", "Toolbox.DefaultTabName")]
	[Microsoft.VisualStudio.Modeling.MetaToolboxItem("Toolbox.RingConstraint.Item.Id", 58, "Toolbox.RingConstraint.Bitmap.Id", "Toolbox.RingConstraint.Caption.Id", "Toolbox.RingConstraint.Tooltip.Id", "Toolbox.DefaultTabName")]
	[Microsoft.VisualStudio.Modeling.MetaToolboxItem("Toolbox.ExternalConstraintConnector.Item.Id", 60, "Toolbox.ExternalConstraintConnector.Bitmap.Id", "Toolbox.ExternalConstraintConnector.Caption.Id", "Toolbox.ExternalConstraintConnector.Tooltip.Id", "Toolbox.DefaultTabName")][System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ORMDiagram.MetaClassGuidString, "Neumont.Tools.ORM.ShapeModel.ORMDiagram")]
	public  partial class ORMDiagram : Microsoft.VisualStudio.Modeling.Diagrams.Diagram
	{
		#region ORMDiagram's Generated Diagram Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "948f992d-c9b8-46f9-be3c-b48347f8ab0b";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ORMDiagram.MetaClassGuidString);
		#region Boilerplate code for every Shape-derived class
		/// <summary>
		/// Style Set
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.StyleSet classStyleSet = null;
		/// <summary>
		/// Shape Fields
		/// </summary>
		private static Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection shapeFields = null;
		/// <summary>
		/// Style Set
		/// </summary>
		protected override Microsoft.VisualStudio.Modeling.Diagrams.StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		/// <summary>
		/// Shape Fields
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.Diagrams.ShapeFieldCollection ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#endregion

		#region AutoPopulateShapes's Generated  Field Code
		#region AutoPopulateShapes's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String AutoPopulateShapesMetaAttributeGuidString = "d3f7a171-ce39-4944-be80-d55127423c83";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid AutoPopulateShapesMetaAttributeGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.ORMDiagram.AutoPopulateShapesMetaAttributeGuidString);
		#endregion

		#region AutoPopulateShapes's Generated Property Code

		private System.Boolean autoPopulateShapesPropertyStorage = false;
		
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean=false)]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ORMDiagramAutoPopulateShapesFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.ORMDiagram.AutoPopulateShapesMetaAttributeGuidString, "Neumont.Tools.ORM.ShapeModel.ORMDiagram.AutoPopulateShapes")]
		public  System.Boolean AutoPopulateShapes
		{
			get
			{
				return autoPopulateShapesPropertyStorage;
			}
		
			set
			{
				oRMDiagramAutoPopulateShapesFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ORMDiagramAutoPopulateShapesFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ORMDiagram.AutoPopulateShapes field
		/// </summary>
		private static ORMDiagramAutoPopulateShapesFieldHandler	oRMDiagramAutoPopulateShapesFieldHandler	= ORMDiagramAutoPopulateShapesFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ORMDiagram.AutoPopulateShapes
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ORMDiagramAutoPopulateShapesFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<Neumont.Tools.ORM.ShapeModel.ORMDiagram,System.Boolean>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ORMDiagramAutoPopulateShapesFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ORMDiagram.AutoPopulateShapes field handler
			/// </summary>
			/// <value>ORMDiagramAutoPopulateShapesFieldHandler</value>
			public static ORMDiagramAutoPopulateShapesFieldHandler Instance
			{
				get
				{
					if (Neumont.Tools.ORM.ShapeModel.ORMDiagram.oRMDiagramAutoPopulateShapesFieldHandler != null)
					{
						return Neumont.Tools.ORM.ShapeModel.ORMDiagram.oRMDiagramAutoPopulateShapesFieldHandler;
					}
					else
					{
						// The static constructor in ORMDiagram will assign this value to
						// Neumont.Tools.ORM.ShapeModel.ORMDiagram.oRMDiagramAutoPopulateShapesFieldHandler, so just instantiate one and return it
						return new ORMDiagramAutoPopulateShapesFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ORMDiagram.AutoPopulateShapes field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return Neumont.Tools.ORM.ShapeModel.ORMDiagram.AutoPopulateShapesMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ORMDiagram</param>
			protected sealed override System.Boolean GetValue(Neumont.Tools.ORM.ShapeModel.ORMDiagram element)
			{
				return element.autoPopulateShapesPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(Neumont.Tools.ORM.ShapeModel.ORMDiagram element, System.Boolean value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.Boolean oldValue)
			{
				oldValue = element.autoPopulateShapesPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.autoPopulateShapesPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
	}
	#region ORMDiagram's Generated Constructor Code
	public  partial class ORMDiagram
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMDiagram(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMDiagram CreateORMDiagram(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateORMDiagram(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMDiagram CreateAndInitializeORMDiagram(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeORMDiagram(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMDiagram(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMDiagram CreateORMDiagram(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ORMDiagram)partition.ElementFactory.CreateElement(typeof(ORMDiagram));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ORMDiagram CreateAndInitializeORMDiagram(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ORMDiagram)partition.ElementFactory.CreateElement(typeof(ORMDiagram), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ORMDiagram
	/// <summary>
	/// ORMDiagram Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ShapeModel.ORMDiagram))]
	public sealed class ORMDiagramElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMDiagramElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ShapeModel.ORMDiagram( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ORMDiagramElementFactoryCreator Instance
		{
			get
			{
				return new ORMDiagramElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace Neumont.Tools.ORM.ShapeModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("c52fb9a5-6bf4-4267-8716-71d74c7aa89c")]
	[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder.MetaRelationshipGuidString, "Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder")]
	public  partial class FactTypeShapeHasRoleDisplayOrder : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region FactTypeShapeHasRoleDisplayOrder's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "94b3aeef-4c8d-4d1a-a7cc-42f7ebdc68a2";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = FactTypeShapeHasRoleDisplayOrder.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = FactTypeShapeHasRoleDisplayOrder.MetaClassGuid;
		#endregion

		#region FactTypeShape's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FactTypeShapeMetaRoleGuidString = "30c6b725-2d74-47f7-852a-d02c644a447b";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FactTypeShapeMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder.FactTypeShapeMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=false, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder.FactTypeShapeMetaRoleGuidString, "Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder.FactTypeShape")]
		public  Neumont.Tools.ORM.ShapeModel.FactTypeShape FactTypeShape
		{
			get { return (Neumont.Tools.ORM.ShapeModel.FactTypeShape)this.GetRolePlayer(FactTypeShapeMetaRoleGuid); }
			set { this.SetRolePlayer(FactTypeShapeMetaRoleGuid, value); }
		}
		
		#endregion
		#region RoleDisplayOrderCollection's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String RoleDisplayOrderCollectionMetaRoleGuidString = "4ca45c6e-0400-4976-af8c-0cad7c7bc2ee";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid RoleDisplayOrderCollectionMetaRoleGuid = new System.Guid(Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder.RoleDisplayOrderCollectionMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=false, IsNavigableFrom=true, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder.RoleDisplayOrderCollectionMetaRoleGuidString, "Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder.RoleDisplayOrderCollection")]
		public  Neumont.Tools.ORM.ObjectModel.Role RoleDisplayOrderCollection
		{
			get { return (Neumont.Tools.ORM.ObjectModel.Role)this.GetRolePlayer(RoleDisplayOrderCollectionMetaRoleGuid); }
			set { this.SetRolePlayer(RoleDisplayOrderCollectionMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region FactTypeShapeHasRoleDisplayOrder's Generated Constructor Code
	public  partial class FactTypeShapeHasRoleDisplayOrder
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeShapeHasRoleDisplayOrder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeShapeHasRoleDisplayOrder CreateFactTypeShapeHasRoleDisplayOrder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateFactTypeShapeHasRoleDisplayOrder(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeShapeHasRoleDisplayOrder CreateAndInitializeFactTypeShapeHasRoleDisplayOrder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFactTypeShapeHasRoleDisplayOrder(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeShapeHasRoleDisplayOrder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeShapeHasRoleDisplayOrder CreateFactTypeShapeHasRoleDisplayOrder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (FactTypeShapeHasRoleDisplayOrder)partition.ElementFactory.CreateElementLink(typeof(FactTypeShapeHasRoleDisplayOrder), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FactTypeShapeHasRoleDisplayOrder CreateAndInitializeFactTypeShapeHasRoleDisplayOrder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FactTypeShapeHasRoleDisplayOrder)partition.ElementFactory.CreateElementLink(typeof(FactTypeShapeHasRoleDisplayOrder), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FactTypeShapeHasRoleDisplayOrder
	/// <summary>
	/// FactTypeShapeHasRoleDisplayOrder Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder))]
	public sealed class FactTypeShapeHasRoleDisplayOrderElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FactTypeShapeHasRoleDisplayOrderElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new Neumont.Tools.ORM.ShapeModel.FactTypeShapeHasRoleDisplayOrder( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FactTypeShapeHasRoleDisplayOrderElementFactoryCreator Instance
		{
			get
			{
				return new FactTypeShapeHasRoleDisplayOrderElementFactoryCreator();
			}
		}
	}
	#endregion

}


