<?xml version="1.0" encoding="utf-8"?>
<!-- Todo: Is external on object type?  What am I supposed to do with object shapes and data types? -->
<xs:schema targetNamespace="http://schemas.neumont.edu/ORM/2006-04/ORMCore" 
	elementFormDefault="qualified" attributeFormDefault="unqualified" 
	xmlns="http://schemas.neumont.edu/ORM/2006-04/ORMCore"
	xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<xs:annotation>
		<xs:appinfo source="zlib/libpng License Copyright Notice">
			Copyright Â© Neumont University. All rights reserved.

			This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
			Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
			1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
			2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
			3. This notice may not be removed or altered from any source distribution.
		</xs:appinfo>
	</xs:annotation>
	<xs:complexType name="Extensions">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:any namespace="##other" processContents="strict"/>
		</xs:sequence>
	</xs:complexType>
	<!--ORMModel-->
	<xs:element name="ORMModel" type="ORMModel"/>
	<xs:complexType name="ORMModel">
		<xs:all>
			<xs:element name="Objects" type="Objects" minOccurs="0"/>
			<xs:element name="Facts" type="Facts" minOccurs="0"/>
			<xs:element name="Constraints" type="Constraints" minOccurs="0"/>
			<xs:element name="DataTypes" type="DataTypes" minOccurs="0"/>
			<xs:element name="CustomReferenceModes" type="CustomReferenceModes" minOccurs="0"/>
			<xs:element name="ModelNotes" type="ModelNotes" minOccurs="0"/>
			<xs:element name="ModelErrors" type="ModelErrors" minOccurs="0"/>
			<xs:element name="ReferenceModeKinds" type="ReferenceModeKinds" minOccurs="0"/>
			<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
		</xs:all>
		<xs:attribute name="Name" type="xs:string"/>
		<xs:attribute name="id" type="xs:ID"/>
	</xs:complexType>
	<!--End ORMModel-->
	<xs:element name="ModelErrorDisplayFilter" type="ModelErrorDisplayFilterType"/>
	<xs:complexType name="ModelErrorDisplayFilterType">
		<!-- UNDONE: Temporary to pass XSD validation -->
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:any namespace="##any" processContents="skip"/>
		</xs:choice>
		<xs:anyAttribute namespace="##any" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="DefinitionsType">
		<xs:sequence minOccurs="0">
			<xs:element name="Definition" type="DefinitionType"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="DefinitionType">
		<xs:sequence>
			<xs:element name="Text" type="xs:string" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="id" type="xs:ID"/>
	</xs:complexType>
	<xs:complexType name="NotesType">
		<xs:sequence minOccurs="0">
			<xs:element name="Note" type="NoteType"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="NoteType">
		<xs:sequence>
			<xs:element name="Text" type="xs:string" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="id" type="xs:ID"/>
	</xs:complexType>
	<xs:complexType name="ModelNotes">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="ModelNote" type="ModelNote"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ModelNote">
		<xs:complexContent>
			<xs:extension base="NoteType">
				<xs:sequence minOccurs="0">
					<xs:element name="ReferencedBy" type="NoteReferencedBy"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="NoteReferencedBy">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="FactType" type="FactRef"/>
			<xs:element name="ObjectType" type="ObjectRef"/>
		</xs:choice>
	</xs:complexType>
	<!--Objects and Object Types-->
	<xs:complexType name="ObjectRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="Objects">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="EntityType" type="EntityType"/>
			<xs:element name="ObjectifiedType" type="ObjectifiedType"/>
			<xs:element name="ValueType" type="ValueType"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="ObjectType" abstract="true">
		<xs:sequence>
			<xs:element name="Definitions" type="DefinitionsType" minOccurs="0"/>
			<xs:element name="Notes" type="NotesType" minOccurs="0"/>
			<xs:element name="PlayedRoles" type="PlayedRoles" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Name" use="required" type="xs:string"/>
		<xs:attribute name="id" use="required" type="xs:ID"/>
		<xs:attribute name="IsIndependent" type="xs:boolean" default="false"/>
		<xs:attribute name="IsExternal" type="xs:boolean" default="false"/>
		<xs:attribute name="IsPersonal" type="xs:boolean" default="false"/>
	</xs:complexType>
	<xs:complexType name="EntityType">
		<xs:complexContent>
			<xs:extension base="ObjectType">
				<xs:sequence>
					<xs:element name="PreferredIdentifier" type="ConstraintRef" minOccurs="0"/>
					<xs:element name="Instances" type="EntityTypeInstances" minOccurs="0"/>
					<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
				</xs:sequence>
				<!--ReferenceMode is derived.-->
				<xs:attribute name="_ReferenceMode" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--The fact that an object is an ObjectifiedType is derrived.-->
	<xs:complexType name="ObjectifiedType">
		<xs:complexContent>
			<xs:extension base="ObjectType">
				<xs:sequence>
					<xs:element name="PreferredIdentifier" type="ConstraintRef" minOccurs="0"/>
					<xs:element name="NestedPredicate" type="ObjectifiedFactRef"/>
					<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
				</xs:sequence>
				<!--ReferenceMode is derived.-->
				<xs:attribute name="_ReferenceMode" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--The fact that an object is a valuetype is derrived-->
	<xs:complexType name="ValueType">
		<xs:complexContent>
			<xs:extension base="ObjectType">
				<xs:sequence>
					<xs:element name="ConceptualDataType" type="DataTypeRef"/>
					<xs:element name="ValueRestriction" type="ValueRestriction" minOccurs="0"/>
					<xs:element name="Instances" type="ValueTypeInstances" minOccurs="0"/>
					<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="IsImplicitBooleanValue" type="xs:boolean" default="false"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--End Objects and Object Types-->
	<!--ObjectTypeInstances-->
	<xs:complexType name="ObjectTypeInstanceRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="EntityTypeInstances">
		<xs:sequence>
			<xs:element name="EntityTypeInstance" type="EntityTypeInstance" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="EntityTypeInstance">
		<xs:sequence>
			<xs:element name="RoleInstances" type="EntityTypeRoleInstances" minOccurs="0"/>
			<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="id" type="xs:ID" use="required"/>
	</xs:complexType>
	<xs:complexType name="EntityTypeInstanceRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="EntityTypeRoleInstances">
		<xs:sequence>
			<xs:element name="EntityTypeRoleInstance" type="ObjectTypeRoleInstanceRef" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ObjectTypeRoleInstanceRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="ValueTypeInstances">
		<xs:sequence>
			<xs:element name="ValueTypeInstance" type="ValueTypeInstance" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ValueTypeInstance">
		<xs:sequence>
			<xs:element name="Value" type="xs:string"/>
			<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="id" type="xs:ID" use="required"/>
	</xs:complexType>
	<xs:complexType name="ValueTypeInstanceRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="ObjectTypeRoleInstances">
		<xs:sequence>
			<xs:element name="EntityTypeRoleInstance" type="RoleInstance" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="ValueTypeRoleInstance" type="RoleInstance" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="FactTypeRoleInstance" type="RoleInstance" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="RoleInstance">
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="id" type="xs:ID" use="required"/>
				<xs:attribute name="ref" type="xs:IDREF"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="FactTypeInstances">
		<xs:sequence>
			<xs:element name="FactTypeInstance" type="FactTypeInstance" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="FactTypeInstance">
		<xs:sequence>
			<xs:element name="RoleInstances" type="FactTypeRoleInstances" minOccurs="0"/>
			<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="id" type="xs:ID" use="required"/>
	</xs:complexType>
	<xs:complexType name="FactTypeInstanceRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="FactTypeRoleInstances">
		<xs:sequence>
			<xs:element name="FactTypeRoleInstance" type="ObjectTypeRoleInstanceRef" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<!--end ObjectTypeInstances-->
	<!--DataType -->
	<!--DataTypeRef indicates a reference to a datatype -->
	<xs:complexType name="DataTypeRef">
		<xs:attribute name="id" type="xs:ID"/>
		<xs:attribute name="ref" type="xs:IDREF"/>
		<xs:attribute name="Scale" type="xs:int"/>
		<xs:attribute name="Length" type="xs:int"/>
	</xs:complexType>
	<xs:complexType name="DataTypeRefRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<!--end DataTypeRef-->
	<xs:complexType name="DataTypes">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="UnspecifiedDataType" type="UnspecifiedDataType"/>
			<xs:element name="FixedLengthTextDataType" type="FixedLengthTextDataType"/>
			<xs:element name="VariableLengthTextDataType" type="VariableLengthTextDataType"/>
			<xs:element name="LargeLengthTextDataType" type="LargeLengthTextDataType"/>
			<xs:element name="SignedIntegerNumericDataType" type="SignedIntegerNumericDataType"/>
			<xs:element name="SignedSmallIntegerNumericDataType" type="SignedSmallIntegerNumericDataType"/>
			<xs:element name="SignedLargeIntegerNumericDataType" type="SignedLargeIntegerNumericDataType"/>
			<xs:element name="UnsignedIntegerNumericDataType" type="UnsignedIntegerNumericDataType"/>
			<xs:element name="UnsignedSmallIntegerNumericDataType" type="UnsignedSmallIntegerNumericDataType"/>
			<xs:element name="UnsignedLargeIntegerNumericDataType" type="UnsignedLargeIntegerNumericDataType"/>
			<xs:element name="AutoCounterNumericDataType" type="AutoCounterNumericDataType"/>
			<xs:element name="FloatingPointNumericDataType" type="FloatingPointNumericDataType"/>
			<xs:element name="SinglePrecisionFloatingPointNumericDataType" type="SinglePrecisionFloatingPointNumericDataType"/>
			<xs:element name="DoublePrecisionFloatingPointNumericDataType" type="DoublePrecisionFloatingPointNumericDataType"/>
			<xs:element name="DecimalNumericDataType" type="DecimalNumericDataType"/>
			<xs:element name="MoneyNumericDataType" type="MoneyNumericDataType"/>
			<xs:element name="FixedLengthRawDataDataType" type="FixedLengthRawDataDataType"/>
			<xs:element name="VariableLengthRawDataDataType" type="VariableLengthRawDataDataType"/>
			<xs:element name="LargeLengthRawDataDataType" type="LargeLengthRawDataDataType"/>
			<xs:element name="PictureRawDataDataType" type="PictureRawDataDataType"/>
			<xs:element name="OleObjectRawDataDataType" type="OleObjectRawDataDataType"/>
			<xs:element name="AutoTimestampTemporalDataType" type="AutoTimestampTemporalDataType"/>
			<xs:element name="TimeTemporalDataType" type="TimeTemporalDataType"/>
			<xs:element name="DateTemporalDataType" type="DateTemporalDataType"/>
			<xs:element name="DateAndTimeTemporalDataType" type="DateAndTimeTemporalDataType"/>
			<xs:element name="TrueOrFalseLogicalDataType" type="TrueOrFalseLogicalDataType"/>
			<xs:element name="YesOrNoLogicalDataType" type="YesOrNoLogicalDataType"/>
			<xs:element name="RowIdOtherDataType" type="RowIdOtherDataType"/>
			<xs:element name="ObjectIdOtherDataType" type="ObjectIdOtherDataType"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="DataType" abstract="true">
		<xs:choice>
			<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
		</xs:choice>
		<xs:attribute name="id" type="xs:ID" use="required"/>
	</xs:complexType>
	<xs:complexType name="UnspecifiedDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FixedLengthTextDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="VariableLengthTextDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="LargeLengthTextDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SignedIntegerNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SignedSmallIntegerNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SignedLargeIntegerNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="UnsignedIntegerNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="UnsignedSmallIntegerNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="UnsignedLargeIntegerNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AutoCounterNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FloatingPointNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SinglePrecisionFloatingPointNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DoublePrecisionFloatingPointNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DecimalNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="MoneyNumericDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FixedLengthRawDataDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="VariableLengthRawDataDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="LargeLengthRawDataDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PictureRawDataDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="OleObjectRawDataDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AutoTimestampTemporalDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TimeTemporalDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DateTemporalDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DateAndTimeTemporalDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TrueOrFalseLogicalDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="YesOrNoLogicalDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RowIdOtherDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ObjectIdOtherDataType">
		<xs:complexContent>
			<xs:extension base="DataType"/>
		</xs:complexContent>
	</xs:complexType>
	<!--End DataType -->
	<!--Data is a gereral purpose element wrapper to enclose data.  This helps make the schema more extendable.-->
	<xs:complexType name="Data">
		<xs:sequence>
			<xs:element name="Data" type="xs:string"/>
		</xs:sequence>
	</xs:complexType>
	<!--end data-->
	<!--Roles-->
	<!-- RoleRef, RoleSequence and  RoleSequences define references to roles and collections of roles and collections of collections of roles-->
	<xs:complexType name="RoleSequences">
		<xs:sequence>
			<xs:element name="RoleSequence" type="RoleSequenceWithId" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PlayedRoles">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="Role" type="RoleRef"/>
			<xs:element name="SubtypeMetaRole" type="RoleRef"/>
			<xs:element name="SupertypeMetaRole" type="RoleRef"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="RoleContainer">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="Role" type="RoleRef"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="RoleSequence">
		<xs:sequence>
			<xs:element name="Role" type="RoleSequenceRoleRef" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="JoinPath" type="JoinPath" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="RoleSequenceWithId">
		<xs:complexContent>
			<xs:extension base="RoleSequence">
				<xs:attribute name="id" type="xs:ID" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RoleSequenceRoleRef">
		<xs:complexContent>
			<xs:extension base="RoleRef">
				<xs:sequence>
					<xs:element name="ProjectionJoin" type="JoinRef" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="id" type="xs:ID"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RoleRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="SubtypeMetaRoleRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="SupertypeMetaRoleRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<!--end RoleRef, RoleSequence and  RoleSequences-->
	<xs:complexType name="JoinPath">
		<xs:sequence>
			<xs:element name="Join" type="Join" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Join">
		<xs:sequence>
			<xs:element name="InputRole" type="RoleRef" minOccurs="0"/>
			<xs:element name="OutputRole" type="RoleRef" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="id" type="xs:ID"/>
		<xs:attribute name="JoinType" type="JoinType" default="Inner"/>
	</xs:complexType>
	<xs:simpleType name="JoinType">
		<xs:restriction base="xs:token">
			<xs:enumeration value="Inner"/>
			<xs:enumeration value="Outer"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="JoinRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="Roles">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="Role" type="Role"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="ImpliedFactRoles">
		<xs:all>
			<xs:element name="Role" type="Role"/>
			<xs:element name="RoleProxy" type="RoleProxy"/>
		</xs:all>
	</xs:complexType>
	<xs:complexType name="SubtypeRoles">
		<xs:all>
			<xs:element name="SupertypeMetaRole" type="Role"/>
			<xs:element name="SubtypeMetaRole" type="Role"/>
		</xs:all>
	</xs:complexType>
	<xs:complexType name="Role">
		<xs:all>
			<xs:element name="RolePlayer" type="ObjectRef" minOccurs="0"/>
			<xs:element name="ValueRestriction" type="RoleValueRestriction" minOccurs="0"/>
			<xs:element name="RoleInstances" type="ObjectTypeRoleInstances" minOccurs="0"/>
			<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
		</xs:all>
		<xs:attribute name="Name" type="xs:string" use="required"/>
		<xs:attribute name="id" type="xs:ID" use="required"/>
		<!--Derived-->
		<xs:attribute name="_IsMandatory" type="xs:boolean" default="false"/>
		<!--Derived-->
		<xs:attribute name="_Multiplicity" type="MultiplicityEnum" default="ZeroToOne"/>
	</xs:complexType>
	<xs:complexType name="RoleProxy">
		<xs:sequence>
			<xs:element name="Role" type="RoleRef"/>
			<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="id" type="xs:ID" use="required"/>
	</xs:complexType>
	<!--Look up enum values.-->
	<xs:simpleType name="MultiplicityEnum">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Unspecified"/>
			<xs:enumeration value="Indeterminate"/>
			<xs:enumeration value="ZeroToOne"/>
			<xs:enumeration value="ZeroToMany"/>
			<xs:enumeration value="ExactlyOne"/>
			<xs:enumeration value="OneToMany"/>
		</xs:restriction>
	</xs:simpleType>
	<!--End Roles-->
	<!-- Facts -->
	<!--Fact Ref defines a reference to a fact-->
	<xs:complexType name="FactRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="ObjectifiedFactRef">
		<!-- An id for this element so we can refer back to it -->
		<xs:attribute name="id" type="xs:ID"/>
		<!-- A reference to a fact type -->
		<xs:attribute name="ref" type="xs:IDREF"/>
		<xs:attribute name="IsImplied" type="xs:boolean" default="false"/>
	</xs:complexType>
	<xs:complexType name="ObjectificationRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<!--end Fact Ref-->
	<xs:complexType name="Facts">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="Fact" type="Fact"/>
			<xs:element name="SubtypeFact" type="SubtypeFact"/>
			<xs:element name="ImpliedFact" type="ImpliedFact"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="Fact">
		<!-- These are duplicated in ImpliedFact and SubtypeFact without type extension -->
		<xs:sequence minOccurs="0">
			<xs:element name="Definitions" type="DefinitionsType" minOccurs="0"/>
			<xs:element name="Notes" type="NotesType" minOccurs="0"/>
			<xs:element name="FactRoles" type="Roles" minOccurs="0"/>
			<xs:element name="ReadingOrders" type="ReadingOrders" minOccurs="0"/>
			<xs:element name="InternalConstraints" type="InternalConstraints" minOccurs="0"/>
			<xs:element name="DerivationRule" type="DerivationRuleType" minOccurs="0"/>
			<xs:element name="Instances" type="FactTypeInstances" minOccurs="0"/>
			<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="_Name" type="xs:string"/>
		<xs:attribute name="id" use="required" type="xs:ID"/>
		<xs:attribute name="IsExternal" type="xs:boolean" default="false"/>
	</xs:complexType>
	<xs:complexType name="ImpliedFact">
		<!-- This is a straight copy from Fact with a change to FactRoles -->
		<xs:sequence minOccurs="0">
			<xs:element name="Notes" type="NotesType" minOccurs="0"/>
			<xs:element name="FactRoles" type="ImpliedFactRoles" minOccurs="0"/>
			<xs:element name="ReadingOrders" type="ReadingOrders" minOccurs="0"/>
			<xs:element name="InternalConstraints" type="InternalConstraints" minOccurs="0"/>
			<xs:element name="DerivationRule" type="DerivationRuleType" minOccurs="0"/>
			<xs:element name="ImpliedByObjectification" type="ObjectificationRef"/>
			<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="_Name" type="xs:string"/>
		<xs:attribute name="id" use="required" type="xs:ID"/>
		<xs:attribute name="IsExternal" type="xs:boolean" default="false"/>
	</xs:complexType>
	<xs:complexType name="SubtypeFact">
		<!-- This is a straight copy from Fact with a change to FactRoles -->
		<xs:sequence minOccurs="0">
			<xs:element name="Notes" type="NotesType" minOccurs="0"/>
			<xs:element name="FactRoles" type="SubtypeRoles"/>
			<xs:element name="ReadingOrders" type="ReadingOrders" minOccurs="0"/>
			<xs:element name="InternalConstraints" type="InternalConstraints" minOccurs="0"/>
			<xs:element name="DerivationRule" type="DerivationRuleType" minOccurs="0"/>
			<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="_Name" type="xs:string"/>
		<xs:attribute name="id" use="required" type="xs:ID"/>
		<xs:attribute name="IsExternal" type="xs:boolean" default="false"/>
		<xs:attribute name="IsPrimary" type="xs:boolean" default="false"/>
	</xs:complexType>
	<!--Derived FactType-->
	<xs:complexType name="DerivationRuleType">
		<xs:sequence minOccurs="0">
			<xs:element name="DerivationExpression" type="DerivationExpressionType"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="DerivationExpressionType">
		<xs:sequence>
			<xs:element name="Body" type="xs:string"/>
		</xs:sequence>
		<xs:attribute name="DerivationStorage" type="DerivationStorageType" use="required"/>
		<xs:attribute name="id" type="xs:ID" use="required"/>
	</xs:complexType>
	<xs:simpleType name="DerivationStorageType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Derived"/>
			<xs:enumeration value="DerivedAndStored"/>
			<xs:enumeration value="PartiallyDerived"/>
		</xs:restriction>
	</xs:simpleType>
	<!--End Derived FactType-->
	<!-- End Facts -->
	<!--Constraints-->
	<!--ConstraintRef and  ConstraintRefs define references to constrains and collections of constraints-->
	<xs:complexType name="ConstraintRefs">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="Constraint" type="ConstraintRef"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ConstraintRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="EqualityConstraintRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="ExclusionConstraintRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="MandatoryConstraintRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="FrequencyConstraintRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="RingConstraintRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<!--end ConstraintRef and  ConstraintRefs-->
	<xs:complexType name="Constraints">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="EqualityConstraint" type="EqualityConstraint"/>
			<xs:element name="ExclusionConstraint" type="ExclusionConstraint"/>
			<xs:element name="SubsetConstraint" type="SubsetConstraint"/>
			<xs:element name="FrequencyConstraint" type="FrequencyConstraint"/>
			<xs:element name="MandatoryConstraint" type="MandatoryConstraint"/>
			<xs:element name="UniquenessConstraint" type="UniquenessConstraint"/>
			<xs:element name="RingConstraint" type="RingConstraint"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="Constraint">
		<xs:sequence>
			<xs:element name="ConstraintNote" type="Data" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="id" type="xs:ID"/>
		<xs:attribute name="Name" type="xs:string" use="required"/>
		<xs:attribute name="Modality" type="ConstraintModality" default="Alethic"/>
	</xs:complexType>
	<!-- SetComparison constraints-->
	<xs:complexType name="SetComparisonConstraint" abstract="true">
		<xs:complexContent>
			<xs:extension base="Constraint">
				<xs:sequence>
					<xs:element name="RoleSequences" type="RoleSequences" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="EqualityConstraint">
		<xs:complexContent>
			<xs:extension base="SetComparisonConstraint">
				<xs:sequence>
					<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ExclusionConstraint">
		<xs:complexContent>
			<xs:extension base="SetComparisonConstraint">
				<xs:sequence>
					<xs:element name="ExclusiveOrMandatoryConstraint" type="MandatoryConstraintRef" minOccurs="0"/>
					<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SubsetConstraint">
		<xs:complexContent>
			<xs:extension base="SetComparisonConstraint">
				<xs:sequence>
					<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="FromRoleSequence" type="xs:IDREF"/>
				<!-- use="required"/>  should be here-->
				<xs:attribute name="ToRoleSequence" type="xs:IDREF"/>
				<!-- use="required"/>  should be here-->
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SetComparisonConstraintRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="SetConstraintRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="InternalConstraintRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="ValueConstraintRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<!-- end SetComparison constraints-->
	<!--Set constraints-->
	<xs:complexType name="SetConstraint">
		<xs:complexContent>
			<xs:extension base="Constraint">
				<xs:sequence>
					<xs:element name="RoleSequence" type="RoleSequence" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FrequencyConstraint">
		<xs:complexContent>
			<xs:extension base="SetConstraint">
				<xs:sequence>
					<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="MinFrequency" type="xs:int"/>
				<xs:attribute name="MaxFrequency" type="xs:int"/>
			</xs:extension >
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="MandatoryConstraint">
		<xs:complexContent>
			<xs:extension base="SetConstraint">
				<xs:sequence>
					<xs:element name="ExclusiveOrExclusionConstraint" type="ExclusionConstraintRef" minOccurs="0"/>
					<xs:element name="ImpliedByObjectType" type="ObjectRef" minOccurs="0"/>
					<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="IsSimple" type="xs:boolean" default="false"/>
				<xs:attribute name="IsImplied" type="xs:boolean" default="false"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="UniquenessConstraint">
		<xs:complexContent>
			<xs:extension base="SetConstraint">
				<xs:sequence>
					<xs:element name="PreferredIdentifierFor" type="ObjectRef" minOccurs="0"/>
					<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="IsInternal" type="xs:boolean" default="false"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RingConstraint">
		<xs:complexContent>
			<xs:extension base="SetConstraint">
				<xs:sequence>
					<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="Type" type="RingConstraintType" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="RingConstraintType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Undefined"/>
			<xs:enumeration value="PurelyReflexive"/>
			<xs:enumeration value="Irreflexive"/>
			<xs:enumeration value="Acyclic"/>
			<xs:enumeration value="Intransitive"/>
			<xs:enumeration value="Symmetric"/>
			<xs:enumeration value="Asymmetric"/>
			<xs:enumeration value="Antisymmetric"/>
			<xs:enumeration value="AcyclicIntransitive"/>
			<xs:enumeration value="SymmetricIrreflexive"/>
			<xs:enumeration value="SymmetricIntransitive"/>
			<xs:enumeration value="AsymmetricIntransitive"/>
		</xs:restriction>
	</xs:simpleType>
	<!--End Set constraints-->
	<!--InternalConstraint -->
	<xs:complexType name="InternalConstraints">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="UniquenessConstraint" type="UniquenessConstraintRef"/>
			<xs:element name="MandatoryConstraint" type="MandatoryConstraintRef"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="UniquenessConstraintRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<!--End InternalConstraint-->
	<!--End Constraints-->
	<!--Fact Readings and reading Orders-->
	<xs:complexType name="ReadingRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="ReadingOrders">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="ReadingOrder" type="ReadingOrder"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ReadingOrder">
		<xs:sequence>
			<xs:element name="Readings" type="Readings"/>
			<xs:element name="RoleSequence" type="RoleContainer"/>
		</xs:sequence>
		<xs:attribute name="id" type="xs:ID"/>
	</xs:complexType>
	<xs:complexType name="Readings">
		<xs:sequence maxOccurs="unbounded">
			<xs:element name="Reading" type="Reading"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Reading">
		<xs:complexContent>
			<xs:extension base="Data">
				<xs:attribute name="id" type="xs:ID" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--End Fact Readings and reading Orders-->
	<!-- Should Model errors be part of the core schema or in another namespace?-->
	<!--ModelErrors-->
	<xs:complexType name="ModelErrors">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element ref="ExtensionModelError"/>
			<xs:element name="ConstraintDuplicateNameError" type="ConstraintDuplicateNameError"/>
			<xs:element name="ObjectTypeDuplicateNameError" type="ObjectTypeDuplicateNameError"/>
			<xs:element name="ExternalConstraintRoleSequenceArityMismatchError" type="ExternalConstraintRoleSequenceArityMismatchError"/>
			<xs:element name="FactTypeRequiresInternalUniquenessConstraintError" type="FactTypeRequiresInternalUniquenessConstraintError"/>
			<xs:element name="FactTypeRequiresReadingError" type="FactTypeRequiresReadingError"/>
			<xs:element name="TooFewEntityTypeRoleInstancesError" type="TooFewEntityTypeRoleInstancesError"/>
			<xs:element name="TooFewFactTypeRoleInstancesError" type="TooFewFactTypeRoleInstancesError"/>
			<xs:element name="TooFewReadingRolesError" type="TooFewReadingRolesError"/>
			<xs:element name="ReadingRequiresUserModificationError" type="ReadingRequiresUserModificationError"/>
			<xs:element name="TooFewRoleSequencesError" type="TooFewRoleSequencesError"/>
			<xs:element name="TooManyReadingRolesError" type="TooManyReadingRolesError"/>
			<xs:element name="TooManyRoleSequencesError" type="TooManyRoleSequencesError"/>
			<xs:element name="DataTypeNotSpecifiedError" type="DataTypeNotSpecifiedError"/>
			<xs:element name="NMinusOneError" type="NMinusOneError"/>
			<xs:element name="CompatibleRolePlayerTypeError" type="CompatibleRolePlayerTypeError"/>
			<xs:element name="RolePlayerRequiredError" type="RolePlayerRequiredError"/>
			<xs:element name="EqualityImpliedByMandatoryError" type="EqualityImpliedByMandatoryError"/>
			<xs:element name="EntityTypeRequiresReferenceSchemeError" type="EntityTypeRequiresReferenceSchemeError"/>
			<xs:element name="FrequencyConstraintMinMaxError" type="FrequencyConstraintMinMaxError"/>
			<xs:element name="FrequencyConstraintContradictsInternalUniquenessConstraintError" type="FrequencyConstraintContradictsInternalUniquenessConstraintError"/>
			<xs:element name="MinValueMismatchError" type="MinValueMismatchError"/>
			<xs:element name="MaxValueMismatchError" type="MaxValueMismatchError"/>
			<xs:element name="ValueRangeOverlapError" type="ValueRangeOverlapError"/>
			<xs:element name="RingConstraintTypeNotSpecifiedError" type="RingConstraintTypeNotSpecifiedError"/>
			<xs:element name="ImplicationError" type="ImplicationError"/>
			<xs:element name="SubsetConstraintImpliedByMandatoryConstraintsError" type="SubsetConstraintImpliedByMandatoryConstraintsError"/>
			<xs:element name="EqualityConstraintImpliedByMandatoryConstraintsError" type="EqualityConstraintImpliedByMandatoryConstraintsError"/>
			<xs:element name="ContradictionError" type="ContradictionError"/>
			<xs:element name="ExclusionContradictsMandatoryError" type="ExclusionContradictsMandatoryError"/>
			<xs:element name="NotWellModeledSubsetAndMandatoryError" type="NotWellModeledSubsetAndMandatoryError"/>
			<xs:element name="ImpliedInternalUniquenessConstraintError" type="ImpliedInternalUniquenessConstraintError"/>
			<xs:element name="ObjectTypeRequiresPrimarySupertypeError" type="ObjectTypeRequiresPrimarySupertypeError"/>
			<xs:element name="PreferredIdentifierRequiresMandatoryError" type="PreferredIdentifierRequiresMandatoryError"/>
			<xs:element name="CompatibleSupertypesError" type="CompatibleSupertypesError"/>
			<xs:element name="CompatibleValueTypeInstanceValueError" type="CompatibleValueTypeInstanceValueError"/>
			<xs:element name="PopulationMandatoryError" type="PopulationMandatoryError"/>
			<xs:element name="PopulationUniquenessError" type="PopulationUniquenessError"/>
			<xs:element name="ExclusionContradictsEqualityError" type="ExclusionContradictsEqualityError"/>
			<xs:element name="ExclusionContradictsSubsetError" type="ExclusionContradictsSubsetError"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="ModelError" abstract="true">
		<xs:attribute name="id" type="xs:ID" use="required"/>
		<xs:attribute name="Name" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:element name="ExtensionModelError" type="ModelError" abstract="true"/>
	<xs:complexType name="ConstraintDuplicateNameError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="Constraints">
						<xs:complexType>
							<xs:choice minOccurs="2" maxOccurs="unbounded">
								<xs:element name="SetComparisonConstraint" type="SetComparisonConstraintRef"/>
								<xs:element name="SetConstraint" type="SetConstraintRef"/>
								<xs:element name="InternalConstraint" type="InternalConstraintRef"/>
								<xs:element name="ValueConstraint" type="ValueConstraintRef"/>
							</xs:choice>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ObjectTypeDuplicateNameError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="Objects">
						<xs:complexType>
							<xs:sequence minOccurs="2" maxOccurs="unbounded">
								<xs:element name="Object" type="ObjectRef"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="EntityTypeRequiresReferenceSchemeError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="EntityType" type="ObjectRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ExternalConstraintRoleSequenceArityMismatchError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="Constraint" type="ConstraintRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FactTypeRequiresInternalUniquenessConstraintError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="Fact" type="FactRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FactTypeRequiresReadingError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="Fact" type="FactRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TooFewReadingRolesError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="Reading" type="ReadingRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ReadingRequiresUserModificationError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:choice>
						<xs:element name="Reading" type="ReadingRef"/>
					</xs:choice>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TooFewRoleSequencesError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:choice>
						<xs:element name="SetComparisonConstraint" type="SetComparisonConstraintRef"/>
						<xs:element name="SetConstraint" type="SetConstraintRef"/>
					</xs:choice>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TooFewEntityTypeRoleInstancesError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="EntityTypeInstance" type="EntityTypeInstanceRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TooFewFactTypeRoleInstancesError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="FactTypeInstance" type="FactTypeInstanceRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TooManyReadingRolesError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="Reading" type="ReadingRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DataTypeNotSpecifiedError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="ConceptualDataType" type="DataTypeRefRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FrequencyConstraintMinMaxError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="FrequencyConstraint" type="FrequencyConstraintRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FrequencyConstraintContradictsInternalUniquenessConstraintError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:all>
					<xs:element name="FrequencyConstraint" type="FrequencyConstraintRef"/>
					<xs:element name="Fact" type="FactRef"/>
				</xs:all>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="MaxValueMismatchError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="ValueRange" type="ValueRangeRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="MinValueMismatchError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="ValueRange" type="ValueRangeRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ValueRangeOverlapError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="ValueConstraint" type="ValueConstraintRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ImpliedInternalUniquenessConstraintError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="Fact" type="FactRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ObjectTypeRequiresPrimarySupertypeError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="ObjectType" type="ObjectRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PreferredIdentifierRequiresMandatoryError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="ObjectType" type="ObjectRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CompatibleSupertypesError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="ObjectType" type="ObjectRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RingConstraintTypeNotSpecifiedError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="RingConstraint" type="RingConstraintRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:complexType name="ImplicationError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:choice>
						<xs:element name="SetComparisonConstraint" type="SetComparisonConstraintRef"/>
						<xs:element name="SetConstraint" type="SetConstraintRef"/>
					</xs:choice>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="ExclusionContradictsMandatoryError">
		<xs:complexContent>
			<xs:extension base="ModelError">
					<xs:sequence>
						<xs:element name="Constraints">
							<xs:complexType>
								<xs:choice minOccurs="2" maxOccurs="unbounded">
									<xs:element name="MandatoryConstraint" type="MandatoryConstraintRef"/>
									<xs:element name="ExclusionConstraint" type="SetComparisonConstraintRef"/>
								</xs:choice>
							</xs:complexType>
						</xs:element>
					</xs:sequence>				
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="NotWellModeledSubsetAndMandatoryError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="Constraints">
						<xs:complexType>
							<xs:all>
								<xs:element name="MandatoryConstraint" type="MandatoryConstraintRef"/>
								<xs:element name="SubsetConstraint" type="SetComparisonConstraintRef"/>
							</xs:all>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="SubsetConstraintImpliedByMandatoryConstraintsError">
		<xs:complexContent>
				<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="SubsetConstraint" type="SetComparisonConstraintRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:complexType name="EqualityConstraintImpliedByMandatoryConstraintsError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="EqualityConstraint" type="SetComparisonConstraintRef"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	

	<xs:complexType name="ContradictionError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="Constraints">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="SetComparisonConstraint" type="SetComparisonConstraintRef"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="ExclusionContradictsSubsetError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="Constraints">
						<xs:complexType>
							<xs:choice maxOccurs="unbounded">
								<xs:element name="ExclusionConstraintThatContradictsWithSubset" type="SetComparisonConstraintRef" minOccurs="1"/>
								<xs:element name="SubsetConstraint" type="SetComparisonConstraintRef" minOccurs="1"/>
							</xs:choice>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="ExclusionContradictsEqualityError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="Constraints">
						<xs:complexType>
							<xs:choice maxOccurs="unbounded">
								<xs:element name="ExclusionConstraintThatContradictsWithEquality" type="SetComparisonConstraintRef" minOccurs="1"/>
								<xs:element name="EqualityConstraint" type="SetComparisonConstraintRef" minOccurs="1"/>
							</xs:choice>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:complexType name="TooManyRoleSequencesError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:choice>
						<xs:element name="SetComparisonConstraint" type="SetComparisonConstraintRef"/>
						<xs:element name="SetConstraint" type="SetConstraintRef"/>
					</xs:choice>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CompatibleRolePlayerTypeError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:choice>
					<xs:element name="SetComparisonConstraint" type="SetComparisonConstraintRef"/>
					<xs:element name="SetConstraint" type="SetConstraintRef"/>
				</xs:choice>
				<xs:attribute name="Column" type="xs:int" use="optional"/>
			</xs:extension >
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RolePlayerRequiredError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:choice>
					<xs:element name="Role" type="RoleRef"/>
				</xs:choice>
			</xs:extension >
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="EqualityImpliedByMandatoryError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:choice>
					<xs:element name="EqualityConstraint" type="EqualityConstraintRef"/>
				</xs:choice>
			</xs:extension >
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="NMinusOneError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="UniquenessConstraint" type="UniquenessConstraintRef"/>
				</xs:sequence>
			</xs:extension >
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CompatibleValueTypeInstanceValueError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="ValueTypeInstance" type="ValueTypeInstanceRef"/>
				</xs:sequence>
			</xs:extension >
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PopulationMandatoryError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:all>
					<xs:element name="ObjectTypeInstance" type="ObjectTypeInstanceRef"/>
					<xs:element name="MandatoryConstraint" type="MandatoryConstraintRef"/>
				</xs:all>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PopulationUniquenessError">
		<xs:complexContent>
			<xs:extension base="ModelError">
				<xs:sequence>
					<xs:element name="RoleInstances">
						<xs:complexType>
							<xs:choice minOccurs="2" maxOccurs="unbounded">
								<xs:element name="FactTypeRoleInstance" type="ObjectTypeRoleInstanceRef"/>
								<xs:element name="EntityTypeRoleInstance" type="ObjectTypeRoleInstanceRef"/>
							</xs:choice>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--End ModelErrors-->
	<!--Custom Reference Modes-->
	<!--Reference Modes and Kinds-->
	<xs:complexType name="ReferenceModeKinds">
		<xs:sequence>
			<xs:element maxOccurs="unbounded" name="ReferenceModeKind" type="ReferenceModeKind"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ReferenceModeKindRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="ReferenceModeKind">
		<xs:attribute name="id" type="xs:ID" use="required"/>
		<xs:attribute name="FormatString" type="xs:string" use="required"/>
		<xs:attribute name="ReferenceModeType" type="ReferenceModeTypeType" use="required"/>
	</xs:complexType>
	<xs:simpleType name="ReferenceModeTypeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="General"/>
			<xs:enumeration value="Popular"/>
			<xs:enumeration value="UnitBased"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="CustomReferenceModeRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<xs:complexType name="ValueRangeRef">
		<xs:attribute name="ref" type="xs:IDREF"/>
	</xs:complexType>
	<!--Reference Mdoes and Kinds-->
	<xs:complexType name="CustomReferenceModes">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="CustomReferenceMode" type="CustomReferenceMode"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CustomReferenceMode">
		<xs:sequence minOccurs="0">
			<xs:element name="CustomFormatString" type="xs:string"/>
			<xs:element name="Kind" type="ReferenceModeKindRef"/>
		</xs:sequence>
		<xs:attribute name="id" type="xs:ID"/>
		<xs:attribute name="Name" type="xs:string" default=""/>
	</xs:complexType>
	<!--End Custom Reference Modes-->
	<xs:complexType name="ValueRestriction">
		<xs:sequence>
			<xs:element name="ValueConstraint">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="ValueRanges" type="ValueRangeCollection"/>
						<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
					</xs:sequence>
					<xs:attribute name="Name" type="xs:string" use="required"/>
					<xs:attribute name="id" type="xs:ID" use="required"/>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="RoleValueRestriction">
		<xs:sequence>
			<xs:element name="RoleValueConstraint">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="ValueRanges" type="ValueRangeCollection"/>
						<xs:element name="Extensions" type="Extensions" minOccurs="0"/>
					</xs:sequence>
					<xs:attribute name="id" type="xs:ID" use="required"/>
					<xs:attribute name="Name" type="xs:string" use="required"/>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ValueRangeCollection">
		<xs:sequence maxOccurs="unbounded">
			<xs:element name="ValueRange" type="ValueRange"/>
		</xs:sequence>
	</xs:complexType>
	<xs:simpleType name="RangeInclusion">
		<xs:restriction base="xs:string">
			<xs:enumeration value="NotSet"/>
			<xs:enumeration value="Open"/>
			<xs:enumeration value="Closed"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="ValueRange">
		<xs:attribute name="id" type="xs:ID" use="required"/>
		<xs:attribute name="MinValue" type="xs:string" use="required"/>
		<xs:attribute name="MaxValue" type="xs:string" use="required"/>
		<xs:attribute name="MinInclusion" type="RangeInclusion" default="NotSet"/>
		<xs:attribute name="MaxInclusion" type="RangeInclusion" default="NotSet"/>
	</xs:complexType>
	<xs:simpleType name="ConstraintModality">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Alethic"/>
			<xs:enumeration value="Deontic"/>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
