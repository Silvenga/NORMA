#region Common Public License Copyright Notice
/**************************************************************************\
* Neumont Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactConstraint
	/// Description for Neumont.Tools.ORM.ObjectModel.FactConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("bcf635f2-f2c6-4690-956d-2a44c48a9da9")]
	public abstract partial class FactConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbcf635f2, 0xf2c6, 0x4690, 0x95, 0x6d, 0x2a, 0x44, 0xc4, 0x8a, 0x9d, 0xa9);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected FactConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xd60cb2bf, 0x7de7, 0x4ced, 0xa0, 0x0f, 0xbf, 0x7c, 0x3a, 0x2e, 0x52, 0x48);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for Neumont.Tools.ORM.ObjectModel.FactConstraint.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactConstraint/FactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactConstraint/FactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactConstraint/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d60cb2bf-7de7-4ced-a00f-bf7c3a2e5248")]
		public abstract FactType FactType
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access FactTypeCollection of a ORMNamedElement
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<FactType> GetFactTypeCollection(ORMNamedElement element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<FactType>(element, ConstraintDomainRoleId);
		}
		#endregion
		#region Constraint domain role code
		
		/// <summary>
		/// Constraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintDomainRoleId = new global::System.Guid(0x9b305629, 0x1efa, 0x404f, 0xae, 0x8e, 0x47, 0x51, 0x17, 0xb2, 0x87, 0xae);
		
		/// <summary>
		/// DomainRole Constraint
		/// Description for Neumont.Tools.ORM.ObjectModel.FactConstraint.Constraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactConstraint/Constraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactConstraint/Constraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactConstraint/Constraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9b305629-1efa-404f-ae8e-475117b287ae")]
		public abstract ORMNamedElement Constraint
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ConstraintCollection of a FactType
		/// <summary>
		/// Gets a list of ConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ORMNamedElement> GetConstraintCollection(FactType element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ORMNamedElement>(element, FactTypeDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ConstrainedRoleCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ConstrainedRoleCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.FactConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole> ConstrainedRoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole>(this, global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.FactConstraintDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the list of FactConstraint links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactConstraint> GetLinksToConstraintCollection ( global::Neumont.Tools.ORM.ObjectModel.FactType factTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactConstraint>(factTypeInstance, global::Neumont.Tools.ORM.ObjectModel.FactConstraint.FactTypeDomainRoleId);
		}
		#endregion
		#region Constraint link accessor
		/// <summary>
		/// Get the list of FactConstraint links to a ORMNamedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactConstraint> GetLinksToFactTypeCollection ( global::Neumont.Tools.ORM.ObjectModel.ORMNamedElement constraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactConstraint>(constraintInstance, global::Neumont.Tools.ORM.ObjectModel.FactConstraint.ConstraintDomainRoleId);
		}
		#endregion
		#region FactConstraint instance accessors
		
		/// <summary>
		/// Get any FactConstraint links between a given FactType and a ORMNamedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactConstraint> GetLinks( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.ORMNamedElement target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactConstraint>(source, global::Neumont.Tools.ORM.ObjectModel.FactConstraint.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactConstraint link in links )
			{
				if ( target.Equals(link.Constraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactConstraint link between a given FactTypeand a ORMNamedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactConstraint GetLink( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.ORMNamedElement target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactConstraint>(source, global::Neumont.Tools.ORM.ObjectModel.FactConstraint.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactConstraint link in links )
			{
				if ( target.Equals(link.Constraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactSetComparisonConstraint
	/// Description for Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ff8f65ad-248a-4ef8-9172-515204c9a44c")]
	public partial class FactSetComparisonConstraint : FactConstraint
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactSetComparisonConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xff8f65ad, 0x248a, 0x4ef8, 0x91, 0x72, 0x51, 0x52, 0x04, 0xc9, 0xa4, 0x4c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactSetComparisonConstraint link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">SetComparisonConstraint to use as the target of the relationship.</param>
		public FactSetComparisonConstraint(FactType source, SetComparisonConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactSetComparisonConstraint.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactSetComparisonConstraint.SetComparisonConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactSetComparisonConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactSetComparisonConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactSetComparisonConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactSetComparisonConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly new global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xf7733faf, 0x1029, 0x480e, 0x8f, 0xea, 0x96, 0xfd, 0xd6, 0x5a, 0xb2, 0x12);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint/FactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint/FactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SetComparisonConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f7733faf-1029-480e-8fea-96fdd65ab212")]
		public override FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeCollection of a SetComparisonConstraint
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactType> GetFactTypeCollection(SetComparisonConstraint element)
		{
			return new DslModeling::LinkedElementCollection<FactType>(element, SetComparisonConstraintDomainRoleId);
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0x575f65e4, 0x682e, 0x427a, 0xb2, 0x73, 0x3d, 0x30, 0xd9, 0x09, 0xa8, 0x16);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint/SetComparisonConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint/SetComparisonConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("575f65e4-682e-427a-b273-3d30d909a816")]
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraintCollection of a FactType
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetComparisonConstraint> GetSetComparisonConstraintCollection(FactType element)
		{
			return new DslModeling::LinkedElementCollection<SetComparisonConstraint>(element, FactTypeDomainRoleId);
		}
		#endregion
		#region Constraint domain role override
		
		/// <summary>
		/// Gets the element playing SetComparisonConstraint domain role.
		/// Description for Neumont.Tools.ORM.ObjectModel.FactConstraint.Constraint
		/// </summary>
		public override ORMNamedElement Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SetComparisonConstraint = (SetComparisonConstraint)value;
			}
		}
		
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the list of FactSetComparisonConstraint links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint> GetLinksToSetComparisonConstraintCollection ( global::Neumont.Tools.ORM.ObjectModel.FactType factTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint>(factTypeInstance, global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.FactTypeDomainRoleId);
		}
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the list of FactSetComparisonConstraint links to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint> GetLinksToFactTypeCollection ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint>(setComparisonConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.SetComparisonConstraintDomainRoleId);
		}
		#endregion
		#region FactSetComparisonConstraint instance accessors
		
		/// <summary>
		/// Get any FactSetComparisonConstraint links between a given FactType and a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint> GetLinks( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint>(source, global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint link in links )
			{
				if ( target.Equals(link.SetComparisonConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactSetComparisonConstraint link between a given FactTypeand a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint GetLink( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint>(source, global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint link in links )
			{
				if ( target.Equals(link.SetComparisonConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactSetConstraint
	/// Description for Neumont.Tools.ORM.ObjectModel.FactSetConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactSetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactSetConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("771ec962-8086-4b21-bfb2-830f30e52861")]
	public partial class FactSetConstraint : FactConstraint
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactSetConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x771ec962, 0x8086, 0x4b21, 0xbf, 0xb2, 0x83, 0x0f, 0x30, 0xe5, 0x28, 0x61);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactSetConstraint link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">SetConstraint to use as the target of the relationship.</param>
		public FactSetConstraint(FactType source, SetConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactSetConstraint.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactSetConstraint.SetConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactSetConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactSetConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactSetConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactSetConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly new global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xde9a381f, 0x5346, 0x4c95, 0x9d, 0x48, 0xe4, 0x68, 0xb8, 0xcf, 0x8a, 0x29);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for Neumont.Tools.ORM.ObjectModel.FactSetConstraint.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactSetConstraint/FactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactSetConstraint/FactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SetConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactSetConstraint/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("de9a381f-5346-4c95-9d48-e468b8cf8a29")]
		public override FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeCollection of a SetConstraint
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactType> GetFactTypeCollection(SetConstraint element)
		{
			return new DslModeling::LinkedElementCollection<FactType>(element, SetConstraintDomainRoleId);
		}
		#endregion
		#region SetConstraint domain role code
		
		/// <summary>
		/// SetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetConstraintDomainRoleId = new global::System.Guid(0x7789fd46, 0x6e28, 0x4ab7, 0xaf, 0xc5, 0x7f, 0x17, 0xb9, 0x5a, 0xc4, 0xd9);
		
		/// <summary>
		/// DomainRole SetConstraint
		/// Description for Neumont.Tools.ORM.ObjectModel.FactSetConstraint.SetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactSetConstraint/SetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactSetConstraint/SetConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactSetConstraint/SetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7789fd46-6e28-4ab7-afc5-7f17b95ac4d9")]
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraintCollection of a FactType
		/// <summary>
		/// Gets a list of SetConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetConstraint> GetSetConstraintCollection(FactType element)
		{
			return new DslModeling::LinkedElementCollection<SetConstraint>(element, FactTypeDomainRoleId);
		}
		#endregion
		#region Constraint domain role override
		
		/// <summary>
		/// Gets the element playing SetConstraint domain role.
		/// Description for Neumont.Tools.ORM.ObjectModel.FactConstraint.Constraint
		/// </summary>
		public override ORMNamedElement Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SetConstraint = (SetConstraint)value;
			}
		}
		
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the list of FactSetConstraint links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint> GetLinksToSetConstraintCollection ( global::Neumont.Tools.ORM.ObjectModel.FactType factTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint>(factTypeInstance, global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint.FactTypeDomainRoleId);
		}
		#endregion
		#region SetConstraint link accessor
		/// <summary>
		/// Get the list of FactSetConstraint links to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint> GetLinksToFactTypeCollection ( global::Neumont.Tools.ORM.ObjectModel.SetConstraint setConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint>(setConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint.SetConstraintDomainRoleId);
		}
		#endregion
		#region FactSetConstraint instance accessors
		
		/// <summary>
		/// Get any FactSetConstraint links between a given FactType and a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint> GetLinks( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.SetConstraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint>(source, global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint link in links )
			{
				if ( target.Equals(link.SetConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactSetConstraint link between a given FactTypeand a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint GetLink( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.SetConstraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint>(source, global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint link in links )
			{
				if ( target.Equals(link.SetConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ORMModelElementHasExtensionElement
	/// Description for Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ff867109-fe3a-42c4-9770-2d735555016a")]
	public partial class ORMModelElementHasExtensionElement : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ORMModelElementHasExtensionElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xff867109, 0xfe3a, 0x42c4, 0x97, 0x70, 0x2d, 0x73, 0x55, 0x55, 0x01, 0x6a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ORMModelElementHasExtensionElement link in the same Partition as the given ORMModelElement
		/// </summary>
		/// <param name="source">ORMModelElement to use as the source of the relationship.</param>
		/// <param name="target">ModelElement to use as the target of the relationship.</param>
		public ORMModelElementHasExtensionElement(ORMModelElement source, global::Microsoft.VisualStudio.Modeling.ModelElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ORMModelElementHasExtensionElement.ExtendedElementDomainRoleId, source), new DslModeling::RoleAssignment(ORMModelElementHasExtensionElement.ExtensionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ORMModelElementHasExtensionElement(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ORMModelElementHasExtensionElement(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ORMModelElementHasExtensionElement(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ORMModelElementHasExtensionElement(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExtendedElement domain role code
		
		/// <summary>
		/// ExtendedElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExtendedElementDomainRoleId = new global::System.Guid(0x9105a491, 0x7fc1, 0x408e, 0x8e, 0x07, 0xf8, 0xe7, 0x9c, 0xa0, 0xbf, 0xa4);
		
		/// <summary>
		/// DomainRole ExtendedElement
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtendedElement
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement/ExtendedElement.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement/ExtendedElement.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExtensionCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement/ExtendedElement.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9105a491-7fc1-408e-8e07-f8e79ca0bfa4")]
		public virtual ORMModelElement ExtendedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExtendedElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExtendedElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExtendedElement of a ModelElement
		/// <summary>
		/// Gets ExtendedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModelElement GetExtendedElement(global::Microsoft.VisualStudio.Modeling.ModelElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ExtensionDomainRoleId) as ORMModelElement;
		}
		
		/// <summary>
		/// Sets ExtendedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExtendedElement(global::Microsoft.VisualStudio.Modeling.ModelElement element, ORMModelElement newExtendedElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ExtensionDomainRoleId, newExtendedElement);
		}
		#endregion
		#region Extension domain role code
		
		/// <summary>
		/// Extension domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExtensionDomainRoleId = new global::System.Guid(0x0a7bbd8d, 0x0d86, 0x4fb4, 0x99, 0x1b, 0x36, 0x53, 0x02, 0xd1, 0xed, 0x63);
		
		/// <summary>
		/// DomainRole Extension
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.Extension
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement/Extension.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement/Extension.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExtendedElement", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement/Extension.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0a7bbd8d-0d86-4fb4-991b-365302d1ed63")]
		public virtual global::Microsoft.VisualStudio.Modeling.ModelElement Extension
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Microsoft.VisualStudio.Modeling.ModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExtensionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExtensionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExtensionCollection of a ORMModelElement
		/// <summary>
		/// Gets a list of ExtensionCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> GetExtensionCollection(ORMModelElement element)
		{
			return new DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>(element, ExtendedElementDomainRoleId);
		}
		#endregion
		#region ExtendedElement link accessor
		/// <summary>
		/// Get the list of ORMModelElementHasExtensionElement links to a ORMModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement> GetLinksToExtensionCollection ( global::Neumont.Tools.ORM.ObjectModel.ORMModelElement extendedElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement>(extendedElementInstance, global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtendedElementDomainRoleId);
		}
		#endregion
		#region Extension link accessor
		/// <summary>
		/// Get the ORMModelElementHasExtensionElement link to a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement GetLinkToExtendedElement (global::Microsoft.VisualStudio.Modeling.ModelElement extensionInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement>(extensionInstance, global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtensionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Extension not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ORMModelElementHasExtensionElement instance accessors
		
		/// <summary>
		/// Get any ORMModelElementHasExtensionElement links between a given ORMModelElement and a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ORMModelElement source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement>(source, global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtendedElementDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement link in links )
			{
				if ( target.Equals(link.Extension) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ORMModelElementHasExtensionElement link between a given ORMModelElementand a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement GetLink( global::Neumont.Tools.ORM.ObjectModel.ORMModelElement source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement>(source, global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtendedElementDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement link in links )
			{
				if ( target.Equals(link.Extension) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ORMModelElementHasExtensionModelError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7a4d2b10-43f3-475f-aa0a-8f880b9a1e4b")]
	public partial class ORMModelElementHasExtensionModelError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ORMModelElementHasExtensionModelError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7a4d2b10, 0x43f3, 0x475f, 0xaa, 0x0a, 0x8f, 0x88, 0x0b, 0x9a, 0x1e, 0x4b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ORMModelElementHasExtensionModelError link in the same Partition as the given ORMModelElement
		/// </summary>
		/// <param name="source">ORMModelElement to use as the source of the relationship.</param>
		/// <param name="target">ModelError to use as the target of the relationship.</param>
		public ORMModelElementHasExtensionModelError(ORMModelElement source, ModelError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ORMModelElementHasExtensionModelError.ExtendedElementDomainRoleId, source), new DslModeling::RoleAssignment(ORMModelElementHasExtensionModelError.ExtensionModelErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ORMModelElementHasExtensionModelError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ORMModelElementHasExtensionModelError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ORMModelElementHasExtensionModelError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ORMModelElementHasExtensionModelError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExtendedElement domain role code
		
		/// <summary>
		/// ExtendedElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExtendedElementDomainRoleId = new global::System.Guid(0x415c3ef5, 0x7524, 0x45a9, 0x93, 0x07, 0x3d, 0x8b, 0x53, 0xbd, 0x88, 0xd6);
		
		/// <summary>
		/// DomainRole ExtendedElement
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtendedElement
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError/ExtendedElement.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError/ExtendedElement.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExtensionModelErrorCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError/ExtendedElement.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("415c3ef5-7524-45a9-9307-3d8b53bd88d6")]
		public virtual ORMModelElement ExtendedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExtendedElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExtendedElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExtendedElement of a ModelError
		/// <summary>
		/// Gets ExtendedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModelElement GetExtendedElement(ModelError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ExtensionModelErrorDomainRoleId) as ORMModelElement;
		}
		
		/// <summary>
		/// Sets ExtendedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExtendedElement(ModelError element, ORMModelElement newExtendedElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ExtensionModelErrorDomainRoleId, newExtendedElement);
		}
		#endregion
		#region ExtensionModelError domain role code
		
		/// <summary>
		/// ExtensionModelError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExtensionModelErrorDomainRoleId = new global::System.Guid(0x1a7a14ef, 0x01fc, 0x4ed8, 0xa1, 0xea, 0x35, 0x33, 0x51, 0x1d, 0x17, 0x50);
		
		/// <summary>
		/// DomainRole ExtensionModelError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtensionModelError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError/ExtensionModelError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError/ExtensionModelError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExtendedElement", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError/ExtensionModelError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1a7a14ef-01fc-4ed8-a1ea-3533511d1750")]
		public virtual ModelError ExtensionModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExtensionModelErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExtensionModelErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExtensionModelErrorCollection of a ORMModelElement
		/// <summary>
		/// Gets a list of ExtensionModelErrorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelError> GetExtensionModelErrorCollection(ORMModelElement element)
		{
			return new DslModeling::LinkedElementCollection<ModelError>(element, ExtendedElementDomainRoleId);
		}
		#endregion
		#region ExtendedElement link accessor
		/// <summary>
		/// Get the list of ORMModelElementHasExtensionModelError links to a ORMModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError> GetLinksToExtensionModelErrorCollection ( global::Neumont.Tools.ORM.ObjectModel.ORMModelElement extendedElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError>(extendedElementInstance, global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtendedElementDomainRoleId);
		}
		#endregion
		#region ExtensionModelError link accessor
		/// <summary>
		/// Get the ORMModelElementHasExtensionModelError link to a ModelError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError GetLinkToExtendedElement (global::Neumont.Tools.ORM.ObjectModel.ModelError extensionModelErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError>(extensionModelErrorInstance, global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtensionModelErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ExtensionModelError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ORMModelElementHasExtensionModelError instance accessors
		
		/// <summary>
		/// Get any ORMModelElementHasExtensionModelError links between a given ORMModelElement and a ModelError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ORMModelElement source, global::Neumont.Tools.ORM.ObjectModel.ModelError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError>(source, global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtendedElementDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError link in links )
			{
				if ( target.Equals(link.ExtensionModelError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ORMModelElementHasExtensionModelError link between a given ORMModelElementand a ModelError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError GetLink( global::Neumont.Tools.ORM.ObjectModel.ORMModelElement source, global::Neumont.Tools.ORM.ObjectModel.ModelError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError>(source, global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtendedElementDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError link in links )
			{
				if ( target.Equals(link.ExtensionModelError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueTypeHasDataType
	/// Description for Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e4bbc988-e920-4acb-8071-552aeeba7fa9")]
	public partial class ValueTypeHasDataType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueTypeHasDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe4bbc988, 0xe920, 0x4acb, 0x80, 0x71, 0x55, 0x2a, 0xee, 0xba, 0x7f, 0xa9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueTypeHasDataType link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">DataType to use as the target of the relationship.</param>
		public ValueTypeHasDataType(ObjectType source, DataType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueTypeHasDataType.ValueTypeDomainRoleId, source), new DslModeling::RoleAssignment(ValueTypeHasDataType.DataTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeHasDataType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeHasDataType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeHasDataType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeHasDataType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueType domain role code
		
		/// <summary>
		/// ValueType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeDomainRoleId = new global::System.Guid(0x3f6d8d0a, 0xcec5, 0x47ef, 0x8f, 0x81, 0xef, 0x25, 0xf5, 0x95, 0x93, 0xe0);
		
		/// <summary>
		/// DomainRole ValueType
		/// Description for Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType/ValueType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType/ValueType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType/ValueType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("3f6d8d0a-cec5-47ef-8f81-ef25f59593e0")]
		public virtual ObjectType ValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueTypeCollection of a DataType
		/// <summary>
		/// Gets a list of ValueTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ObjectType> GetValueTypeCollection(DataType element)
		{
			return new DslModeling::LinkedElementCollection<ObjectType>(element, DataTypeDomainRoleId);
		}
		#endregion
		#region DataType domain role code
		
		/// <summary>
		/// DataType domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainRoleId = new global::System.Guid(0x0414c824, 0xf797, 0x4f95, 0x8f, 0x25, 0x7d, 0x27, 0x5f, 0xd6, 0x32, 0xb8);
		
		/// <summary>
		/// DomainRole DataType
		/// Description for Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType/DataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType/DataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType/DataType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0414c824-f797-4f95-8f25-7d275fd632b8")]
		public virtual DataType DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataType)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataType of a ObjectType
		/// <summary>
		/// Gets DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataType GetDataType(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueTypeDomainRoleId) as DataType;
		}
		
		/// <summary>
		/// Sets DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataType(ObjectType element, DataType newDataType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueTypeDomainRoleId, newDataType);
		}
		#endregion
		#region Scale domain property code
		
		/// <summary>
		/// Scale domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScaleDomainPropertyId = new global::System.Guid(0xf21936e2, 0xe7e6, 0x4afc, 0xb9, 0x6f, 0x43, 0xe9, 0xc7, 0x6f, 0x8a, 0x9b);
		
		/// <summary>
		/// Storage for Scale
		/// </summary>
		private global::System.Int32 scalePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Scale domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.Scale
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType/Scale.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType/Scale.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("f21936e2-e7e6-4afc-b96f-43e9c76f8a9b")]
		public global::System.Int32 Scale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scalePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueTypeHasDataType.Scale domain property.
		/// </summary>
		internal sealed partial class ScalePropertyHandler : DslModeling::DomainPropertyValueHandler<ValueTypeHasDataType, global::System.Int32>
		{
			private ScalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueTypeHasDataType.Scale domain property value handler.
			/// </summary>
			public static readonly ScalePropertyHandler Instance = new ScalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueTypeHasDataType.Scale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ValueTypeHasDataType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.scalePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueTypeHasDataType element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scalePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Length domain property code
		
		/// <summary>
		/// Length domain property Id.
		/// </summary>
		public static readonly global::System.Guid LengthDomainPropertyId = new global::System.Guid(0x60d1471d, 0x23c9, 0x4d4d, 0x91, 0xaf, 0x6a, 0xa5, 0xe9, 0xba, 0x7b, 0x8b);
		
		/// <summary>
		/// Storage for Length
		/// </summary>
		private global::System.Int32 lengthPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Length domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.Length
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType/Length.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType/Length.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("60d1471d-23c9-4d4d-91af-6aa5e9ba7b8b")]
		public global::System.Int32 Length
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return lengthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueTypeHasDataType.Length domain property.
		/// </summary>
		internal sealed partial class LengthPropertyHandler : DslModeling::DomainPropertyValueHandler<ValueTypeHasDataType, global::System.Int32>
		{
			private LengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueTypeHasDataType.Length domain property value handler.
			/// </summary>
			public static readonly LengthPropertyHandler Instance = new LengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueTypeHasDataType.Length domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ValueTypeHasDataType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.lengthPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueTypeHasDataType element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.lengthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region DataTypeNotSpecifiedError opposite domain role accessor
		/// <summary>
		/// Gets or sets DataTypeNotSpecifiedError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataType
		/// </summary>
		public virtual DataTypeNotSpecifiedError DataTypeNotSpecifiedError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId) as DataTypeNotSpecifiedError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#endregion
		#region ValueType link accessor
		/// <summary>
		/// Get the ValueTypeHasDataType link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType GetLinkToDataType (global::Neumont.Tools.ORM.ObjectModel.ObjectType valueTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType>(valueTypeInstance, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataType link accessor
		/// <summary>
		/// Get the list of ValueTypeHasDataType links to a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType> GetLinksToValueTypeCollection ( global::Neumont.Tools.ORM.ObjectModel.DataType dataTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType>(dataTypeInstance, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataTypeDomainRoleId);
		}
		#endregion
		#region ValueTypeHasDataType instance accessors
		
		/// <summary>
		/// Get any ValueTypeHasDataType links between a given ObjectType and a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.DataType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType>(source, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType link in links )
			{
				if ( target.Equals(link.DataType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueTypeHasDataType link between a given ObjectTypeand a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType GetLink( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.DataType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType>(source, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType link in links )
			{
				if ( target.Equals(link.DataType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship Objectification
	/// Description for Neumont.Tools.ORM.ObjectModel.Objectification
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Objectification.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Objectification.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("935dc968-ddd1-4c57-9d43-9f367be78c6d")]
	public partial class Objectification : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Objectification domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x935dc968, 0xddd1, 0x4c57, 0x9d, 0x43, 0x9f, 0x36, 0x7b, 0xe7, 0x8c, 0x6d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Objectification link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public Objectification(ObjectType source, FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Objectification.NestingTypeDomainRoleId, source), new DslModeling::RoleAssignment(Objectification.NestedFactTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Objectification(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Objectification(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Objectification(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Objectification(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region NestingType domain role code
		
		/// <summary>
		/// NestingType domain role Id.
		/// </summary>
		public static readonly global::System.Guid NestingTypeDomainRoleId = new global::System.Guid(0x2660cf3e, 0x2a56, 0x496d, 0x98, 0xcd, 0xbf, 0xfa, 0xc5, 0xe7, 0x31, 0x98);
		
		/// <summary>
		/// DomainRole NestingType
		/// Description for Neumont.Tools.ORM.ObjectModel.Objectification.NestingType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Objectification/NestingType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Objectification/NestingType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NestedFactType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.Objectification/NestingType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2660cf3e-2a56-496d-98cd-bffac5e73198")]
		public virtual ObjectType NestingType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, NestingTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NestingTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NestingType of a FactType
		/// <summary>
		/// Gets NestingType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetNestingType(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NestedFactTypeDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets NestingType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNestingType(FactType element, ObjectType newNestingType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NestedFactTypeDomainRoleId, newNestingType);
		}
		#endregion
		#region NestedFactType domain role code
		
		/// <summary>
		/// NestedFactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid NestedFactTypeDomainRoleId = new global::System.Guid(0x69f805cc, 0x874f, 0x4e03, 0x83, 0x64, 0x0a, 0x04, 0x45, 0x16, 0x8b, 0x26);
		
		/// <summary>
		/// DomainRole NestedFactType
		/// Description for Neumont.Tools.ORM.ObjectModel.Objectification.NestedFactType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Objectification/NestedFactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Objectification/NestedFactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "NestingType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.Objectification/NestedFactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("69f805cc-874f-4e03-8364-0a0445168b26")]
		public virtual FactType NestedFactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, NestedFactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NestedFactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NestedFactType of a ObjectType
		/// <summary>
		/// Gets NestedFactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetNestedFactType(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NestingTypeDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets NestedFactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNestedFactType(ObjectType element, FactType newNestedFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NestingTypeDomainRoleId, newNestedFactType);
		}
		#endregion
		#region IsImplied domain property code
		
		/// <summary>
		/// IsImplied domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsImpliedDomainPropertyId = new global::System.Guid(0x7d34dd15, 0xb4d2, 0x4144, 0xac, 0x1c, 0x0f, 0xff, 0xd5, 0x4d, 0xa8, 0x65);
		
		/// <summary>
		/// Storage for IsImplied
		/// </summary>
		private global::System.Boolean isImpliedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsImplied domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.Objectification.IsImplied
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Objectification/IsImplied.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Objectification/IsImplied.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("7d34dd15-b4d2-4144-ac1c-0fffd54da865")]
		public global::System.Boolean IsImplied
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isImpliedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsImpliedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Objectification.IsImplied domain property.
		/// </summary>
		internal sealed partial class IsImpliedPropertyHandler : DslModeling::DomainPropertyValueHandler<Objectification, global::System.Boolean>
		{
			private IsImpliedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Objectification.IsImplied domain property value handler.
			/// </summary>
			public static readonly IsImpliedPropertyHandler Instance = new IsImpliedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Objectification.IsImplied domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsImpliedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Objectification element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isImpliedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Objectification element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isImpliedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ImpliedFactTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ImpliedFactTypeCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectification
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactType> ImpliedFactTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FactType>(this, global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectificationDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region NestingType link accessor
		/// <summary>
		/// Get the Objectification link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.Objectification GetLinkToNestedFactType (global::Neumont.Tools.ORM.ObjectModel.ObjectType nestingTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.Objectification> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.Objectification>(nestingTypeInstance, global::Neumont.Tools.ORM.ObjectModel.Objectification.NestingTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NestingType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NestedFactType link accessor
		/// <summary>
		/// Get the Objectification link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.Objectification GetLinkToNestingType (global::Neumont.Tools.ORM.ObjectModel.FactType nestedFactTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.Objectification> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.Objectification>(nestedFactTypeInstance, global::Neumont.Tools.ORM.ObjectModel.Objectification.NestedFactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NestedFactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Objectification instance accessors
		
		/// <summary>
		/// Get any Objectification links between a given ObjectType and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.Objectification> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.Objectification> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.Objectification>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.Objectification> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.Objectification>(source, global::Neumont.Tools.ORM.ObjectModel.Objectification.NestingTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.Objectification link in links )
			{
				if ( target.Equals(link.NestedFactType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Objectification link between a given ObjectTypeand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.Objectification GetLink( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.Objectification> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.Objectification>(source, global::Neumont.Tools.ORM.ObjectModel.Objectification.NestingTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.Objectification link in links )
			{
				if ( target.Equals(link.NestedFactType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypePlaysRole
	/// Description for Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0ab8d25e-45d4-4696-b6ee-6f108fee97a7")]
	public partial class ObjectTypePlaysRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypePlaysRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0ab8d25e, 0x45d4, 0x4696, 0xb6, 0xee, 0x6f, 0x10, 0x8f, 0xee, 0x97, 0xa7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypePlaysRole link in the same Partition as the given Role
		/// </summary>
		/// <param name="source">Role to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public ObjectTypePlaysRole(Role source, ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypePlaysRole.PlayedRoleDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypePlaysRole.RolePlayerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypePlaysRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypePlaysRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypePlaysRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypePlaysRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PlayedRole domain role code
		
		/// <summary>
		/// PlayedRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid PlayedRoleDomainRoleId = new global::System.Guid(0xa87b6eeb, 0x1753, 0x4ad3, 0xa0, 0x0d, 0x43, 0x1e, 0x34, 0xb0, 0x5a, 0xc2);
		
		/// <summary>
		/// DomainRole PlayedRole
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRole
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole/PlayedRole.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole/PlayedRole.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RolePlayer", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole/PlayedRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a87b6eeb-1753-4ad3-a00d-431e34b05ac2")]
		public virtual Role PlayedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, PlayedRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PlayedRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PlayedRoleCollection of a ObjectType
		/// <summary>
		/// Gets a list of PlayedRoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Role> GetPlayedRoleCollection(ObjectType element)
		{
			return new DslModeling::LinkedElementCollection<Role>(element, RolePlayerDomainRoleId);
		}
		#endregion
		#region RolePlayer domain role code
		
		/// <summary>
		/// RolePlayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid RolePlayerDomainRoleId = new global::System.Guid(0x8ec5c761, 0x2e7c, 0x422c, 0xb5, 0xe7, 0x35, 0x47, 0x88, 0xa1, 0x8f, 0x59);
		
		/// <summary>
		/// DomainRole RolePlayer
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayer
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole/RolePlayer.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole/RolePlayer.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PlayedRoleCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole/RolePlayer.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8ec5c761-2e7c-422c-b5e7-354788a18f59")]
		public virtual ObjectType RolePlayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, RolePlayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RolePlayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RolePlayer of a Role
		/// <summary>
		/// Gets RolePlayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetRolePlayer(Role element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PlayedRoleDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets RolePlayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRolePlayer(Role element, ObjectType newRolePlayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PlayedRoleDomainRoleId, newRolePlayer);
		}
		#endregion
		#region PlayedRole link accessor
		/// <summary>
		/// Get the ObjectTypePlaysRole link to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole GetLinkToRolePlayer (global::Neumont.Tools.ORM.ObjectModel.Role playedRoleInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole>(playedRoleInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PlayedRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RolePlayer link accessor
		/// <summary>
		/// Get the list of ObjectTypePlaysRole links to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole> GetLinksToPlayedRoleCollection ( global::Neumont.Tools.ORM.ObjectModel.ObjectType rolePlayerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole>(rolePlayerInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayerDomainRoleId);
		}
		#endregion
		#region ObjectTypePlaysRole instance accessors
		
		/// <summary>
		/// Get any ObjectTypePlaysRole links between a given Role and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole> GetLinks( global::Neumont.Tools.ORM.ObjectModel.Role source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole link in links )
			{
				if ( target.Equals(link.RolePlayer) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypePlaysRole link between a given Roleand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole GetLink( global::Neumont.Tools.ORM.ObjectModel.Role source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole link in links )
			{
				if ( target.Equals(link.RolePlayer) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasObjectType
	/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f060c714-ef07-481f-ab4b-ba02b9908025")]
	public partial class ModelHasObjectType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf060c714, 0xef07, 0x481f, 0xab, 0x4b, 0xba, 0x02, 0xb9, 0x90, 0x80, 0x25);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasObjectType link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public ModelHasObjectType(ORMModel source, ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasObjectType.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasObjectType.ObjectTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasObjectType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasObjectType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasObjectType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasObjectType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xe3fa6f15, 0xef49, 0x4b72, 0xb0, 0x2f, 0xec, 0x7c, 0x2b, 0xa7, 0x18, 0xec);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasObjectType/Model.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasObjectType/Model.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasObjectType/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e3fa6f15-ef49-4b72-b02f-ec7c2ba718ec")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ObjectType
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ObjectType element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newModel);
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0xf827bd9b, 0x9eda, 0x41c6, 0xba, 0xe9, 0xac, 0xfd, 0x8a, 0x19, 0xba, 0x08);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasObjectType/ObjectType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasObjectType/ObjectType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasObjectType/ObjectType.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f827bd9b-9eda-41c6-bae9-acfd8a19ba08")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectTypeCollection of a ORMModel
		/// <summary>
		/// Gets a list of ObjectTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ObjectType> GetObjectTypeCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<ObjectType>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasObjectType links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType> GetLinksToObjectTypeCollection ( global::Neumont.Tools.ORM.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType>(modelInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ModelDomainRoleId);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ModelHasObjectType link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType GetLinkToModel (global::Neumont.Tools.ORM.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType>(objectTypeInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasObjectType instance accessors
		
		/// <summary>
		/// Get any ModelHasObjectType links between a given ORMModel and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasObjectType link between a given ORMModeland a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType GetLink( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasFactType
	/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasFactType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasFactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasFactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("df97b102-8500-4ea1-9059-356bc49e7066")]
	public partial class ModelHasFactType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasFactType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdf97b102, 0x8500, 0x4ea1, 0x90, 0x59, 0x35, 0x6b, 0xc4, 0x9e, 0x70, 0x66);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasFactType link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public ModelHasFactType(ORMModel source, FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasFactType.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasFactType.FactTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasFactType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasFactType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasFactType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasFactType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xcc174187, 0x4e88, 0x4230, 0xad, 0xbd, 0xb4, 0x68, 0xf5, 0x8a, 0xb5, 0x8d);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasFactType.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasFactType/Model.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasFactType/Model.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FactTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasFactType/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cc174187-4e88-4230-adbd-b468f58ab58d")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a FactType
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(FactType element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newModel);
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0x972619de, 0x83c9, 0x4a7b, 0xa2, 0xc5, 0xa6, 0x26, 0xf0, 0x2d, 0x19, 0x2b);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasFactType.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasFactType/FactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasFactType/FactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasFactType/FactType.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("972619de-83c9-4a7b-a2c5-a626f02d192b")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeCollection of a ORMModel
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactType> GetFactTypeCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<FactType>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasFactType links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType> GetLinksToFactTypeCollection ( global::Neumont.Tools.ORM.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType>(modelInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType.ModelDomainRoleId);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the ModelHasFactType link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType GetLinkToModel (global::Neumont.Tools.ORM.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType>(factTypeInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasFactType instance accessors
		
		/// <summary>
		/// Get any ModelHasFactType links between a given ORMModel and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasFactType link between a given ORMModeland a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType GetLink( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasError
	/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("20cfe989-a6af-4d97-a552-ae5dd7684971")]
	public partial class ModelHasError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x20cfe989, 0xa6af, 0x4d97, 0xa5, 0x52, 0xae, 0x5d, 0xd7, 0x68, 0x49, 0x71);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasError link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">ModelError to use as the target of the relationship.</param>
		public ModelHasError(ORMModel source, ModelError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasError.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasError.ErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x8f57fa08, 0x7038, 0x4cdb, 0x90, 0x0a, 0x45, 0x0a, 0x9a, 0x9d, 0xd8, 0xdc);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasError.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasError/Model.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasError/Model.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ErrorCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasError/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8f57fa08-7038-4cdb-900a-450a9a9dd8dc")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ModelError
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(ModelError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ErrorDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ModelError element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ErrorDomainRoleId, newModel);
		}
		#endregion
		#region Error domain role code
		
		/// <summary>
		/// Error domain role Id.
		/// </summary>
		public static readonly global::System.Guid ErrorDomainRoleId = new global::System.Guid(0x48331657, 0x5405, 0x4a04, 0xb7, 0x72, 0x23, 0xa9, 0x41, 0x37, 0x88, 0xa4);
		
		/// <summary>
		/// DomainRole Error
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasError.Error
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasError/Error.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasError/Error.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasError/Error.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("48331657-5405-4a04-b772-23a9413788a4")]
		public virtual ModelError Error
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ErrorCollection of a ORMModel
		/// <summary>
		/// Gets a list of ErrorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelError> GetErrorCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<ModelError>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasError links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasError> GetLinksToErrorCollection ( global::Neumont.Tools.ORM.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasError>(modelInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasError.ModelDomainRoleId);
		}
		#endregion
		#region Error link accessor
		/// <summary>
		/// Get the ModelHasError link to a ModelError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasError GetLinkToModel (global::Neumont.Tools.ORM.ObjectModel.ModelError errorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasError>(errorInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasError.ErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Error not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasError instance accessors
		
		/// <summary>
		/// Get any ModelHasError links between a given ORMModel and a ModelError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.ModelError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasError>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasError.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasError link in links )
			{
				if ( target.Equals(link.Error) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasError link between a given ORMModeland a ModelError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasError GetLink( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.ModelError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasError>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasError.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasError link in links )
			{
				if ( target.Equals(link.Error) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasReferenceModeKind
	/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1b280979-e9f5-4774-847f-3a1078db1943")]
	public partial class ModelHasReferenceModeKind : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasReferenceModeKind domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1b280979, 0xe9f5, 0x4774, 0x84, 0x7f, 0x3a, 0x10, 0x78, 0xdb, 0x19, 0x43);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasReferenceModeKind link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">ReferenceModeKind to use as the target of the relationship.</param>
		public ModelHasReferenceModeKind(ORMModel source, ReferenceModeKind target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasReferenceModeKind.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasReferenceModeKind.ReferenceModeKindDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasReferenceModeKind(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasReferenceModeKind(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasReferenceModeKind(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasReferenceModeKind(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x966465e7, 0x6bad, 0x4100, 0xa0, 0x82, 0xb4, 0xaa, 0x20, 0x51, 0x1a, 0x7d);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind/Model.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind/Model.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferenceModeKindCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("966465e7-6bad-4100-a082-b4aa20511a7d")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ReferenceModeKind
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(ReferenceModeKind element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceModeKindDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ReferenceModeKind element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceModeKindDomainRoleId, newModel);
		}
		#endregion
		#region ReferenceModeKind domain role code
		
		/// <summary>
		/// ReferenceModeKind domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceModeKindDomainRoleId = new global::System.Guid(0x234cdd35, 0xb21e, 0x48d2, 0xa4, 0x30, 0x5d, 0x9e, 0xc3, 0x06, 0xfa, 0x67);
		
		/// <summary>
		/// DomainRole ReferenceModeKind
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKind
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind/ReferenceModeKind.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind/ReferenceModeKind.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind/ReferenceModeKind.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("234cdd35-b21e-48d2-a430-5d9ec306fa67")]
		public virtual ReferenceModeKind ReferenceModeKind
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceModeKind)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceModeKindDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceModeKindDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceModeKindCollection of a ORMModel
		/// <summary>
		/// Gets a list of ReferenceModeKindCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReferenceModeKind> GetReferenceModeKindCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<ReferenceModeKind>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasReferenceModeKind links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind> GetLinksToReferenceModeKindCollection ( global::Neumont.Tools.ORM.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind>(modelInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelDomainRoleId);
		}
		#endregion
		#region ReferenceModeKind link accessor
		/// <summary>
		/// Get the ModelHasReferenceModeKind link to a ReferenceModeKind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind GetLinkToModel (global::Neumont.Tools.ORM.ObjectModel.ReferenceModeKind referenceModeKindInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind>(referenceModeKindInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceModeKind not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasReferenceModeKind instance accessors
		
		/// <summary>
		/// Get any ModelHasReferenceModeKind links between a given ORMModel and a ReferenceModeKind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.ReferenceModeKind target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind link in links )
			{
				if ( target.Equals(link.ReferenceModeKind) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasReferenceModeKind link between a given ORMModeland a ReferenceModeKind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind GetLink( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.ReferenceModeKind target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind link in links )
			{
				if ( target.Equals(link.ReferenceModeKind) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasReferenceMode
	/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f6647d65-926b-4e66-81bc-f6293a44093e")]
	public partial class ModelHasReferenceMode : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasReferenceMode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf6647d65, 0x926b, 0x4e66, 0x81, 0xbc, 0xf6, 0x29, 0x3a, 0x44, 0x09, 0x3e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasReferenceMode link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">ReferenceMode to use as the target of the relationship.</param>
		public ModelHasReferenceMode(ORMModel source, ReferenceMode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasReferenceMode.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasReferenceMode.ReferenceModeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasReferenceMode(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasReferenceMode(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasReferenceMode(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasReferenceMode(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x88b428c5, 0xe93f, 0x4739, 0x82, 0xe5, 0x44, 0x0e, 0x6b, 0x13, 0x92, 0x1a);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode/Model.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode/Model.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferenceModeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("88b428c5-e93f-4739-82e5-440e6b13921a")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ReferenceMode
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(ReferenceMode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceModeDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ReferenceMode element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceModeDomainRoleId, newModel);
		}
		#endregion
		#region ReferenceMode domain role code
		
		/// <summary>
		/// ReferenceMode domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceModeDomainRoleId = new global::System.Guid(0x4ebaaa54, 0x37e3, 0x43d5, 0xa1, 0xcd, 0xc8, 0xac, 0x5d, 0xa2, 0x74, 0xe4);
		
		/// <summary>
		/// DomainRole ReferenceMode
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceMode
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode/ReferenceMode.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode/ReferenceMode.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode/ReferenceMode.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4ebaaa54-37e3-43d5-a1cd-c8ac5da274e4")]
		public virtual ReferenceMode ReferenceMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceMode)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceModeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceModeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceModeCollection of a ORMModel
		/// <summary>
		/// Gets a list of ReferenceModeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReferenceMode> GetReferenceModeCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<ReferenceMode>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasReferenceMode links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode> GetLinksToReferenceModeCollection ( global::Neumont.Tools.ORM.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode>(modelInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelDomainRoleId);
		}
		#endregion
		#region ReferenceMode link accessor
		/// <summary>
		/// Get the ModelHasReferenceMode link to a ReferenceMode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode GetLinkToModel (global::Neumont.Tools.ORM.ObjectModel.ReferenceMode referenceModeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode>(referenceModeInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceMode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasReferenceMode instance accessors
		
		/// <summary>
		/// Get any ModelHasReferenceMode links between a given ORMModel and a ReferenceMode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.ReferenceMode target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode link in links )
			{
				if ( target.Equals(link.ReferenceMode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasReferenceMode link between a given ORMModeland a ReferenceMode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode GetLink( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.ReferenceMode target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode link in links )
			{
				if ( target.Equals(link.ReferenceMode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasSetConstraint
	/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c0104439-3b39-41e7-9b68-61f31f17a066")]
	public partial class ModelHasSetConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasSetConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc0104439, 0x3b39, 0x41e7, 0x9b, 0x68, 0x61, 0xf3, 0x1f, 0x17, 0xa0, 0x66);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasSetConstraint link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">SetConstraint to use as the target of the relationship.</param>
		public ModelHasSetConstraint(ORMModel source, SetConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasSetConstraint.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasSetConstraint.SetConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasSetConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasSetConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasSetConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasSetConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x54b0d8a2, 0x91b9, 0x41a3, 0x85, 0x71, 0x10, 0x3d, 0xcb, 0x7b, 0xec, 0xcd);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint/Model.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint/Model.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SetConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("54b0d8a2-91b9-41a3-8571-103dcb7beccd")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a SetConstraint
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(SetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetConstraintDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(SetConstraint element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetConstraintDomainRoleId, newModel);
		}
		#endregion
		#region SetConstraint domain role code
		
		/// <summary>
		/// SetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetConstraintDomainRoleId = new global::System.Guid(0x550f7793, 0x1381, 0x4d37, 0xa5, 0xe2, 0x78, 0xc4, 0x8d, 0x0f, 0x13, 0x31);
		
		/// <summary>
		/// DomainRole SetConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.SetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint/SetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint/SetConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint/SetConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("550f7793-1381-4d37-a5e2-78c48d0f1331")]
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraintCollection of a ORMModel
		/// <summary>
		/// Gets a list of SetConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetConstraint> GetSetConstraintCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<SetConstraint>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasSetConstraint links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint> GetLinksToSetConstraintCollection ( global::Neumont.Tools.ORM.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint>(modelInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.ModelDomainRoleId);
		}
		#endregion
		#region SetConstraint link accessor
		/// <summary>
		/// Get the ModelHasSetConstraint link to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint GetLinkToModel (global::Neumont.Tools.ORM.ObjectModel.SetConstraint setConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint>(setConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.SetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasSetConstraint instance accessors
		
		/// <summary>
		/// Get any ModelHasSetConstraint links between a given ORMModel and a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.SetConstraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint link in links )
			{
				if ( target.Equals(link.SetConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasSetConstraint link between a given ORMModeland a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint GetLink( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.SetConstraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint link in links )
			{
				if ( target.Equals(link.SetConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasSetComparisonConstraint
	/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("37fbe5b6-4e18-43e2-b34b-dab0ef69dde4")]
	public partial class ModelHasSetComparisonConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasSetComparisonConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x37fbe5b6, 0x4e18, 0x43e2, 0xb3, 0x4b, 0xda, 0xb0, 0xef, 0x69, 0xdd, 0xe4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasSetComparisonConstraint link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">SetComparisonConstraint to use as the target of the relationship.</param>
		public ModelHasSetComparisonConstraint(ORMModel source, SetComparisonConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasSetComparisonConstraint.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasSetComparisonConstraint.SetComparisonConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasSetComparisonConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasSetComparisonConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasSetComparisonConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasSetComparisonConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x0d5738fb, 0x77ef, 0x41c2, 0x82, 0xee, 0xa9, 0x8e, 0x54, 0x84, 0xb1, 0x1b);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint/Model.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint/Model.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SetComparisonConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0d5738fb-77ef-41c2-82ee-a98e5484b11b")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a SetComparisonConstraint
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(SetComparisonConstraint element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newModel);
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0xc176da76, 0x1a98, 0x4369, 0xb2, 0x5f, 0xbc, 0x1d, 0xed, 0x5b, 0x38, 0x8c);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint/SetComparisonConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint/SetComparisonConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint/SetComparisonConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c176da76-1a98-4369-b25f-bc1ded5b388c")]
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraintCollection of a ORMModel
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetComparisonConstraint> GetSetComparisonConstraintCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<SetComparisonConstraint>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasSetComparisonConstraint links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint> GetLinksToSetComparisonConstraintCollection ( global::Neumont.Tools.ORM.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint>(modelInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.ModelDomainRoleId);
		}
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the ModelHasSetComparisonConstraint link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint GetLinkToModel (global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint>(setComparisonConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasSetComparisonConstraint instance accessors
		
		/// <summary>
		/// Get any ModelHasSetComparisonConstraint links between a given ORMModel and a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint link in links )
			{
				if ( target.Equals(link.SetComparisonConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasSetComparisonConstraint link between a given ORMModeland a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint GetLink( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint link in links )
			{
				if ( target.Equals(link.SetComparisonConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasDataType
	/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("33611a97-9270-469e-ab75-b53a24699a2d")]
	public partial class ModelHasDataType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x33611a97, 0x9270, 0x469e, 0xab, 0x75, 0xb5, 0x3a, 0x24, 0x69, 0x9a, 0x2d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasDataType link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">DataType to use as the target of the relationship.</param>
		public ModelHasDataType(ORMModel source, DataType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasDataType.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasDataType.DataTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasDataType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasDataType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasDataType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasDataType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x41f9a40e, 0xdedd, 0x4bba, 0x9c, 0x79, 0x85, 0x48, 0xac, 0xfb, 0xcb, 0x9a);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasDataType.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasDataType/Model.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasDataType/Model.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasDataType/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("41f9a40e-dedd-4bba-9c79-8548acfbcb9a")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a DataType
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(DataType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataTypeDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(DataType element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataTypeDomainRoleId, newModel);
		}
		#endregion
		#region DataType domain role code
		
		/// <summary>
		/// DataType domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainRoleId = new global::System.Guid(0xff17fefb, 0x0e20, 0x4326, 0x86, 0x37, 0x4c, 0x39, 0x84, 0xb8, 0xd2, 0x0b);
		
		/// <summary>
		/// DomainRole DataType
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasDataType.DataType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasDataType/DataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasDataType/DataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasDataType/DataType.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ff17fefb-0e20-4326-8637-4c3984b8d20b")]
		public virtual DataType DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataType)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataTypeCollection of a ORMModel
		/// <summary>
		/// Gets a list of DataTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DataType> GetDataTypeCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<DataType>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasDataType links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType> GetLinksToDataTypeCollection ( global::Neumont.Tools.ORM.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType>(modelInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType.ModelDomainRoleId);
		}
		#endregion
		#region DataType link accessor
		/// <summary>
		/// Get the ModelHasDataType link to a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType GetLinkToModel (global::Neumont.Tools.ORM.ObjectModel.DataType dataTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType>(dataTypeInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasDataType instance accessors
		
		/// <summary>
		/// Get any ModelHasDataType links between a given ORMModel and a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.DataType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType link in links )
			{
				if ( target.Equals(link.DataType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasDataType link between a given ORMModeland a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType GetLink( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.DataType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType link in links )
			{
				if ( target.Equals(link.DataType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ExternalRoleConstraint
	/// Description for Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9692d61f-13ae-4fee-9f76-8e0d9a5ff976")]
	public partial class ExternalRoleConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExternalRoleConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9692d61f, 0x13ae, 0x4fee, 0x9f, 0x76, 0x8e, 0x0d, 0x9a, 0x5f, 0xf9, 0x76);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExternalRoleConstraint link in the same Partition as the given ConstraintRoleSequenceHasRole
		/// </summary>
		/// <param name="source">ConstraintRoleSequenceHasRole to use as the source of the relationship.</param>
		/// <param name="target">FactConstraint to use as the target of the relationship.</param>
		public ExternalRoleConstraint(ConstraintRoleSequenceHasRole source, FactConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExternalRoleConstraint.ConstrainedRoleDomainRoleId, source), new DslModeling::RoleAssignment(ExternalRoleConstraint.FactConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExternalRoleConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExternalRoleConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExternalRoleConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExternalRoleConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConstrainedRole domain role code
		
		/// <summary>
		/// ConstrainedRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstrainedRoleDomainRoleId = new global::System.Guid(0xf87a3ec5, 0xc735, 0x4e45, 0xa9, 0xee, 0xda, 0xde, 0x8e, 0x2c, 0xfd, 0x37);
		
		/// <summary>
		/// DomainRole ConstrainedRole
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRole
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint/ConstrainedRole.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint/ConstrainedRole.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FactConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint/ConstrainedRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("f87a3ec5-c735-4e45-a9ee-dade8e2cfd37")]
		public virtual ConstraintRoleSequenceHasRole ConstrainedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequenceHasRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstrainedRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstrainedRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConstrainedRoleCollection of a FactConstraint
		/// <summary>
		/// Gets a list of ConstrainedRoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole> GetConstrainedRoleCollection(FactConstraint element)
		{
			return new DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole>(element, FactConstraintDomainRoleId);
		}
		#endregion
		#region FactConstraint domain role code
		
		/// <summary>
		/// FactConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactConstraintDomainRoleId = new global::System.Guid(0x8e11e9e0, 0xdec5, 0x405d, 0x87, 0x57, 0xe3, 0x45, 0x82, 0x33, 0x93, 0x84);
		
		/// <summary>
		/// DomainRole FactConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.FactConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint/FactConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint/FactConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConstrainedRoleCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint/FactConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("8e11e9e0-dec5-405d-8757-e34582339384")]
		public virtual FactConstraint FactConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactConstraintCollection of a ConstraintRoleSequenceHasRole
		/// <summary>
		/// Gets a list of FactConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactConstraint> GetFactConstraintCollection(ConstraintRoleSequenceHasRole element)
		{
			return new DslModeling::LinkedElementCollection<FactConstraint>(element, ConstrainedRoleDomainRoleId);
		}
		#endregion
		#region ConstrainedRole link accessor
		/// <summary>
		/// Get the list of ExternalRoleConstraint links to a ConstraintRoleSequenceHasRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint> GetLinksToFactConstraintCollection ( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole constrainedRoleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint>(constrainedRoleInstance, global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRoleDomainRoleId);
		}
		#endregion
		#region FactConstraint link accessor
		/// <summary>
		/// Get the list of ExternalRoleConstraint links to a FactConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint> GetLinksToConstrainedRoleCollection ( global::Neumont.Tools.ORM.ObjectModel.FactConstraint factConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint>(factConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.FactConstraintDomainRoleId);
		}
		#endregion
		#region ExternalRoleConstraint instance accessors
		
		/// <summary>
		/// Get any ExternalRoleConstraint links between a given ConstraintRoleSequenceHasRole and a FactConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole source, global::Neumont.Tools.ORM.ObjectModel.FactConstraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint>(source, global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRoleDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint link in links )
			{
				if ( target.Equals(link.FactConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExternalRoleConstraint link between a given ConstraintRoleSequenceHasRoleand a FactConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint GetLink( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole source, global::Neumont.Tools.ORM.ObjectModel.FactConstraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint>(source, global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRoleDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint link in links )
			{
				if ( target.Equals(link.FactConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ExclusiveOrConstraintCoupler
	/// Description for Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f2244a4c-bbe0-463b-9e8b-6a768c5c1469")]
	public partial class ExclusiveOrConstraintCoupler : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExclusiveOrConstraintCoupler domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf2244a4c, 0xbbe0, 0x463b, 0x9e, 0x8b, 0x6a, 0x76, 0x8c, 0x5c, 0x14, 0x69);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExclusiveOrConstraintCoupler link in the same Partition as the given MandatoryConstraint
		/// </summary>
		/// <param name="source">MandatoryConstraint to use as the source of the relationship.</param>
		/// <param name="target">ExclusionConstraint to use as the target of the relationship.</param>
		public ExclusiveOrConstraintCoupler(MandatoryConstraint source, ExclusionConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ExclusiveOrConstraintCoupler.ExclusionConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExclusiveOrConstraintCoupler(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExclusiveOrConstraintCoupler(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExclusiveOrConstraintCoupler(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExclusiveOrConstraintCoupler(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MandatoryConstraint domain role code
		
		/// <summary>
		/// MandatoryConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryConstraintDomainRoleId = new global::System.Guid(0x5cb84560, 0xb945, 0x4d22, 0xbd, 0x70, 0x52, 0x3d, 0x50, 0x2f, 0xbb, 0x95);
		
		/// <summary>
		/// DomainRole MandatoryConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler/MandatoryConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler/MandatoryConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExclusiveOrExclusionConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler/MandatoryConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5cb84560-b945-4d22-bd70-523d502fbb95")]
		public virtual MandatoryConstraint MandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MandatoryConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, MandatoryConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MandatoryConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExclusiveOrMandatoryConstraint of a ExclusionConstraint
		/// <summary>
		/// Gets ExclusiveOrMandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MandatoryConstraint GetExclusiveOrMandatoryConstraint(ExclusionConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ExclusionConstraintDomainRoleId) as MandatoryConstraint;
		}
		
		/// <summary>
		/// Sets ExclusiveOrMandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExclusiveOrMandatoryConstraint(ExclusionConstraint element, MandatoryConstraint newMandatoryConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ExclusionConstraintDomainRoleId, newMandatoryConstraint);
		}
		#endregion
		#region ExclusionConstraint domain role code
		
		/// <summary>
		/// ExclusionConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExclusionConstraintDomainRoleId = new global::System.Guid(0x6413ee7e, 0xa13f, 0x4330, 0xa4, 0x5e, 0x79, 0x72, 0x7e, 0xa4, 0x9a, 0x30);
		
		/// <summary>
		/// DomainRole ExclusionConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.ExclusionConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler/ExclusionConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler/ExclusionConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExclusiveOrMandatoryConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler/ExclusionConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6413ee7e-a13f-4330-a45e-79727ea49a30")]
		public virtual ExclusionConstraint ExclusionConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExclusionConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExclusionConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExclusionConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExclusiveOrExclusionConstraint of a MandatoryConstraint
		/// <summary>
		/// Gets ExclusiveOrExclusionConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExclusionConstraint GetExclusiveOrExclusionConstraint(MandatoryConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MandatoryConstraintDomainRoleId) as ExclusionConstraint;
		}
		
		/// <summary>
		/// Sets ExclusiveOrExclusionConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExclusiveOrExclusionConstraint(MandatoryConstraint element, ExclusionConstraint newExclusionConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MandatoryConstraintDomainRoleId, newExclusionConstraint);
		}
		#endregion
		#region MandatoryConstraint link accessor
		/// <summary>
		/// Get the ExclusiveOrConstraintCoupler link to a MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler GetLinkToExclusiveOrExclusionConstraint (global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraint mandatoryConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler>(mandatoryConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MandatoryConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExclusionConstraint link accessor
		/// <summary>
		/// Get the ExclusiveOrConstraintCoupler link to a ExclusionConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler GetLinkToExclusiveOrMandatoryConstraint (global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraint exclusionConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler>(exclusionConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.ExclusionConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ExclusionConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExclusiveOrConstraintCoupler instance accessors
		
		/// <summary>
		/// Get any ExclusiveOrConstraintCoupler links between a given MandatoryConstraint and a ExclusionConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler> GetLinks( global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraint source, global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler>(source, global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler link in links )
			{
				if ( target.Equals(link.ExclusionConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExclusiveOrConstraintCoupler link between a given MandatoryConstraintand a ExclusionConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler GetLink( global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraint source, global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler>(source, global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler link in links )
			{
				if ( target.Equals(link.ExclusionConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasRoleSequence
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("84b13bea-fc8c-446c-b643-9688b99af1b6")]
	public partial class SetComparisonConstraintHasRoleSequence : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasRoleSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x84b13bea, 0xfc8c, 0x446c, 0xb6, 0x43, 0x96, 0x88, 0xb9, 0x9a, 0xf1, 0xb6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasRoleSequence link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">SetComparisonConstraintRoleSequence to use as the target of the relationship.</param>
		public SetComparisonConstraintHasRoleSequence(SetComparisonConstraint source, SetComparisonConstraintRoleSequence target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasRoleSequence.ExternalConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasRoleSequence.RoleSequenceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasRoleSequence(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasRoleSequence(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasRoleSequence(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasRoleSequence(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExternalConstraint domain role code
		
		/// <summary>
		/// ExternalConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExternalConstraintDomainRoleId = new global::System.Guid(0x1d11fc93, 0x6110, 0x44f7, 0xbf, 0xe1, 0x38, 0xfc, 0x7d, 0xc8, 0x11, 0x70);
		
		/// <summary>
		/// DomainRole ExternalConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence/ExternalConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence/ExternalConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RoleSequenceCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence/ExternalConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1d11fc93-6110-44f7-bfe1-38fc7dc81170")]
		public virtual SetComparisonConstraint ExternalConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExternalConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExternalConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExternalConstraint of a SetComparisonConstraintRoleSequence
		/// <summary>
		/// Gets ExternalConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetComparisonConstraint GetExternalConstraint(SetComparisonConstraintRoleSequence element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleSequenceDomainRoleId) as SetComparisonConstraint;
		}
		
		/// <summary>
		/// Sets ExternalConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExternalConstraint(SetComparisonConstraintRoleSequence element, SetComparisonConstraint newExternalConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleSequenceDomainRoleId, newExternalConstraint);
		}
		#endregion
		#region RoleSequence domain role code
		
		/// <summary>
		/// RoleSequence domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleSequenceDomainRoleId = new global::System.Guid(0x603112cd, 0xeef4, 0x4659, 0x84, 0xf2, 0xf2, 0x10, 0xc8, 0xb2, 0x34, 0xd5);
		
		/// <summary>
		/// DomainRole RoleSequence
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequence
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence/RoleSequence.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence/RoleSequence.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExternalConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence/RoleSequence.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("603112cd-eef4-4659-84f2-f210c8b234d5")]
		public virtual SetComparisonConstraintRoleSequence RoleSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraintRoleSequence)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleSequenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleSequenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleSequenceCollection of a SetComparisonConstraint
		/// <summary>
		/// Gets a list of RoleSequenceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetComparisonConstraintRoleSequence> GetRoleSequenceCollection(SetComparisonConstraint element)
		{
			return new DslModeling::LinkedElementCollection<SetComparisonConstraintRoleSequence>(element, ExternalConstraintDomainRoleId);
		}
		#endregion
		#region ExternalConstraint link accessor
		/// <summary>
		/// Get the list of SetComparisonConstraintHasRoleSequence links to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence> GetLinksToRoleSequenceCollection ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint externalConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence>(externalConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraintDomainRoleId);
		}
		#endregion
		#region RoleSequence link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasRoleSequence link to a SetComparisonConstraintRoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence GetLinkToExternalConstraint (global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence roleSequenceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence>(roleSequenceInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleSequence not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetComparisonConstraintHasRoleSequence instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasRoleSequence links between a given SetComparisonConstraint and a SetComparisonConstraintRoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence> GetLinks( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence link in links )
			{
				if ( target.Equals(link.RoleSequence) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasRoleSequence link between a given SetComparisonConstraintand a SetComparisonConstraintRoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence GetLink( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence link in links )
			{
				if ( target.Equals(link.RoleSequence) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleSequenceHasRole
	/// Description for Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("bd1a0274-1152-4a54-b4a5-58bd023ce710")]
	public partial class ConstraintRoleSequenceHasRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleSequenceHasRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbd1a0274, 0x1152, 0x4a54, 0xb4, 0xa5, 0x58, 0xbd, 0x02, 0x3c, 0xe7, 0x10);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleSequenceHasRole link in the same Partition as the given Role
		/// </summary>
		/// <param name="source">Role to use as the source of the relationship.</param>
		/// <param name="target">ConstraintRoleSequence to use as the target of the relationship.</param>
		public ConstraintRoleSequenceHasRole(Role source, ConstraintRoleSequence target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleSequenceHasRole.RoleDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleSequenceHasRole.ConstraintRoleSequenceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceHasRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceHasRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceHasRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceHasRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0x1a5a347e, 0x1d5d, 0x4045, 0x9e, 0xa0, 0x13, 0xb2, 0x33, 0x8f, 0xc8, 0x98);
		
		/// <summary>
		/// DomainRole Role
		/// Description for Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.Role
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole/Role.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole/Role.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConstraintRoleSequenceCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1a5a347e-1d5d-4045-9ea0-13b2338fc898")]
		public virtual Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleCollection of a ConstraintRoleSequence
		/// <summary>
		/// Gets a list of RoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Role> GetRoleCollection(ConstraintRoleSequence element)
		{
			return new DslModeling::LinkedElementCollection<Role>(element, ConstraintRoleSequenceDomainRoleId);
		}
		#endregion
		#region ConstraintRoleSequence domain role code
		
		/// <summary>
		/// ConstraintRoleSequence domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintRoleSequenceDomainRoleId = new global::System.Guid(0x9ad53904, 0x280a, 0x4329, 0xa6, 0xf0, 0x20, 0xe2, 0xc4, 0x4f, 0x56, 0x07);
		
		/// <summary>
		/// DomainRole ConstraintRoleSequence
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequence
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole/ConstraintRoleSequence.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole/ConstraintRoleSequence.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RoleCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole/ConstraintRoleSequence.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9ad53904-280a-4329-a6f0-20e2c44f5607")]
		public virtual ConstraintRoleSequence ConstraintRoleSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequence)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintRoleSequenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintRoleSequenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConstraintRoleSequenceCollection of a Role
		/// <summary>
		/// Gets a list of ConstraintRoleSequenceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConstraintRoleSequence> GetConstraintRoleSequenceCollection(Role element)
		{
			return new DslModeling::LinkedElementCollection<ConstraintRoleSequence>(element, RoleDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region FactConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of FactConstraintCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRole
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactConstraint> FactConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FactConstraint>(this, global::Neumont.Tools.ORM.ObjectModel.ExternalRoleConstraint.ConstrainedRoleDomainRoleId);
			}
		}
		#endregion
		#region ProjectionJoin opposite domain role accessor
		/// <summary>
		/// Gets or sets ProjectionJoin.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin.ConstraintRoleSequenceHasRole
		/// </summary>
		public virtual Join ProjectionJoin
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin.ConstraintRoleSequenceHasRoleDomainRoleId) as Join;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin.ConstraintRoleSequenceHasRoleDomainRoleId, value);
			}
		}
		#endregion
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the list of ConstraintRoleSequenceHasRole links to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole> GetLinksToConstraintRoleSequenceCollection ( global::Neumont.Tools.ORM.ObjectModel.Role roleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole>(roleInstance, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.RoleDomainRoleId);
		}
		#endregion
		#region ConstraintRoleSequence link accessor
		/// <summary>
		/// Get the list of ConstraintRoleSequenceHasRole links to a ConstraintRoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole> GetLinksToRoleCollection ( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence constraintRoleSequenceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole>(constraintRoleSequenceInstance, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceDomainRoleId);
		}
		#endregion
		#region ConstraintRoleSequenceHasRole instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleSequenceHasRole links between a given Role and a ConstraintRoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole> GetLinks( global::Neumont.Tools.ORM.ObjectModel.Role source, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole>(source, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.RoleDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole link in links )
			{
				if ( target.Equals(link.ConstraintRoleSequence) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleSequenceHasRole link between a given Roleand a ConstraintRoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole GetLink( global::Neumont.Tools.ORM.ObjectModel.Role source, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole>(source, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.RoleDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole link in links )
			{
				if ( target.Equals(link.ConstraintRoleSequence) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasTooFewRoleSequencesError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("3167f5d3-c234-46e3-aac2-4ceb791dfb9c")]
	public partial class SetComparisonConstraintHasTooFewRoleSequencesError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasTooFewRoleSequencesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3167f5d3, 0xc234, 0x46e3, 0xaa, 0xc2, 0x4c, 0xeb, 0x79, 0x1d, 0xfb, 0x9c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasTooFewRoleSequencesError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">TooFewRoleSequencesError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasTooFewRoleSequencesError(SetComparisonConstraint source, TooFewRoleSequencesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasTooFewRoleSequencesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasTooFewRoleSequencesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasTooFewRoleSequencesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasTooFewRoleSequencesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0x0178c877, 0x8906, 0x4bdc, 0xb3, 0xf8, 0x03, 0x22, 0xa5, 0x78, 0x74, 0x1d);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError/SetComparisonConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError/SetComparisonConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TooFewRoleSequencesError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0178c877-8906-4bdc-b3f8-0322a578741d")]
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraint of a TooFewRoleSequencesError
		/// <summary>
		/// Gets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetComparisonConstraint GetSetComparisonConstraint(TooFewRoleSequencesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TooFewRoleSequencesErrorDomainRoleId) as SetComparisonConstraint;
		}
		
		/// <summary>
		/// Sets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetComparisonConstraint(TooFewRoleSequencesError element, SetComparisonConstraint newSetComparisonConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TooFewRoleSequencesErrorDomainRoleId, newSetComparisonConstraint);
		}
		#endregion
		#region TooFewRoleSequencesError domain role code
		
		/// <summary>
		/// TooFewRoleSequencesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid TooFewRoleSequencesErrorDomainRoleId = new global::System.Guid(0x1ba9841f, 0x59a2, 0x475c, 0xbb, 0x3f, 0x74, 0x97, 0xb7, 0xf6, 0x31, 0x5e);
		
		/// <summary>
		/// DomainRole TooFewRoleSequencesError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError/TooFewRoleSequencesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError/TooFewRoleSequencesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError/TooFewRoleSequencesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1ba9841f-59a2-475c-bb3f-7497b7f6315e")]
		public virtual TooFewRoleSequencesError TooFewRoleSequencesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TooFewRoleSequencesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, TooFewRoleSequencesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TooFewRoleSequencesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TooFewRoleSequencesError of a SetComparisonConstraint
		/// <summary>
		/// Gets TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TooFewRoleSequencesError GetTooFewRoleSequencesError(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as TooFewRoleSequencesError;
		}
		
		/// <summary>
		/// Sets TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTooFewRoleSequencesError(SetComparisonConstraint element, TooFewRoleSequencesError newTooFewRoleSequencesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newTooFewRoleSequencesError);
		}
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasTooFewRoleSequencesError link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError GetLinkToTooFewRoleSequencesError (global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError>(setComparisonConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TooFewRoleSequencesError link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasTooFewRoleSequencesError link to a TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError GetLinkToSetComparisonConstraint (global::Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError tooFewRoleSequencesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError>(tooFewRoleSequencesErrorInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TooFewRoleSequencesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetComparisonConstraintHasTooFewRoleSequencesError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasTooFewRoleSequencesError links between a given SetComparisonConstraint and a TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError link in links )
			{
				if ( target.Equals(link.TooFewRoleSequencesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasTooFewRoleSequencesError link between a given SetComparisonConstraintand a TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError GetLink( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError link in links )
			{
				if ( target.Equals(link.TooFewRoleSequencesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasTooManyRoleSequencesError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e7c33130-2d1f-4f95-b988-bd7608cf2d1c")]
	public partial class SetComparisonConstraintHasTooManyRoleSequencesError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasTooManyRoleSequencesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe7c33130, 0x2d1f, 0x4f95, 0xb9, 0x88, 0xbd, 0x76, 0x08, 0xcf, 0x2d, 0x1c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasTooManyRoleSequencesError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">TooManyRoleSequencesError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasTooManyRoleSequencesError(SetComparisonConstraint source, TooManyRoleSequencesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasTooManyRoleSequencesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasTooManyRoleSequencesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasTooManyRoleSequencesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasTooManyRoleSequencesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0x76082669, 0x3e03, 0x4837, 0x88, 0x24, 0x52, 0x6b, 0xb2, 0x5d, 0xac, 0xb8);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError/SetComparisonConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError/SetComparisonConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TooManyRoleSequencesError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("76082669-3e03-4837-8824-526bb25dacb8")]
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraint of a TooManyRoleSequencesError
		/// <summary>
		/// Gets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetComparisonConstraint GetSetComparisonConstraint(TooManyRoleSequencesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TooManyRoleSequencesErrorDomainRoleId) as SetComparisonConstraint;
		}
		
		/// <summary>
		/// Sets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetComparisonConstraint(TooManyRoleSequencesError element, SetComparisonConstraint newSetComparisonConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TooManyRoleSequencesErrorDomainRoleId, newSetComparisonConstraint);
		}
		#endregion
		#region TooManyRoleSequencesError domain role code
		
		/// <summary>
		/// TooManyRoleSequencesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid TooManyRoleSequencesErrorDomainRoleId = new global::System.Guid(0xc4c9e95c, 0xb71c, 0x4eec, 0xa1, 0x01, 0x6c, 0xa8, 0x27, 0x16, 0x95, 0x45);
		
		/// <summary>
		/// DomainRole TooManyRoleSequencesError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError/TooManyRoleSequencesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError/TooManyRoleSequencesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError/TooManyRoleSequencesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c4c9e95c-b71c-4eec-a101-6ca827169545")]
		public virtual TooManyRoleSequencesError TooManyRoleSequencesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TooManyRoleSequencesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, TooManyRoleSequencesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TooManyRoleSequencesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TooManyRoleSequencesError of a SetComparisonConstraint
		/// <summary>
		/// Gets TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TooManyRoleSequencesError GetTooManyRoleSequencesError(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as TooManyRoleSequencesError;
		}
		
		/// <summary>
		/// Sets TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTooManyRoleSequencesError(SetComparisonConstraint element, TooManyRoleSequencesError newTooManyRoleSequencesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newTooManyRoleSequencesError);
		}
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasTooManyRoleSequencesError link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError GetLinkToTooManyRoleSequencesError (global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError>(setComparisonConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TooManyRoleSequencesError link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasTooManyRoleSequencesError link to a TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError GetLinkToSetComparisonConstraint (global::Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError tooManyRoleSequencesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError>(tooManyRoleSequencesErrorInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TooManyRoleSequencesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetComparisonConstraintHasTooManyRoleSequencesError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasTooManyRoleSequencesError links between a given SetComparisonConstraint and a TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError link in links )
			{
				if ( target.Equals(link.TooManyRoleSequencesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasTooManyRoleSequencesError link between a given SetComparisonConstraintand a TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError GetLink( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError link in links )
			{
				if ( target.Equals(link.TooManyRoleSequencesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeHasDuplicateNameError
	/// Description for Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("bc1031eb-8590-4a14-abbd-f12a18622855")]
	public partial class ObjectTypeHasDuplicateNameError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeHasDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbc1031eb, 0x8590, 0x4a14, 0xab, 0xbd, 0xf1, 0x2a, 0x18, 0x62, 0x28, 0x55);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeHasDuplicateNameError link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">ObjectTypeDuplicateNameError to use as the target of the relationship.</param>
		public ObjectTypeHasDuplicateNameError(ObjectType source, ObjectTypeDuplicateNameError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeHasDuplicateNameError.ObjectTypeDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeHasDuplicateNameError.DuplicateNameErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasDuplicateNameError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasDuplicateNameError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasDuplicateNameError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasDuplicateNameError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0xa2252380, 0x7cac, 0x4d36, 0x88, 0x57, 0x24, 0x26, 0xae, 0x55, 0x8c, 0x08);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError/ObjectType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError/ObjectType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DuplicateNameError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a2252380-7cac-4d36-8857-2426ae558c08")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectTypeCollection of a ObjectTypeDuplicateNameError
		/// <summary>
		/// Gets a list of ObjectTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ObjectType> GetObjectTypeCollection(ObjectTypeDuplicateNameError element)
		{
			return new DslModeling::LinkedElementCollection<ObjectType>(element, DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region DuplicateNameError domain role code
		
		/// <summary>
		/// DuplicateNameError domain role Id.
		/// </summary>
		public static readonly global::System.Guid DuplicateNameErrorDomainRoleId = new global::System.Guid(0x40422aa2, 0xb5fd, 0x4056, 0xab, 0xbf, 0xd3, 0x93, 0x35, 0x8b, 0xc0, 0x1a);
		
		/// <summary>
		/// DomainRole DuplicateNameError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError/DuplicateNameError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError/DuplicateNameError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError/DuplicateNameError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("40422aa2-b5fd-4056-abbf-d393358bc01a")]
		public virtual ObjectTypeDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectTypeDuplicateNameError)DslModeling::DomainRoleInfo.GetRolePlayer(this, DuplicateNameErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DuplicateNameErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DuplicateNameError of a ObjectType
		/// <summary>
		/// Gets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectTypeDuplicateNameError GetDuplicateNameError(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as ObjectTypeDuplicateNameError;
		}
		
		/// <summary>
		/// Sets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDuplicateNameError(ObjectType element, ObjectTypeDuplicateNameError newDuplicateNameError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newDuplicateNameError);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ObjectTypeHasDuplicateNameError link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError GetLinkToDuplicateNameError (global::Neumont.Tools.ORM.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError>(objectTypeInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DuplicateNameError link accessor
		/// <summary>
		/// Get the list of ObjectTypeHasDuplicateNameError links to a ObjectTypeDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError> GetLinksToObjectTypeCollection ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError duplicateNameErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError>(duplicateNameErrorInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region ObjectTypeHasDuplicateNameError instance accessors
		
		/// <summary>
		/// Get any ObjectTypeHasDuplicateNameError links between a given ObjectType and a ObjectTypeDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeHasDuplicateNameError link between a given ObjectTypeand a ObjectTypeDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError GetLink( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship RoleInstanceHasPopulationUniquenessError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5dbe50cd-a939-484d-9b96-700cb6cc7813")]
	public abstract partial class RoleInstanceHasPopulationUniquenessError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleInstanceHasPopulationUniquenessError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5dbe50cd, 0xa939, 0x484d, 0x9b, 0x96, 0x70, 0x0c, 0xb6, 0xcc, 0x78, 0x13);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected RoleInstanceHasPopulationUniquenessError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RoleInstance domain role code
		
		/// <summary>
		/// RoleInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleInstanceDomainRoleId = new global::System.Guid(0x527ffaeb, 0x8f4a, 0x4dff, 0xb0, 0x2f, 0x49, 0x82, 0x2f, 0xce, 0x2f, 0x3d);
		
		/// <summary>
		/// DomainRole RoleInstance
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError.RoleInstance
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError/RoleInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError/RoleInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PopulationUniquenessError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError/RoleInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("527ffaeb-8f4a-4dff-b02f-49822fce2f3d")]
		public abstract RoleInstance RoleInstance
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access RoleInstanceCollection of a PopulationUniquenessError
		/// <summary>
		/// Gets a list of RoleInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<RoleInstance> GetRoleInstanceCollection(PopulationUniquenessError element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<RoleInstance>(element, PopulationUniquenessErrorDomainRoleId);
		}
		#endregion
		#region PopulationUniquenessError domain role code
		
		/// <summary>
		/// PopulationUniquenessError domain role Id.
		/// </summary>
		public static readonly global::System.Guid PopulationUniquenessErrorDomainRoleId = new global::System.Guid(0x3ae1d857, 0xc7e7, 0x4053, 0xa4, 0x61, 0x3e, 0xb9, 0x65, 0x66, 0x6f, 0x2c);
		
		/// <summary>
		/// DomainRole PopulationUniquenessError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError.PopulationUniquenessError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RoleInstanceCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("3ae1d857-c7e7-4053-a461-3eb965666f2c")]
		public abstract PopulationUniquenessError PopulationUniquenessError
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access PopulationUniquenessError of a RoleInstance
		/// <summary>
		/// Gets PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PopulationUniquenessError GetPopulationUniquenessError(RoleInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleInstanceDomainRoleId) as PopulationUniquenessError;
		}
		
		/// <summary>
		/// Sets PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPopulationUniquenessError(RoleInstance element, PopulationUniquenessError newPopulationUniquenessError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleInstanceDomainRoleId, newPopulationUniquenessError);
		}
		#endregion
		#region RoleInstance link accessor
		/// <summary>
		/// Get the RoleInstanceHasPopulationUniquenessError link to a RoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError GetLinkToPopulationUniquenessError (global::Neumont.Tools.ORM.ObjectModel.RoleInstance roleInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError>(roleInstanceInstance, global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PopulationUniquenessError link accessor
		/// <summary>
		/// Get the list of RoleInstanceHasPopulationUniquenessError links to a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError> GetLinksToRoleInstanceCollection ( global::Neumont.Tools.ORM.ObjectModel.PopulationUniquenessError populationUniquenessErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError>(populationUniquenessErrorInstance, global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId);
		}
		#endregion
		#region RoleInstanceHasPopulationUniquenessError instance accessors
		
		/// <summary>
		/// Get any RoleInstanceHasPopulationUniquenessError links between a given RoleInstance and a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.RoleInstance source, global::Neumont.Tools.ORM.ObjectModel.PopulationUniquenessError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError>(source, global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError link in links )
			{
				if ( target.Equals(link.PopulationUniquenessError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoleInstanceHasPopulationUniquenessError link between a given RoleInstanceand a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError GetLink( global::Neumont.Tools.ORM.ObjectModel.RoleInstance source, global::Neumont.Tools.ORM.ObjectModel.PopulationUniquenessError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError>(source, global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError link in links )
			{
				if ( target.Equals(link.PopulationUniquenessError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship EntityTypeRoleInstanceHasPopulationUniquenessError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("04312bef-ea3e-4525-9a1a-903497efdaf7")]
	public partial class EntityTypeRoleInstanceHasPopulationUniquenessError : RoleInstanceHasPopulationUniquenessError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeRoleInstanceHasPopulationUniquenessError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x04312bef, 0xea3e, 0x4525, 0x9a, 0x1a, 0x90, 0x34, 0x97, 0xef, 0xda, 0xf7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeRoleInstanceHasPopulationUniquenessError link in the same Partition as the given EntityTypeRoleInstance
		/// </summary>
		/// <param name="source">EntityTypeRoleInstance to use as the source of the relationship.</param>
		/// <param name="target">PopulationUniquenessError to use as the target of the relationship.</param>
		public EntityTypeRoleInstanceHasPopulationUniquenessError(EntityTypeRoleInstance source, PopulationUniquenessError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeRoleInstanceHasPopulationUniquenessError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeRoleInstanceHasPopulationUniquenessError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeRoleInstanceHasPopulationUniquenessError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeRoleInstanceHasPopulationUniquenessError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RoleInstance domain role code
		
		/// <summary>
		/// RoleInstance domain role Id.
		/// </summary>
		public static readonly new global::System.Guid RoleInstanceDomainRoleId = new global::System.Guid(0xf3ef0d4d, 0x5f76, 0x4dab, 0xbb, 0x6e, 0xb4, 0x75, 0xe7, 0xdd, 0xa7, 0x0d);
		
		/// <summary>
		/// DomainRole RoleInstance
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstance
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError/RoleInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError/RoleInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, RolePlayer = typeof(EntityTypeRoleInstance), PropertyName = "PopulationUniquenessError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError/RoleInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f3ef0d4d-5f76-4dab-bb6e-b475e7dda70d")]
		public override RoleInstance RoleInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityTypeRoleInstanceCollection of a PopulationUniquenessError
		/// <summary>
		/// Gets a list of EntityTypeRoleInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityTypeRoleInstance> GetEntityTypeRoleInstanceCollection(PopulationUniquenessError element)
		{
			return new DslModeling::LinkedElementCollection<EntityTypeRoleInstance>(element, PopulationUniquenessErrorDomainRoleId);
		}
		#endregion
		#region PopulationUniquenessError domain role code
		
		/// <summary>
		/// PopulationUniquenessError domain role Id.
		/// </summary>
		public static readonly new global::System.Guid PopulationUniquenessErrorDomainRoleId = new global::System.Guid(0x0f8036ba, 0x33aa, 0x48bc, 0xb0, 0x58, 0x1b, 0xd9, 0x90, 0xa6, 0xe2, 0x64);
		
		/// <summary>
		/// DomainRole PopulationUniquenessError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityTypeRoleInstanceCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("0f8036ba-33aa-48bc-b058-1bd990a6e264")]
		public override PopulationUniquenessError PopulationUniquenessError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PopulationUniquenessError)DslModeling::DomainRoleInfo.GetRolePlayer(this, PopulationUniquenessErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PopulationUniquenessErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PopulationUniquenessError of a EntityTypeRoleInstance
		/// <summary>
		/// Gets PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PopulationUniquenessError GetPopulationUniquenessError(EntityTypeRoleInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleInstanceDomainRoleId) as PopulationUniquenessError;
		}
		
		/// <summary>
		/// Sets PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPopulationUniquenessError(EntityTypeRoleInstance element, PopulationUniquenessError newPopulationUniquenessError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleInstanceDomainRoleId, newPopulationUniquenessError);
		}
		#endregion
		#region RoleInstance link accessor
		/// <summary>
		/// Get the EntityTypeRoleInstanceHasPopulationUniquenessError link to a EntityTypeRoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError GetLinkToPopulationUniquenessError (global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance roleInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError>(roleInstanceInstance, global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PopulationUniquenessError link accessor
		/// <summary>
		/// Get the list of EntityTypeRoleInstanceHasPopulationUniquenessError links to a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError> GetLinksToEntityTypeRoleInstanceCollection ( global::Neumont.Tools.ORM.ObjectModel.PopulationUniquenessError populationUniquenessErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError>(populationUniquenessErrorInstance, global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId);
		}
		#endregion
		#region EntityTypeRoleInstanceHasPopulationUniquenessError instance accessors
		
		/// <summary>
		/// Get any EntityTypeRoleInstanceHasPopulationUniquenessError links between a given EntityTypeRoleInstance and a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance source, global::Neumont.Tools.ORM.ObjectModel.PopulationUniquenessError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError>(source, global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError link in links )
			{
				if ( target.Equals(link.PopulationUniquenessError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeRoleInstanceHasPopulationUniquenessError link between a given EntityTypeRoleInstanceand a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError GetLink( global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance source, global::Neumont.Tools.ORM.ObjectModel.PopulationUniquenessError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError>(source, global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError link in links )
			{
				if ( target.Equals(link.PopulationUniquenessError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeRoleInstanceHasPopulationUniquenessError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a483fdfe-53ef-4352-8d97-986bf2c0e8e7")]
	public partial class FactTypeRoleInstanceHasPopulationUniquenessError : RoleInstanceHasPopulationUniquenessError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeRoleInstanceHasPopulationUniquenessError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa483fdfe, 0x53ef, 0x4352, 0x8d, 0x97, 0x98, 0x6b, 0xf2, 0xc0, 0xe8, 0xe7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeRoleInstanceHasPopulationUniquenessError link in the same Partition as the given FactTypeRoleInstance
		/// </summary>
		/// <param name="source">FactTypeRoleInstance to use as the source of the relationship.</param>
		/// <param name="target">PopulationUniquenessError to use as the target of the relationship.</param>
		public FactTypeRoleInstanceHasPopulationUniquenessError(FactTypeRoleInstance source, PopulationUniquenessError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeRoleInstanceHasPopulationUniquenessError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeRoleInstanceHasPopulationUniquenessError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeRoleInstanceHasPopulationUniquenessError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeRoleInstanceHasPopulationUniquenessError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RoleInstance domain role code
		
		/// <summary>
		/// RoleInstance domain role Id.
		/// </summary>
		public static readonly new global::System.Guid RoleInstanceDomainRoleId = new global::System.Guid(0x14bf8cdb, 0x9685, 0x49ac, 0xa7, 0xb9, 0x69, 0x6a, 0x72, 0xd6, 0xd9, 0x7c);
		
		/// <summary>
		/// DomainRole RoleInstance
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstance
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError/RoleInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError/RoleInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, RolePlayer = typeof(FactTypeRoleInstance), PropertyName = "PopulationUniquenessError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError/RoleInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("14bf8cdb-9685-49ac-a7b9-696a72d6d97c")]
		public override RoleInstance RoleInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeRoleInstanceCollection of a PopulationUniquenessError
		/// <summary>
		/// Gets a list of FactTypeRoleInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactTypeRoleInstance> GetFactTypeRoleInstanceCollection(PopulationUniquenessError element)
		{
			return new DslModeling::LinkedElementCollection<FactTypeRoleInstance>(element, PopulationUniquenessErrorDomainRoleId);
		}
		#endregion
		#region PopulationUniquenessError domain role code
		
		/// <summary>
		/// PopulationUniquenessError domain role Id.
		/// </summary>
		public static readonly new global::System.Guid PopulationUniquenessErrorDomainRoleId = new global::System.Guid(0xf00366b7, 0xa23f, 0x48d7, 0x89, 0x77, 0x00, 0x78, 0xeb, 0x2c, 0xd7, 0xb6);
		
		/// <summary>
		/// DomainRole PopulationUniquenessError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactTypeRoleInstanceCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("f00366b7-a23f-48d7-8977-0078eb2cd7b6")]
		public override PopulationUniquenessError PopulationUniquenessError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PopulationUniquenessError)DslModeling::DomainRoleInfo.GetRolePlayer(this, PopulationUniquenessErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PopulationUniquenessErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PopulationUniquenessError of a FactTypeRoleInstance
		/// <summary>
		/// Gets PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PopulationUniquenessError GetPopulationUniquenessError(FactTypeRoleInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleInstanceDomainRoleId) as PopulationUniquenessError;
		}
		
		/// <summary>
		/// Sets PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPopulationUniquenessError(FactTypeRoleInstance element, PopulationUniquenessError newPopulationUniquenessError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleInstanceDomainRoleId, newPopulationUniquenessError);
		}
		#endregion
		#region RoleInstance link accessor
		/// <summary>
		/// Get the FactTypeRoleInstanceHasPopulationUniquenessError link to a FactTypeRoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError GetLinkToPopulationUniquenessError (global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance roleInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError>(roleInstanceInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PopulationUniquenessError link accessor
		/// <summary>
		/// Get the list of FactTypeRoleInstanceHasPopulationUniquenessError links to a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError> GetLinksToFactTypeRoleInstanceCollection ( global::Neumont.Tools.ORM.ObjectModel.PopulationUniquenessError populationUniquenessErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError>(populationUniquenessErrorInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId);
		}
		#endregion
		#region FactTypeRoleInstanceHasPopulationUniquenessError instance accessors
		
		/// <summary>
		/// Get any FactTypeRoleInstanceHasPopulationUniquenessError links between a given FactTypeRoleInstance and a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance source, global::Neumont.Tools.ORM.ObjectModel.PopulationUniquenessError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError link in links )
			{
				if ( target.Equals(link.PopulationUniquenessError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeRoleInstanceHasPopulationUniquenessError link between a given FactTypeRoleInstanceand a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError GetLink( global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance source, global::Neumont.Tools.ORM.ObjectModel.PopulationUniquenessError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError link in links )
			{
				if ( target.Equals(link.PopulationUniquenessError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasContradictionError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a1d4a389-9d19-4921-bd0d-d965b53897e3")]
	public abstract partial class SetComparisonConstraintHasContradictionError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasContradictionError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa1d4a389, 0x9d19, 0x4921, 0xbd, 0x0d, 0xd9, 0x65, 0xb5, 0x38, 0x97, 0xe3);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected SetComparisonConstraintHasContradictionError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0x61f38936, 0x0f1d, 0x4d08, 0xbf, 0x95, 0x75, 0x42, 0x9d, 0x10, 0x8d, 0x6e);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError/SetComparisonConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError/SetComparisonConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ContradictionError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("61f38936-0f1d-4d08-bf95-75429d108d6e")]
		public abstract SetComparisonConstraint SetComparisonConstraint
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraintCollection of a ContradictionError
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<SetComparisonConstraint> GetSetComparisonConstraintCollection(ContradictionError element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<SetComparisonConstraint>(element, ContradictionErrorDomainRoleId);
		}
		#endregion
		#region ContradictionError domain role code
		
		/// <summary>
		/// ContradictionError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContradictionErrorDomainRoleId = new global::System.Guid(0x0d23d71a, 0xee1c, 0x42eb, 0xa5, 0x4b, 0xb6, 0xcc, 0x00, 0x91, 0xef, 0x58);
		
		/// <summary>
		/// DomainRole ContradictionError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError.ContradictionError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError/ContradictionError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError/ContradictionError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError/ContradictionError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("0d23d71a-ee1c-42eb-a54b-b6cc0091ef58")]
		public abstract ContradictionError ContradictionError
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ContradictionError of a SetComparisonConstraint
		/// <summary>
		/// Gets a list of ContradictionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ContradictionError> GetContradictionError(SetComparisonConstraint element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ContradictionError>(element, SetComparisonConstraintDomainRoleId);
		}
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the list of SetComparisonConstraintHasContradictionError links to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError> GetLinksToContradictionError ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError>(setComparisonConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError.SetComparisonConstraintDomainRoleId);
		}
		#endregion
		#region ContradictionError link accessor
		/// <summary>
		/// Get the list of SetComparisonConstraintHasContradictionError links to a ContradictionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError> GetLinksToSetComparisonConstraintCollection ( global::Neumont.Tools.ORM.ObjectModel.ContradictionError contradictionErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError>(contradictionErrorInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError.ContradictionErrorDomainRoleId);
		}
		#endregion
		#region SetComparisonConstraintHasContradictionError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasContradictionError links between a given SetComparisonConstraint and a ContradictionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.ContradictionError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError link in links )
			{
				if ( target.Equals(link.ContradictionError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasContradictionError link between a given SetComparisonConstraintand a ContradictionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError GetLink( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.ContradictionError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError link in links )
			{
				if ( target.Equals(link.ContradictionError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasExclusionContradictsEqualityError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e7e85549-6312-4e65-ad48-4ddf51e8139c")]
	public partial class SetComparisonConstraintHasExclusionContradictsEqualityError : SetComparisonConstraintHasContradictionError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasExclusionContradictsEqualityError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe7e85549, 0x6312, 0x4e65, 0xad, 0x48, 0x4d, 0xdf, 0x51, 0xe8, 0x13, 0x9c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasExclusionContradictsEqualityError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">ExclusionContradictsEqualityError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasExclusionContradictsEqualityError(SetComparisonConstraint source, ExclusionContradictsEqualityError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasExclusionContradictsEqualityError.ExclusionContradictsEqualityErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasExclusionContradictsEqualityError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasExclusionContradictsEqualityError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasExclusionContradictsEqualityError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasExclusionContradictsEqualityError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly new global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0xa1cae6f2, 0x1ff6, 0x455c, 0xb3, 0x45, 0xfe, 0x1e, 0xab, 0xa5, 0x4c, 0xc9);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError/SetComparisonConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError/SetComparisonConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExclusionContradictsEqualityError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a1cae6f2-1ff6-455c-b345-fe1eaba54cc9")]
		public override SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraintCollection of a ExclusionContradictsEqualityError
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetComparisonConstraint> GetSetComparisonConstraintCollection(ExclusionContradictsEqualityError element)
		{
			return new DslModeling::LinkedElementCollection<SetComparisonConstraint>(element, ExclusionContradictsEqualityErrorDomainRoleId);
		}
		#endregion
		#region ExclusionContradictsEqualityError domain role code
		
		/// <summary>
		/// ExclusionContradictsEqualityError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExclusionContradictsEqualityErrorDomainRoleId = new global::System.Guid(0x550fe83e, 0x6dd2, 0x49fe, 0xb1, 0x25, 0xca, 0x26, 0xda, 0x12, 0x89, 0x7f);
		
		/// <summary>
		/// DomainRole ExclusionContradictsEqualityError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.ExclusionContradictsEqualityError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError/ExclusionContradictsEqualityError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError/ExclusionContradictsEqualityError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError/ExclusionContradictsEqualityError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("550fe83e-6dd2-49fe-b125-ca26da12897f")]
		public virtual ExclusionContradictsEqualityError ExclusionContradictsEqualityError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExclusionContradictsEqualityError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExclusionContradictsEqualityErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExclusionContradictsEqualityErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExclusionContradictsEqualityError of a SetComparisonConstraint
		/// <summary>
		/// Gets ExclusionContradictsEqualityError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExclusionContradictsEqualityError GetExclusionContradictsEqualityError(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as ExclusionContradictsEqualityError;
		}
		
		/// <summary>
		/// Sets ExclusionContradictsEqualityError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExclusionContradictsEqualityError(SetComparisonConstraint element, ExclusionContradictsEqualityError newExclusionContradictsEqualityError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newExclusionContradictsEqualityError);
		}
		#endregion
		#region ContradictionError domain role override
		
		/// <summary>
		/// Gets the element playing ExclusionContradictsEqualityError domain role.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError.ContradictionError
		/// </summary>
		public override ContradictionError ContradictionError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ExclusionContradictsEqualityError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ExclusionContradictsEqualityError = (ExclusionContradictsEqualityError)value;
			}
		}
		
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasExclusionContradictsEqualityError link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError GetLinkToExclusionContradictsEqualityError (global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError>(setComparisonConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExclusionContradictsEqualityError link accessor
		/// <summary>
		/// Get the list of SetComparisonConstraintHasExclusionContradictsEqualityError links to a ExclusionContradictsEqualityError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError> GetLinksToSetComparisonConstraintCollection ( global::Neumont.Tools.ORM.ObjectModel.ExclusionContradictsEqualityError exclusionContradictsEqualityErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError>(exclusionContradictsEqualityErrorInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.ExclusionContradictsEqualityErrorDomainRoleId);
		}
		#endregion
		#region SetComparisonConstraintHasExclusionContradictsEqualityError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasExclusionContradictsEqualityError links between a given SetComparisonConstraint and a ExclusionContradictsEqualityError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.ExclusionContradictsEqualityError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError link in links )
			{
				if ( target.Equals(link.ExclusionContradictsEqualityError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasExclusionContradictsEqualityError link between a given SetComparisonConstraintand a ExclusionContradictsEqualityError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError GetLink( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.ExclusionContradictsEqualityError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError link in links )
			{
				if ( target.Equals(link.ExclusionContradictsEqualityError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasExclusionContradictsSubsetError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b4bba5af-05ac-4fec-8288-8d80dc0af16e")]
	public partial class SetComparisonConstraintHasExclusionContradictsSubsetError : SetComparisonConstraintHasContradictionError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasExclusionContradictsSubsetError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb4bba5af, 0x05ac, 0x4fec, 0x82, 0x88, 0x8d, 0x80, 0xdc, 0x0a, 0xf1, 0x6e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasExclusionContradictsSubsetError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">ExclusionContradictsSubsetError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasExclusionContradictsSubsetError(SetComparisonConstraint source, ExclusionContradictsSubsetError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasExclusionContradictsSubsetError.ExclusionContradictsSubsetErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasExclusionContradictsSubsetError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasExclusionContradictsSubsetError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasExclusionContradictsSubsetError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasExclusionContradictsSubsetError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly new global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0x054006ac, 0x2b5a, 0x4084, 0xad, 0xfb, 0xdf, 0xfc, 0xce, 0xb1, 0x8b, 0x0d);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError/SetComparisonConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError/SetComparisonConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExclusionContradictsSubsetError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("054006ac-2b5a-4084-adfb-dffcceb18b0d")]
		public override SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraintCollection of a ExclusionContradictsSubsetError
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetComparisonConstraint> GetSetComparisonConstraintCollection(ExclusionContradictsSubsetError element)
		{
			return new DslModeling::LinkedElementCollection<SetComparisonConstraint>(element, ExclusionContradictsSubsetErrorDomainRoleId);
		}
		#endregion
		#region ExclusionContradictsSubsetError domain role code
		
		/// <summary>
		/// ExclusionContradictsSubsetError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExclusionContradictsSubsetErrorDomainRoleId = new global::System.Guid(0x94efa870, 0x8061, 0x41fb, 0x8d, 0x99, 0xfc, 0xdd, 0xba, 0xe7, 0xff, 0x54);
		
		/// <summary>
		/// DomainRole ExclusionContradictsSubsetError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.ExclusionContradictsSubsetError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError/ExclusionContradictsSubsetError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError/ExclusionContradictsSubsetError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError/ExclusionContradictsSubsetError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("94efa870-8061-41fb-8d99-fcddbae7ff54")]
		public virtual ExclusionContradictsSubsetError ExclusionContradictsSubsetError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExclusionContradictsSubsetError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExclusionContradictsSubsetErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExclusionContradictsSubsetErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExclusionContradictsSubsetError of a SetComparisonConstraint
		/// <summary>
		/// Gets ExclusionContradictsSubsetError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExclusionContradictsSubsetError GetExclusionContradictsSubsetError(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as ExclusionContradictsSubsetError;
		}
		
		/// <summary>
		/// Sets ExclusionContradictsSubsetError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExclusionContradictsSubsetError(SetComparisonConstraint element, ExclusionContradictsSubsetError newExclusionContradictsSubsetError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newExclusionContradictsSubsetError);
		}
		#endregion
		#region ContradictionError domain role override
		
		/// <summary>
		/// Gets the element playing ExclusionContradictsSubsetError domain role.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError.ContradictionError
		/// </summary>
		public override ContradictionError ContradictionError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ExclusionContradictsSubsetError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ExclusionContradictsSubsetError = (ExclusionContradictsSubsetError)value;
			}
		}
		
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasExclusionContradictsSubsetError link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError GetLinkToExclusionContradictsSubsetError (global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError>(setComparisonConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExclusionContradictsSubsetError link accessor
		/// <summary>
		/// Get the list of SetComparisonConstraintHasExclusionContradictsSubsetError links to a ExclusionContradictsSubsetError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError> GetLinksToSetComparisonConstraintCollection ( global::Neumont.Tools.ORM.ObjectModel.ExclusionContradictsSubsetError exclusionContradictsSubsetErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError>(exclusionContradictsSubsetErrorInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.ExclusionContradictsSubsetErrorDomainRoleId);
		}
		#endregion
		#region SetComparisonConstraintHasExclusionContradictsSubsetError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasExclusionContradictsSubsetError links between a given SetComparisonConstraint and a ExclusionContradictsSubsetError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.ExclusionContradictsSubsetError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError link in links )
			{
				if ( target.Equals(link.ExclusionContradictsSubsetError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasExclusionContradictsSubsetError link between a given SetComparisonConstraintand a ExclusionContradictsSubsetError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError GetLink( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.ExclusionContradictsSubsetError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError link in links )
			{
				if ( target.Equals(link.ExclusionContradictsSubsetError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ExclusionConstraintHasExclusionContradictsMandatoryError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e638e328-24a9-42c0-bbb1-f1ebc4b6e218")]
	public partial class ExclusionConstraintHasExclusionContradictsMandatoryError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExclusionConstraintHasExclusionContradictsMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe638e328, 0x24a9, 0x42c0, 0xbb, 0xb1, 0xf1, 0xeb, 0xc4, 0xb6, 0xe2, 0x18);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExclusionConstraintHasExclusionContradictsMandatoryError link in the same Partition as the given ExclusionConstraint
		/// </summary>
		/// <param name="source">ExclusionConstraint to use as the source of the relationship.</param>
		/// <param name="target">ExclusionContradictsMandatoryError to use as the target of the relationship.</param>
		public ExclusionConstraintHasExclusionContradictsMandatoryError(ExclusionConstraint source, ExclusionContradictsMandatoryError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExclusionConstraintHasExclusionContradictsMandatoryError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExclusionConstraintHasExclusionContradictsMandatoryError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExclusionConstraintHasExclusionContradictsMandatoryError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExclusionConstraintHasExclusionContradictsMandatoryError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExclusionConstraint domain role code
		
		/// <summary>
		/// ExclusionConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExclusionConstraintDomainRoleId = new global::System.Guid(0xdac3feeb, 0x4c79, 0x46bc, 0x87, 0x6f, 0x69, 0xce, 0xa0, 0xda, 0x8e, 0x7c);
		
		/// <summary>
		/// DomainRole ExclusionConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError/ExclusionConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError/ExclusionConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExclusionContradictsMandatoryError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError/ExclusionConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("dac3feeb-4c79-46bc-876f-69cea0da8e7c")]
		public virtual ExclusionConstraint ExclusionConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExclusionConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExclusionConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExclusionConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExclusionConstraint of a ExclusionContradictsMandatoryError
		/// <summary>
		/// Gets a list of ExclusionConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ExclusionConstraint> GetExclusionConstraint(ExclusionContradictsMandatoryError element)
		{
			return new DslModeling::LinkedElementCollection<ExclusionConstraint>(element, ExclusionContradictsMandatoryErrorDomainRoleId);
		}
		#endregion
		#region ExclusionContradictsMandatoryError domain role code
		
		/// <summary>
		/// ExclusionContradictsMandatoryError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExclusionContradictsMandatoryErrorDomainRoleId = new global::System.Guid(0x1d5f486e, 0x469d, 0x42b0, 0x88, 0x76, 0x55, 0x12, 0xcd, 0x22, 0xe8, 0x08);
		
		/// <summary>
		/// DomainRole ExclusionContradictsMandatoryError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError/ExclusionContradictsMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError/ExclusionContradictsMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExclusionConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError/ExclusionContradictsMandatoryError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("1d5f486e-469d-42b0-8876-5512cd22e808")]
		public virtual ExclusionContradictsMandatoryError ExclusionContradictsMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExclusionContradictsMandatoryError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExclusionContradictsMandatoryErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExclusionContradictsMandatoryErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExclusionContradictsMandatoryError of a ExclusionConstraint
		/// <summary>
		/// Gets ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExclusionContradictsMandatoryError GetExclusionContradictsMandatoryError(ExclusionConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ExclusionConstraintDomainRoleId) as ExclusionContradictsMandatoryError;
		}
		
		/// <summary>
		/// Sets ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExclusionContradictsMandatoryError(ExclusionConstraint element, ExclusionContradictsMandatoryError newExclusionContradictsMandatoryError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ExclusionConstraintDomainRoleId, newExclusionContradictsMandatoryError);
		}
		#endregion
		#region ExclusionConstraint link accessor
		/// <summary>
		/// Get the ExclusionConstraintHasExclusionContradictsMandatoryError link to a ExclusionConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError GetLinkToExclusionContradictsMandatoryError (global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraint exclusionConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError>(exclusionConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ExclusionConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExclusionContradictsMandatoryError link accessor
		/// <summary>
		/// Get the list of ExclusionConstraintHasExclusionContradictsMandatoryError links to a ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError> GetLinksToExclusionConstraint ( global::Neumont.Tools.ORM.ObjectModel.ExclusionContradictsMandatoryError exclusionContradictsMandatoryErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError>(exclusionContradictsMandatoryErrorInstance, global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryErrorDomainRoleId);
		}
		#endregion
		#region ExclusionConstraintHasExclusionContradictsMandatoryError instance accessors
		
		/// <summary>
		/// Get any ExclusionConstraintHasExclusionContradictsMandatoryError links between a given ExclusionConstraint and a ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraint source, global::Neumont.Tools.ORM.ObjectModel.ExclusionContradictsMandatoryError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError link in links )
			{
				if ( target.Equals(link.ExclusionContradictsMandatoryError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExclusionConstraintHasExclusionContradictsMandatoryError link between a given ExclusionConstraintand a ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError GetLink( global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraint source, global::Neumont.Tools.ORM.ObjectModel.ExclusionContradictsMandatoryError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError link in links )
			{
				if ( target.Equals(link.ExclusionContradictsMandatoryError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship MandatoryConstraintHasExclusionContradictsMandatoryError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6cdda5a5-c6fe-4e9b-9248-17512f9c891a")]
	public partial class MandatoryConstraintHasExclusionContradictsMandatoryError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MandatoryConstraintHasExclusionContradictsMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6cdda5a5, 0xc6fe, 0x4e9b, 0x92, 0x48, 0x17, 0x51, 0x2f, 0x9c, 0x89, 0x1a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MandatoryConstraintHasExclusionContradictsMandatoryError link in the same Partition as the given MandatoryConstraint
		/// </summary>
		/// <param name="source">MandatoryConstraint to use as the source of the relationship.</param>
		/// <param name="target">ExclusionContradictsMandatoryError to use as the target of the relationship.</param>
		public MandatoryConstraintHasExclusionContradictsMandatoryError(MandatoryConstraint source, ExclusionContradictsMandatoryError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraintDomainRoleId, source), new DslModeling::RoleAssignment(MandatoryConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MandatoryConstraintHasExclusionContradictsMandatoryError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MandatoryConstraintHasExclusionContradictsMandatoryError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MandatoryConstraintHasExclusionContradictsMandatoryError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MandatoryConstraintHasExclusionContradictsMandatoryError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MandatoryConstraint domain role code
		
		/// <summary>
		/// MandatoryConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryConstraintDomainRoleId = new global::System.Guid(0x7687a52f, 0x3510, 0x4d26, 0x86, 0x1d, 0x58, 0x9a, 0xe3, 0x42, 0x97, 0x90);
		
		/// <summary>
		/// DomainRole MandatoryConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError/MandatoryConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError/MandatoryConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExclusionContradictsMandatoryError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError/MandatoryConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7687a52f-3510-4d26-861d-589ae3429790")]
		public virtual MandatoryConstraint MandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MandatoryConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, MandatoryConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MandatoryConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MandatoryConstraint of a ExclusionContradictsMandatoryError
		/// <summary>
		/// Gets a list of MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MandatoryConstraint> GetMandatoryConstraint(ExclusionContradictsMandatoryError element)
		{
			return new DslModeling::LinkedElementCollection<MandatoryConstraint>(element, ExclusionContradictsMandatoryErrorDomainRoleId);
		}
		#endregion
		#region ExclusionContradictsMandatoryError domain role code
		
		/// <summary>
		/// ExclusionContradictsMandatoryError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExclusionContradictsMandatoryErrorDomainRoleId = new global::System.Guid(0x65aeac10, 0x914e, 0x46a1, 0x9c, 0x0b, 0x16, 0x53, 0xf4, 0x9a, 0x1a, 0xf3);
		
		/// <summary>
		/// DomainRole ExclusionContradictsMandatoryError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError/ExclusionContradictsMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError/ExclusionContradictsMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MandatoryConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError/ExclusionContradictsMandatoryError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("65aeac10-914e-46a1-9c0b-1653f49a1af3")]
		public virtual ExclusionContradictsMandatoryError ExclusionContradictsMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExclusionContradictsMandatoryError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExclusionContradictsMandatoryErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExclusionContradictsMandatoryErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExclusionContradictsMandatoryError of a MandatoryConstraint
		/// <summary>
		/// Gets ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExclusionContradictsMandatoryError GetExclusionContradictsMandatoryError(MandatoryConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MandatoryConstraintDomainRoleId) as ExclusionContradictsMandatoryError;
		}
		
		/// <summary>
		/// Sets ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExclusionContradictsMandatoryError(MandatoryConstraint element, ExclusionContradictsMandatoryError newExclusionContradictsMandatoryError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MandatoryConstraintDomainRoleId, newExclusionContradictsMandatoryError);
		}
		#endregion
		#region MandatoryConstraint link accessor
		/// <summary>
		/// Get the MandatoryConstraintHasExclusionContradictsMandatoryError link to a MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError GetLinkToExclusionContradictsMandatoryError (global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraint mandatoryConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError>(mandatoryConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MandatoryConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExclusionContradictsMandatoryError link accessor
		/// <summary>
		/// Get the list of MandatoryConstraintHasExclusionContradictsMandatoryError links to a ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError> GetLinksToMandatoryConstraint ( global::Neumont.Tools.ORM.ObjectModel.ExclusionContradictsMandatoryError exclusionContradictsMandatoryErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError>(exclusionContradictsMandatoryErrorInstance, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryErrorDomainRoleId);
		}
		#endregion
		#region MandatoryConstraintHasExclusionContradictsMandatoryError instance accessors
		
		/// <summary>
		/// Get any MandatoryConstraintHasExclusionContradictsMandatoryError links between a given MandatoryConstraint and a ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraint source, global::Neumont.Tools.ORM.ObjectModel.ExclusionContradictsMandatoryError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError link in links )
			{
				if ( target.Equals(link.ExclusionContradictsMandatoryError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MandatoryConstraintHasExclusionContradictsMandatoryError link between a given MandatoryConstraintand a ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError GetLink( global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraint source, global::Neumont.Tools.ORM.ObjectModel.ExclusionContradictsMandatoryError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError link in links )
			{
				if ( target.Equals(link.ExclusionContradictsMandatoryError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship SubsetConstraintHasNotWellModeledSubsetAndMandatoryError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4ba72b40-a736-49d4-9fde-8b07ee4a61a6")]
	public partial class SubsetConstraintHasNotWellModeledSubsetAndMandatoryError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubsetConstraintHasNotWellModeledSubsetAndMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4ba72b40, 0xa736, 0x49d4, 0x9f, 0xde, 0x8b, 0x07, 0xee, 0x4a, 0x61, 0xa6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubsetConstraintHasNotWellModeledSubsetAndMandatoryError link in the same Partition as the given SubsetConstraint
		/// </summary>
		/// <param name="source">SubsetConstraint to use as the source of the relationship.</param>
		/// <param name="target">NotWellModeledSubsetAndMandatoryError to use as the target of the relationship.</param>
		public SubsetConstraintHasNotWellModeledSubsetAndMandatoryError(SubsetConstraint source, NotWellModeledSubsetAndMandatoryError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubsetConstraintHasNotWellModeledSubsetAndMandatoryError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubsetConstraintHasNotWellModeledSubsetAndMandatoryError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubsetConstraintHasNotWellModeledSubsetAndMandatoryError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubsetConstraintHasNotWellModeledSubsetAndMandatoryError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SubsetConstraint domain role code
		
		/// <summary>
		/// SubsetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubsetConstraintDomainRoleId = new global::System.Guid(0x9dc05203, 0x7e4e, 0x485d, 0x9d, 0xd8, 0x35, 0xe8, 0x7a, 0x7b, 0x36, 0x7a);
		
		/// <summary>
		/// DomainRole SubsetConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError/SubsetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError/SubsetConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NotWellModeledSubsetAndMandatoryError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError/SubsetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9dc05203-7e4e-485d-9dd8-35e87a7b367a")]
		public virtual SubsetConstraint SubsetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubsetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubsetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubsetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubsetConstraint of a NotWellModeledSubsetAndMandatoryError
		/// <summary>
		/// Gets SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SubsetConstraint GetSubsetConstraint(NotWellModeledSubsetAndMandatoryError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NotWellModeledSubsetAndMandatoryErrorDomainRoleId) as SubsetConstraint;
		}
		
		/// <summary>
		/// Sets SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubsetConstraint(NotWellModeledSubsetAndMandatoryError element, SubsetConstraint newSubsetConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NotWellModeledSubsetAndMandatoryErrorDomainRoleId, newSubsetConstraint);
		}
		#endregion
		#region NotWellModeledSubsetAndMandatoryError domain role code
		
		/// <summary>
		/// NotWellModeledSubsetAndMandatoryError domain role Id.
		/// </summary>
		public static readonly global::System.Guid NotWellModeledSubsetAndMandatoryErrorDomainRoleId = new global::System.Guid(0xd48f7913, 0xb297, 0x4d19, 0x83, 0x3c, 0x81, 0x11, 0x94, 0xfa, 0xe9, 0xfa);
		
		/// <summary>
		/// DomainRole NotWellModeledSubsetAndMandatoryError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError/NotWellModeledSubsetAndMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError/NotWellModeledSubsetAndMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SubsetConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError/NotWellModeledSubsetAndMandatoryError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d48f7913-b297-4d19-833c-811194fae9fa")]
		public virtual NotWellModeledSubsetAndMandatoryError NotWellModeledSubsetAndMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NotWellModeledSubsetAndMandatoryError)DslModeling::DomainRoleInfo.GetRolePlayer(this, NotWellModeledSubsetAndMandatoryErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NotWellModeledSubsetAndMandatoryErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NotWellModeledSubsetAndMandatoryError of a SubsetConstraint
		/// <summary>
		/// Gets NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NotWellModeledSubsetAndMandatoryError GetNotWellModeledSubsetAndMandatoryError(SubsetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubsetConstraintDomainRoleId) as NotWellModeledSubsetAndMandatoryError;
		}
		
		/// <summary>
		/// Sets NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNotWellModeledSubsetAndMandatoryError(SubsetConstraint element, NotWellModeledSubsetAndMandatoryError newNotWellModeledSubsetAndMandatoryError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubsetConstraintDomainRoleId, newNotWellModeledSubsetAndMandatoryError);
		}
		#endregion
		#region SubsetConstraint link accessor
		/// <summary>
		/// Get the SubsetConstraintHasNotWellModeledSubsetAndMandatoryError link to a SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError GetLinkToNotWellModeledSubsetAndMandatoryError (global::Neumont.Tools.ORM.ObjectModel.SubsetConstraint subsetConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError>(subsetConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SubsetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NotWellModeledSubsetAndMandatoryError link accessor
		/// <summary>
		/// Get the SubsetConstraintHasNotWellModeledSubsetAndMandatoryError link to a NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError GetLinkToSubsetConstraint (global::Neumont.Tools.ORM.ObjectModel.NotWellModeledSubsetAndMandatoryError notWellModeledSubsetAndMandatoryErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError>(notWellModeledSubsetAndMandatoryErrorInstance, global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NotWellModeledSubsetAndMandatoryError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubsetConstraintHasNotWellModeledSubsetAndMandatoryError instance accessors
		
		/// <summary>
		/// Get any SubsetConstraintHasNotWellModeledSubsetAndMandatoryError links between a given SubsetConstraint and a NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.SubsetConstraint source, global::Neumont.Tools.ORM.ObjectModel.NotWellModeledSubsetAndMandatoryError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError link in links )
			{
				if ( target.Equals(link.NotWellModeledSubsetAndMandatoryError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubsetConstraintHasNotWellModeledSubsetAndMandatoryError link between a given SubsetConstraintand a NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError GetLink( global::Neumont.Tools.ORM.ObjectModel.SubsetConstraint source, global::Neumont.Tools.ORM.ObjectModel.NotWellModeledSubsetAndMandatoryError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError link in links )
			{
				if ( target.Equals(link.NotWellModeledSubsetAndMandatoryError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("475557a9-6e11-4d1c-a5a0-9d06daed3ee5")]
	public partial class MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x475557a9, 0x6e11, 0x4d1c, 0xa5, 0xa0, 0x9d, 0x06, 0xda, 0xed, 0x3e, 0xe5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError link in the same Partition as the given MandatoryConstraint
		/// </summary>
		/// <param name="source">MandatoryConstraint to use as the source of the relationship.</param>
		/// <param name="target">NotWellModeledSubsetAndMandatoryError to use as the target of the relationship.</param>
		public MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError(MandatoryConstraint source, NotWellModeledSubsetAndMandatoryError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId, source), new DslModeling::RoleAssignment(MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MandatoryConstraint domain role code
		
		/// <summary>
		/// MandatoryConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryConstraintDomainRoleId = new global::System.Guid(0x7d6bcce4, 0x5f44, 0x473a, 0xaa, 0x5d, 0x3e, 0xd9, 0x11, 0x5c, 0xd6, 0xc6);
		
		/// <summary>
		/// DomainRole MandatoryConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError/MandatoryConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError/MandatoryConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NotWellModeledSubsetAndMandatoryError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError/MandatoryConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7d6bcce4-5f44-473a-aa5d-3ed9115cd6c6")]
		public virtual MandatoryConstraint MandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MandatoryConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, MandatoryConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MandatoryConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MandatoryConstraint of a NotWellModeledSubsetAndMandatoryError
		/// <summary>
		/// Gets MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MandatoryConstraint GetMandatoryConstraint(NotWellModeledSubsetAndMandatoryError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NotWellModeledSubsetAndMandatoryErrorDomainRoleId) as MandatoryConstraint;
		}
		
		/// <summary>
		/// Sets MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMandatoryConstraint(NotWellModeledSubsetAndMandatoryError element, MandatoryConstraint newMandatoryConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NotWellModeledSubsetAndMandatoryErrorDomainRoleId, newMandatoryConstraint);
		}
		#endregion
		#region NotWellModeledSubsetAndMandatoryError domain role code
		
		/// <summary>
		/// NotWellModeledSubsetAndMandatoryError domain role Id.
		/// </summary>
		public static readonly global::System.Guid NotWellModeledSubsetAndMandatoryErrorDomainRoleId = new global::System.Guid(0x1d06c86d, 0xf4d2, 0x4d52, 0x94, 0xcb, 0x05, 0xb0, 0x62, 0x5b, 0x5a, 0xa0);
		
		/// <summary>
		/// DomainRole NotWellModeledSubsetAndMandatoryError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError/NotWellModeledSubsetAndMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError/NotWellModeledSubsetAndMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MandatoryConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError/NotWellModeledSubsetAndMandatoryError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1d06c86d-f4d2-4d52-94cb-05b0625b5aa0")]
		public virtual NotWellModeledSubsetAndMandatoryError NotWellModeledSubsetAndMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NotWellModeledSubsetAndMandatoryError)DslModeling::DomainRoleInfo.GetRolePlayer(this, NotWellModeledSubsetAndMandatoryErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NotWellModeledSubsetAndMandatoryErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NotWellModeledSubsetAndMandatoryError of a MandatoryConstraint
		/// <summary>
		/// Gets NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NotWellModeledSubsetAndMandatoryError GetNotWellModeledSubsetAndMandatoryError(MandatoryConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MandatoryConstraintDomainRoleId) as NotWellModeledSubsetAndMandatoryError;
		}
		
		/// <summary>
		/// Sets NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNotWellModeledSubsetAndMandatoryError(MandatoryConstraint element, NotWellModeledSubsetAndMandatoryError newNotWellModeledSubsetAndMandatoryError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MandatoryConstraintDomainRoleId, newNotWellModeledSubsetAndMandatoryError);
		}
		#endregion
		#region MandatoryConstraint link accessor
		/// <summary>
		/// Get the MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError link to a MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError GetLinkToNotWellModeledSubsetAndMandatoryError (global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraint mandatoryConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError>(mandatoryConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MandatoryConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NotWellModeledSubsetAndMandatoryError link accessor
		/// <summary>
		/// Get the MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError link to a NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError GetLinkToMandatoryConstraint (global::Neumont.Tools.ORM.ObjectModel.NotWellModeledSubsetAndMandatoryError notWellModeledSubsetAndMandatoryErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError>(notWellModeledSubsetAndMandatoryErrorInstance, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NotWellModeledSubsetAndMandatoryError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError instance accessors
		
		/// <summary>
		/// Get any MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError links between a given MandatoryConstraint and a NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraint source, global::Neumont.Tools.ORM.ObjectModel.NotWellModeledSubsetAndMandatoryError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError link in links )
			{
				if ( target.Equals(link.NotWellModeledSubsetAndMandatoryError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError link between a given MandatoryConstraintand a NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError GetLink( global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraint source, global::Neumont.Tools.ORM.ObjectModel.NotWellModeledSubsetAndMandatoryError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError link in links )
			{
				if ( target.Equals(link.NotWellModeledSubsetAndMandatoryError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship MandatoryConstraintHasPopulationMandatoryError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9a93dd53-8683-47f4-9ee7-4f1f244a218e")]
	public partial class MandatoryConstraintHasPopulationMandatoryError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MandatoryConstraintHasPopulationMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9a93dd53, 0x8683, 0x47f4, 0x9e, 0xe7, 0x4f, 0x1f, 0x24, 0x4a, 0x21, 0x8e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MandatoryConstraintHasPopulationMandatoryError link in the same Partition as the given ConstraintRoleSequence
		/// </summary>
		/// <param name="source">ConstraintRoleSequence to use as the source of the relationship.</param>
		/// <param name="target">PopulationMandatoryError to use as the target of the relationship.</param>
		public MandatoryConstraintHasPopulationMandatoryError(ConstraintRoleSequence source, PopulationMandatoryError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MandatoryConstraintHasPopulationMandatoryError.MandatoryConstraintDomainRoleId, source), new DslModeling::RoleAssignment(MandatoryConstraintHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MandatoryConstraintHasPopulationMandatoryError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MandatoryConstraintHasPopulationMandatoryError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MandatoryConstraintHasPopulationMandatoryError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MandatoryConstraintHasPopulationMandatoryError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MandatoryConstraint domain role code
		
		/// <summary>
		/// MandatoryConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryConstraintDomainRoleId = new global::System.Guid(0xaf065878, 0x27b3, 0x456a, 0x9c, 0xd4, 0xe1, 0xb8, 0x1d, 0xff, 0xad, 0x2d);
		
		/// <summary>
		/// DomainRole MandatoryConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.MandatoryConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError/MandatoryConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError/MandatoryConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PopulationMandatoryErrorCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError/MandatoryConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("af065878-27b3-456a-9cd4-e1b81dffad2d")]
		public virtual ConstraintRoleSequence MandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequence)DslModeling::DomainRoleInfo.GetRolePlayer(this, MandatoryConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MandatoryConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MandatoryConstraint of a PopulationMandatoryError
		/// <summary>
		/// Gets MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintRoleSequence GetMandatoryConstraint(PopulationMandatoryError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PopulationMandatoryErrorDomainRoleId) as ConstraintRoleSequence;
		}
		
		/// <summary>
		/// Sets MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMandatoryConstraint(PopulationMandatoryError element, ConstraintRoleSequence newMandatoryConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PopulationMandatoryErrorDomainRoleId, newMandatoryConstraint);
		}
		#endregion
		#region PopulationMandatoryError domain role code
		
		/// <summary>
		/// PopulationMandatoryError domain role Id.
		/// </summary>
		public static readonly global::System.Guid PopulationMandatoryErrorDomainRoleId = new global::System.Guid(0x35ec4e97, 0x2248, 0x4aa0, 0x85, 0xaf, 0x08, 0x91, 0xed, 0xb7, 0x80, 0x3b);
		
		/// <summary>
		/// DomainRole PopulationMandatoryError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.PopulationMandatoryError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError/PopulationMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError/PopulationMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MandatoryConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError/PopulationMandatoryError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("35ec4e97-2248-4aa0-85af-0891edb7803b")]
		public virtual PopulationMandatoryError PopulationMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PopulationMandatoryError)DslModeling::DomainRoleInfo.GetRolePlayer(this, PopulationMandatoryErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PopulationMandatoryErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PopulationMandatoryErrorCollection of a ConstraintRoleSequence
		/// <summary>
		/// Gets a list of PopulationMandatoryErrorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PopulationMandatoryError> GetPopulationMandatoryErrorCollection(ConstraintRoleSequence element)
		{
			return new DslModeling::LinkedElementCollection<PopulationMandatoryError>(element, MandatoryConstraintDomainRoleId);
		}
		#endregion
		#region MandatoryConstraint link accessor
		/// <summary>
		/// Get the list of MandatoryConstraintHasPopulationMandatoryError links to a ConstraintRoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError> GetLinksToPopulationMandatoryErrorCollection ( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence mandatoryConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError>(mandatoryConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.MandatoryConstraintDomainRoleId);
		}
		#endregion
		#region PopulationMandatoryError link accessor
		/// <summary>
		/// Get the MandatoryConstraintHasPopulationMandatoryError link to a PopulationMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError GetLinkToMandatoryConstraint (global::Neumont.Tools.ORM.ObjectModel.PopulationMandatoryError populationMandatoryErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError>(populationMandatoryErrorInstance, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PopulationMandatoryError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MandatoryConstraintHasPopulationMandatoryError instance accessors
		
		/// <summary>
		/// Get any MandatoryConstraintHasPopulationMandatoryError links between a given ConstraintRoleSequence and a PopulationMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence source, global::Neumont.Tools.ORM.ObjectModel.PopulationMandatoryError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.MandatoryConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError link in links )
			{
				if ( target.Equals(link.PopulationMandatoryError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MandatoryConstraintHasPopulationMandatoryError link between a given ConstraintRoleSequenceand a PopulationMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError GetLink( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence source, global::Neumont.Tools.ORM.ObjectModel.PopulationMandatoryError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.MandatoryConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError link in links )
			{
				if ( target.Equals(link.PopulationMandatoryError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeInstanceHasPopulationMandatoryError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e0f0750e-47cb-44c6-b348-a9a1101475a7")]
	public partial class ObjectTypeInstanceHasPopulationMandatoryError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeInstanceHasPopulationMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe0f0750e, 0x47cb, 0x44c6, 0xb3, 0x48, 0xa9, 0xa1, 0x10, 0x14, 0x75, 0xa7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeInstanceHasPopulationMandatoryError link in the same Partition as the given ObjectTypeInstance
		/// </summary>
		/// <param name="source">ObjectTypeInstance to use as the source of the relationship.</param>
		/// <param name="target">PopulationMandatoryError to use as the target of the relationship.</param>
		public ObjectTypeInstanceHasPopulationMandatoryError(ObjectTypeInstance source, PopulationMandatoryError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeInstanceHasPopulationMandatoryError.ObjectTypeInstanceDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeInstanceHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeInstanceHasPopulationMandatoryError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeInstanceHasPopulationMandatoryError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeInstanceHasPopulationMandatoryError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeInstanceHasPopulationMandatoryError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectTypeInstance domain role code
		
		/// <summary>
		/// ObjectTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeInstanceDomainRoleId = new global::System.Guid(0x4a0b3b52, 0xb579, 0x4e07, 0x97, 0x2c, 0x59, 0xf4, 0xf9, 0x8b, 0xea, 0xc3);
		
		/// <summary>
		/// DomainRole ObjectTypeInstance
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.ObjectTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError/ObjectTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError/ObjectTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PopulationMandatoryErrorCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError/ObjectTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4a0b3b52-b579-4e07-972c-59f4f98beac3")]
		public virtual ObjectTypeInstance ObjectTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectTypeInstance of a PopulationMandatoryError
		/// <summary>
		/// Gets ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectTypeInstance GetObjectTypeInstance(PopulationMandatoryError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PopulationMandatoryErrorDomainRoleId) as ObjectTypeInstance;
		}
		
		/// <summary>
		/// Sets ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectTypeInstance(PopulationMandatoryError element, ObjectTypeInstance newObjectTypeInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PopulationMandatoryErrorDomainRoleId, newObjectTypeInstance);
		}
		#endregion
		#region PopulationMandatoryError domain role code
		
		/// <summary>
		/// PopulationMandatoryError domain role Id.
		/// </summary>
		public static readonly global::System.Guid PopulationMandatoryErrorDomainRoleId = new global::System.Guid(0x078cf514, 0x9f4c, 0x44c2, 0x91, 0x73, 0x3a, 0x5f, 0x3e, 0xdf, 0xaf, 0xcb);
		
		/// <summary>
		/// DomainRole PopulationMandatoryError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.PopulationMandatoryError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError/PopulationMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError/PopulationMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectTypeInstance", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError/PopulationMandatoryError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("078cf514-9f4c-44c2-9173-3a5f3edfafcb")]
		public virtual PopulationMandatoryError PopulationMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PopulationMandatoryError)DslModeling::DomainRoleInfo.GetRolePlayer(this, PopulationMandatoryErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PopulationMandatoryErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PopulationMandatoryErrorCollection of a ObjectTypeInstance
		/// <summary>
		/// Gets a list of PopulationMandatoryErrorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PopulationMandatoryError> GetPopulationMandatoryErrorCollection(ObjectTypeInstance element)
		{
			return new DslModeling::LinkedElementCollection<PopulationMandatoryError>(element, ObjectTypeInstanceDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance link accessor
		/// <summary>
		/// Get the list of ObjectTypeInstanceHasPopulationMandatoryError links to a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError> GetLinksToPopulationMandatoryErrorCollection ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstance objectTypeInstanceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError>(objectTypeInstanceInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.ObjectTypeInstanceDomainRoleId);
		}
		#endregion
		#region PopulationMandatoryError link accessor
		/// <summary>
		/// Get the ObjectTypeInstanceHasPopulationMandatoryError link to a PopulationMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError GetLinkToObjectTypeInstance (global::Neumont.Tools.ORM.ObjectModel.PopulationMandatoryError populationMandatoryErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError>(populationMandatoryErrorInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PopulationMandatoryError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectTypeInstanceHasPopulationMandatoryError instance accessors
		
		/// <summary>
		/// Get any ObjectTypeInstanceHasPopulationMandatoryError links between a given ObjectTypeInstance and a PopulationMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstance source, global::Neumont.Tools.ORM.ObjectModel.PopulationMandatoryError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.ObjectTypeInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError link in links )
			{
				if ( target.Equals(link.PopulationMandatoryError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeInstanceHasPopulationMandatoryError link between a given ObjectTypeInstanceand a PopulationMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError GetLink( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstance source, global::Neumont.Tools.ORM.ObjectModel.PopulationMandatoryError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.ObjectTypeInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError link in links )
			{
				if ( target.Equals(link.PopulationMandatoryError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ReadingOrderHasReading
	/// Description for Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f945750f-2f77-43f4-8314-e5b351913902")]
	public partial class ReadingOrderHasReading : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReadingOrderHasReading domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf945750f, 0x2f77, 0x43f4, 0x83, 0x14, 0xe5, 0xb3, 0x51, 0x91, 0x39, 0x02);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReadingOrderHasReading link in the same Partition as the given ReadingOrder
		/// </summary>
		/// <param name="source">ReadingOrder to use as the source of the relationship.</param>
		/// <param name="target">Reading to use as the target of the relationship.</param>
		public ReadingOrderHasReading(ReadingOrder source, Reading target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReadingOrderHasReading.ReadingOrderDomainRoleId, source), new DslModeling::RoleAssignment(ReadingOrderHasReading.ReadingDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingOrderHasReading(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingOrderHasReading(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingOrderHasReading(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingOrderHasReading(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ReadingOrder domain role code
		
		/// <summary>
		/// ReadingOrder domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReadingOrderDomainRoleId = new global::System.Guid(0x02c96e32, 0x5a2a, 0x4cfc, 0xab, 0x29, 0xdf, 0x81, 0xb4, 0x0f, 0xf0, 0xce);
		
		/// <summary>
		/// DomainRole ReadingOrder
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrder
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading/ReadingOrder.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading/ReadingOrder.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReadingCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading/ReadingOrder.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("02c96e32-5a2a-4cfc-ab29-df81b40ff0ce")]
		public virtual ReadingOrder ReadingOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReadingOrder)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReadingOrderDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReadingOrderDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReadingOrder of a Reading
		/// <summary>
		/// Gets ReadingOrder.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ReadingOrder GetReadingOrder(Reading element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReadingDomainRoleId) as ReadingOrder;
		}
		
		/// <summary>
		/// Sets ReadingOrder.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReadingOrder(Reading element, ReadingOrder newReadingOrder)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReadingDomainRoleId, newReadingOrder);
		}
		#endregion
		#region Reading domain role code
		
		/// <summary>
		/// Reading domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReadingDomainRoleId = new global::System.Guid(0xdb4abbcb, 0xfcf0, 0x43c9, 0x94, 0xe5, 0xae, 0x45, 0x8b, 0xa6, 0xee, 0x03);
		
		/// <summary>
		/// DomainRole Reading
		/// Description for Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.Reading
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading/Reading.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading/Reading.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReadingOrder", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading/Reading.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("db4abbcb-fcf0-43c9-94e5-ae458ba6ee03")]
		public virtual Reading Reading
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Reading)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReadingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReadingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReadingCollection of a ReadingOrder
		/// <summary>
		/// Gets a list of ReadingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Reading> GetReadingCollection(ReadingOrder element)
		{
			return new DslModeling::LinkedElementCollection<Reading>(element, ReadingOrderDomainRoleId);
		}
		#endregion
		#region ReadingOrder link accessor
		/// <summary>
		/// Get the list of ReadingOrderHasReading links to a ReadingOrder.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading> GetLinksToReadingCollection ( global::Neumont.Tools.ORM.ObjectModel.ReadingOrder readingOrderInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading>(readingOrderInstance, global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderDomainRoleId);
		}
		#endregion
		#region Reading link accessor
		/// <summary>
		/// Get the ReadingOrderHasReading link to a Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading GetLinkToReadingOrder (global::Neumont.Tools.ORM.ObjectModel.Reading readingInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading>(readingInstance, global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Reading not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReadingOrderHasReading instance accessors
		
		/// <summary>
		/// Get any ReadingOrderHasReading links between a given ReadingOrder and a Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ReadingOrder source, global::Neumont.Tools.ORM.ObjectModel.Reading target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading>(source, global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading link in links )
			{
				if ( target.Equals(link.Reading) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReadingOrderHasReading link between a given ReadingOrderand a Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading GetLink( global::Neumont.Tools.ORM.ObjectModel.ReadingOrder source, global::Neumont.Tools.ORM.ObjectModel.Reading target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading>(source, global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading link in links )
			{
				if ( target.Equals(link.Reading) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasReadingOrder
	/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("14c7d6cb-0c30-4326-a877-d3aee7a9fadf")]
	public partial class FactTypeHasReadingOrder : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasReadingOrder domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x14c7d6cb, 0x0c30, 0x4326, 0xa8, 0x77, 0xd3, 0xae, 0xe7, 0xa9, 0xfa, 0xdf);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasReadingOrder link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">ReadingOrder to use as the target of the relationship.</param>
		public FactTypeHasReadingOrder(FactType source, ReadingOrder target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasReadingOrder.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasReadingOrder.ReadingOrderDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasReadingOrder(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasReadingOrder(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasReadingOrder(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasReadingOrder(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xd77a6514, 0xb8f0, 0x4c0c, 0xb8, 0x56, 0xee, 0x74, 0xdb, 0xbc, 0x1c, 0x41);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder/FactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder/FactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReadingOrderCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d77a6514-b8f0-4c0c-b856-ee74dbbc1c41")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a ReadingOrder
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(ReadingOrder element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReadingOrderDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(ReadingOrder element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReadingOrderDomainRoleId, newFactType);
		}
		#endregion
		#region ReadingOrder domain role code
		
		/// <summary>
		/// ReadingOrder domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReadingOrderDomainRoleId = new global::System.Guid(0x53267e0c, 0xc487, 0x4cb6, 0xb2, 0xfd, 0x98, 0x0c, 0xa3, 0x0f, 0xfe, 0x99);
		
		/// <summary>
		/// DomainRole ReadingOrder
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrder
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder/ReadingOrder.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder/ReadingOrder.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder/ReadingOrder.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("53267e0c-c487-4cb6-b2fd-980ca30ffe99")]
		public virtual ReadingOrder ReadingOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReadingOrder)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReadingOrderDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReadingOrderDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReadingOrderCollection of a FactType
		/// <summary>
		/// Gets a list of ReadingOrderCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReadingOrder> GetReadingOrderCollection(FactType element)
		{
			return new DslModeling::LinkedElementCollection<ReadingOrder>(element, FactTypeDomainRoleId);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the list of FactTypeHasReadingOrder links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder> GetLinksToReadingOrderCollection ( global::Neumont.Tools.ORM.ObjectModel.FactType factTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder>(factTypeInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeDomainRoleId);
		}
		#endregion
		#region ReadingOrder link accessor
		/// <summary>
		/// Get the FactTypeHasReadingOrder link to a ReadingOrder.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder GetLinkToFactType (global::Neumont.Tools.ORM.ObjectModel.ReadingOrder readingOrderInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder>(readingOrderInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReadingOrder not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasReadingOrder instance accessors
		
		/// <summary>
		/// Get any FactTypeHasReadingOrder links between a given FactType and a ReadingOrder.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder> GetLinks( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.ReadingOrder target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder link in links )
			{
				if ( target.Equals(link.ReadingOrder) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasReadingOrder link between a given FactTypeand a ReadingOrder.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder GetLink( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.ReadingOrder target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder link in links )
			{
				if ( target.Equals(link.ReadingOrder) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ReferenceModeHasReferenceModeKind
	/// Description for Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8b022051-e094-435e-b985-688ffc89dc6d")]
	public partial class ReferenceModeHasReferenceModeKind : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReferenceModeHasReferenceModeKind domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8b022051, 0xe094, 0x435e, 0xb9, 0x85, 0x68, 0x8f, 0xfc, 0x89, 0xdc, 0x6d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReferenceModeHasReferenceModeKind link in the same Partition as the given ReferenceMode
		/// </summary>
		/// <param name="source">ReferenceMode to use as the source of the relationship.</param>
		/// <param name="target">ReferenceModeKind to use as the target of the relationship.</param>
		public ReferenceModeHasReferenceModeKind(ReferenceMode source, ReferenceModeKind target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReferenceModeHasReferenceModeKind.ReferenceModeDomainRoleId, source), new DslModeling::RoleAssignment(ReferenceModeHasReferenceModeKind.KindDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReferenceModeHasReferenceModeKind(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReferenceModeHasReferenceModeKind(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReferenceModeHasReferenceModeKind(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReferenceModeHasReferenceModeKind(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ReferenceMode domain role code
		
		/// <summary>
		/// ReferenceMode domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceModeDomainRoleId = new global::System.Guid(0x67f35299, 0xd67f, 0x4ae2, 0x91, 0x59, 0xe5, 0xef, 0xf1, 0xff, 0x85, 0x44);
		
		/// <summary>
		/// DomainRole ReferenceMode
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceMode
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind/ReferenceMode.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind/ReferenceMode.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Kind", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind/ReferenceMode.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("67f35299-d67f-4ae2-9159-e5eff1ff8544")]
		public virtual ReferenceMode ReferenceMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceMode)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceModeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceModeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceModeCollection of a ReferenceModeKind
		/// <summary>
		/// Gets a list of ReferenceModeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReferenceMode> GetReferenceModeCollection(ReferenceModeKind element)
		{
			return new DslModeling::LinkedElementCollection<ReferenceMode>(element, KindDomainRoleId);
		}
		#endregion
		#region Kind domain role code
		
		/// <summary>
		/// Kind domain role Id.
		/// </summary>
		public static readonly global::System.Guid KindDomainRoleId = new global::System.Guid(0xcd7ed96f, 0xddb9, 0x4242, 0x94, 0xcf, 0xb1, 0x02, 0x55, 0x82, 0x2f, 0x66);
		
		/// <summary>
		/// DomainRole Kind
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.Kind
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind/Kind.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind/Kind.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferenceModeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind/Kind.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cd7ed96f-ddb9-4242-94cf-b10255822f66")]
		public virtual ReferenceModeKind Kind
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceModeKind)DslModeling::DomainRoleInfo.GetRolePlayer(this, KindDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, KindDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Kind of a ReferenceMode
		/// <summary>
		/// Gets Kind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ReferenceModeKind GetKind(ReferenceMode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceModeDomainRoleId) as ReferenceModeKind;
		}
		
		/// <summary>
		/// Sets Kind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetKind(ReferenceMode element, ReferenceModeKind newKind)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceModeDomainRoleId, newKind);
		}
		#endregion
		#region ReferenceMode link accessor
		/// <summary>
		/// Get the ReferenceModeHasReferenceModeKind link to a ReferenceMode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind GetLinkToKind (global::Neumont.Tools.ORM.ObjectModel.ReferenceMode referenceModeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind>(referenceModeInstance, global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceMode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Kind link accessor
		/// <summary>
		/// Get the list of ReferenceModeHasReferenceModeKind links to a ReferenceModeKind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind> GetLinksToReferenceModeCollection ( global::Neumont.Tools.ORM.ObjectModel.ReferenceModeKind kindInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind>(kindInstance, global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.KindDomainRoleId);
		}
		#endregion
		#region ReferenceModeHasReferenceModeKind instance accessors
		
		/// <summary>
		/// Get any ReferenceModeHasReferenceModeKind links between a given ReferenceMode and a ReferenceModeKind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ReferenceMode source, global::Neumont.Tools.ORM.ObjectModel.ReferenceModeKind target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind>(source, global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind link in links )
			{
				if ( target.Equals(link.Kind) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReferenceModeHasReferenceModeKind link between a given ReferenceModeand a ReferenceModeKind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind GetLink( global::Neumont.Tools.ORM.ObjectModel.ReferenceMode source, global::Neumont.Tools.ORM.ObjectModel.ReferenceModeKind target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind>(source, global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind link in links )
			{
				if ( target.Equals(link.Kind) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetConstraintHasDuplicateNameError
	/// Description for Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("cb5df90f-3917-4bd1-9807-a24f6d7c52f9")]
	public partial class SetConstraintHasDuplicateNameError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetConstraintHasDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcb5df90f, 0x3917, 0x4bd1, 0x98, 0x07, 0xa2, 0x4f, 0x6d, 0x7c, 0x52, 0xf9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetConstraintHasDuplicateNameError link in the same Partition as the given SetConstraint
		/// </summary>
		/// <param name="source">SetConstraint to use as the source of the relationship.</param>
		/// <param name="target">ConstraintDuplicateNameError to use as the target of the relationship.</param>
		public SetConstraintHasDuplicateNameError(SetConstraint source, ConstraintDuplicateNameError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetConstraintHasDuplicateNameError.SetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasDuplicateNameError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasDuplicateNameError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasDuplicateNameError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasDuplicateNameError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetConstraint domain role code
		
		/// <summary>
		/// SetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetConstraintDomainRoleId = new global::System.Guid(0xb4623963, 0x690d, 0x4687, 0xa9, 0x5e, 0x0f, 0xc9, 0x98, 0xaa, 0x59, 0xec);
		
		/// <summary>
		/// DomainRole SetConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError/SetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError/SetConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DuplicateNameError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError/SetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b4623963-690d-4687-a95e-0fc998aa59ec")]
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraintCollection of a ConstraintDuplicateNameError
		/// <summary>
		/// Gets a list of SetConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetConstraint> GetSetConstraintCollection(ConstraintDuplicateNameError element)
		{
			return new DslModeling::LinkedElementCollection<SetConstraint>(element, DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region DuplicateNameError domain role code
		
		/// <summary>
		/// DuplicateNameError domain role Id.
		/// </summary>
		public static readonly global::System.Guid DuplicateNameErrorDomainRoleId = new global::System.Guid(0x250acf2e, 0x45f0, 0x48b9, 0x84, 0x29, 0x21, 0x85, 0x9d, 0xcb, 0x70, 0x1c);
		
		/// <summary>
		/// DomainRole DuplicateNameError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.DuplicateNameError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError/DuplicateNameError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError/DuplicateNameError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError/DuplicateNameError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("250acf2e-45f0-48b9-8429-21859dcb701c")]
		public virtual ConstraintDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintDuplicateNameError)DslModeling::DomainRoleInfo.GetRolePlayer(this, DuplicateNameErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DuplicateNameErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DuplicateNameError of a SetConstraint
		/// <summary>
		/// Gets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintDuplicateNameError GetDuplicateNameError(SetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetConstraintDomainRoleId) as ConstraintDuplicateNameError;
		}
		
		/// <summary>
		/// Sets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDuplicateNameError(SetConstraint element, ConstraintDuplicateNameError newDuplicateNameError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetConstraintDomainRoleId, newDuplicateNameError);
		}
		#endregion
		#region SetConstraint link accessor
		/// <summary>
		/// Get the SetConstraintHasDuplicateNameError link to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError GetLinkToDuplicateNameError (global::Neumont.Tools.ORM.ObjectModel.SetConstraint setConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError>(setConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DuplicateNameError link accessor
		/// <summary>
		/// Get the list of SetConstraintHasDuplicateNameError links to a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError> GetLinksToSetConstraintCollection ( global::Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError duplicateNameErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError>(duplicateNameErrorInstance, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region SetConstraintHasDuplicateNameError instance accessors
		
		/// <summary>
		/// Get any SetConstraintHasDuplicateNameError links between a given SetConstraint and a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.SetConstraint source, global::Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError>(source, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetConstraintHasDuplicateNameError link between a given SetConstraintand a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError GetLink( global::Neumont.Tools.ORM.ObjectModel.SetConstraint source, global::Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError>(source, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasDuplicateNameError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("cf7af531-f3d3-42e4-a9f7-d44536da9e53")]
	public partial class SetComparisonConstraintHasDuplicateNameError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcf7af531, 0xf3d3, 0x42e4, 0xa9, 0xf7, 0xd4, 0x45, 0x36, 0xda, 0x9e, 0x53);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasDuplicateNameError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">ConstraintDuplicateNameError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasDuplicateNameError(SetComparisonConstraint source, ConstraintDuplicateNameError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasDuplicateNameError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasDuplicateNameError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasDuplicateNameError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasDuplicateNameError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0x86a9cb44, 0x0050, 0x4e7c, 0x9d, 0xf5, 0x69, 0x2f, 0x98, 0x0f, 0x96, 0xec);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError/SetComparisonConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError/SetComparisonConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DuplicateNameError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("86a9cb44-0050-4e7c-9df5-692f980f96ec")]
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraintCollection of a ConstraintDuplicateNameError
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetComparisonConstraint> GetSetComparisonConstraintCollection(ConstraintDuplicateNameError element)
		{
			return new DslModeling::LinkedElementCollection<SetComparisonConstraint>(element, DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region DuplicateNameError domain role code
		
		/// <summary>
		/// DuplicateNameError domain role Id.
		/// </summary>
		public static readonly global::System.Guid DuplicateNameErrorDomainRoleId = new global::System.Guid(0x1711998f, 0x52c3, 0x4bc4, 0x9f, 0x95, 0x02, 0x58, 0x9c, 0x1b, 0x30, 0x1e);
		
		/// <summary>
		/// DomainRole DuplicateNameError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DuplicateNameError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError/DuplicateNameError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError/DuplicateNameError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError/DuplicateNameError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("1711998f-52c3-4bc4-9f95-02589c1b301e")]
		public virtual ConstraintDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintDuplicateNameError)DslModeling::DomainRoleInfo.GetRolePlayer(this, DuplicateNameErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DuplicateNameErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DuplicateNameError of a SetComparisonConstraint
		/// <summary>
		/// Gets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintDuplicateNameError GetDuplicateNameError(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as ConstraintDuplicateNameError;
		}
		
		/// <summary>
		/// Sets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDuplicateNameError(SetComparisonConstraint element, ConstraintDuplicateNameError newDuplicateNameError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newDuplicateNameError);
		}
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasDuplicateNameError link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError GetLinkToDuplicateNameError (global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError>(setComparisonConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DuplicateNameError link accessor
		/// <summary>
		/// Get the list of SetComparisonConstraintHasDuplicateNameError links to a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError> GetLinksToSetComparisonConstraintCollection ( global::Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError duplicateNameErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError>(duplicateNameErrorInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region SetComparisonConstraintHasDuplicateNameError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasDuplicateNameError links between a given SetComparisonConstraint and a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasDuplicateNameError link between a given SetComparisonConstraintand a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError GetLink( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship EntityTypeHasPreferredIdentifier
	/// Description for Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8ff87866-8213-4a03-85a8-b0275a265793")]
	public partial class EntityTypeHasPreferredIdentifier : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeHasPreferredIdentifier domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8ff87866, 0x8213, 0x4a03, 0x85, 0xa8, 0xb0, 0x27, 0x5a, 0x26, 0x57, 0x93);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeHasPreferredIdentifier link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">UniquenessConstraint to use as the target of the relationship.</param>
		public EntityTypeHasPreferredIdentifier(ObjectType source, UniquenessConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeHasPreferredIdentifier.PreferredIdentifierDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasPreferredIdentifier(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasPreferredIdentifier(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasPreferredIdentifier(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasPreferredIdentifier(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PreferredIdentifierFor domain role code
		
		/// <summary>
		/// PreferredIdentifierFor domain role Id.
		/// </summary>
		public static readonly global::System.Guid PreferredIdentifierForDomainRoleId = new global::System.Guid(0x04d998ee, 0x030e, 0x4a81, 0x88, 0xbc, 0x66, 0x6c, 0xe4, 0xef, 0xb3, 0xed);
		
		/// <summary>
		/// DomainRole PreferredIdentifierFor
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierFor
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier/PreferredIdentifierFor.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier/PreferredIdentifierFor.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PreferredIdentifier", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier/PreferredIdentifierFor.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("04d998ee-030e-4a81-88bc-666ce4efb3ed")]
		public virtual ObjectType PreferredIdentifierFor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, PreferredIdentifierForDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PreferredIdentifierForDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PreferredIdentifierFor of a UniquenessConstraint
		/// <summary>
		/// Gets PreferredIdentifierFor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetPreferredIdentifierFor(UniquenessConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PreferredIdentifierDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets PreferredIdentifierFor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPreferredIdentifierFor(UniquenessConstraint element, ObjectType newPreferredIdentifierFor)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PreferredIdentifierDomainRoleId, newPreferredIdentifierFor);
		}
		#endregion
		#region PreferredIdentifier domain role code
		
		/// <summary>
		/// PreferredIdentifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid PreferredIdentifierDomainRoleId = new global::System.Guid(0x6195ce84, 0x7ca8, 0x4e13, 0xb8, 0xc8, 0x24, 0x43, 0x8e, 0x2c, 0xf3, 0x00);
		
		/// <summary>
		/// DomainRole PreferredIdentifier
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifier
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier/PreferredIdentifier.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier/PreferredIdentifier.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PreferredIdentifierFor", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier/PreferredIdentifier.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6195ce84-7ca8-4e13-b8c8-24438e2cf300")]
		public virtual UniquenessConstraint PreferredIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UniquenessConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, PreferredIdentifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PreferredIdentifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PreferredIdentifier of a ObjectType
		/// <summary>
		/// Gets PreferredIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static UniquenessConstraint GetPreferredIdentifier(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PreferredIdentifierForDomainRoleId) as UniquenessConstraint;
		}
		
		/// <summary>
		/// Sets PreferredIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPreferredIdentifier(ObjectType element, UniquenessConstraint newPreferredIdentifier)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PreferredIdentifierForDomainRoleId, newPreferredIdentifier);
		}
		#endregion
		#region PreferredIdentifierFor link accessor
		/// <summary>
		/// Get the EntityTypeHasPreferredIdentifier link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier GetLinkToPreferredIdentifier (global::Neumont.Tools.ORM.ObjectModel.ObjectType preferredIdentifierForInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier>(preferredIdentifierForInstance, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PreferredIdentifierFor not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PreferredIdentifier link accessor
		/// <summary>
		/// Get the EntityTypeHasPreferredIdentifier link to a UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier GetLinkToPreferredIdentifierFor (global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraint preferredIdentifierInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier>(preferredIdentifierInstance, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PreferredIdentifier not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityTypeHasPreferredIdentifier instance accessors
		
		/// <summary>
		/// Get any EntityTypeHasPreferredIdentifier links between a given ObjectType and a UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier>(source, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier link in links )
			{
				if ( target.Equals(link.PreferredIdentifier) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeHasPreferredIdentifier link between a given ObjectTypeand a UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier GetLink( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier>(source, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier link in links )
			{
				if ( target.Equals(link.PreferredIdentifier) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ReadingHasTooManyRolesError
	/// Description for Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d2116bc7-25a8-455e-9347-414bd03b7546")]
	public partial class ReadingHasTooManyRolesError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReadingHasTooManyRolesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd2116bc7, 0x25a8, 0x455e, 0x93, 0x47, 0x41, 0x4b, 0xd0, 0x3b, 0x75, 0x46);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReadingHasTooManyRolesError link in the same Partition as the given Reading
		/// </summary>
		/// <param name="source">Reading to use as the source of the relationship.</param>
		/// <param name="target">TooManyReadingRolesError to use as the target of the relationship.</param>
		public ReadingHasTooManyRolesError(Reading source, TooManyReadingRolesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReadingHasTooManyRolesError.ReadingDomainRoleId, source), new DslModeling::RoleAssignment(ReadingHasTooManyRolesError.TooManyRolesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingHasTooManyRolesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingHasTooManyRolesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingHasTooManyRolesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingHasTooManyRolesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Reading domain role code
		
		/// <summary>
		/// Reading domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReadingDomainRoleId = new global::System.Guid(0xaa517583, 0x0a1b, 0x4129, 0x90, 0x5e, 0xa9, 0xee, 0x3f, 0x59, 0xee, 0x17);
		
		/// <summary>
		/// DomainRole Reading
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.Reading
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError/Reading.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError/Reading.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TooManyRolesError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError/Reading.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("aa517583-0a1b-4129-905e-a9ee3f59ee17")]
		public virtual Reading Reading
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Reading)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReadingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReadingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Reading of a TooManyReadingRolesError
		/// <summary>
		/// Gets Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Reading GetReading(TooManyReadingRolesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TooManyRolesErrorDomainRoleId) as Reading;
		}
		
		/// <summary>
		/// Sets Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReading(TooManyReadingRolesError element, Reading newReading)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TooManyRolesErrorDomainRoleId, newReading);
		}
		#endregion
		#region TooManyRolesError domain role code
		
		/// <summary>
		/// TooManyRolesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid TooManyRolesErrorDomainRoleId = new global::System.Guid(0x50d39649, 0x4bf7, 0x411b, 0xb6, 0xb5, 0x10, 0x23, 0x77, 0x34, 0x43, 0x79);
		
		/// <summary>
		/// DomainRole TooManyRolesError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError/TooManyRolesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError/TooManyRolesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Reading", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError/TooManyRolesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("50d39649-4bf7-411b-b6b5-102377344379")]
		public virtual TooManyReadingRolesError TooManyRolesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TooManyReadingRolesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, TooManyRolesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TooManyRolesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TooManyRolesError of a Reading
		/// <summary>
		/// Gets TooManyRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TooManyReadingRolesError GetTooManyRolesError(Reading element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReadingDomainRoleId) as TooManyReadingRolesError;
		}
		
		/// <summary>
		/// Sets TooManyRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTooManyRolesError(Reading element, TooManyReadingRolesError newTooManyRolesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReadingDomainRoleId, newTooManyRolesError);
		}
		#endregion
		#region Reading link accessor
		/// <summary>
		/// Get the ReadingHasTooManyRolesError link to a Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError GetLinkToTooManyRolesError (global::Neumont.Tools.ORM.ObjectModel.Reading readingInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError>(readingInstance, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Reading not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TooManyRolesError link accessor
		/// <summary>
		/// Get the ReadingHasTooManyRolesError link to a TooManyReadingRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError GetLinkToReading (global::Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesError tooManyRolesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError>(tooManyRolesErrorInstance, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TooManyRolesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReadingHasTooManyRolesError instance accessors
		
		/// <summary>
		/// Get any ReadingHasTooManyRolesError links between a given Reading and a TooManyReadingRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.Reading source, global::Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError>(source, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError link in links )
			{
				if ( target.Equals(link.TooManyRolesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReadingHasTooManyRolesError link between a given Readingand a TooManyReadingRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError GetLink( global::Neumont.Tools.ORM.ObjectModel.Reading source, global::Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError>(source, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError link in links )
			{
				if ( target.Equals(link.TooManyRolesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ReadingHasTooFewRolesError
	/// Description for Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("fc3e0a3c-40ce-4ded-8a6b-241c7b51c099")]
	public partial class ReadingHasTooFewRolesError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReadingHasTooFewRolesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfc3e0a3c, 0x40ce, 0x4ded, 0x8a, 0x6b, 0x24, 0x1c, 0x7b, 0x51, 0xc0, 0x99);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReadingHasTooFewRolesError link in the same Partition as the given Reading
		/// </summary>
		/// <param name="source">Reading to use as the source of the relationship.</param>
		/// <param name="target">TooFewReadingRolesError to use as the target of the relationship.</param>
		public ReadingHasTooFewRolesError(Reading source, TooFewReadingRolesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReadingHasTooFewRolesError.ReadingDomainRoleId, source), new DslModeling::RoleAssignment(ReadingHasTooFewRolesError.TooFewRolesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingHasTooFewRolesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingHasTooFewRolesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingHasTooFewRolesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingHasTooFewRolesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Reading domain role code
		
		/// <summary>
		/// Reading domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReadingDomainRoleId = new global::System.Guid(0x3a9889aa, 0x6152, 0x4e1e, 0xa1, 0xec, 0xb1, 0x00, 0xad, 0x24, 0xa6, 0x0a);
		
		/// <summary>
		/// DomainRole Reading
		/// Description for Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.Reading
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError/Reading.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError/Reading.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TooFewRolesError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError/Reading.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("3a9889aa-6152-4e1e-a1ec-b100ad24a60a")]
		public virtual Reading Reading
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Reading)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReadingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReadingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Reading of a TooFewReadingRolesError
		/// <summary>
		/// Gets Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Reading GetReading(TooFewReadingRolesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TooFewRolesErrorDomainRoleId) as Reading;
		}
		
		/// <summary>
		/// Sets Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReading(TooFewReadingRolesError element, Reading newReading)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TooFewRolesErrorDomainRoleId, newReading);
		}
		#endregion
		#region TooFewRolesError domain role code
		
		/// <summary>
		/// TooFewRolesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid TooFewRolesErrorDomainRoleId = new global::System.Guid(0x19bfcfe6, 0xec81, 0x48dc, 0x9b, 0x4e, 0xd0, 0x26, 0xf1, 0x04, 0x0a, 0xe1);
		
		/// <summary>
		/// DomainRole TooFewRolesError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError/TooFewRolesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError/TooFewRolesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Reading", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError/TooFewRolesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("19bfcfe6-ec81-48dc-9b4e-d026f1040ae1")]
		public virtual TooFewReadingRolesError TooFewRolesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TooFewReadingRolesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, TooFewRolesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TooFewRolesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TooFewRolesError of a Reading
		/// <summary>
		/// Gets TooFewRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TooFewReadingRolesError GetTooFewRolesError(Reading element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReadingDomainRoleId) as TooFewReadingRolesError;
		}
		
		/// <summary>
		/// Sets TooFewRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTooFewRolesError(Reading element, TooFewReadingRolesError newTooFewRolesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReadingDomainRoleId, newTooFewRolesError);
		}
		#endregion
		#region Reading link accessor
		/// <summary>
		/// Get the ReadingHasTooFewRolesError link to a Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError GetLinkToTooFewRolesError (global::Neumont.Tools.ORM.ObjectModel.Reading readingInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError>(readingInstance, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Reading not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TooFewRolesError link accessor
		/// <summary>
		/// Get the ReadingHasTooFewRolesError link to a TooFewReadingRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError GetLinkToReading (global::Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesError tooFewRolesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError>(tooFewRolesErrorInstance, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TooFewRolesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReadingHasTooFewRolesError instance accessors
		
		/// <summary>
		/// Get any ReadingHasTooFewRolesError links between a given Reading and a TooFewReadingRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.Reading source, global::Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError>(source, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError link in links )
			{
				if ( target.Equals(link.TooFewRolesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReadingHasTooFewRolesError link between a given Readingand a TooFewReadingRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError GetLink( global::Neumont.Tools.ORM.ObjectModel.Reading source, global::Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError>(source, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError link in links )
			{
				if ( target.Equals(link.TooFewRolesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c5a25732-f5a7-409e-b56a-6419a951fb13")]
	public partial class SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc5a25732, 0xf5a7, 0x409e, 0xb5, 0x6a, 0x64, 0x19, 0xa9, 0x51, 0xfb, 0x13);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">ExternalConstraintRoleSequenceArityMismatchError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(SetComparisonConstraint source, ExternalConstraintRoleSequenceArityMismatchError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Constraint domain role code
		
		/// <summary>
		/// Constraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintDomainRoleId = new global::System.Guid(0xe75c8b14, 0x01c7, 0x4cef, 0x87, 0x9d, 0xbe, 0x6a, 0x1d, 0x92, 0x2a, 0xa4);
		
		/// <summary>
		/// DomainRole Constraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.Constraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError/Constraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError/Constraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ArityMismatchError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError/Constraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e75c8b14-01c7-4cef-879d-be6a1d922aa4")]
		public virtual SetComparisonConstraint Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Constraint of a ExternalConstraintRoleSequenceArityMismatchError
		/// <summary>
		/// Gets Constraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetComparisonConstraint GetConstraint(ExternalConstraintRoleSequenceArityMismatchError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ArityMismatchErrorDomainRoleId) as SetComparisonConstraint;
		}
		
		/// <summary>
		/// Sets Constraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConstraint(ExternalConstraintRoleSequenceArityMismatchError element, SetComparisonConstraint newConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ArityMismatchErrorDomainRoleId, newConstraint);
		}
		#endregion
		#region ArityMismatchError domain role code
		
		/// <summary>
		/// ArityMismatchError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ArityMismatchErrorDomainRoleId = new global::System.Guid(0x0f5d4090, 0x69d4, 0x4e6e, 0xaa, 0x87, 0x2b, 0xdc, 0x77, 0x92, 0xd7, 0x5b);
		
		/// <summary>
		/// DomainRole ArityMismatchError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError/ArityMismatchError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError/ArityMismatchError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Constraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError/ArityMismatchError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0f5d4090-69d4-4e6e-aa87-2bdc7792d75b")]
		public virtual ExternalConstraintRoleSequenceArityMismatchError ArityMismatchError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExternalConstraintRoleSequenceArityMismatchError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ArityMismatchErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ArityMismatchErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ArityMismatchError of a SetComparisonConstraint
		/// <summary>
		/// Gets ArityMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExternalConstraintRoleSequenceArityMismatchError GetArityMismatchError(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConstraintDomainRoleId) as ExternalConstraintRoleSequenceArityMismatchError;
		}
		
		/// <summary>
		/// Sets ArityMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetArityMismatchError(SetComparisonConstraint element, ExternalConstraintRoleSequenceArityMismatchError newArityMismatchError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConstraintDomainRoleId, newArityMismatchError);
		}
		#endregion
		#region Constraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError GetLinkToArityMismatchError (global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint constraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError>(constraintInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Constraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ArityMismatchError link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError link to a ExternalConstraintRoleSequenceArityMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError GetLinkToConstraint (global::Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError arityMismatchErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError>(arityMismatchErrorInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ArityMismatchError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError links between a given SetComparisonConstraint and a ExternalConstraintRoleSequenceArityMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError link in links )
			{
				if ( target.Equals(link.ArityMismatchError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError link between a given SetComparisonConstraintand a ExternalConstraintRoleSequenceArityMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError GetLink( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError link in links )
			{
				if ( target.Equals(link.ArityMismatchError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasFactTypeRequiresReadingError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("eec8eb82-5b15-4b61-8737-da1a54199a13")]
	public partial class FactTypeHasFactTypeRequiresReadingError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasFactTypeRequiresReadingError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xeec8eb82, 0x5b15, 0x4b61, 0x87, 0x37, 0xda, 0x1a, 0x54, 0x19, 0x9a, 0x13);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasFactTypeRequiresReadingError link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">FactTypeRequiresReadingError to use as the target of the relationship.</param>
		public FactTypeHasFactTypeRequiresReadingError(FactType source, FactTypeRequiresReadingError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasFactTypeRequiresReadingError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasFactTypeRequiresReadingError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasFactTypeRequiresReadingError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasFactTypeRequiresReadingError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xc79d68bd, 0xdbed, 0x4487, 0xa4, 0x48, 0x70, 0xb9, 0xed, 0xc5, 0xe4, 0xd9);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError/FactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError/FactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReadingRequiredError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("c79d68bd-dbed-4487-a448-70b9edc5e4d9")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a FactTypeRequiresReadingError
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(FactTypeRequiresReadingError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReadingRequiredErrorDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(FactTypeRequiresReadingError element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReadingRequiredErrorDomainRoleId, newFactType);
		}
		#endregion
		#region ReadingRequiredError domain role code
		
		/// <summary>
		/// ReadingRequiredError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReadingRequiredErrorDomainRoleId = new global::System.Guid(0xe2df0d63, 0x6d67, 0x475c, 0x84, 0x70, 0x89, 0x13, 0xe2, 0x42, 0x65, 0xe9);
		
		/// <summary>
		/// DomainRole ReadingRequiredError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError/ReadingRequiredError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError/ReadingRequiredError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError/ReadingRequiredError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e2df0d63-6d67-475c-8470-8913e24265e9")]
		public virtual FactTypeRequiresReadingError ReadingRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactTypeRequiresReadingError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReadingRequiredErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReadingRequiredErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReadingRequiredError of a FactType
		/// <summary>
		/// Gets ReadingRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactTypeRequiresReadingError GetReadingRequiredError(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as FactTypeRequiresReadingError;
		}
		
		/// <summary>
		/// Sets ReadingRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReadingRequiredError(FactType element, FactTypeRequiresReadingError newReadingRequiredError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newReadingRequiredError);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the FactTypeHasFactTypeRequiresReadingError link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError GetLinkToReadingRequiredError (global::Neumont.Tools.ORM.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError>(factTypeInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReadingRequiredError link accessor
		/// <summary>
		/// Get the FactTypeHasFactTypeRequiresReadingError link to a FactTypeRequiresReadingError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError GetLinkToFactType (global::Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingError readingRequiredErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError>(readingRequiredErrorInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReadingRequiredError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasFactTypeRequiresReadingError instance accessors
		
		/// <summary>
		/// Get any FactTypeHasFactTypeRequiresReadingError links between a given FactType and a FactTypeRequiresReadingError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError link in links )
			{
				if ( target.Equals(link.ReadingRequiredError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasFactTypeRequiresReadingError link between a given FactTypeand a FactTypeRequiresReadingError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError GetLink( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError link in links )
			{
				if ( target.Equals(link.ReadingRequiredError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasFactTypeRequiresInternalUniquenessConstraintError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("dd5ff7f8-7169-489b-9b8a-ede3772f52be")]
	public partial class FactTypeHasFactTypeRequiresInternalUniquenessConstraintError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasFactTypeRequiresInternalUniquenessConstraintError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdd5ff7f8, 0x7169, 0x489b, 0x9b, 0x8a, 0xed, 0xe3, 0x77, 0x2f, 0x52, 0xbe);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasFactTypeRequiresInternalUniquenessConstraintError link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">FactTypeRequiresInternalUniquenessConstraintError to use as the target of the relationship.</param>
		public FactTypeHasFactTypeRequiresInternalUniquenessConstraintError(FactType source, FactTypeRequiresInternalUniquenessConstraintError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasFactTypeRequiresInternalUniquenessConstraintError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasFactTypeRequiresInternalUniquenessConstraintError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasFactTypeRequiresInternalUniquenessConstraintError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasFactTypeRequiresInternalUniquenessConstraintError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0x42aed551, 0x7f1a, 0x4f16, 0xaa, 0x39, 0x68, 0x2c, 0x9d, 0xbb, 0x86, 0x07);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError/FactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError/FactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InternalUniquenessConstraintRequiredError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("42aed551-7f1a-4f16-aa39-682c9dbb8607")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a FactTypeRequiresInternalUniquenessConstraintError
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(FactTypeRequiresInternalUniquenessConstraintError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InternalUniquenessConstraintRequiredErrorDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(FactTypeRequiresInternalUniquenessConstraintError element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InternalUniquenessConstraintRequiredErrorDomainRoleId, newFactType);
		}
		#endregion
		#region InternalUniquenessConstraintRequiredError domain role code
		
		/// <summary>
		/// InternalUniquenessConstraintRequiredError domain role Id.
		/// </summary>
		public static readonly global::System.Guid InternalUniquenessConstraintRequiredErrorDomainRoleId = new global::System.Guid(0x36fc676e, 0x7c82, 0x4756, 0xbe, 0xa5, 0xc4, 0xa6, 0x90, 0xb4, 0x1a, 0xb0);
		
		/// <summary>
		/// DomainRole InternalUniquenessConstraintRequiredError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError/InternalUniquenessConstraintRequiredError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError/InternalUniquenessConstraintRequiredError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError/InternalUniquenessConstraintRequiredError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("36fc676e-7c82-4756-bea5-c4a690b41ab0")]
		public virtual FactTypeRequiresInternalUniquenessConstraintError InternalUniquenessConstraintRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactTypeRequiresInternalUniquenessConstraintError)DslModeling::DomainRoleInfo.GetRolePlayer(this, InternalUniquenessConstraintRequiredErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InternalUniquenessConstraintRequiredErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InternalUniquenessConstraintRequiredError of a FactType
		/// <summary>
		/// Gets InternalUniquenessConstraintRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactTypeRequiresInternalUniquenessConstraintError GetInternalUniquenessConstraintRequiredError(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as FactTypeRequiresInternalUniquenessConstraintError;
		}
		
		/// <summary>
		/// Sets InternalUniquenessConstraintRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInternalUniquenessConstraintRequiredError(FactType element, FactTypeRequiresInternalUniquenessConstraintError newInternalUniquenessConstraintRequiredError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newInternalUniquenessConstraintRequiredError);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the FactTypeHasFactTypeRequiresInternalUniquenessConstraintError link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError GetLinkToInternalUniquenessConstraintRequiredError (global::Neumont.Tools.ORM.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError>(factTypeInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InternalUniquenessConstraintRequiredError link accessor
		/// <summary>
		/// Get the FactTypeHasFactTypeRequiresInternalUniquenessConstraintError link to a FactTypeRequiresInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError GetLinkToFactType (global::Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError internalUniquenessConstraintRequiredErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError>(internalUniquenessConstraintRequiredErrorInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InternalUniquenessConstraintRequiredError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasFactTypeRequiresInternalUniquenessConstraintError instance accessors
		
		/// <summary>
		/// Get any FactTypeHasFactTypeRequiresInternalUniquenessConstraintError links between a given FactType and a FactTypeRequiresInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError link in links )
			{
				if ( target.Equals(link.InternalUniquenessConstraintRequiredError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasFactTypeRequiresInternalUniquenessConstraintError link between a given FactTypeand a FactTypeRequiresInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError GetLink( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError link in links )
			{
				if ( target.Equals(link.InternalUniquenessConstraintRequiredError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueTypeHasValueConstraint
	/// Description for Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3dd5cc0f-891e-4a88-a8b2-aeb28a4795e3")]
	public partial class ValueTypeHasValueConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueTypeHasValueConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3dd5cc0f, 0x891e, 0x4a88, 0xa8, 0xb2, 0xae, 0xb2, 0x8a, 0x47, 0x95, 0xe3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueTypeHasValueConstraint link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">ValueTypeValueConstraint to use as the target of the relationship.</param>
		public ValueTypeHasValueConstraint(ObjectType source, ValueTypeValueConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueTypeHasValueConstraint.ValueTypeDomainRoleId, source), new DslModeling::RoleAssignment(ValueTypeHasValueConstraint.ValueConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeHasValueConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeHasValueConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeHasValueConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeHasValueConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueType domain role code
		
		/// <summary>
		/// ValueType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeDomainRoleId = new global::System.Guid(0x2f42a8fd, 0xab49, 0x4e0f, 0xaf, 0x3a, 0x10, 0x98, 0xba, 0x77, 0xa4, 0xc1);
		
		/// <summary>
		/// DomainRole ValueType
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint/ValueType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint/ValueType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint/ValueType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2f42a8fd-ab49-4e0f-af3a-1098ba77a4c1")]
		public virtual ObjectType ValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueType of a ValueTypeValueConstraint
		/// <summary>
		/// Gets ValueType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetValueType(ValueTypeValueConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueConstraintDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ValueType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueType(ValueTypeValueConstraint element, ObjectType newValueType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueConstraintDomainRoleId, newValueType);
		}
		#endregion
		#region ValueConstraint domain role code
		
		/// <summary>
		/// ValueConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueConstraintDomainRoleId = new global::System.Guid(0x4a9b0738, 0xaa8e, 0x4bae, 0xb7, 0x6a, 0x00, 0x27, 0xfc, 0x06, 0x68, 0x5d);
		
		/// <summary>
		/// DomainRole ValueConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint/ValueConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint/ValueConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint/ValueConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4a9b0738-aa8e-4bae-b76a-0027fc06685d")]
		public virtual ValueTypeValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueTypeValueConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueConstraint of a ObjectType
		/// <summary>
		/// Gets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueTypeValueConstraint GetValueConstraint(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueTypeDomainRoleId) as ValueTypeValueConstraint;
		}
		
		/// <summary>
		/// Sets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueConstraint(ObjectType element, ValueTypeValueConstraint newValueConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueTypeDomainRoleId, newValueConstraint);
		}
		#endregion
		#region ValueType link accessor
		/// <summary>
		/// Get the ValueTypeHasValueConstraint link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint GetLinkToValueConstraint (global::Neumont.Tools.ORM.ObjectModel.ObjectType valueTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint>(valueTypeInstance, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueConstraint link accessor
		/// <summary>
		/// Get the ValueTypeHasValueConstraint link to a ValueTypeValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint GetLinkToValueType (global::Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraint valueConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint>(valueConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueTypeHasValueConstraint instance accessors
		
		/// <summary>
		/// Get any ValueTypeHasValueConstraint links between a given ObjectType and a ValueTypeValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint>(source, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint link in links )
			{
				if ( target.Equals(link.ValueConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueTypeHasValueConstraint link between a given ObjectTypeand a ValueTypeValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint GetLink( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint>(source, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint link in links )
			{
				if ( target.Equals(link.ValueConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship RoleHasValueConstraint
	/// Description for Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("bfb9da2a-0ea6-46ab-b608-41440bdd0d84")]
	public partial class RoleHasValueConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleHasValueConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbfb9da2a, 0x0ea6, 0x46ab, 0xb6, 0x08, 0x41, 0x44, 0x0b, 0xdd, 0x0d, 0x84);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RoleHasValueConstraint link in the same Partition as the given Role
		/// </summary>
		/// <param name="source">Role to use as the source of the relationship.</param>
		/// <param name="target">RoleValueConstraint to use as the target of the relationship.</param>
		public RoleHasValueConstraint(Role source, RoleValueConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RoleHasValueConstraint.RoleDomainRoleId, source), new DslModeling::RoleAssignment(RoleHasValueConstraint.ValueConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleHasValueConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleHasValueConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleHasValueConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleHasValueConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0xaf99b941, 0x1811, 0x4dfb, 0xbd, 0x26, 0x8f, 0x41, 0x48, 0xd3, 0xf1, 0xd9);
		
		/// <summary>
		/// DomainRole Role
		/// Description for Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.Role
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint/Role.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint/Role.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("af99b941-1811-4dfb-bd26-8f4148d3f1d9")]
		public virtual Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Role of a RoleValueConstraint
		/// <summary>
		/// Gets Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Role GetRole(RoleValueConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueConstraintDomainRoleId) as Role;
		}
		
		/// <summary>
		/// Sets Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRole(RoleValueConstraint element, Role newRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueConstraintDomainRoleId, newRole);
		}
		#endregion
		#region ValueConstraint domain role code
		
		/// <summary>
		/// ValueConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueConstraintDomainRoleId = new global::System.Guid(0x464dffcf, 0x6633, 0x45cd, 0x86, 0x71, 0x2c, 0x5e, 0x92, 0xae, 0x89, 0xd2);
		
		/// <summary>
		/// DomainRole ValueConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint/ValueConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint/ValueConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Role", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint/ValueConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("464dffcf-6633-45cd-8671-2c5e92ae89d2")]
		public virtual RoleValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleValueConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueConstraint of a Role
		/// <summary>
		/// Gets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RoleValueConstraint GetValueConstraint(Role element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleDomainRoleId) as RoleValueConstraint;
		}
		
		/// <summary>
		/// Sets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueConstraint(Role element, RoleValueConstraint newValueConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleDomainRoleId, newValueConstraint);
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the RoleHasValueConstraint link to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint GetLinkToValueConstraint (global::Neumont.Tools.ORM.ObjectModel.Role roleInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint>(roleInstance, global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.RoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Role not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueConstraint link accessor
		/// <summary>
		/// Get the RoleHasValueConstraint link to a RoleValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint GetLinkToRole (global::Neumont.Tools.ORM.ObjectModel.RoleValueConstraint valueConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint>(valueConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RoleHasValueConstraint instance accessors
		
		/// <summary>
		/// Get any RoleHasValueConstraint links between a given Role and a RoleValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint> GetLinks( global::Neumont.Tools.ORM.ObjectModel.Role source, global::Neumont.Tools.ORM.ObjectModel.RoleValueConstraint target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint>(source, global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.RoleDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint link in links )
			{
				if ( target.Equals(link.ValueConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoleHasValueConstraint link between a given Roleand a RoleValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint GetLink( global::Neumont.Tools.ORM.ObjectModel.Role source, global::Neumont.Tools.ORM.ObjectModel.RoleValueConstraint target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint>(source, global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.RoleDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint link in links )
			{
				if ( target.Equals(link.ValueConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueConstraintHasValueRange
	/// Description for Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("53b596ba-0506-4533-80b0-391891c61c9a")]
	public partial class ValueConstraintHasValueRange : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueConstraintHasValueRange domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x53b596ba, 0x0506, 0x4533, 0x80, 0xb0, 0x39, 0x18, 0x91, 0xc6, 0x1c, 0x9a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueConstraintHasValueRange link in the same Partition as the given ValueConstraint
		/// </summary>
		/// <param name="source">ValueConstraint to use as the source of the relationship.</param>
		/// <param name="target">ValueRange to use as the target of the relationship.</param>
		public ValueConstraintHasValueRange(ValueConstraint source, ValueRange target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueConstraintHasValueRange.ValueConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ValueConstraintHasValueRange.ValueRangeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasValueRange(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasValueRange(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasValueRange(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasValueRange(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueConstraint domain role code
		
		/// <summary>
		/// ValueConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueConstraintDomainRoleId = new global::System.Guid(0xd3706490, 0xd843, 0x45c0, 0x89, 0x48, 0xc6, 0xcc, 0x6a, 0x3d, 0x80, 0x4c);
		
		/// <summary>
		/// DomainRole ValueConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange/ValueConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange/ValueConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueRangeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange/ValueConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("d3706490-d843-45c0-8948-c6cc6a3d804c")]
		public virtual ValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueConstraint of a ValueRange
		/// <summary>
		/// Gets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueConstraint GetValueConstraint(ValueRange element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueRangeDomainRoleId) as ValueConstraint;
		}
		
		/// <summary>
		/// Sets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueConstraint(ValueRange element, ValueConstraint newValueConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueRangeDomainRoleId, newValueConstraint);
		}
		#endregion
		#region ValueRange domain role code
		
		/// <summary>
		/// ValueRange domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueRangeDomainRoleId = new global::System.Guid(0x42afa13d, 0xe73d, 0x47ca, 0x87, 0x50, 0x66, 0x05, 0xcb, 0x82, 0x01, 0x38);
		
		/// <summary>
		/// DomainRole ValueRange
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueRange
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange/ValueRange.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange/ValueRange.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange/ValueRange.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("42afa13d-e73d-47ca-8750-6605cb820138")]
		public virtual ValueRange ValueRange
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueRange)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueRangeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueRangeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueRangeCollection of a ValueConstraint
		/// <summary>
		/// Gets a list of ValueRangeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ValueRange> GetValueRangeCollection(ValueConstraint element)
		{
			return new DslModeling::LinkedElementCollection<ValueRange>(element, ValueConstraintDomainRoleId);
		}
		#endregion
		#region ValueConstraint link accessor
		/// <summary>
		/// Get the list of ValueConstraintHasValueRange links to a ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange> GetLinksToValueRangeCollection ( global::Neumont.Tools.ORM.ObjectModel.ValueConstraint valueConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange>(valueConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueConstraintDomainRoleId);
		}
		#endregion
		#region ValueRange link accessor
		/// <summary>
		/// Get the ValueConstraintHasValueRange link to a ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange GetLinkToValueConstraint (global::Neumont.Tools.ORM.ObjectModel.ValueRange valueRangeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange>(valueRangeInstance, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueRangeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueRange not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueConstraintHasValueRange instance accessors
		
		/// <summary>
		/// Get any ValueConstraintHasValueRange links between a given ValueConstraint and a ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ValueConstraint source, global::Neumont.Tools.ORM.ObjectModel.ValueRange target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange>(source, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange link in links )
			{
				if ( target.Equals(link.ValueRange) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueConstraintHasValueRange link between a given ValueConstraintand a ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange GetLink( global::Neumont.Tools.ORM.ObjectModel.ValueConstraint source, global::Neumont.Tools.ORM.ObjectModel.ValueRange target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange>(source, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange link in links )
			{
				if ( target.Equals(link.ValueRange) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueTypeHasUnspecifiedDataTypeError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f2a79e36-a317-4c36-81da-d562d2afbf09")]
	public partial class ValueTypeHasUnspecifiedDataTypeError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueTypeHasUnspecifiedDataTypeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf2a79e36, 0xa317, 0x4c36, 0x81, 0xda, 0xd5, 0x62, 0xd2, 0xaf, 0xbf, 0x09);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueTypeHasUnspecifiedDataTypeError link in the same Partition as the given ValueTypeHasDataType
		/// </summary>
		/// <param name="source">ValueTypeHasDataType to use as the source of the relationship.</param>
		/// <param name="target">DataTypeNotSpecifiedError to use as the target of the relationship.</param>
		public ValueTypeHasUnspecifiedDataTypeError(ValueTypeHasDataType source, DataTypeNotSpecifiedError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId, source), new DslModeling::RoleAssignment(ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeHasUnspecifiedDataTypeError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeHasUnspecifiedDataTypeError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeHasUnspecifiedDataTypeError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeHasUnspecifiedDataTypeError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueTypeHasDataType domain role code
		
		/// <summary>
		/// ValueTypeHasDataType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeHasDataTypeDomainRoleId = new global::System.Guid(0xe8122190, 0xae46, 0x40d8, 0x80, 0x40, 0x11, 0x8d, 0x57, 0x77, 0x35, 0xa6);
		
		/// <summary>
		/// DomainRole ValueTypeHasDataType
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError/ValueTypeHasDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError/ValueTypeHasDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataTypeNotSpecifiedError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError/ValueTypeHasDataType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e8122190-ae46-40d8-8040-118d577735a6")]
		public virtual ValueTypeHasDataType ValueTypeHasDataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueTypeHasDataType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueTypeHasDataTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueTypeHasDataTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueTypeHasDataType of a DataTypeNotSpecifiedError
		/// <summary>
		/// Gets ValueTypeHasDataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueTypeHasDataType GetValueTypeHasDataType(DataTypeNotSpecifiedError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataTypeNotSpecifiedErrorDomainRoleId) as ValueTypeHasDataType;
		}
		
		/// <summary>
		/// Sets ValueTypeHasDataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueTypeHasDataType(DataTypeNotSpecifiedError element, ValueTypeHasDataType newValueTypeHasDataType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataTypeNotSpecifiedErrorDomainRoleId, newValueTypeHasDataType);
		}
		#endregion
		#region DataTypeNotSpecifiedError domain role code
		
		/// <summary>
		/// DataTypeNotSpecifiedError domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeNotSpecifiedErrorDomainRoleId = new global::System.Guid(0x90da103d, 0x40d2, 0x421d, 0x8b, 0xce, 0x88, 0xf6, 0x57, 0xa8, 0xa9, 0x96);
		
		/// <summary>
		/// DomainRole DataTypeNotSpecifiedError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError/DataTypeNotSpecifiedError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError/DataTypeNotSpecifiedError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueTypeHasDataType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError/DataTypeNotSpecifiedError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("90da103d-40d2-421d-8bce-88f657a8a996")]
		public virtual DataTypeNotSpecifiedError DataTypeNotSpecifiedError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataTypeNotSpecifiedError)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataTypeNotSpecifiedErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataTypeNotSpecifiedErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataTypeNotSpecifiedError of a ValueTypeHasDataType
		/// <summary>
		/// Gets DataTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataTypeNotSpecifiedError GetDataTypeNotSpecifiedError(ValueTypeHasDataType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueTypeHasDataTypeDomainRoleId) as DataTypeNotSpecifiedError;
		}
		
		/// <summary>
		/// Sets DataTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataTypeNotSpecifiedError(ValueTypeHasDataType element, DataTypeNotSpecifiedError newDataTypeNotSpecifiedError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueTypeHasDataTypeDomainRoleId, newDataTypeNotSpecifiedError);
		}
		#endregion
		#region ValueTypeHasDataType link accessor
		/// <summary>
		/// Get the ValueTypeHasUnspecifiedDataTypeError link to a ValueTypeHasDataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError GetLinkToDataTypeNotSpecifiedError (global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType valueTypeHasDataTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError>(valueTypeHasDataTypeInstance, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueTypeHasDataType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataTypeNotSpecifiedError link accessor
		/// <summary>
		/// Get the ValueTypeHasUnspecifiedDataTypeError link to a DataTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError GetLinkToValueTypeHasDataType (global::Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError dataTypeNotSpecifiedErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError>(dataTypeNotSpecifiedErrorInstance, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataTypeNotSpecifiedError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueTypeHasUnspecifiedDataTypeError instance accessors
		
		/// <summary>
		/// Get any ValueTypeHasUnspecifiedDataTypeError links between a given ValueTypeHasDataType and a DataTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType source, global::Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError>(source, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError link in links )
			{
				if ( target.Equals(link.DataTypeNotSpecifiedError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueTypeHasUnspecifiedDataTypeError link between a given ValueTypeHasDataTypeand a DataTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError GetLink( global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType source, global::Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError>(source, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError link in links )
			{
				if ( target.Equals(link.DataTypeNotSpecifiedError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasCompatibleRolePlayerTypeError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("13410c4f-ffed-4b0f-ad0b-bd48d09b4310")]
	public partial class SetComparisonConstraintHasCompatibleRolePlayerTypeError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasCompatibleRolePlayerTypeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x13410c4f, 0xffed, 0x4b0f, 0xad, 0x0b, 0xbd, 0x48, 0xd0, 0x9b, 0x43, 0x10);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasCompatibleRolePlayerTypeError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">CompatibleRolePlayerTypeError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasCompatibleRolePlayerTypeError(SetComparisonConstraint source, CompatibleRolePlayerTypeError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasCompatibleRolePlayerTypeError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasCompatibleRolePlayerTypeError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasCompatibleRolePlayerTypeError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasCompatibleRolePlayerTypeError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0xb1660d4f, 0xf77a, 0x4fe2, 0x9d, 0xdc, 0xdf, 0xbf, 0xab, 0x54, 0x5b, 0x92);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError/SetComparisonConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError/SetComparisonConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CompatibleRolePlayerTypeErrorCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b1660d4f-f77a-4fe2-9ddc-dfbfab545b92")]
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraint of a CompatibleRolePlayerTypeError
		/// <summary>
		/// Gets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetComparisonConstraint GetSetComparisonConstraint(CompatibleRolePlayerTypeError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CompatibleRolePlayerTypeErrorDomainRoleId) as SetComparisonConstraint;
		}
		
		/// <summary>
		/// Sets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetComparisonConstraint(CompatibleRolePlayerTypeError element, SetComparisonConstraint newSetComparisonConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CompatibleRolePlayerTypeErrorDomainRoleId, newSetComparisonConstraint);
		}
		#endregion
		#region CompatibleRolePlayerTypeError domain role code
		
		/// <summary>
		/// CompatibleRolePlayerTypeError domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompatibleRolePlayerTypeErrorDomainRoleId = new global::System.Guid(0x159eb571, 0xd8e0, 0x495e, 0x9f, 0x51, 0x85, 0xea, 0xbc, 0xf9, 0x5f, 0x0c);
		
		/// <summary>
		/// DomainRole CompatibleRolePlayerTypeError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError/CompatibleRolePlayerTypeError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError/CompatibleRolePlayerTypeError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError/CompatibleRolePlayerTypeError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("159eb571-d8e0-495e-9f51-85eabcf95f0c")]
		public virtual CompatibleRolePlayerTypeError CompatibleRolePlayerTypeError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CompatibleRolePlayerTypeError)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompatibleRolePlayerTypeErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompatibleRolePlayerTypeErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CompatibleRolePlayerTypeErrorCollection of a SetComparisonConstraint
		/// <summary>
		/// Gets a list of CompatibleRolePlayerTypeErrorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CompatibleRolePlayerTypeError> GetCompatibleRolePlayerTypeErrorCollection(SetComparisonConstraint element)
		{
			return new DslModeling::LinkedElementCollection<CompatibleRolePlayerTypeError>(element, SetComparisonConstraintDomainRoleId);
		}
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the list of SetComparisonConstraintHasCompatibleRolePlayerTypeError links to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError> GetLinksToCompatibleRolePlayerTypeErrorCollection ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError>(setComparisonConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintDomainRoleId);
		}
		#endregion
		#region CompatibleRolePlayerTypeError link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasCompatibleRolePlayerTypeError link to a CompatibleRolePlayerTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError GetLinkToSetComparisonConstraint (global::Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError compatibleRolePlayerTypeErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError>(compatibleRolePlayerTypeErrorInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CompatibleRolePlayerTypeError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetComparisonConstraintHasCompatibleRolePlayerTypeError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasCompatibleRolePlayerTypeError links between a given SetComparisonConstraint and a CompatibleRolePlayerTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError link in links )
			{
				if ( target.Equals(link.CompatibleRolePlayerTypeError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasCompatibleRolePlayerTypeError link between a given SetComparisonConstraintand a CompatibleRolePlayerTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError GetLink( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError link in links )
			{
				if ( target.Equals(link.CompatibleRolePlayerTypeError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetConstraintHasCompatibleRolePlayerTypeError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("91cde095-28d9-4852-b171-430fe5a29429")]
	public partial class SetConstraintHasCompatibleRolePlayerTypeError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetConstraintHasCompatibleRolePlayerTypeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x91cde095, 0x28d9, 0x4852, 0xb1, 0x71, 0x43, 0x0f, 0xe5, 0xa2, 0x94, 0x29);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetConstraintHasCompatibleRolePlayerTypeError link in the same Partition as the given SetConstraint
		/// </summary>
		/// <param name="source">SetConstraint to use as the source of the relationship.</param>
		/// <param name="target">CompatibleRolePlayerTypeError to use as the target of the relationship.</param>
		public SetConstraintHasCompatibleRolePlayerTypeError(SetConstraint source, CompatibleRolePlayerTypeError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasCompatibleRolePlayerTypeError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasCompatibleRolePlayerTypeError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasCompatibleRolePlayerTypeError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasCompatibleRolePlayerTypeError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetConstraint domain role code
		
		/// <summary>
		/// SetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetConstraintDomainRoleId = new global::System.Guid(0x171d82ac, 0x46ae, 0x486d, 0xb6, 0x02, 0x62, 0xa0, 0xf4, 0x9c, 0xeb, 0xc0);
		
		/// <summary>
		/// DomainRole SetConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError/SetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError/SetConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CompatibleRolePlayerTypeError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError/SetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("171d82ac-46ae-486d-b602-62a0f49cebc0")]
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraint of a CompatibleRolePlayerTypeError
		/// <summary>
		/// Gets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetConstraint GetSetConstraint(CompatibleRolePlayerTypeError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CompatibleRolePlayerTypeErrorDomainRoleId) as SetConstraint;
		}
		
		/// <summary>
		/// Sets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetConstraint(CompatibleRolePlayerTypeError element, SetConstraint newSetConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CompatibleRolePlayerTypeErrorDomainRoleId, newSetConstraint);
		}
		#endregion
		#region CompatibleRolePlayerTypeError domain role code
		
		/// <summary>
		/// CompatibleRolePlayerTypeError domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompatibleRolePlayerTypeErrorDomainRoleId = new global::System.Guid(0x60c1d366, 0xc379, 0x41db, 0xad, 0xb6, 0x21, 0x38, 0x02, 0xda, 0x7d, 0xd4);
		
		/// <summary>
		/// DomainRole CompatibleRolePlayerTypeError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError/CompatibleRolePlayerTypeError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError/CompatibleRolePlayerTypeError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError/CompatibleRolePlayerTypeError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("60c1d366-c379-41db-adb6-213802da7dd4")]
		public virtual CompatibleRolePlayerTypeError CompatibleRolePlayerTypeError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CompatibleRolePlayerTypeError)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompatibleRolePlayerTypeErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompatibleRolePlayerTypeErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CompatibleRolePlayerTypeError of a SetConstraint
		/// <summary>
		/// Gets CompatibleRolePlayerTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CompatibleRolePlayerTypeError GetCompatibleRolePlayerTypeError(SetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetConstraintDomainRoleId) as CompatibleRolePlayerTypeError;
		}
		
		/// <summary>
		/// Sets CompatibleRolePlayerTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCompatibleRolePlayerTypeError(SetConstraint element, CompatibleRolePlayerTypeError newCompatibleRolePlayerTypeError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetConstraintDomainRoleId, newCompatibleRolePlayerTypeError);
		}
		#endregion
		#region SetConstraint link accessor
		/// <summary>
		/// Get the SetConstraintHasCompatibleRolePlayerTypeError link to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError GetLinkToCompatibleRolePlayerTypeError (global::Neumont.Tools.ORM.ObjectModel.SetConstraint setConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError>(setConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CompatibleRolePlayerTypeError link accessor
		/// <summary>
		/// Get the SetConstraintHasCompatibleRolePlayerTypeError link to a CompatibleRolePlayerTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError GetLinkToSetConstraint (global::Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError compatibleRolePlayerTypeErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError>(compatibleRolePlayerTypeErrorInstance, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CompatibleRolePlayerTypeError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetConstraintHasCompatibleRolePlayerTypeError instance accessors
		
		/// <summary>
		/// Get any SetConstraintHasCompatibleRolePlayerTypeError links between a given SetConstraint and a CompatibleRolePlayerTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.SetConstraint source, global::Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError>(source, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError link in links )
			{
				if ( target.Equals(link.CompatibleRolePlayerTypeError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetConstraintHasCompatibleRolePlayerTypeError link between a given SetConstraintand a CompatibleRolePlayerTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError GetLink( global::Neumont.Tools.ORM.ObjectModel.SetConstraint source, global::Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError>(source, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError link in links )
			{
				if ( target.Equals(link.CompatibleRolePlayerTypeError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship UniquenessConstraintHasNMinusOneError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("429f7144-1227-4d0e-b4f8-59ad6ffc7eb3")]
	public partial class UniquenessConstraintHasNMinusOneError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UniquenessConstraintHasNMinusOneError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x429f7144, 0x1227, 0x4d0e, 0xb4, 0xf8, 0x59, 0xad, 0x6f, 0xfc, 0x7e, 0xb3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UniquenessConstraintHasNMinusOneError link in the same Partition as the given UniquenessConstraint
		/// </summary>
		/// <param name="source">UniquenessConstraint to use as the source of the relationship.</param>
		/// <param name="target">NMinusOneError to use as the target of the relationship.</param>
		public UniquenessConstraintHasNMinusOneError(UniquenessConstraint source, NMinusOneError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId, source), new DslModeling::RoleAssignment(UniquenessConstraintHasNMinusOneError.NMinusOneErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UniquenessConstraintHasNMinusOneError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UniquenessConstraintHasNMinusOneError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UniquenessConstraintHasNMinusOneError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UniquenessConstraintHasNMinusOneError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Constraint domain role code
		
		/// <summary>
		/// Constraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintDomainRoleId = new global::System.Guid(0x6165ad47, 0xfb70, 0x4f43, 0x93, 0x6e, 0xe1, 0x62, 0xd0, 0xe8, 0xe9, 0x17);
		
		/// <summary>
		/// DomainRole Constraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.Constraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError/Constraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError/Constraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NMinusOneError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError/Constraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6165ad47-fb70-4f43-936e-e162d0e8e917")]
		public virtual UniquenessConstraint Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UniquenessConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Constraint of a NMinusOneError
		/// <summary>
		/// Gets Constraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static UniquenessConstraint GetConstraint(NMinusOneError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NMinusOneErrorDomainRoleId) as UniquenessConstraint;
		}
		
		/// <summary>
		/// Sets Constraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConstraint(NMinusOneError element, UniquenessConstraint newConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NMinusOneErrorDomainRoleId, newConstraint);
		}
		#endregion
		#region NMinusOneError domain role code
		
		/// <summary>
		/// NMinusOneError domain role Id.
		/// </summary>
		public static readonly global::System.Guid NMinusOneErrorDomainRoleId = new global::System.Guid(0x5c3edc3b, 0xe19d, 0x4841, 0xaa, 0x8a, 0x47, 0x00, 0x96, 0x92, 0x80, 0x2f);
		
		/// <summary>
		/// DomainRole NMinusOneError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError/NMinusOneError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError/NMinusOneError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Constraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError/NMinusOneError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5c3edc3b-e19d-4841-aa8a-47009692802f")]
		public virtual NMinusOneError NMinusOneError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NMinusOneError)DslModeling::DomainRoleInfo.GetRolePlayer(this, NMinusOneErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NMinusOneErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NMinusOneError of a UniquenessConstraint
		/// <summary>
		/// Gets NMinusOneError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NMinusOneError GetNMinusOneError(UniquenessConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConstraintDomainRoleId) as NMinusOneError;
		}
		
		/// <summary>
		/// Sets NMinusOneError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNMinusOneError(UniquenessConstraint element, NMinusOneError newNMinusOneError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConstraintDomainRoleId, newNMinusOneError);
		}
		#endregion
		#region Constraint link accessor
		/// <summary>
		/// Get the UniquenessConstraintHasNMinusOneError link to a UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError GetLinkToNMinusOneError (global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraint constraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError>(constraintInstance, global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Constraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NMinusOneError link accessor
		/// <summary>
		/// Get the UniquenessConstraintHasNMinusOneError link to a NMinusOneError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError GetLinkToConstraint (global::Neumont.Tools.ORM.ObjectModel.NMinusOneError nMinusOneErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError>(nMinusOneErrorInstance, global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NMinusOneError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UniquenessConstraintHasNMinusOneError instance accessors
		
		/// <summary>
		/// Get any UniquenessConstraintHasNMinusOneError links between a given UniquenessConstraint and a NMinusOneError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraint source, global::Neumont.Tools.ORM.ObjectModel.NMinusOneError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError>(source, global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError link in links )
			{
				if ( target.Equals(link.NMinusOneError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UniquenessConstraintHasNMinusOneError link between a given UniquenessConstraintand a NMinusOneError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError GetLink( global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraint source, global::Neumont.Tools.ORM.ObjectModel.NMinusOneError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError>(source, global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError link in links )
			{
				if ( target.Equals(link.NMinusOneError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship RoleHasRolePlayerRequiredError
	/// Description for Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("09e6ac31-2ca1-4126-8c95-bfc571088b2d")]
	public partial class RoleHasRolePlayerRequiredError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleHasRolePlayerRequiredError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x09e6ac31, 0x2ca1, 0x4126, 0x8c, 0x95, 0xbf, 0xc5, 0x71, 0x08, 0x8b, 0x2d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RoleHasRolePlayerRequiredError link in the same Partition as the given Role
		/// </summary>
		/// <param name="source">Role to use as the source of the relationship.</param>
		/// <param name="target">RolePlayerRequiredError to use as the target of the relationship.</param>
		public RoleHasRolePlayerRequiredError(Role source, RolePlayerRequiredError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RoleHasRolePlayerRequiredError.RoleDomainRoleId, source), new DslModeling::RoleAssignment(RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleHasRolePlayerRequiredError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleHasRolePlayerRequiredError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleHasRolePlayerRequiredError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleHasRolePlayerRequiredError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0x529b2bed, 0xf8f3, 0x4a9b, 0x95, 0xb7, 0x55, 0xd9, 0xa1, 0xed, 0x5b, 0x44);
		
		/// <summary>
		/// DomainRole Role
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.Role
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError/Role.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError/Role.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RolePlayerRequiredError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("529b2bed-f8f3-4a9b-95b7-55d9a1ed5b44")]
		public virtual Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Role of a RolePlayerRequiredError
		/// <summary>
		/// Gets Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Role GetRole(RolePlayerRequiredError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RolePlayerRequiredErrorDomainRoleId) as Role;
		}
		
		/// <summary>
		/// Sets Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRole(RolePlayerRequiredError element, Role newRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RolePlayerRequiredErrorDomainRoleId, newRole);
		}
		#endregion
		#region RolePlayerRequiredError domain role code
		
		/// <summary>
		/// RolePlayerRequiredError domain role Id.
		/// </summary>
		public static readonly global::System.Guid RolePlayerRequiredErrorDomainRoleId = new global::System.Guid(0xaad1b942, 0xe191, 0x4878, 0x94, 0x21, 0x33, 0xa7, 0xf2, 0xd2, 0x01, 0xf7);
		
		/// <summary>
		/// DomainRole RolePlayerRequiredError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError/RolePlayerRequiredError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError/RolePlayerRequiredError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Role", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError/RolePlayerRequiredError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("aad1b942-e191-4878-9421-33a7f2d201f7")]
		public virtual RolePlayerRequiredError RolePlayerRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePlayerRequiredError)DslModeling::DomainRoleInfo.GetRolePlayer(this, RolePlayerRequiredErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RolePlayerRequiredErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RolePlayerRequiredError of a Role
		/// <summary>
		/// Gets RolePlayerRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RolePlayerRequiredError GetRolePlayerRequiredError(Role element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleDomainRoleId) as RolePlayerRequiredError;
		}
		
		/// <summary>
		/// Sets RolePlayerRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRolePlayerRequiredError(Role element, RolePlayerRequiredError newRolePlayerRequiredError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleDomainRoleId, newRolePlayerRequiredError);
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the RoleHasRolePlayerRequiredError link to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError GetLinkToRolePlayerRequiredError (global::Neumont.Tools.ORM.ObjectModel.Role roleInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError>(roleInstance, global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Role not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RolePlayerRequiredError link accessor
		/// <summary>
		/// Get the RoleHasRolePlayerRequiredError link to a RolePlayerRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError GetLinkToRole (global::Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredError rolePlayerRequiredErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError>(rolePlayerRequiredErrorInstance, global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RolePlayerRequiredError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RoleHasRolePlayerRequiredError instance accessors
		
		/// <summary>
		/// Get any RoleHasRolePlayerRequiredError links between a given Role and a RolePlayerRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.Role source, global::Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError>(source, global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError link in links )
			{
				if ( target.Equals(link.RolePlayerRequiredError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoleHasRolePlayerRequiredError link between a given Roleand a RolePlayerRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError GetLink( global::Neumont.Tools.ORM.ObjectModel.Role source, global::Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError>(source, global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError link in links )
			{
				if ( target.Equals(link.RolePlayerRequiredError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship EqualityConstraintHasEqualityImpliedByMandatoryError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0d352e42-06d6-4ad1-aace-3ea5aacde302")]
	public partial class EqualityConstraintHasEqualityImpliedByMandatoryError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EqualityConstraintHasEqualityImpliedByMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0d352e42, 0x06d6, 0x4ad1, 0xaa, 0xce, 0x3e, 0xa5, 0xaa, 0xcd, 0xe3, 0x02);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EqualityConstraintHasEqualityImpliedByMandatoryError link in the same Partition as the given EqualityConstraint
		/// </summary>
		/// <param name="source">EqualityConstraint to use as the source of the relationship.</param>
		/// <param name="target">EqualityImpliedByMandatoryError to use as the target of the relationship.</param>
		public EqualityConstraintHasEqualityImpliedByMandatoryError(EqualityConstraint source, EqualityImpliedByMandatoryError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintDomainRoleId, source), new DslModeling::RoleAssignment(EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EqualityConstraintHasEqualityImpliedByMandatoryError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EqualityConstraintHasEqualityImpliedByMandatoryError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EqualityConstraintHasEqualityImpliedByMandatoryError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EqualityConstraintHasEqualityImpliedByMandatoryError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EqualityConstraint domain role code
		
		/// <summary>
		/// EqualityConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid EqualityConstraintDomainRoleId = new global::System.Guid(0xfbf0117a, 0xa2b8, 0x4ef9, 0xb2, 0x63, 0x24, 0x28, 0x8f, 0x40, 0xcb, 0x4e);
		
		/// <summary>
		/// DomainRole EqualityConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError/EqualityConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError/EqualityConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EqualityImpliedByMandatoryError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError/EqualityConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("fbf0117a-a2b8-4ef9-b263-24288f40cb4e")]
		public virtual EqualityConstraint EqualityConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EqualityConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, EqualityConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EqualityConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EqualityConstraint of a EqualityImpliedByMandatoryError
		/// <summary>
		/// Gets EqualityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EqualityConstraint GetEqualityConstraint(EqualityImpliedByMandatoryError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EqualityImpliedByMandatoryErrorDomainRoleId) as EqualityConstraint;
		}
		
		/// <summary>
		/// Sets EqualityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEqualityConstraint(EqualityImpliedByMandatoryError element, EqualityConstraint newEqualityConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EqualityImpliedByMandatoryErrorDomainRoleId, newEqualityConstraint);
		}
		#endregion
		#region EqualityImpliedByMandatoryError domain role code
		
		/// <summary>
		/// EqualityImpliedByMandatoryError domain role Id.
		/// </summary>
		public static readonly global::System.Guid EqualityImpliedByMandatoryErrorDomainRoleId = new global::System.Guid(0x6c8c0e5f, 0x9376, 0x490b, 0x98, 0xf7, 0x67, 0x60, 0x7f, 0x79, 0x14, 0x80);
		
		/// <summary>
		/// DomainRole EqualityImpliedByMandatoryError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError/EqualityImpliedByMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError/EqualityImpliedByMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EqualityConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError/EqualityImpliedByMandatoryError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6c8c0e5f-9376-490b-98f7-67607f791480")]
		public virtual EqualityImpliedByMandatoryError EqualityImpliedByMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EqualityImpliedByMandatoryError)DslModeling::DomainRoleInfo.GetRolePlayer(this, EqualityImpliedByMandatoryErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EqualityImpliedByMandatoryErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EqualityImpliedByMandatoryError of a EqualityConstraint
		/// <summary>
		/// Gets EqualityImpliedByMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EqualityImpliedByMandatoryError GetEqualityImpliedByMandatoryError(EqualityConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EqualityConstraintDomainRoleId) as EqualityImpliedByMandatoryError;
		}
		
		/// <summary>
		/// Sets EqualityImpliedByMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEqualityImpliedByMandatoryError(EqualityConstraint element, EqualityImpliedByMandatoryError newEqualityImpliedByMandatoryError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EqualityConstraintDomainRoleId, newEqualityImpliedByMandatoryError);
		}
		#endregion
		#region EqualityConstraint link accessor
		/// <summary>
		/// Get the EqualityConstraintHasEqualityImpliedByMandatoryError link to a EqualityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError GetLinkToEqualityImpliedByMandatoryError (global::Neumont.Tools.ORM.ObjectModel.EqualityConstraint equalityConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError>(equalityConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EqualityConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EqualityImpliedByMandatoryError link accessor
		/// <summary>
		/// Get the EqualityConstraintHasEqualityImpliedByMandatoryError link to a EqualityImpliedByMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError GetLinkToEqualityConstraint (global::Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryError equalityImpliedByMandatoryErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError>(equalityImpliedByMandatoryErrorInstance, global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EqualityImpliedByMandatoryError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EqualityConstraintHasEqualityImpliedByMandatoryError instance accessors
		
		/// <summary>
		/// Get any EqualityConstraintHasEqualityImpliedByMandatoryError links between a given EqualityConstraint and a EqualityImpliedByMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.EqualityConstraint source, global::Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError link in links )
			{
				if ( target.Equals(link.EqualityImpliedByMandatoryError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EqualityConstraintHasEqualityImpliedByMandatoryError link between a given EqualityConstraintand a EqualityImpliedByMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError GetLink( global::Neumont.Tools.ORM.ObjectModel.EqualityConstraint source, global::Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError link in links )
			{
				if ( target.Equals(link.EqualityImpliedByMandatoryError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeHasEntityTypeRequiresReferenceSchemeError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1b6cbb8c-d1a6-4949-ac4d-596dc1ce147f")]
	public partial class ObjectTypeHasEntityTypeRequiresReferenceSchemeError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeHasEntityTypeRequiresReferenceSchemeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1b6cbb8c, 0xd1a6, 0x4949, 0xac, 0x4d, 0x59, 0x6d, 0xc1, 0xce, 0x14, 0x7f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeHasEntityTypeRequiresReferenceSchemeError link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">EntityTypeRequiresReferenceSchemeError to use as the target of the relationship.</param>
		public ObjectTypeHasEntityTypeRequiresReferenceSchemeError(ObjectType source, EntityTypeRequiresReferenceSchemeError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasEntityTypeRequiresReferenceSchemeError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasEntityTypeRequiresReferenceSchemeError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasEntityTypeRequiresReferenceSchemeError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasEntityTypeRequiresReferenceSchemeError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0x7cff7155, 0xb46f, 0x4492, 0xa0, 0x54, 0x80, 0x28, 0x77, 0x2d, 0x75, 0x29);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError/ObjectType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError/ObjectType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferenceSchemeError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7cff7155-b46f-4492-a054-8028772d7529")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectType of a EntityTypeRequiresReferenceSchemeError
		/// <summary>
		/// Gets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetObjectType(EntityTypeRequiresReferenceSchemeError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceSchemeErrorDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectType(EntityTypeRequiresReferenceSchemeError element, ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceSchemeErrorDomainRoleId, newObjectType);
		}
		#endregion
		#region ReferenceSchemeError domain role code
		
		/// <summary>
		/// ReferenceSchemeError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceSchemeErrorDomainRoleId = new global::System.Guid(0x81d1ebc1, 0x8270, 0x4cbc, 0x98, 0x12, 0x31, 0xe2, 0x41, 0x33, 0x91, 0x18);
		
		/// <summary>
		/// DomainRole ReferenceSchemeError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError/ReferenceSchemeError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError/ReferenceSchemeError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError/ReferenceSchemeError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("81d1ebc1-8270-4cbc-9812-31e241339118")]
		public virtual EntityTypeRequiresReferenceSchemeError ReferenceSchemeError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityTypeRequiresReferenceSchemeError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceSchemeErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceSchemeErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceSchemeError of a ObjectType
		/// <summary>
		/// Gets ReferenceSchemeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityTypeRequiresReferenceSchemeError GetReferenceSchemeError(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as EntityTypeRequiresReferenceSchemeError;
		}
		
		/// <summary>
		/// Sets ReferenceSchemeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReferenceSchemeError(ObjectType element, EntityTypeRequiresReferenceSchemeError newReferenceSchemeError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newReferenceSchemeError);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ObjectTypeHasEntityTypeRequiresReferenceSchemeError link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError GetLinkToReferenceSchemeError (global::Neumont.Tools.ORM.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError>(objectTypeInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReferenceSchemeError link accessor
		/// <summary>
		/// Get the ObjectTypeHasEntityTypeRequiresReferenceSchemeError link to a EntityTypeRequiresReferenceSchemeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError GetLinkToObjectType (global::Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeError referenceSchemeErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError>(referenceSchemeErrorInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceSchemeError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectTypeHasEntityTypeRequiresReferenceSchemeError instance accessors
		
		/// <summary>
		/// Get any ObjectTypeHasEntityTypeRequiresReferenceSchemeError links between a given ObjectType and a EntityTypeRequiresReferenceSchemeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError link in links )
			{
				if ( target.Equals(link.ReferenceSchemeError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeHasEntityTypeRequiresReferenceSchemeError link between a given ObjectTypeand a EntityTypeRequiresReferenceSchemeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError GetLink( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError link in links )
			{
				if ( target.Equals(link.ReferenceSchemeError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FrequencyConstraintHasFrequencyConstraintMinMaxError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("2e851b91-fcb9-4b3c-9276-2c2e3a1972c9")]
	public partial class FrequencyConstraintHasFrequencyConstraintMinMaxError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FrequencyConstraintHasFrequencyConstraintMinMaxError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2e851b91, 0xfcb9, 0x4b3c, 0x92, 0x76, 0x2c, 0x2e, 0x3a, 0x19, 0x72, 0xc9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FrequencyConstraintHasFrequencyConstraintMinMaxError link in the same Partition as the given FrequencyConstraint
		/// </summary>
		/// <param name="source">FrequencyConstraint to use as the source of the relationship.</param>
		/// <param name="target">FrequencyConstraintMinMaxError to use as the target of the relationship.</param>
		public FrequencyConstraintHasFrequencyConstraintMinMaxError(FrequencyConstraint source, FrequencyConstraintMinMaxError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId, source), new DslModeling::RoleAssignment(FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FrequencyConstraintHasFrequencyConstraintMinMaxError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FrequencyConstraintHasFrequencyConstraintMinMaxError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FrequencyConstraintHasFrequencyConstraintMinMaxError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FrequencyConstraintHasFrequencyConstraintMinMaxError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FrequencyConstraint domain role code
		
		/// <summary>
		/// FrequencyConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid FrequencyConstraintDomainRoleId = new global::System.Guid(0x80542fe3, 0x3450, 0x42ee, 0x9c, 0x22, 0xb1, 0x7e, 0x86, 0x8b, 0x76, 0x95);
		
		/// <summary>
		/// DomainRole FrequencyConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError/FrequencyConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError/FrequencyConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FrequencyConstraintMinMaxError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError/FrequencyConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("80542fe3-3450-42ee-9c22-b17e868b7695")]
		public virtual FrequencyConstraint FrequencyConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FrequencyConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, FrequencyConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FrequencyConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FrequencyConstraint of a FrequencyConstraintMinMaxError
		/// <summary>
		/// Gets FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FrequencyConstraint GetFrequencyConstraint(FrequencyConstraintMinMaxError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FrequencyConstraintMinMaxErrorDomainRoleId) as FrequencyConstraint;
		}
		
		/// <summary>
		/// Sets FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFrequencyConstraint(FrequencyConstraintMinMaxError element, FrequencyConstraint newFrequencyConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FrequencyConstraintMinMaxErrorDomainRoleId, newFrequencyConstraint);
		}
		#endregion
		#region FrequencyConstraintMinMaxError domain role code
		
		/// <summary>
		/// FrequencyConstraintMinMaxError domain role Id.
		/// </summary>
		public static readonly global::System.Guid FrequencyConstraintMinMaxErrorDomainRoleId = new global::System.Guid(0xe25ca8cb, 0x1265, 0x4f7e, 0xaf, 0x04, 0x36, 0xde, 0xc1, 0xd3, 0x14, 0xe1);
		
		/// <summary>
		/// DomainRole FrequencyConstraintMinMaxError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError/FrequencyConstraintMinMaxError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError/FrequencyConstraintMinMaxError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FrequencyConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError/FrequencyConstraintMinMaxError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e25ca8cb-1265-4f7e-af04-36dec1d314e1")]
		public virtual FrequencyConstraintMinMaxError FrequencyConstraintMinMaxError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FrequencyConstraintMinMaxError)DslModeling::DomainRoleInfo.GetRolePlayer(this, FrequencyConstraintMinMaxErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FrequencyConstraintMinMaxErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FrequencyConstraintMinMaxError of a FrequencyConstraint
		/// <summary>
		/// Gets FrequencyConstraintMinMaxError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FrequencyConstraintMinMaxError GetFrequencyConstraintMinMaxError(FrequencyConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FrequencyConstraintDomainRoleId) as FrequencyConstraintMinMaxError;
		}
		
		/// <summary>
		/// Sets FrequencyConstraintMinMaxError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFrequencyConstraintMinMaxError(FrequencyConstraint element, FrequencyConstraintMinMaxError newFrequencyConstraintMinMaxError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FrequencyConstraintDomainRoleId, newFrequencyConstraintMinMaxError);
		}
		#endregion
		#region FrequencyConstraint link accessor
		/// <summary>
		/// Get the FrequencyConstraintHasFrequencyConstraintMinMaxError link to a FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError GetLinkToFrequencyConstraintMinMaxError (global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraint frequencyConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError>(frequencyConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FrequencyConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FrequencyConstraintMinMaxError link accessor
		/// <summary>
		/// Get the FrequencyConstraintHasFrequencyConstraintMinMaxError link to a FrequencyConstraintMinMaxError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError GetLinkToFrequencyConstraint (global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxError frequencyConstraintMinMaxErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError>(frequencyConstraintMinMaxErrorInstance, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FrequencyConstraintMinMaxError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FrequencyConstraintHasFrequencyConstraintMinMaxError instance accessors
		
		/// <summary>
		/// Get any FrequencyConstraintHasFrequencyConstraintMinMaxError links between a given FrequencyConstraint and a FrequencyConstraintMinMaxError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraint source, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError>(source, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError link in links )
			{
				if ( target.Equals(link.FrequencyConstraintMinMaxError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FrequencyConstraintHasFrequencyConstraintMinMaxError link between a given FrequencyConstraintand a FrequencyConstraintMinMaxError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError GetLink( global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraint source, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError>(source, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError link in links )
			{
				if ( target.Equals(link.FrequencyConstraintMinMaxError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectificationImpliesFactType
	/// Description for Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d2706f81-78cc-493e-90c9-d54a10d33fa0")]
	public partial class ObjectificationImpliesFactType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectificationImpliesFactType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd2706f81, 0x78cc, 0x493e, 0x90, 0xc9, 0xd5, 0x4a, 0x10, 0xd3, 0x3f, 0xa0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectificationImpliesFactType link in the same Partition as the given Objectification
		/// </summary>
		/// <param name="source">Objectification to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public ObjectificationImpliesFactType(Objectification source, FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectificationImpliesFactType.ImpliedByObjectificationDomainRoleId, source), new DslModeling::RoleAssignment(ObjectificationImpliesFactType.ImpliedFactTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectificationImpliesFactType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectificationImpliesFactType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectificationImpliesFactType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectificationImpliesFactType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ImpliedByObjectification domain role code
		
		/// <summary>
		/// ImpliedByObjectification domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImpliedByObjectificationDomainRoleId = new global::System.Guid(0xfa1a0d65, 0x0a3c, 0x4300, 0xa2, 0x17, 0xec, 0x5a, 0x23, 0xca, 0x3a, 0xd9);
		
		/// <summary>
		/// DomainRole ImpliedByObjectification
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectification
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType/ImpliedByObjectification.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType/ImpliedByObjectification.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ImpliedFactTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType/ImpliedByObjectification.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("fa1a0d65-0a3c-4300-a217-ec5a23ca3ad9")]
		public virtual Objectification ImpliedByObjectification
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Objectification)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImpliedByObjectificationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImpliedByObjectificationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpliedByObjectification of a FactType
		/// <summary>
		/// Gets ImpliedByObjectification.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Objectification GetImpliedByObjectification(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ImpliedFactTypeDomainRoleId) as Objectification;
		}
		
		/// <summary>
		/// Sets ImpliedByObjectification.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImpliedByObjectification(FactType element, Objectification newImpliedByObjectification)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ImpliedFactTypeDomainRoleId, newImpliedByObjectification);
		}
		#endregion
		#region ImpliedFactType domain role code
		
		/// <summary>
		/// ImpliedFactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImpliedFactTypeDomainRoleId = new global::System.Guid(0x9b3fb1d7, 0x01af, 0x4f66, 0xba, 0x48, 0x59, 0xa2, 0xde, 0xd5, 0xbc, 0x6b);
		
		/// <summary>
		/// DomainRole ImpliedFactType
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedFactType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType/ImpliedFactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType/ImpliedFactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ImpliedByObjectification", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType/ImpliedFactType.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9b3fb1d7-01af-4f66-ba48-59a2ded5bc6b")]
		public virtual FactType ImpliedFactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImpliedFactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImpliedFactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpliedFactTypeCollection of a Objectification
		/// <summary>
		/// Gets a list of ImpliedFactTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactType> GetImpliedFactTypeCollection(Objectification element)
		{
			return new DslModeling::LinkedElementCollection<FactType>(element, ImpliedByObjectificationDomainRoleId);
		}
		#endregion
		#region ImpliedByObjectification link accessor
		/// <summary>
		/// Get the list of ObjectificationImpliesFactType links to a Objectification.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType> GetLinksToImpliedFactTypeCollection ( global::Neumont.Tools.ORM.ObjectModel.Objectification impliedByObjectificationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType>(impliedByObjectificationInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectificationDomainRoleId);
		}
		#endregion
		#region ImpliedFactType link accessor
		/// <summary>
		/// Get the ObjectificationImpliesFactType link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType GetLinkToImpliedByObjectification (global::Neumont.Tools.ORM.ObjectModel.FactType impliedFactTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType>(impliedFactTypeInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ImpliedFactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectificationImpliesFactType instance accessors
		
		/// <summary>
		/// Get any ObjectificationImpliesFactType links between a given Objectification and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType> GetLinks( global::Neumont.Tools.ORM.ObjectModel.Objectification source, global::Neumont.Tools.ORM.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectificationDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType link in links )
			{
				if ( target.Equals(link.ImpliedFactType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectificationImpliesFactType link between a given Objectificationand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType GetLink( global::Neumont.Tools.ORM.ObjectModel.Objectification source, global::Neumont.Tools.ORM.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectificationDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType link in links )
			{
				if ( target.Equals(link.ImpliedFactType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueRangeHasMaxValueMismatchError
	/// Description for Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1d2620be-40ac-4f10-b420-5cd52687dd49")]
	public partial class ValueRangeHasMaxValueMismatchError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueRangeHasMaxValueMismatchError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1d2620be, 0x40ac, 0x4f10, 0xb4, 0x20, 0x5c, 0xd5, 0x26, 0x87, 0xdd, 0x49);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueRangeHasMaxValueMismatchError link in the same Partition as the given ValueRange
		/// </summary>
		/// <param name="source">ValueRange to use as the source of the relationship.</param>
		/// <param name="target">MaxValueMismatchError to use as the target of the relationship.</param>
		public ValueRangeHasMaxValueMismatchError(ValueRange source, MaxValueMismatchError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId, source), new DslModeling::RoleAssignment(ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueRangeHasMaxValueMismatchError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueRangeHasMaxValueMismatchError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueRangeHasMaxValueMismatchError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueRangeHasMaxValueMismatchError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueRange domain role code
		
		/// <summary>
		/// ValueRange domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueRangeDomainRoleId = new global::System.Guid(0xa5f8e444, 0x85da, 0x40d0, 0x97, 0xe2, 0x91, 0xeb, 0x8e, 0x36, 0xa6, 0xb0);
		
		/// <summary>
		/// DomainRole ValueRange
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRange
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError/ValueRange.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError/ValueRange.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MaxValueMismatchError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError/ValueRange.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a5f8e444-85da-40d0-97e2-91eb8e36a6b0")]
		public virtual ValueRange ValueRange
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueRange)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueRangeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueRangeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueRange of a MaxValueMismatchError
		/// <summary>
		/// Gets ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueRange GetValueRange(MaxValueMismatchError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MaxValueMismatchErrorDomainRoleId) as ValueRange;
		}
		
		/// <summary>
		/// Sets ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueRange(MaxValueMismatchError element, ValueRange newValueRange)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MaxValueMismatchErrorDomainRoleId, newValueRange);
		}
		#endregion
		#region MaxValueMismatchError domain role code
		
		/// <summary>
		/// MaxValueMismatchError domain role Id.
		/// </summary>
		public static readonly global::System.Guid MaxValueMismatchErrorDomainRoleId = new global::System.Guid(0x673115e6, 0xa4c7, 0x4cd4, 0xb7, 0xf2, 0xaf, 0x9d, 0x2e, 0x64, 0x9a, 0xcc);
		
		/// <summary>
		/// DomainRole MaxValueMismatchError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError/MaxValueMismatchError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError/MaxValueMismatchError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueRange", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError/MaxValueMismatchError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("673115e6-a4c7-4cd4-b7f2-af9d2e649acc")]
		public virtual MaxValueMismatchError MaxValueMismatchError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MaxValueMismatchError)DslModeling::DomainRoleInfo.GetRolePlayer(this, MaxValueMismatchErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MaxValueMismatchErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MaxValueMismatchError of a ValueRange
		/// <summary>
		/// Gets MaxValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MaxValueMismatchError GetMaxValueMismatchError(ValueRange element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueRangeDomainRoleId) as MaxValueMismatchError;
		}
		
		/// <summary>
		/// Sets MaxValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMaxValueMismatchError(ValueRange element, MaxValueMismatchError newMaxValueMismatchError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueRangeDomainRoleId, newMaxValueMismatchError);
		}
		#endregion
		#region ValueRange link accessor
		/// <summary>
		/// Get the ValueRangeHasMaxValueMismatchError link to a ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError GetLinkToMaxValueMismatchError (global::Neumont.Tools.ORM.ObjectModel.ValueRange valueRangeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError>(valueRangeInstance, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueRange not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MaxValueMismatchError link accessor
		/// <summary>
		/// Get the ValueRangeHasMaxValueMismatchError link to a MaxValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError GetLinkToValueRange (global::Neumont.Tools.ORM.ObjectModel.MaxValueMismatchError maxValueMismatchErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError>(maxValueMismatchErrorInstance, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MaxValueMismatchError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueRangeHasMaxValueMismatchError instance accessors
		
		/// <summary>
		/// Get any ValueRangeHasMaxValueMismatchError links between a given ValueRange and a MaxValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ValueRange source, global::Neumont.Tools.ORM.ObjectModel.MaxValueMismatchError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError>(source, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError link in links )
			{
				if ( target.Equals(link.MaxValueMismatchError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueRangeHasMaxValueMismatchError link between a given ValueRangeand a MaxValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError GetLink( global::Neumont.Tools.ORM.ObjectModel.ValueRange source, global::Neumont.Tools.ORM.ObjectModel.MaxValueMismatchError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError>(source, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError link in links )
			{
				if ( target.Equals(link.MaxValueMismatchError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueRangeHasMinValueMismatchError
	/// Description for Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0e8be672-bcbe-412b-9589-76bfa88fde38")]
	public partial class ValueRangeHasMinValueMismatchError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueRangeHasMinValueMismatchError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0e8be672, 0xbcbe, 0x412b, 0x95, 0x89, 0x76, 0xbf, 0xa8, 0x8f, 0xde, 0x38);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueRangeHasMinValueMismatchError link in the same Partition as the given ValueRange
		/// </summary>
		/// <param name="source">ValueRange to use as the source of the relationship.</param>
		/// <param name="target">MinValueMismatchError to use as the target of the relationship.</param>
		public ValueRangeHasMinValueMismatchError(ValueRange source, MinValueMismatchError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId, source), new DslModeling::RoleAssignment(ValueRangeHasMinValueMismatchError.MinValueMismatchErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueRangeHasMinValueMismatchError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueRangeHasMinValueMismatchError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueRangeHasMinValueMismatchError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueRangeHasMinValueMismatchError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueRange domain role code
		
		/// <summary>
		/// ValueRange domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueRangeDomainRoleId = new global::System.Guid(0xcfafda20, 0xc375, 0x431d, 0x89, 0xdf, 0xcd, 0xbf, 0x14, 0x41, 0x97, 0x73);
		
		/// <summary>
		/// DomainRole ValueRange
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRange
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError/ValueRange.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError/ValueRange.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MinValueMismatchError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError/ValueRange.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("cfafda20-c375-431d-89df-cdbf14419773")]
		public virtual ValueRange ValueRange
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueRange)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueRangeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueRangeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueRange of a MinValueMismatchError
		/// <summary>
		/// Gets ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueRange GetValueRange(MinValueMismatchError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MinValueMismatchErrorDomainRoleId) as ValueRange;
		}
		
		/// <summary>
		/// Sets ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueRange(MinValueMismatchError element, ValueRange newValueRange)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MinValueMismatchErrorDomainRoleId, newValueRange);
		}
		#endregion
		#region MinValueMismatchError domain role code
		
		/// <summary>
		/// MinValueMismatchError domain role Id.
		/// </summary>
		public static readonly global::System.Guid MinValueMismatchErrorDomainRoleId = new global::System.Guid(0xc56b78d7, 0x91b1, 0x49e3, 0xac, 0xb8, 0x29, 0x13, 0x83, 0x27, 0x48, 0x84);
		
		/// <summary>
		/// DomainRole MinValueMismatchError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError/MinValueMismatchError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError/MinValueMismatchError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueRange", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError/MinValueMismatchError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c56b78d7-91b1-49e3-acb8-291383274884")]
		public virtual MinValueMismatchError MinValueMismatchError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MinValueMismatchError)DslModeling::DomainRoleInfo.GetRolePlayer(this, MinValueMismatchErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MinValueMismatchErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MinValueMismatchError of a ValueRange
		/// <summary>
		/// Gets MinValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MinValueMismatchError GetMinValueMismatchError(ValueRange element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueRangeDomainRoleId) as MinValueMismatchError;
		}
		
		/// <summary>
		/// Sets MinValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMinValueMismatchError(ValueRange element, MinValueMismatchError newMinValueMismatchError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueRangeDomainRoleId, newMinValueMismatchError);
		}
		#endregion
		#region ValueRange link accessor
		/// <summary>
		/// Get the ValueRangeHasMinValueMismatchError link to a ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError GetLinkToMinValueMismatchError (global::Neumont.Tools.ORM.ObjectModel.ValueRange valueRangeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError>(valueRangeInstance, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueRange not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MinValueMismatchError link accessor
		/// <summary>
		/// Get the ValueRangeHasMinValueMismatchError link to a MinValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError GetLinkToValueRange (global::Neumont.Tools.ORM.ObjectModel.MinValueMismatchError minValueMismatchErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError>(minValueMismatchErrorInstance, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MinValueMismatchError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueRangeHasMinValueMismatchError instance accessors
		
		/// <summary>
		/// Get any ValueRangeHasMinValueMismatchError links between a given ValueRange and a MinValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ValueRange source, global::Neumont.Tools.ORM.ObjectModel.MinValueMismatchError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError>(source, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError link in links )
			{
				if ( target.Equals(link.MinValueMismatchError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueRangeHasMinValueMismatchError link between a given ValueRangeand a MinValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError GetLink( global::Neumont.Tools.ORM.ObjectModel.ValueRange source, global::Neumont.Tools.ORM.ObjectModel.MinValueMismatchError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError>(source, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError link in links )
			{
				if ( target.Equals(link.MinValueMismatchError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasImpliedInternalUniquenessConstraintError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("32d5a7e1-5a80-44ab-bc2e-96a15a4d92cb")]
	public partial class FactTypeHasImpliedInternalUniquenessConstraintError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasImpliedInternalUniquenessConstraintError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x32d5a7e1, 0x5a80, 0x44ab, 0xbc, 0x2e, 0x96, 0xa1, 0x5a, 0x4d, 0x92, 0xcb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasImpliedInternalUniquenessConstraintError link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">ImpliedInternalUniquenessConstraintError to use as the target of the relationship.</param>
		public FactTypeHasImpliedInternalUniquenessConstraintError(FactType source, ImpliedInternalUniquenessConstraintError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasImpliedInternalUniquenessConstraintError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasImpliedInternalUniquenessConstraintError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasImpliedInternalUniquenessConstraintError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasImpliedInternalUniquenessConstraintError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0x87737b64, 0x9709, 0x4dde, 0x8d, 0x77, 0x29, 0x0a, 0x2c, 0xce, 0xed, 0x1c);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError/FactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError/FactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ImpliedInternalUniquenessConstraintError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("87737b64-9709-4dde-8d77-290a2cceed1c")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a ImpliedInternalUniquenessConstraintError
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(ImpliedInternalUniquenessConstraintError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ImpliedInternalUniquenessConstraintErrorDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(ImpliedInternalUniquenessConstraintError element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ImpliedInternalUniquenessConstraintErrorDomainRoleId, newFactType);
		}
		#endregion
		#region ImpliedInternalUniquenessConstraintError domain role code
		
		/// <summary>
		/// ImpliedInternalUniquenessConstraintError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImpliedInternalUniquenessConstraintErrorDomainRoleId = new global::System.Guid(0x67d87b16, 0x4d08, 0x4d96, 0xad, 0xfd, 0xde, 0xd8, 0xeb, 0x84, 0xe7, 0x86);
		
		/// <summary>
		/// DomainRole ImpliedInternalUniquenessConstraintError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError/ImpliedInternalUniquenessConstraintError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError/ImpliedInternalUniquenessConstraintError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError/ImpliedInternalUniquenessConstraintError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("67d87b16-4d08-4d96-adfd-ded8eb84e786")]
		public virtual ImpliedInternalUniquenessConstraintError ImpliedInternalUniquenessConstraintError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpliedInternalUniquenessConstraintError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImpliedInternalUniquenessConstraintErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImpliedInternalUniquenessConstraintErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpliedInternalUniquenessConstraintError of a FactType
		/// <summary>
		/// Gets ImpliedInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ImpliedInternalUniquenessConstraintError GetImpliedInternalUniquenessConstraintError(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as ImpliedInternalUniquenessConstraintError;
		}
		
		/// <summary>
		/// Sets ImpliedInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImpliedInternalUniquenessConstraintError(FactType element, ImpliedInternalUniquenessConstraintError newImpliedInternalUniquenessConstraintError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newImpliedInternalUniquenessConstraintError);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the FactTypeHasImpliedInternalUniquenessConstraintError link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError GetLinkToImpliedInternalUniquenessConstraintError (global::Neumont.Tools.ORM.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError>(factTypeInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ImpliedInternalUniquenessConstraintError link accessor
		/// <summary>
		/// Get the FactTypeHasImpliedInternalUniquenessConstraintError link to a ImpliedInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError GetLinkToFactType (global::Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintError impliedInternalUniquenessConstraintErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError>(impliedInternalUniquenessConstraintErrorInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ImpliedInternalUniquenessConstraintError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasImpliedInternalUniquenessConstraintError instance accessors
		
		/// <summary>
		/// Get any FactTypeHasImpliedInternalUniquenessConstraintError links between a given FactType and a ImpliedInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError link in links )
			{
				if ( target.Equals(link.ImpliedInternalUniquenessConstraintError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasImpliedInternalUniquenessConstraintError link between a given FactTypeand a ImpliedInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError GetLink( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError link in links )
			{
				if ( target.Equals(link.ImpliedInternalUniquenessConstraintError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetConstraintHasTooFewRoleSequencesError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6409dbe5-5c44-42af-b0c6-fb1ee7e3af2a")]
	public partial class SetConstraintHasTooFewRoleSequencesError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetConstraintHasTooFewRoleSequencesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6409dbe5, 0x5c44, 0x42af, 0xb0, 0xc6, 0xfb, 0x1e, 0xe7, 0xe3, 0xaf, 0x2a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetConstraintHasTooFewRoleSequencesError link in the same Partition as the given SetConstraint
		/// </summary>
		/// <param name="source">SetConstraint to use as the source of the relationship.</param>
		/// <param name="target">TooFewRoleSequencesError to use as the target of the relationship.</param>
		public SetConstraintHasTooFewRoleSequencesError(SetConstraint source, TooFewRoleSequencesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasTooFewRoleSequencesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasTooFewRoleSequencesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasTooFewRoleSequencesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasTooFewRoleSequencesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetConstraint domain role code
		
		/// <summary>
		/// SetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetConstraintDomainRoleId = new global::System.Guid(0x1df0f9d7, 0x63bd, 0x4577, 0x8c, 0x8f, 0xfc, 0xab, 0x97, 0xff, 0xf9, 0x8c);
		
		/// <summary>
		/// DomainRole SetConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError/SetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError/SetConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TooFewRoleSequencesError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError/SetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1df0f9d7-63bd-4577-8c8f-fcab97fff98c")]
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraint of a TooFewRoleSequencesError
		/// <summary>
		/// Gets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetConstraint GetSetConstraint(TooFewRoleSequencesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TooFewRoleSequencesErrorDomainRoleId) as SetConstraint;
		}
		
		/// <summary>
		/// Sets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetConstraint(TooFewRoleSequencesError element, SetConstraint newSetConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TooFewRoleSequencesErrorDomainRoleId, newSetConstraint);
		}
		#endregion
		#region TooFewRoleSequencesError domain role code
		
		/// <summary>
		/// TooFewRoleSequencesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid TooFewRoleSequencesErrorDomainRoleId = new global::System.Guid(0x504b2551, 0x4db1, 0x4411, 0xb2, 0x78, 0xdb, 0xc6, 0xa5, 0x23, 0x3b, 0xf1);
		
		/// <summary>
		/// DomainRole TooFewRoleSequencesError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError/TooFewRoleSequencesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError/TooFewRoleSequencesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError/TooFewRoleSequencesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("504b2551-4db1-4411-b278-dbc6a5233bf1")]
		public virtual TooFewRoleSequencesError TooFewRoleSequencesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TooFewRoleSequencesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, TooFewRoleSequencesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TooFewRoleSequencesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TooFewRoleSequencesError of a SetConstraint
		/// <summary>
		/// Gets TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TooFewRoleSequencesError GetTooFewRoleSequencesError(SetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetConstraintDomainRoleId) as TooFewRoleSequencesError;
		}
		
		/// <summary>
		/// Sets TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTooFewRoleSequencesError(SetConstraint element, TooFewRoleSequencesError newTooFewRoleSequencesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetConstraintDomainRoleId, newTooFewRoleSequencesError);
		}
		#endregion
		#region SetConstraint link accessor
		/// <summary>
		/// Get the SetConstraintHasTooFewRoleSequencesError link to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError GetLinkToTooFewRoleSequencesError (global::Neumont.Tools.ORM.ObjectModel.SetConstraint setConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError>(setConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TooFewRoleSequencesError link accessor
		/// <summary>
		/// Get the SetConstraintHasTooFewRoleSequencesError link to a TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError GetLinkToSetConstraint (global::Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError tooFewRoleSequencesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError>(tooFewRoleSequencesErrorInstance, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TooFewRoleSequencesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetConstraintHasTooFewRoleSequencesError instance accessors
		
		/// <summary>
		/// Get any SetConstraintHasTooFewRoleSequencesError links between a given SetConstraint and a TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.SetConstraint source, global::Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError>(source, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError link in links )
			{
				if ( target.Equals(link.TooFewRoleSequencesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetConstraintHasTooFewRoleSequencesError link between a given SetConstraintand a TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError GetLink( global::Neumont.Tools.ORM.ObjectModel.SetConstraint source, global::Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError>(source, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError link in links )
			{
				if ( target.Equals(link.TooFewRoleSequencesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetConstraintHasTooManyRoleSequencesError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d54eb064-7fc6-4bcd-af30-c73e2d586fc4")]
	public partial class SetConstraintHasTooManyRoleSequencesError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetConstraintHasTooManyRoleSequencesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd54eb064, 0x7fc6, 0x4bcd, 0xaf, 0x30, 0xc7, 0x3e, 0x2d, 0x58, 0x6f, 0xc4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetConstraintHasTooManyRoleSequencesError link in the same Partition as the given SetConstraint
		/// </summary>
		/// <param name="source">SetConstraint to use as the source of the relationship.</param>
		/// <param name="target">TooManyRoleSequencesError to use as the target of the relationship.</param>
		public SetConstraintHasTooManyRoleSequencesError(SetConstraint source, TooManyRoleSequencesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasTooManyRoleSequencesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasTooManyRoleSequencesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasTooManyRoleSequencesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasTooManyRoleSequencesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetConstraint domain role code
		
		/// <summary>
		/// SetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetConstraintDomainRoleId = new global::System.Guid(0xf7eedd61, 0x28a3, 0x48cc, 0xb8, 0x3d, 0xc1, 0x8e, 0xce, 0xe2, 0xd5, 0x82);
		
		/// <summary>
		/// DomainRole SetConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError/SetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError/SetConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TooManyRoleSequencesError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError/SetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f7eedd61-28a3-48cc-b83d-c18ecee2d582")]
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraint of a TooManyRoleSequencesError
		/// <summary>
		/// Gets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetConstraint GetSetConstraint(TooManyRoleSequencesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TooManyRoleSequencesErrorDomainRoleId) as SetConstraint;
		}
		
		/// <summary>
		/// Sets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetConstraint(TooManyRoleSequencesError element, SetConstraint newSetConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TooManyRoleSequencesErrorDomainRoleId, newSetConstraint);
		}
		#endregion
		#region TooManyRoleSequencesError domain role code
		
		/// <summary>
		/// TooManyRoleSequencesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid TooManyRoleSequencesErrorDomainRoleId = new global::System.Guid(0xcee80ff1, 0x0811, 0x4b22, 0x9c, 0xa2, 0xb7, 0x73, 0xf2, 0x0b, 0xc7, 0xe1);
		
		/// <summary>
		/// DomainRole TooManyRoleSequencesError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError/TooManyRoleSequencesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError/TooManyRoleSequencesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError/TooManyRoleSequencesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("cee80ff1-0811-4b22-9ca2-b773f20bc7e1")]
		public virtual TooManyRoleSequencesError TooManyRoleSequencesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TooManyRoleSequencesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, TooManyRoleSequencesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TooManyRoleSequencesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TooManyRoleSequencesError of a SetConstraint
		/// <summary>
		/// Gets TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TooManyRoleSequencesError GetTooManyRoleSequencesError(SetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetConstraintDomainRoleId) as TooManyRoleSequencesError;
		}
		
		/// <summary>
		/// Sets TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTooManyRoleSequencesError(SetConstraint element, TooManyRoleSequencesError newTooManyRoleSequencesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetConstraintDomainRoleId, newTooManyRoleSequencesError);
		}
		#endregion
		#region SetConstraint link accessor
		/// <summary>
		/// Get the SetConstraintHasTooManyRoleSequencesError link to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError GetLinkToTooManyRoleSequencesError (global::Neumont.Tools.ORM.ObjectModel.SetConstraint setConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError>(setConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TooManyRoleSequencesError link accessor
		/// <summary>
		/// Get the SetConstraintHasTooManyRoleSequencesError link to a TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError GetLinkToSetConstraint (global::Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError tooManyRoleSequencesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError>(tooManyRoleSequencesErrorInstance, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TooManyRoleSequencesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetConstraintHasTooManyRoleSequencesError instance accessors
		
		/// <summary>
		/// Get any SetConstraintHasTooManyRoleSequencesError links between a given SetConstraint and a TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.SetConstraint source, global::Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError>(source, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError link in links )
			{
				if ( target.Equals(link.TooManyRoleSequencesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetConstraintHasTooManyRoleSequencesError link between a given SetConstraintand a TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError GetLink( global::Neumont.Tools.ORM.ObjectModel.SetConstraint source, global::Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError>(source, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError link in links )
			{
				if ( target.Equals(link.TooManyRoleSequencesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("78716ce5-db71-4367-a912-9b622a3c480b")]
	public partial class FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x78716ce5, 0xdb71, 0x4367, 0xa9, 0x12, 0x9b, 0x62, 0x2a, 0x3c, 0x48, 0x0b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError link in the same Partition as the given FrequencyConstraint
		/// </summary>
		/// <param name="source">FrequencyConstraint to use as the source of the relationship.</param>
		/// <param name="target">FrequencyConstraintContradictsInternalUniquenessConstraintError to use as the target of the relationship.</param>
		public FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError(FrequencyConstraint source, FrequencyConstraintContradictsInternalUniquenessConstraintError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintDomainRoleId, source), new DslModeling::RoleAssignment(FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FrequencyConstraint domain role code
		
		/// <summary>
		/// FrequencyConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid FrequencyConstraintDomainRoleId = new global::System.Guid(0x4a87a658, 0xbe43, 0x4337, 0xa7, 0xe1, 0xdb, 0x66, 0x21, 0x9c, 0xb5, 0x2c);
		
		/// <summary>
		/// DomainRole FrequencyConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError/FrequencyConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError/FrequencyConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError/FrequencyConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4a87a658-be43-4337-a7e1-db66219cb52c")]
		public virtual FrequencyConstraint FrequencyConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FrequencyConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, FrequencyConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FrequencyConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FrequencyConstraint of a FrequencyConstraintContradictsInternalUniquenessConstraintError
		/// <summary>
		/// Gets FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FrequencyConstraint GetFrequencyConstraint(FrequencyConstraintContradictsInternalUniquenessConstraintError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId) as FrequencyConstraint;
		}
		
		/// <summary>
		/// Sets FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFrequencyConstraint(FrequencyConstraintContradictsInternalUniquenessConstraintError element, FrequencyConstraint newFrequencyConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId, newFrequencyConstraint);
		}
		#endregion
		#region FrequencyConstraintContradictsInternalUniquenessConstraintError domain role code
		
		/// <summary>
		/// FrequencyConstraintContradictsInternalUniquenessConstraintError domain role Id.
		/// </summary>
		public static readonly global::System.Guid FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId = new global::System.Guid(0x56817fd9, 0xb572, 0x46ea, 0xa2, 0xb5, 0xcb, 0xd0, 0x6f, 0x09, 0xc6, 0x4a);
		
		/// <summary>
		/// DomainRole FrequencyConstraintContradictsInternalUniquenessConstraintError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError/FrequencyConstraintContradictsInternalUniquenessConstraintError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError/FrequencyConstraintContradictsInternalUniquenessConstraintError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FrequencyConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError/FrequencyConstraintContradictsInternalUniquenessConstraintError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("56817fd9-b572-46ea-a2b5-cbd06f09c64a")]
		public virtual FrequencyConstraintContradictsInternalUniquenessConstraintError FrequencyConstraintContradictsInternalUniquenessConstraintError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FrequencyConstraintContradictsInternalUniquenessConstraintError)DslModeling::DomainRoleInfo.GetRolePlayer(this, FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection of a FrequencyConstraint
		/// <summary>
		/// Gets a list of FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FrequencyConstraintContradictsInternalUniquenessConstraintError> GetFrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection(FrequencyConstraint element)
		{
			return new DslModeling::LinkedElementCollection<FrequencyConstraintContradictsInternalUniquenessConstraintError>(element, FrequencyConstraintDomainRoleId);
		}
		#endregion
		#region FrequencyConstraint link accessor
		/// <summary>
		/// Get the list of FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError links to a FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError> GetLinksToFrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection ( global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraint frequencyConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError>(frequencyConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintDomainRoleId);
		}
		#endregion
		#region FrequencyConstraintContradictsInternalUniquenessConstraintError link accessor
		/// <summary>
		/// Get the FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError link to a FrequencyConstraintContradictsInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError GetLinkToFrequencyConstraint (global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError frequencyConstraintContradictsInternalUniquenessConstraintErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError>(frequencyConstraintContradictsInternalUniquenessConstraintErrorInstance, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FrequencyConstraintContradictsInternalUniquenessConstraintError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError instance accessors
		
		/// <summary>
		/// Get any FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError links between a given FrequencyConstraint and a FrequencyConstraintContradictsInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraint source, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError>(source, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError link in links )
			{
				if ( target.Equals(link.FrequencyConstraintContradictsInternalUniquenessConstraintError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError link between a given FrequencyConstraintand a FrequencyConstraintContradictsInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError GetLink( global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraint source, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError>(source, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError link in links )
			{
				if ( target.Equals(link.FrequencyConstraintContradictsInternalUniquenessConstraintError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("57656c65-6812-4e80-ab3c-199deb82b3ef")]
	public partial class FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x57656c65, 0x6812, 0x4e80, 0xab, 0x3c, 0x19, 0x9d, 0xeb, 0x82, 0xb3, 0xef);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">FrequencyConstraintContradictsInternalUniquenessConstraintError to use as the target of the relationship.</param>
		public FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError(FactType source, FrequencyConstraintContradictsInternalUniquenessConstraintError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xd2203f28, 0x3cb7, 0x4474, 0x89, 0x2c, 0x25, 0xee, 0x95, 0xab, 0x22, 0xa6);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError/FactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError/FactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d2203f28-3cb7-4474-892c-25ee95ab22a6")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a FrequencyConstraintContradictsInternalUniquenessConstraintError
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(FrequencyConstraintContradictsInternalUniquenessConstraintError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(FrequencyConstraintContradictsInternalUniquenessConstraintError element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId, newFactType);
		}
		#endregion
		#region FrequencyConstraintContradictsInternalUniquenessConstraintError domain role code
		
		/// <summary>
		/// FrequencyConstraintContradictsInternalUniquenessConstraintError domain role Id.
		/// </summary>
		public static readonly global::System.Guid FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId = new global::System.Guid(0x2b477358, 0xd3e1, 0x4f15, 0x97, 0x9d, 0xc2, 0xd4, 0x86, 0xbb, 0x3a, 0x1b);
		
		/// <summary>
		/// DomainRole FrequencyConstraintContradictsInternalUniquenessConstraintError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError/FrequencyConstraintContradictsInternalUniquenessConstraintError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError/FrequencyConstraintContradictsInternalUniquenessConstraintError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError/FrequencyConstraintContradictsInternalUniquenessConstraintError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2b477358-d3e1-4f15-979d-c2d486bb3a1b")]
		public virtual FrequencyConstraintContradictsInternalUniquenessConstraintError FrequencyConstraintContradictsInternalUniquenessConstraintError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FrequencyConstraintContradictsInternalUniquenessConstraintError)DslModeling::DomainRoleInfo.GetRolePlayer(this, FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection of a FactType
		/// <summary>
		/// Gets a list of FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FrequencyConstraintContradictsInternalUniquenessConstraintError> GetFrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection(FactType element)
		{
			return new DslModeling::LinkedElementCollection<FrequencyConstraintContradictsInternalUniquenessConstraintError>(element, FactTypeDomainRoleId);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the list of FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError> GetLinksToFrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection ( global::Neumont.Tools.ORM.ObjectModel.FactType factTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError>(factTypeInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FactTypeDomainRoleId);
		}
		#endregion
		#region FrequencyConstraintContradictsInternalUniquenessConstraintError link accessor
		/// <summary>
		/// Get the FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError link to a FrequencyConstraintContradictsInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError GetLinkToFactType (global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError frequencyConstraintContradictsInternalUniquenessConstraintErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError>(frequencyConstraintContradictsInternalUniquenessConstraintErrorInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FrequencyConstraintContradictsInternalUniquenessConstraintError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError instance accessors
		
		/// <summary>
		/// Get any FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError links between a given FactType and a FrequencyConstraintContradictsInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError link in links )
			{
				if ( target.Equals(link.FrequencyConstraintContradictsInternalUniquenessConstraintError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError link between a given FactTypeand a FrequencyConstraintContradictsInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError GetLink( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError link in links )
			{
				if ( target.Equals(link.FrequencyConstraintContradictsInternalUniquenessConstraintError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship RingConstraintHasRingConstraintTypeNotSpecifiedError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("62e65e16-efa7-43d0-9759-8715d0c8b914")]
	public partial class RingConstraintHasRingConstraintTypeNotSpecifiedError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RingConstraintHasRingConstraintTypeNotSpecifiedError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x62e65e16, 0xefa7, 0x43d0, 0x97, 0x59, 0x87, 0x15, 0xd0, 0xc8, 0xb9, 0x14);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RingConstraintHasRingConstraintTypeNotSpecifiedError link in the same Partition as the given RingConstraint
		/// </summary>
		/// <param name="source">RingConstraint to use as the source of the relationship.</param>
		/// <param name="target">RingConstraintTypeNotSpecifiedError to use as the target of the relationship.</param>
		public RingConstraintHasRingConstraintTypeNotSpecifiedError(RingConstraint source, RingConstraintTypeNotSpecifiedError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId, source), new DslModeling::RoleAssignment(RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RingConstraintHasRingConstraintTypeNotSpecifiedError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RingConstraintHasRingConstraintTypeNotSpecifiedError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RingConstraintHasRingConstraintTypeNotSpecifiedError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RingConstraintHasRingConstraintTypeNotSpecifiedError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RingConstraint domain role code
		
		/// <summary>
		/// RingConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid RingConstraintDomainRoleId = new global::System.Guid(0x4e7dea3b, 0xacf3, 0x4e71, 0xa4, 0xf2, 0x5c, 0x08, 0xfb, 0x80, 0x77, 0xd2);
		
		/// <summary>
		/// DomainRole RingConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError/RingConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError/RingConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RingConstraintTypeNotSpecifiedError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError/RingConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4e7dea3b-acf3-4e71-a4f2-5c08fb8077d2")]
		public virtual RingConstraint RingConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RingConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, RingConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RingConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RingConstraint of a RingConstraintTypeNotSpecifiedError
		/// <summary>
		/// Gets RingConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RingConstraint GetRingConstraint(RingConstraintTypeNotSpecifiedError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RingConstraintTypeNotSpecifiedErrorDomainRoleId) as RingConstraint;
		}
		
		/// <summary>
		/// Sets RingConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRingConstraint(RingConstraintTypeNotSpecifiedError element, RingConstraint newRingConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RingConstraintTypeNotSpecifiedErrorDomainRoleId, newRingConstraint);
		}
		#endregion
		#region RingConstraintTypeNotSpecifiedError domain role code
		
		/// <summary>
		/// RingConstraintTypeNotSpecifiedError domain role Id.
		/// </summary>
		public static readonly global::System.Guid RingConstraintTypeNotSpecifiedErrorDomainRoleId = new global::System.Guid(0x46f7ef6e, 0x7a37, 0x44a3, 0xa2, 0x21, 0x26, 0xd0, 0xd9, 0x9a, 0xe4, 0xbd);
		
		/// <summary>
		/// DomainRole RingConstraintTypeNotSpecifiedError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError/RingConstraintTypeNotSpecifiedError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError/RingConstraintTypeNotSpecifiedError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RingConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError/RingConstraintTypeNotSpecifiedError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("46f7ef6e-7a37-44a3-a221-26d0d99ae4bd")]
		public virtual RingConstraintTypeNotSpecifiedError RingConstraintTypeNotSpecifiedError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RingConstraintTypeNotSpecifiedError)DslModeling::DomainRoleInfo.GetRolePlayer(this, RingConstraintTypeNotSpecifiedErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RingConstraintTypeNotSpecifiedErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RingConstraintTypeNotSpecifiedError of a RingConstraint
		/// <summary>
		/// Gets RingConstraintTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RingConstraintTypeNotSpecifiedError GetRingConstraintTypeNotSpecifiedError(RingConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RingConstraintDomainRoleId) as RingConstraintTypeNotSpecifiedError;
		}
		
		/// <summary>
		/// Sets RingConstraintTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRingConstraintTypeNotSpecifiedError(RingConstraint element, RingConstraintTypeNotSpecifiedError newRingConstraintTypeNotSpecifiedError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RingConstraintDomainRoleId, newRingConstraintTypeNotSpecifiedError);
		}
		#endregion
		#region RingConstraint link accessor
		/// <summary>
		/// Get the RingConstraintHasRingConstraintTypeNotSpecifiedError link to a RingConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError GetLinkToRingConstraintTypeNotSpecifiedError (global::Neumont.Tools.ORM.ObjectModel.RingConstraint ringConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError>(ringConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RingConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RingConstraintTypeNotSpecifiedError link accessor
		/// <summary>
		/// Get the RingConstraintHasRingConstraintTypeNotSpecifiedError link to a RingConstraintTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError GetLinkToRingConstraint (global::Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedError ringConstraintTypeNotSpecifiedErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError>(ringConstraintTypeNotSpecifiedErrorInstance, global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RingConstraintTypeNotSpecifiedError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RingConstraintHasRingConstraintTypeNotSpecifiedError instance accessors
		
		/// <summary>
		/// Get any RingConstraintHasRingConstraintTypeNotSpecifiedError links between a given RingConstraint and a RingConstraintTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.RingConstraint source, global::Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError>(source, global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError link in links )
			{
				if ( target.Equals(link.RingConstraintTypeNotSpecifiedError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RingConstraintHasRingConstraintTypeNotSpecifiedError link between a given RingConstraintand a RingConstraintTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError GetLink( global::Neumont.Tools.ORM.ObjectModel.RingConstraint source, global::Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError>(source, global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError link in links )
			{
				if ( target.Equals(link.RingConstraintTypeNotSpecifiedError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueConstraintHasDuplicateNameError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("3d69f8de-6075-432b-8843-e8babc677457")]
	public partial class ValueConstraintHasDuplicateNameError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueConstraintHasDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3d69f8de, 0x6075, 0x432b, 0x88, 0x43, 0xe8, 0xba, 0xbc, 0x67, 0x74, 0x57);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueConstraintHasDuplicateNameError link in the same Partition as the given ValueConstraint
		/// </summary>
		/// <param name="source">ValueConstraint to use as the source of the relationship.</param>
		/// <param name="target">ConstraintDuplicateNameError to use as the target of the relationship.</param>
		public ValueConstraintHasDuplicateNameError(ValueConstraint source, ConstraintDuplicateNameError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueConstraintHasDuplicateNameError.ValueConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ValueConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasDuplicateNameError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasDuplicateNameError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasDuplicateNameError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasDuplicateNameError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueConstraint domain role code
		
		/// <summary>
		/// ValueConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueConstraintDomainRoleId = new global::System.Guid(0x8d9cde68, 0x22d7, 0x48ff, 0xab, 0xe2, 0x16, 0x17, 0xb5, 0xd2, 0xbb, 0x92);
		
		/// <summary>
		/// DomainRole ValueConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError/ValueConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError/ValueConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DuplicateNameError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError/ValueConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("8d9cde68-22d7-48ff-abe2-1617b5d2bb92")]
		public virtual ValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueConstraintCollection of a ConstraintDuplicateNameError
		/// <summary>
		/// Gets a list of ValueConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ValueConstraint> GetValueConstraintCollection(ConstraintDuplicateNameError element)
		{
			return new DslModeling::LinkedElementCollection<ValueConstraint>(element, DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region DuplicateNameError domain role code
		
		/// <summary>
		/// DuplicateNameError domain role Id.
		/// </summary>
		public static readonly global::System.Guid DuplicateNameErrorDomainRoleId = new global::System.Guid(0xfa64a9fe, 0x8209, 0x4fc7, 0xbd, 0xa6, 0x7d, 0xf2, 0xc7, 0x34, 0x57, 0x3a);
		
		/// <summary>
		/// DomainRole DuplicateNameError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.DuplicateNameError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError/DuplicateNameError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError/DuplicateNameError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueConstraintCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError/DuplicateNameError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("fa64a9fe-8209-4fc7-bda6-7df2c734573a")]
		public virtual ConstraintDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintDuplicateNameError)DslModeling::DomainRoleInfo.GetRolePlayer(this, DuplicateNameErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DuplicateNameErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DuplicateNameError of a ValueConstraint
		/// <summary>
		/// Gets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintDuplicateNameError GetDuplicateNameError(ValueConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueConstraintDomainRoleId) as ConstraintDuplicateNameError;
		}
		
		/// <summary>
		/// Sets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDuplicateNameError(ValueConstraint element, ConstraintDuplicateNameError newDuplicateNameError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueConstraintDomainRoleId, newDuplicateNameError);
		}
		#endregion
		#region ValueConstraint link accessor
		/// <summary>
		/// Get the ValueConstraintHasDuplicateNameError link to a ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError GetLinkToDuplicateNameError (global::Neumont.Tools.ORM.ObjectModel.ValueConstraint valueConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError>(valueConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DuplicateNameError link accessor
		/// <summary>
		/// Get the list of ValueConstraintHasDuplicateNameError links to a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError> GetLinksToValueConstraintCollection ( global::Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError duplicateNameErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError>(duplicateNameErrorInstance, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region ValueConstraintHasDuplicateNameError instance accessors
		
		/// <summary>
		/// Get any ValueConstraintHasDuplicateNameError links between a given ValueConstraint and a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ValueConstraint source, global::Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError>(source, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueConstraintHasDuplicateNameError link between a given ValueConstraintand a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError GetLink( global::Neumont.Tools.ORM.ObjectModel.ValueConstraint source, global::Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError>(source, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeHasObjectTypeRequiresPrimarySupertypeError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("2231fc51-1b87-45a5-af53-5a95f1b68e04")]
	public partial class ObjectTypeHasObjectTypeRequiresPrimarySupertypeError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeHasObjectTypeRequiresPrimarySupertypeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2231fc51, 0x1b87, 0x45a5, 0xaf, 0x53, 0x5a, 0x95, 0xf1, 0xb6, 0x8e, 0x04);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeHasObjectTypeRequiresPrimarySupertypeError link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">ObjectTypeRequiresPrimarySupertypeError to use as the target of the relationship.</param>
		public ObjectTypeHasObjectTypeRequiresPrimarySupertypeError(ObjectType source, ObjectTypeRequiresPrimarySupertypeError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasObjectTypeRequiresPrimarySupertypeError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasObjectTypeRequiresPrimarySupertypeError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasObjectTypeRequiresPrimarySupertypeError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasObjectTypeRequiresPrimarySupertypeError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0xe968cd16, 0x0fad, 0x4d46, 0xbe, 0x86, 0x47, 0x8b, 0x12, 0xcd, 0x8f, 0xcc);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError/ObjectType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError/ObjectType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectTypeRequiresPrimarySupertypeError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e968cd16-0fad-4d46-be86-478b12cd8fcc")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectType of a ObjectTypeRequiresPrimarySupertypeError
		/// <summary>
		/// Gets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetObjectType(ObjectTypeRequiresPrimarySupertypeError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeRequiresPrimarySupertypeErrorDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectType(ObjectTypeRequiresPrimarySupertypeError element, ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeRequiresPrimarySupertypeErrorDomainRoleId, newObjectType);
		}
		#endregion
		#region ObjectTypeRequiresPrimarySupertypeError domain role code
		
		/// <summary>
		/// ObjectTypeRequiresPrimarySupertypeError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeRequiresPrimarySupertypeErrorDomainRoleId = new global::System.Guid(0x4cdf2ebe, 0x8d1a, 0x48c9, 0xb3, 0x4f, 0x9c, 0xe8, 0x2c, 0x88, 0x26, 0x25);
		
		/// <summary>
		/// DomainRole ObjectTypeRequiresPrimarySupertypeError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError/ObjectTypeRequiresPrimarySupertypeError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError/ObjectTypeRequiresPrimarySupertypeError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError/ObjectTypeRequiresPrimarySupertypeError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4cdf2ebe-8d1a-48c9-b34f-9ce82c882625")]
		public virtual ObjectTypeRequiresPrimarySupertypeError ObjectTypeRequiresPrimarySupertypeError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectTypeRequiresPrimarySupertypeError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeRequiresPrimarySupertypeErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeRequiresPrimarySupertypeErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectTypeRequiresPrimarySupertypeError of a ObjectType
		/// <summary>
		/// Gets ObjectTypeRequiresPrimarySupertypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectTypeRequiresPrimarySupertypeError GetObjectTypeRequiresPrimarySupertypeError(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as ObjectTypeRequiresPrimarySupertypeError;
		}
		
		/// <summary>
		/// Sets ObjectTypeRequiresPrimarySupertypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectTypeRequiresPrimarySupertypeError(ObjectType element, ObjectTypeRequiresPrimarySupertypeError newObjectTypeRequiresPrimarySupertypeError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newObjectTypeRequiresPrimarySupertypeError);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ObjectTypeHasObjectTypeRequiresPrimarySupertypeError link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError GetLinkToObjectTypeRequiresPrimarySupertypeError (global::Neumont.Tools.ORM.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError>(objectTypeInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectTypeRequiresPrimarySupertypeError link accessor
		/// <summary>
		/// Get the ObjectTypeHasObjectTypeRequiresPrimarySupertypeError link to a ObjectTypeRequiresPrimarySupertypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError GetLinkToObjectType (global::Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeError objectTypeRequiresPrimarySupertypeErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError>(objectTypeRequiresPrimarySupertypeErrorInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectTypeRequiresPrimarySupertypeError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectTypeHasObjectTypeRequiresPrimarySupertypeError instance accessors
		
		/// <summary>
		/// Get any ObjectTypeHasObjectTypeRequiresPrimarySupertypeError links between a given ObjectType and a ObjectTypeRequiresPrimarySupertypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError link in links )
			{
				if ( target.Equals(link.ObjectTypeRequiresPrimarySupertypeError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeHasObjectTypeRequiresPrimarySupertypeError link between a given ObjectTypeand a ObjectTypeRequiresPrimarySupertypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError GetLink( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError link in links )
			{
				if ( target.Equals(link.ObjectTypeRequiresPrimarySupertypeError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasNote
	/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeHasNote
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b41c4d61-2a9f-4c91-b948-52e53a8e525f")]
	public partial class FactTypeHasNote : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb41c4d61, 0x2a9f, 0x4c91, 0xb9, 0x48, 0x52, 0xe5, 0x3a, 0x8e, 0x52, 0x5f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasNote link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">Note to use as the target of the relationship.</param>
		public FactTypeHasNote(FactType source, Note target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasNote.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasNote.NoteDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasNote(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasNote(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasNote(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasNote(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xbedcb56b, 0xcad7, 0x45fd, 0xb7, 0x81, 0x2a, 0x43, 0x7a, 0xef, 0x51, 0x41);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasNote/FactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasNote/FactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Note", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasNote/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("bedcb56b-cad7-45fd-b781-2a437aef5141")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a Note
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(Note element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NoteDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(Note element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NoteDomainRoleId, newFactType);
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly global::System.Guid NoteDomainRoleId = new global::System.Guid(0x0ee3d4e9, 0x714c, 0x404f, 0xae, 0x40, 0x5c, 0x14, 0x0a, 0x33, 0x5f, 0x42);
		
		/// <summary>
		/// DomainRole Note
		/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.Note
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasNote/Note.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasNote/Note.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasNote/Note.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0ee3d4e9-714c-404f-ae40-5c140a335f42")]
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Note)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Note of a FactType
		/// <summary>
		/// Gets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Note GetNote(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as Note;
		}
		
		/// <summary>
		/// Sets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNote(FactType element, Note newNote)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newNote);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the FactTypeHasNote link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote GetLinkToNote (global::Neumont.Tools.ORM.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote>(factTypeInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the FactTypeHasNote link to a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote GetLinkToFactType (global::Neumont.Tools.ORM.ObjectModel.Note noteInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote>(noteInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.NoteDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Note not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasNote instance accessors
		
		/// <summary>
		/// Get any FactTypeHasNote links between a given FactType and a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote> GetLinks( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.Note target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasNote link between a given FactTypeand a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote GetLink( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.Note target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeHasNote
	/// Description for Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8357f61d-e61e-40f5-b98a-782b02a85b1a")]
	public partial class ObjectTypeHasNote : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeHasNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8357f61d, 0xe61e, 0x40f5, 0xb9, 0x8a, 0x78, 0x2b, 0x02, 0xa8, 0x5b, 0x1a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeHasNote link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">Note to use as the target of the relationship.</param>
		public ObjectTypeHasNote(ObjectType source, Note target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeHasNote.ObjectTypeDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeHasNote.NoteDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasNote(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasNote(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasNote(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasNote(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0xa75b240c, 0x06cc, 0x4f48, 0xb7, 0x87, 0x85, 0x36, 0xc5, 0x8e, 0x4c, 0xd8);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote/ObjectType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote/ObjectType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Note", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a75b240c-06cc-4f48-b787-8536c58e4cd8")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectType of a Note
		/// <summary>
		/// Gets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetObjectType(Note element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NoteDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectType(Note element, ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NoteDomainRoleId, newObjectType);
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly global::System.Guid NoteDomainRoleId = new global::System.Guid(0xb2bc6ecc, 0x430a, 0x48ae, 0xa8, 0x62, 0xd4, 0xd8, 0x76, 0x74, 0x81, 0x30);
		
		/// <summary>
		/// DomainRole Note
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.Note
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote/Note.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote/Note.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote/Note.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b2bc6ecc-430a-48ae-a862-d4d876748130")]
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Note)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Note of a ObjectType
		/// <summary>
		/// Gets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Note GetNote(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as Note;
		}
		
		/// <summary>
		/// Sets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNote(ObjectType element, Note newNote)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newNote);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ObjectTypeHasNote link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote GetLinkToNote (global::Neumont.Tools.ORM.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote>(objectTypeInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the ObjectTypeHasNote link to a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote GetLinkToObjectType (global::Neumont.Tools.ORM.ObjectModel.Note noteInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote>(noteInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.NoteDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Note not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectTypeHasNote instance accessors
		
		/// <summary>
		/// Get any ObjectTypeHasNote links between a given ObjectType and a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.Note target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeHasNote link between a given ObjectTypeand a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote GetLink( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.Note target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasModelNote
	/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasModelNote
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasModelNote.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasModelNote.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("783ea177-e965-4c01-9d4a-a89c016203b6")]
	public partial class ModelHasModelNote : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasModelNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x783ea177, 0xe965, 0x4c01, 0x9d, 0x4a, 0xa8, 0x9c, 0x01, 0x62, 0x03, 0xb6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasModelNote link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">ModelNote to use as the target of the relationship.</param>
		public ModelHasModelNote(ORMModel source, ModelNote target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasModelNote.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasModelNote.NoteDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasModelNote(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasModelNote(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasModelNote(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasModelNote(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x197f0666, 0xb426, 0x44a9, 0xbc, 0xa8, 0x83, 0x3f, 0xfe, 0x54, 0x13, 0x5d);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasModelNote.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasModelNote/Model.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasModelNote/Model.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NoteCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasModelNote/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("197f0666-b426-44a9-bca8-833ffe54135d")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ModelNote
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(ModelNote element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NoteDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ModelNote element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NoteDomainRoleId, newModel);
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly global::System.Guid NoteDomainRoleId = new global::System.Guid(0xa07be562, 0x6ac3, 0x4c86, 0x96, 0x12, 0x89, 0x40, 0x48, 0xc9, 0x4e, 0x5d);
		
		/// <summary>
		/// DomainRole Note
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasModelNote.Note
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelHasModelNote/Note.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelHasModelNote/Note.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelHasModelNote/Note.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a07be562-6ac3-4c86-9612-894048c94e5d")]
		public virtual ModelNote Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelNote)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NoteCollection of a ORMModel
		/// <summary>
		/// Gets a list of NoteCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelNote> GetNoteCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<ModelNote>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasModelNote links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote> GetLinksToNoteCollection ( global::Neumont.Tools.ORM.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote>(modelInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote.ModelDomainRoleId);
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the ModelHasModelNote link to a ModelNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote GetLinkToModel (global::Neumont.Tools.ORM.ObjectModel.ModelNote noteInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote>(noteInstance, global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote.NoteDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Note not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasModelNote instance accessors
		
		/// <summary>
		/// Get any ModelHasModelNote links between a given ORMModel and a ModelNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.ModelNote target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasModelNote link between a given ORMModeland a ModelNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote GetLink( global::Neumont.Tools.ORM.ObjectModel.ORMModel source, global::Neumont.Tools.ORM.ObjectModel.ModelNote target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote>(source, global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote.ModelDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelNoteReferencesModelElement
	/// Description for Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("57a1d17b-db15-418a-8d82-3d44b3d1169f")]
	public abstract partial class ModelNoteReferencesModelElement : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelNoteReferencesModelElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x57a1d17b, 0xdb15, 0x418a, 0x8d, 0x82, 0x3d, 0x44, 0xb3, 0xd1, 0x16, 0x9f);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected ModelNoteReferencesModelElement(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly global::System.Guid NoteDomainRoleId = new global::System.Guid(0x9b8920d2, 0xbe41, 0x4e4a, 0xb3, 0x9f, 0x50, 0x39, 0x40, 0x50, 0xa0, 0x19);
		
		/// <summary>
		/// DomainRole Note
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement.Note
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement/Note.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement/Note.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ElementCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement/Note.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9b8920d2-be41-4e4a-b39f-50394050a019")]
		public abstract ModelNote Note
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ModelNoteCollection of a ModelElement
		/// <summary>
		/// Gets a list of ModelNoteCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ModelNote> GetModelNoteCollection(global::Microsoft.VisualStudio.Modeling.ModelElement element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ModelNote>(element, ElementDomainRoleId);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x9d0c7587, 0xf135, 0x4619, 0x86, 0xfa, 0x33, 0xc8, 0x0c, 0x4e, 0xb7, 0x69);
		
		/// <summary>
		/// DomainRole Element
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement.Element
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement/Element.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement/Element.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelNoteCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement/Element.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9d0c7587-f135-4619-86fa-33c80c4eb769")]
		public abstract global::Microsoft.VisualStudio.Modeling.ModelElement Element
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ElementCollection of a ModelNote
		/// <summary>
		/// Gets a list of ElementCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> GetElementCollection(ModelNote element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>(element, NoteDomainRoleId);
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the list of ModelNoteReferencesModelElement links to a ModelNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement> GetLinksToElementCollection ( global::Neumont.Tools.ORM.ObjectModel.ModelNote noteInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement>(noteInstance, global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement.NoteDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the list of ModelNoteReferencesModelElement links to a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement> GetLinksToModelNoteCollection ( global::Microsoft.VisualStudio.Modeling.ModelElement elementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement>(elementInstance, global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement.ElementDomainRoleId);
		}
		#endregion
		#region ModelNoteReferencesModelElement instance accessors
		
		/// <summary>
		/// Get any ModelNoteReferencesModelElement links between a given ModelNote and a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ModelNote source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement>(source, global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement.NoteDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelNoteReferencesModelElement link between a given ModelNoteand a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement GetLink( global::Neumont.Tools.ORM.ObjectModel.ModelNote source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement>(source, global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement.NoteDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelNoteReferencesFactType
	/// Description for Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a6f1eb10-f929-4389-b584-38dfe11a85c2")]
	public partial class ModelNoteReferencesFactType : ModelNoteReferencesModelElement
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelNoteReferencesFactType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa6f1eb10, 0xf929, 0x4389, 0xb5, 0x84, 0x38, 0xdf, 0xe1, 0x1a, 0x85, 0xc2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelNoteReferencesFactType link in the same Partition as the given ModelNote
		/// </summary>
		/// <param name="source">ModelNote to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public ModelNoteReferencesFactType(ModelNote source, FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelNoteReferencesFactType.NoteDomainRoleId, source), new DslModeling::RoleAssignment(ModelNoteReferencesFactType.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelNoteReferencesFactType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelNoteReferencesFactType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelNoteReferencesFactType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelNoteReferencesFactType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly new global::System.Guid NoteDomainRoleId = new global::System.Guid(0xb2d991e2, 0x3f04, 0x4471, 0x93, 0xf5, 0x72, 0xd4, 0xe4, 0xdd, 0xf0, 0x87);
		
		/// <summary>
		/// DomainRole Note
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType.Note
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType/Note.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType/Note.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FactTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType/Note.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b2d991e2-3f04-4471-93f5-72d4e4ddf087")]
		public override ModelNote Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelNote)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelNoteCollection of a FactType
		/// <summary>
		/// Gets a list of ModelNoteCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelNote> GetModelNoteCollection(FactType element)
		{
			return new DslModeling::LinkedElementCollection<ModelNote>(element, ElementDomainRoleId);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ElementDomainRoleId = new global::System.Guid(0xc176868f, 0x94e3, 0x4f5e, 0xa8, 0x55, 0xa3, 0x3c, 0xa7, 0xd6, 0x54, 0x4b);
		
		/// <summary>
		/// DomainRole Element
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType.Element
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType/Element.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType/Element.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, RolePlayer = typeof(FactType), PropertyName = "ModelNoteCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType/Element.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c176868f-94e3-4f5e-a855-a33ca7d6544b")]
		public override global::Microsoft.VisualStudio.Modeling.ModelElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Microsoft.VisualStudio.Modeling.ModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeCollection of a ModelNote
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactType> GetFactTypeCollection(ModelNote element)
		{
			return new DslModeling::LinkedElementCollection<FactType>(element, NoteDomainRoleId);
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the list of ModelNoteReferencesFactType links to a ModelNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType> GetLinksToFactTypeCollection ( global::Neumont.Tools.ORM.ObjectModel.ModelNote noteInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType>(noteInstance, global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType.NoteDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the list of ModelNoteReferencesFactType links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType> GetLinksToModelNoteCollection ( global::Neumont.Tools.ORM.ObjectModel.FactType elementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType>(elementInstance, global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType.ElementDomainRoleId);
		}
		#endregion
		#region ModelNoteReferencesFactType instance accessors
		
		/// <summary>
		/// Get any ModelNoteReferencesFactType links between a given ModelNote and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ModelNote source, global::Neumont.Tools.ORM.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType>(source, global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType.NoteDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelNoteReferencesFactType link between a given ModelNoteand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType GetLink( global::Neumont.Tools.ORM.ObjectModel.ModelNote source, global::Neumont.Tools.ORM.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType>(source, global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType.NoteDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelNoteReferencesObjectType
	/// Description for Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("cb83fd24-7819-4c34-af59-b4e14ae3be8f")]
	public partial class ModelNoteReferencesObjectType : ModelNoteReferencesModelElement
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelNoteReferencesObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcb83fd24, 0x7819, 0x4c34, 0xaf, 0x59, 0xb4, 0xe1, 0x4a, 0xe3, 0xbe, 0x8f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelNoteReferencesObjectType link in the same Partition as the given ModelNote
		/// </summary>
		/// <param name="source">ModelNote to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public ModelNoteReferencesObjectType(ModelNote source, ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelNoteReferencesObjectType.NoteDomainRoleId, source), new DslModeling::RoleAssignment(ModelNoteReferencesObjectType.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelNoteReferencesObjectType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelNoteReferencesObjectType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelNoteReferencesObjectType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelNoteReferencesObjectType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly new global::System.Guid NoteDomainRoleId = new global::System.Guid(0xc1350acb, 0x4cb5, 0x444e, 0x8e, 0x97, 0x76, 0xe5, 0x25, 0x00, 0x62, 0x33);
		
		/// <summary>
		/// DomainRole Note
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType.Note
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType/Note.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType/Note.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectTypeCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType/Note.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c1350acb-4cb5-444e-8e97-76e525006233")]
		public override ModelNote Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelNote)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelNoteCollection of a ObjectType
		/// <summary>
		/// Gets a list of ModelNoteCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelNote> GetModelNoteCollection(ObjectType element)
		{
			return new DslModeling::LinkedElementCollection<ModelNote>(element, ElementDomainRoleId);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ElementDomainRoleId = new global::System.Guid(0xfe3bf94e, 0xb5b1, 0x4152, 0x8f, 0x73, 0x2f, 0xbc, 0x16, 0xc0, 0x8b, 0xe6);
		
		/// <summary>
		/// DomainRole Element
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType.Element
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType/Element.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType/Element.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, RolePlayer = typeof(ObjectType), PropertyName = "ModelNoteCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType/Element.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fe3bf94e-b5b1-4152-8f73-2fbc16c08be6")]
		public override global::Microsoft.VisualStudio.Modeling.ModelElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Microsoft.VisualStudio.Modeling.ModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectTypeCollection of a ModelNote
		/// <summary>
		/// Gets a list of ObjectTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ObjectType> GetObjectTypeCollection(ModelNote element)
		{
			return new DslModeling::LinkedElementCollection<ObjectType>(element, NoteDomainRoleId);
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the list of ModelNoteReferencesObjectType links to a ModelNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType> GetLinksToObjectTypeCollection ( global::Neumont.Tools.ORM.ObjectModel.ModelNote noteInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType>(noteInstance, global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType.NoteDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the list of ModelNoteReferencesObjectType links to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType> GetLinksToModelNoteCollection ( global::Neumont.Tools.ORM.ObjectModel.ObjectType elementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType>(elementInstance, global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType.ElementDomainRoleId);
		}
		#endregion
		#region ModelNoteReferencesObjectType instance accessors
		
		/// <summary>
		/// Get any ModelNoteReferencesObjectType links between a given ModelNote and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ModelNote source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType>(source, global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType.NoteDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelNoteReferencesObjectType link between a given ModelNoteand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType GetLink( global::Neumont.Tools.ORM.ObjectModel.ModelNote source, global::Neumont.Tools.ORM.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType>(source, global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType.NoteDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeHasCompatibleSupertypesError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4a739f80-00fa-4f02-bd81-ed60c79defc3")]
	public partial class ObjectTypeHasCompatibleSupertypesError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeHasCompatibleSupertypesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4a739f80, 0x00fa, 0x4f02, 0xbd, 0x81, 0xed, 0x60, 0xc7, 0x9d, 0xef, 0xc3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeHasCompatibleSupertypesError link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">CompatibleSupertypesError to use as the target of the relationship.</param>
		public ObjectTypeHasCompatibleSupertypesError(ObjectType source, CompatibleSupertypesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasCompatibleSupertypesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasCompatibleSupertypesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasCompatibleSupertypesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasCompatibleSupertypesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0xff50f039, 0xb38b, 0x41a2, 0x9d, 0x06, 0x0a, 0xef, 0xbe, 0x62, 0xc6, 0xa9);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError/ObjectType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError/ObjectType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CompatibleSupertypesError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ff50f039-b38b-41a2-9d06-0aefbe62c6a9")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectType of a CompatibleSupertypesError
		/// <summary>
		/// Gets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetObjectType(CompatibleSupertypesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CompatibleSupertypesErrorDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectType(CompatibleSupertypesError element, ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CompatibleSupertypesErrorDomainRoleId, newObjectType);
		}
		#endregion
		#region CompatibleSupertypesError domain role code
		
		/// <summary>
		/// CompatibleSupertypesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompatibleSupertypesErrorDomainRoleId = new global::System.Guid(0x368139c3, 0xb56f, 0x4483, 0x83, 0xae, 0x9c, 0x8e, 0x68, 0xbc, 0xa8, 0xb0);
		
		/// <summary>
		/// DomainRole CompatibleSupertypesError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError/CompatibleSupertypesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError/CompatibleSupertypesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError/CompatibleSupertypesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("368139c3-b56f-4483-83ae-9c8e68bca8b0")]
		public virtual CompatibleSupertypesError CompatibleSupertypesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CompatibleSupertypesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompatibleSupertypesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompatibleSupertypesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CompatibleSupertypesError of a ObjectType
		/// <summary>
		/// Gets CompatibleSupertypesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CompatibleSupertypesError GetCompatibleSupertypesError(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as CompatibleSupertypesError;
		}
		
		/// <summary>
		/// Sets CompatibleSupertypesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCompatibleSupertypesError(ObjectType element, CompatibleSupertypesError newCompatibleSupertypesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newCompatibleSupertypesError);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ObjectTypeHasCompatibleSupertypesError link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError GetLinkToCompatibleSupertypesError (global::Neumont.Tools.ORM.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError>(objectTypeInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CompatibleSupertypesError link accessor
		/// <summary>
		/// Get the ObjectTypeHasCompatibleSupertypesError link to a CompatibleSupertypesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError GetLinkToObjectType (global::Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesError compatibleSupertypesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError>(compatibleSupertypesErrorInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CompatibleSupertypesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectTypeHasCompatibleSupertypesError instance accessors
		
		/// <summary>
		/// Get any ObjectTypeHasCompatibleSupertypesError links between a given ObjectType and a CompatibleSupertypesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError link in links )
			{
				if ( target.Equals(link.CompatibleSupertypesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeHasCompatibleSupertypesError link between a given ObjectTypeand a CompatibleSupertypesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError GetLink( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError link in links )
			{
				if ( target.Equals(link.CompatibleSupertypesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetConstraintHasImplicationError
	/// Description for Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7dea2631-58ef-46a6-b9e1-a8eda2948ae3")]
	public partial class SetConstraintHasImplicationError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetConstraintHasImplicationError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7dea2631, 0x58ef, 0x46a6, 0xb9, 0xe1, 0xa8, 0xed, 0xa2, 0x94, 0x8a, 0xe3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetConstraintHasImplicationError link in the same Partition as the given SetConstraint
		/// </summary>
		/// <param name="source">SetConstraint to use as the source of the relationship.</param>
		/// <param name="target">ImplicationError to use as the target of the relationship.</param>
		public SetConstraintHasImplicationError(SetConstraint source, ImplicationError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetConstraintHasImplicationError.SetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetConstraintHasImplicationError.ImplicationErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasImplicationError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasImplicationError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasImplicationError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasImplicationError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetConstraint domain role code
		
		/// <summary>
		/// SetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetConstraintDomainRoleId = new global::System.Guid(0x11e75e00, 0x142e, 0x4f4f, 0xb9, 0xb1, 0xab, 0x55, 0x11, 0x21, 0x84, 0x40);
		
		/// <summary>
		/// DomainRole SetConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.SetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError/SetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError/SetConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ImplicationError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError/SetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("11e75e00-142e-4f4f-b9b1-ab5511218440")]
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraint of a ImplicationError
		/// <summary>
		/// Gets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetConstraint GetSetConstraint(ImplicationError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ImplicationErrorDomainRoleId) as SetConstraint;
		}
		
		/// <summary>
		/// Sets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetConstraint(ImplicationError element, SetConstraint newSetConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ImplicationErrorDomainRoleId, newSetConstraint);
		}
		#endregion
		#region ImplicationError domain role code
		
		/// <summary>
		/// ImplicationError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImplicationErrorDomainRoleId = new global::System.Guid(0x2ff88d36, 0x6636, 0x4e33, 0xb1, 0x1d, 0xdb, 0x60, 0x13, 0xfb, 0x7b, 0xa2);
		
		/// <summary>
		/// DomainRole ImplicationError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.ImplicationError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError/ImplicationError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError/ImplicationError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError/ImplicationError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2ff88d36-6636-4e33-b11d-db6013fb7ba2")]
		public virtual ImplicationError ImplicationError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImplicationError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImplicationErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImplicationErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImplicationError of a SetConstraint
		/// <summary>
		/// Gets ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ImplicationError GetImplicationError(SetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetConstraintDomainRoleId) as ImplicationError;
		}
		
		/// <summary>
		/// Sets ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImplicationError(SetConstraint element, ImplicationError newImplicationError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetConstraintDomainRoleId, newImplicationError);
		}
		#endregion
		#region SetConstraint link accessor
		/// <summary>
		/// Get the SetConstraintHasImplicationError link to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError GetLinkToImplicationError (global::Neumont.Tools.ORM.ObjectModel.SetConstraint setConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError>(setConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.SetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ImplicationError link accessor
		/// <summary>
		/// Get the SetConstraintHasImplicationError link to a ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError GetLinkToSetConstraint (global::Neumont.Tools.ORM.ObjectModel.ImplicationError implicationErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError>(implicationErrorInstance, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.ImplicationErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ImplicationError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetConstraintHasImplicationError instance accessors
		
		/// <summary>
		/// Get any SetConstraintHasImplicationError links between a given SetConstraint and a ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.SetConstraint source, global::Neumont.Tools.ORM.ObjectModel.ImplicationError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError>(source, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.SetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError link in links )
			{
				if ( target.Equals(link.ImplicationError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetConstraintHasImplicationError link between a given SetConstraintand a ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError GetLink( global::Neumont.Tools.ORM.ObjectModel.SetConstraint source, global::Neumont.Tools.ORM.ObjectModel.ImplicationError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError>(source, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.SetConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError link in links )
			{
				if ( target.Equals(link.ImplicationError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasImplicationError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6f9e9e77-3da6-4b01-b3ab-f46fb4c43ca8")]
	public partial class SetComparisonConstraintHasImplicationError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasImplicationError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6f9e9e77, 0x3da6, 0x4b01, 0xb3, 0xab, 0xf4, 0x6f, 0xb4, 0xc4, 0x3c, 0xa8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasImplicationError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">ImplicationError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasImplicationError(SetComparisonConstraint source, ImplicationError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasImplicationError.ImplicationErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasImplicationError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasImplicationError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasImplicationError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasImplicationError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0xbce096ee, 0x2383, 0x42c8, 0xb5, 0x2c, 0xc5, 0x43, 0xcd, 0x25, 0x22, 0x64);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError/SetComparisonConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError/SetComparisonConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ImplicationError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("bce096ee-2383-42c8-b52c-c543cd252264")]
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraint of a ImplicationError
		/// <summary>
		/// Gets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetComparisonConstraint GetSetComparisonConstraint(ImplicationError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ImplicationErrorDomainRoleId) as SetComparisonConstraint;
		}
		
		/// <summary>
		/// Sets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetComparisonConstraint(ImplicationError element, SetComparisonConstraint newSetComparisonConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ImplicationErrorDomainRoleId, newSetComparisonConstraint);
		}
		#endregion
		#region ImplicationError domain role code
		
		/// <summary>
		/// ImplicationError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImplicationErrorDomainRoleId = new global::System.Guid(0xda7f46c4, 0xa975, 0x4dcb, 0xb1, 0xde, 0x1f, 0xc7, 0x79, 0x45, 0x28, 0x65);
		
		/// <summary>
		/// DomainRole ImplicationError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.ImplicationError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError/ImplicationError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError/ImplicationError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError/ImplicationError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("da7f46c4-a975-4dcb-b1de-1fc779452865")]
		public virtual ImplicationError ImplicationError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImplicationError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImplicationErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImplicationErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImplicationError of a SetComparisonConstraint
		/// <summary>
		/// Gets ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ImplicationError GetImplicationError(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as ImplicationError;
		}
		
		/// <summary>
		/// Sets ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImplicationError(SetComparisonConstraint element, ImplicationError newImplicationError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newImplicationError);
		}
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasImplicationError link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError GetLinkToImplicationError (global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError>(setComparisonConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ImplicationError link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasImplicationError link to a ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError GetLinkToSetComparisonConstraint (global::Neumont.Tools.ORM.ObjectModel.ImplicationError implicationErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError>(implicationErrorInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.ImplicationErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ImplicationError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetComparisonConstraintHasImplicationError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasImplicationError links between a given SetComparisonConstraint and a ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.ImplicationError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError link in links )
			{
				if ( target.Equals(link.ImplicationError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasImplicationError link between a given SetComparisonConstraintand a ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError GetLink( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.ImplicationError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError link in links )
			{
				if ( target.Equals(link.ImplicationError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a7ca6438-cace-4fcc-b96c-03e1ddcd3152")]
	public partial class SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError : SetComparisonConstraintHasImplicationError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa7ca6438, 0xcace, 0x4fcc, 0xb9, 0x6c, 0x03, 0xe1, 0xdd, 0xcd, 0x31, 0x52);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">EqualityOrSubsetImpliedByMandatoryError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError(SetComparisonConstraint source, EqualityOrSubsetImpliedByMandatoryError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly new global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0x5606e453, 0xd52c, 0x4465, 0xae, 0x97, 0xef, 0x3d, 0x75, 0xe9, 0x72, 0x45);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError/SetComparisonConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError/SetComparisonConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EqualityOrSubsetImpliedByMandatoryError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5606e453-d52c-4465-ae97-ef3d75e97245")]
		public override SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraint of a EqualityOrSubsetImpliedByMandatoryError
		/// <summary>
		/// Gets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetComparisonConstraint GetSetComparisonConstraint(EqualityOrSubsetImpliedByMandatoryError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId) as SetComparisonConstraint;
		}
		
		/// <summary>
		/// Sets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetComparisonConstraint(EqualityOrSubsetImpliedByMandatoryError element, SetComparisonConstraint newSetComparisonConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId, newSetComparisonConstraint);
		}
		#endregion
		#region EqualityOrSubsetImpliedByMandatoryError domain role code
		
		/// <summary>
		/// EqualityOrSubsetImpliedByMandatoryError domain role Id.
		/// </summary>
		public static readonly global::System.Guid EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId = new global::System.Guid(0x6ddf4667, 0x3dd7, 0x4661, 0x9c, 0xf2, 0xaa, 0x6e, 0x3e, 0xf7, 0x82, 0xe3);
		
		/// <summary>
		/// DomainRole EqualityOrSubsetImpliedByMandatoryError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError/EqualityOrSubsetImpliedByMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError/EqualityOrSubsetImpliedByMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError/EqualityOrSubsetImpliedByMandatoryError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6ddf4667-3dd7-4661-9cf2-aa6e3ef782e3")]
		public virtual EqualityOrSubsetImpliedByMandatoryError EqualityOrSubsetImpliedByMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EqualityOrSubsetImpliedByMandatoryError)DslModeling::DomainRoleInfo.GetRolePlayer(this, EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EqualityOrSubsetImpliedByMandatoryError of a SetComparisonConstraint
		/// <summary>
		/// Gets EqualityOrSubsetImpliedByMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EqualityOrSubsetImpliedByMandatoryError GetEqualityOrSubsetImpliedByMandatoryError(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as EqualityOrSubsetImpliedByMandatoryError;
		}
		
		/// <summary>
		/// Sets EqualityOrSubsetImpliedByMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEqualityOrSubsetImpliedByMandatoryError(SetComparisonConstraint element, EqualityOrSubsetImpliedByMandatoryError newEqualityOrSubsetImpliedByMandatoryError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newEqualityOrSubsetImpliedByMandatoryError);
		}
		#endregion
		#region ImplicationError domain role override
		
		/// <summary>
		/// Gets the element playing EqualityOrSubsetImpliedByMandatoryError domain role.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.ImplicationError
		/// </summary>
		public override ImplicationError ImplicationError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.EqualityOrSubsetImpliedByMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.EqualityOrSubsetImpliedByMandatoryError = (EqualityOrSubsetImpliedByMandatoryError)value;
			}
		}
		
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError GetLinkToEqualityOrSubsetImpliedByMandatoryError (global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError>(setComparisonConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EqualityOrSubsetImpliedByMandatoryError link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError link to a EqualityOrSubsetImpliedByMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError GetLinkToSetComparisonConstraint (global::Neumont.Tools.ORM.ObjectModel.EqualityOrSubsetImpliedByMandatoryError equalityOrSubsetImpliedByMandatoryErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError>(equalityOrSubsetImpliedByMandatoryErrorInstance, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EqualityOrSubsetImpliedByMandatoryError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError links between a given SetComparisonConstraint and a EqualityOrSubsetImpliedByMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.EqualityOrSubsetImpliedByMandatoryError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError link in links )
			{
				if ( target.Equals(link.EqualityOrSubsetImpliedByMandatoryError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError link between a given SetComparisonConstraintand a EqualityOrSubsetImpliedByMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError GetLink( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint source, global::Neumont.Tools.ORM.ObjectModel.EqualityOrSubsetImpliedByMandatoryError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError link in links )
			{
				if ( target.Equals(link.EqualityOrSubsetImpliedByMandatoryError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeHasPreferredIdentifierRequiresMandatoryError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("31a1bff6-47dc-4f00-955b-1935082a3f25")]
	public partial class ObjectTypeHasPreferredIdentifierRequiresMandatoryError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeHasPreferredIdentifierRequiresMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x31a1bff6, 0x47dc, 0x4f00, 0x95, 0x5b, 0x19, 0x35, 0x08, 0x2a, 0x3f, 0x25);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeHasPreferredIdentifierRequiresMandatoryError link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">PreferredIdentifierRequiresMandatoryError to use as the target of the relationship.</param>
		public ObjectTypeHasPreferredIdentifierRequiresMandatoryError(ObjectType source, PreferredIdentifierRequiresMandatoryError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasPreferredIdentifierRequiresMandatoryError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasPreferredIdentifierRequiresMandatoryError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasPreferredIdentifierRequiresMandatoryError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasPreferredIdentifierRequiresMandatoryError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0xe7851c84, 0xd822, 0x4ea5, 0xab, 0x3f, 0x26, 0x48, 0x53, 0x81, 0x58, 0xc5);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError/ObjectType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError/ObjectType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PreferredIdentifierRequiresMandatoryError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e7851c84-d822-4ea5-ab3f-2648538158c5")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectType of a PreferredIdentifierRequiresMandatoryError
		/// <summary>
		/// Gets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetObjectType(PreferredIdentifierRequiresMandatoryError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PreferredIdentifierRequiresMandatoryErrorDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectType(PreferredIdentifierRequiresMandatoryError element, ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PreferredIdentifierRequiresMandatoryErrorDomainRoleId, newObjectType);
		}
		#endregion
		#region PreferredIdentifierRequiresMandatoryError domain role code
		
		/// <summary>
		/// PreferredIdentifierRequiresMandatoryError domain role Id.
		/// </summary>
		public static readonly global::System.Guid PreferredIdentifierRequiresMandatoryErrorDomainRoleId = new global::System.Guid(0x835d831b, 0x67a2, 0x4f84, 0x89, 0x0a, 0x7d, 0x73, 0xbc, 0x5e, 0x6d, 0xbc);
		
		/// <summary>
		/// DomainRole PreferredIdentifierRequiresMandatoryError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError/PreferredIdentifierRequiresMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError/PreferredIdentifierRequiresMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError/PreferredIdentifierRequiresMandatoryError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("835d831b-67a2-4f84-890a-7d73bc5e6dbc")]
		public virtual PreferredIdentifierRequiresMandatoryError PreferredIdentifierRequiresMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PreferredIdentifierRequiresMandatoryError)DslModeling::DomainRoleInfo.GetRolePlayer(this, PreferredIdentifierRequiresMandatoryErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PreferredIdentifierRequiresMandatoryErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PreferredIdentifierRequiresMandatoryError of a ObjectType
		/// <summary>
		/// Gets PreferredIdentifierRequiresMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PreferredIdentifierRequiresMandatoryError GetPreferredIdentifierRequiresMandatoryError(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as PreferredIdentifierRequiresMandatoryError;
		}
		
		/// <summary>
		/// Sets PreferredIdentifierRequiresMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPreferredIdentifierRequiresMandatoryError(ObjectType element, PreferredIdentifierRequiresMandatoryError newPreferredIdentifierRequiresMandatoryError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newPreferredIdentifierRequiresMandatoryError);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ObjectTypeHasPreferredIdentifierRequiresMandatoryError link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError GetLinkToPreferredIdentifierRequiresMandatoryError (global::Neumont.Tools.ORM.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError>(objectTypeInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PreferredIdentifierRequiresMandatoryError link accessor
		/// <summary>
		/// Get the ObjectTypeHasPreferredIdentifierRequiresMandatoryError link to a PreferredIdentifierRequiresMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError GetLinkToObjectType (global::Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryError preferredIdentifierRequiresMandatoryErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError>(preferredIdentifierRequiresMandatoryErrorInstance, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PreferredIdentifierRequiresMandatoryError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectTypeHasPreferredIdentifierRequiresMandatoryError instance accessors
		
		/// <summary>
		/// Get any ObjectTypeHasPreferredIdentifierRequiresMandatoryError links between a given ObjectType and a PreferredIdentifierRequiresMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError link in links )
			{
				if ( target.Equals(link.PreferredIdentifierRequiresMandatoryError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeHasPreferredIdentifierRequiresMandatoryError link between a given ObjectTypeand a PreferredIdentifierRequiresMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError GetLink( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError>(source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError link in links )
			{
				if ( target.Equals(link.PreferredIdentifierRequiresMandatoryError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueConstraintHasValueRangeOverlapError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9044be08-d88b-4bca-b261-0841e1c73b5d")]
	public partial class ValueConstraintHasValueRangeOverlapError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueConstraintHasValueRangeOverlapError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9044be08, 0xd88b, 0x4bca, 0xb2, 0x61, 0x08, 0x41, 0xe1, 0xc7, 0x3b, 0x5d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueConstraintHasValueRangeOverlapError link in the same Partition as the given ValueConstraint
		/// </summary>
		/// <param name="source">ValueConstraint to use as the source of the relationship.</param>
		/// <param name="target">ValueRangeOverlapError to use as the target of the relationship.</param>
		public ValueConstraintHasValueRangeOverlapError(ValueConstraint source, ValueRangeOverlapError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasValueRangeOverlapError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasValueRangeOverlapError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasValueRangeOverlapError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasValueRangeOverlapError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueConstraint domain role code
		
		/// <summary>
		/// ValueConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueConstraintDomainRoleId = new global::System.Guid(0x6011898a, 0x4cf2, 0x429a, 0x98, 0x6e, 0xf0, 0xed, 0x8d, 0x93, 0x80, 0x64);
		
		/// <summary>
		/// DomainRole ValueConstraint
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError/ValueConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError/ValueConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueRangeOverlapError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError/ValueConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6011898a-4cf2-429a-986e-f0ed8d938064")]
		public virtual ValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueConstraint of a ValueRangeOverlapError
		/// <summary>
		/// Gets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueConstraint GetValueConstraint(ValueRangeOverlapError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueRangeOverlapErrorDomainRoleId) as ValueConstraint;
		}
		
		/// <summary>
		/// Sets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueConstraint(ValueRangeOverlapError element, ValueConstraint newValueConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueRangeOverlapErrorDomainRoleId, newValueConstraint);
		}
		#endregion
		#region ValueRangeOverlapError domain role code
		
		/// <summary>
		/// ValueRangeOverlapError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueRangeOverlapErrorDomainRoleId = new global::System.Guid(0x8d12358b, 0x19f0, 0x4fc5, 0x82, 0xfb, 0x3e, 0x51, 0x2f, 0xec, 0xd4, 0x99);
		
		/// <summary>
		/// DomainRole ValueRangeOverlapError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError/ValueRangeOverlapError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError/ValueRangeOverlapError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueConstraint", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError/ValueRangeOverlapError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8d12358b-19f0-4fc5-82fb-3e512fecd499")]
		public virtual ValueRangeOverlapError ValueRangeOverlapError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueRangeOverlapError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueRangeOverlapErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueRangeOverlapErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueRangeOverlapError of a ValueConstraint
		/// <summary>
		/// Gets ValueRangeOverlapError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueRangeOverlapError GetValueRangeOverlapError(ValueConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueConstraintDomainRoleId) as ValueRangeOverlapError;
		}
		
		/// <summary>
		/// Sets ValueRangeOverlapError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueRangeOverlapError(ValueConstraint element, ValueRangeOverlapError newValueRangeOverlapError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueConstraintDomainRoleId, newValueRangeOverlapError);
		}
		#endregion
		#region ValueConstraint link accessor
		/// <summary>
		/// Get the ValueConstraintHasValueRangeOverlapError link to a ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError GetLinkToValueRangeOverlapError (global::Neumont.Tools.ORM.ObjectModel.ValueConstraint valueConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError>(valueConstraintInstance, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueRangeOverlapError link accessor
		/// <summary>
		/// Get the ValueConstraintHasValueRangeOverlapError link to a ValueRangeOverlapError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError GetLinkToValueConstraint (global::Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapError valueRangeOverlapErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError>(valueRangeOverlapErrorInstance, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueRangeOverlapError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueConstraintHasValueRangeOverlapError instance accessors
		
		/// <summary>
		/// Get any ValueConstraintHasValueRangeOverlapError links between a given ValueConstraint and a ValueRangeOverlapError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ValueConstraint source, global::Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError>(source, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError link in links )
			{
				if ( target.Equals(link.ValueRangeOverlapError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueConstraintHasValueRangeOverlapError link between a given ValueConstraintand a ValueRangeOverlapError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError GetLink( global::Neumont.Tools.ORM.ObjectModel.ValueConstraint source, global::Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError>(source, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError link in links )
			{
				if ( target.Equals(link.ValueRangeOverlapError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasRole
	/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeHasRole
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("40f02204-f32a-4424-9fd5-5b6b943c603a")]
	public partial class FactTypeHasRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x40f02204, 0xf32a, 0x4424, 0x9f, 0xd5, 0x5b, 0x6b, 0x94, 0x3c, 0x60, 0x3a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasRole link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">RoleBase to use as the target of the relationship.</param>
		public FactTypeHasRole(FactType source, RoleBase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasRole.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasRole.RoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xb40ab1f6, 0x50f6, 0x42d6, 0x99, 0x28, 0x10, 0x23, 0x20, 0xdd, 0xcf, 0xf2);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasRole/FactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasRole/FactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RoleCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasRole/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("b40ab1f6-50f6-42d6-9928-102320ddcff2")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a RoleBase
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(RoleBase element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(RoleBase element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleDomainRoleId, newFactType);
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0x9199d2cb, 0x4524, 0x4afb, 0xa6, 0x47, 0xdd, 0x4d, 0xbf, 0x34, 0xcb, 0x13);
		
		/// <summary>
		/// DomainRole Role
		/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.Role
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasRole/Role.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasRole/Role.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasRole/Role.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9199d2cb-4524-4afb-a647-dd4dbf34cb13")]
		public virtual RoleBase Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleCollection of a FactType
		/// <summary>
		/// Gets a list of RoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RoleBase> GetRoleCollection(FactType element)
		{
			return new DslModeling::LinkedElementCollection<RoleBase>(element, FactTypeDomainRoleId);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the list of FactTypeHasRole links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole> GetLinksToRoleCollection ( global::Neumont.Tools.ORM.ObjectModel.FactType factTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole>(factTypeInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeDomainRoleId);
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the FactTypeHasRole link to a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole GetLinkToFactType (global::Neumont.Tools.ORM.ObjectModel.RoleBase roleInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole>(roleInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.RoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Role not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasRole instance accessors
		
		/// <summary>
		/// Get any FactTypeHasRole links between a given FactType and a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole> GetLinks( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.RoleBase target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasRole link between a given FactTypeand a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole GetLink( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.RoleBase target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ReadingOrderHasRole
	/// Description for Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f4d3824f-5764-434b-9abd-fd847d4b7570")]
	public partial class ReadingOrderHasRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReadingOrderHasRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf4d3824f, 0x5764, 0x434b, 0x9a, 0xbd, 0xfd, 0x84, 0x7d, 0x4b, 0x75, 0x70);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReadingOrderHasRole link in the same Partition as the given ReadingOrder
		/// </summary>
		/// <param name="source">ReadingOrder to use as the source of the relationship.</param>
		/// <param name="target">RoleBase to use as the target of the relationship.</param>
		public ReadingOrderHasRole(ReadingOrder source, RoleBase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReadingOrderHasRole.ReadingOrderDomainRoleId, source), new DslModeling::RoleAssignment(ReadingOrderHasRole.RoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingOrderHasRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingOrderHasRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingOrderHasRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingOrderHasRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ReadingOrder domain role code
		
		/// <summary>
		/// ReadingOrder domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReadingOrderDomainRoleId = new global::System.Guid(0xb7e469ec, 0x836d, 0x447f, 0xa0, 0xa5, 0x15, 0x5f, 0x92, 0x8b, 0xce, 0x83);
		
		/// <summary>
		/// DomainRole ReadingOrder
		/// Description for Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.ReadingOrder
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole/ReadingOrder.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole/ReadingOrder.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RoleCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole/ReadingOrder.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("b7e469ec-836d-447f-a0a5-155f928bce83")]
		public virtual ReadingOrder ReadingOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReadingOrder)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReadingOrderDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReadingOrderDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReadingOrder of a RoleBase
		/// <summary>
		/// Gets a list of ReadingOrder.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReadingOrder> GetReadingOrder(RoleBase element)
		{
			return new DslModeling::LinkedElementCollection<ReadingOrder>(element, RoleDomainRoleId);
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0xdaa60744, 0x9e62, 0x4277, 0xa1, 0xf0, 0xa4, 0x59, 0xd3, 0x8d, 0x95, 0xc1);
		
		/// <summary>
		/// DomainRole Role
		/// Description for Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.Role
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole/Role.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole/Role.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReadingOrder", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("daa60744-9e62-4277-a1f0-a459d38d95c1")]
		public virtual RoleBase Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleCollection of a ReadingOrder
		/// <summary>
		/// Gets a list of RoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RoleBase> GetRoleCollection(ReadingOrder element)
		{
			return new DslModeling::LinkedElementCollection<RoleBase>(element, ReadingOrderDomainRoleId);
		}
		#endregion
		#region ReadingOrder link accessor
		/// <summary>
		/// Get the list of ReadingOrderHasRole links to a ReadingOrder.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole> GetLinksToRoleCollection ( global::Neumont.Tools.ORM.ObjectModel.ReadingOrder readingOrderInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole>(readingOrderInstance, global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.ReadingOrderDomainRoleId);
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the list of ReadingOrderHasRole links to a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole> GetLinksToReadingOrder ( global::Neumont.Tools.ORM.ObjectModel.RoleBase roleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole>(roleInstance, global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.RoleDomainRoleId);
		}
		#endregion
		#region ReadingOrderHasRole instance accessors
		
		/// <summary>
		/// Get any ReadingOrderHasRole links between a given ReadingOrder and a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ReadingOrder source, global::Neumont.Tools.ORM.ObjectModel.RoleBase target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole>(source, global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.ReadingOrderDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReadingOrderHasRole link between a given ReadingOrderand a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole GetLink( global::Neumont.Tools.ORM.ObjectModel.ReadingOrder source, global::Neumont.Tools.ORM.ObjectModel.RoleBase target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole>(source, global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.ReadingOrderDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship RoleProxyHasRole
	/// Description for Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5a3809ef-42f1-4965-8490-52fea5da30a2")]
	public partial class RoleProxyHasRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleProxyHasRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5a3809ef, 0x42f1, 0x4965, 0x84, 0x90, 0x52, 0xfe, 0xa5, 0xda, 0x30, 0xa2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RoleProxyHasRole link in the same Partition as the given RoleProxy
		/// </summary>
		/// <param name="source">RoleProxy to use as the source of the relationship.</param>
		/// <param name="target">Role to use as the target of the relationship.</param>
		public RoleProxyHasRole(RoleProxy source, Role target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RoleProxyHasRole.ProxyDomainRoleId, source), new DslModeling::RoleAssignment(RoleProxyHasRole.TargetRoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleProxyHasRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleProxyHasRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleProxyHasRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleProxyHasRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Proxy domain role code
		
		/// <summary>
		/// Proxy domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProxyDomainRoleId = new global::System.Guid(0xf9024eac, 0x69af, 0x438a, 0x85, 0xad, 0x39, 0x3b, 0x55, 0xab, 0xf9, 0x1f);
		
		/// <summary>
		/// DomainRole Proxy
		/// Description for Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.Proxy
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole/Proxy.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole/Proxy.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetRole", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole/Proxy.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f9024eac-69af-438a-85ad-393b55abf91f")]
		public virtual RoleProxy Proxy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleProxy)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProxyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProxyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Proxy of a Role
		/// <summary>
		/// Gets Proxy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RoleProxy GetProxy(Role element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetRoleDomainRoleId) as RoleProxy;
		}
		
		/// <summary>
		/// Sets Proxy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProxy(Role element, RoleProxy newProxy)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetRoleDomainRoleId, newProxy);
		}
		#endregion
		#region TargetRole domain role code
		
		/// <summary>
		/// TargetRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetRoleDomainRoleId = new global::System.Guid(0xae004027, 0xbe74, 0x4e53, 0x99, 0xd7, 0xd3, 0xe8, 0x94, 0xf4, 0x12, 0x4d);
		
		/// <summary>
		/// DomainRole TargetRole
		/// Description for Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.TargetRole
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole/TargetRole.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole/TargetRole.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Proxy", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole/TargetRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ae004027-be74-4e53-99d7-d3e894f4124d")]
		public virtual Role TargetRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetRole of a RoleProxy
		/// <summary>
		/// Gets TargetRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Role GetTargetRole(RoleProxy element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ProxyDomainRoleId) as Role;
		}
		
		/// <summary>
		/// Sets TargetRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTargetRole(RoleProxy element, Role newTargetRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ProxyDomainRoleId, newTargetRole);
		}
		#endregion
		#region Proxy link accessor
		/// <summary>
		/// Get the RoleProxyHasRole link to a RoleProxy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole GetLinkToTargetRole (global::Neumont.Tools.ORM.ObjectModel.RoleProxy proxyInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole>(proxyInstance, global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Proxy not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetRole link accessor
		/// <summary>
		/// Get the RoleProxyHasRole link to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole GetLinkToProxy (global::Neumont.Tools.ORM.ObjectModel.Role targetRoleInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole>(targetRoleInstance, global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.TargetRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RoleProxyHasRole instance accessors
		
		/// <summary>
		/// Get any RoleProxyHasRole links between a given RoleProxy and a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole> GetLinks( global::Neumont.Tools.ORM.ObjectModel.RoleProxy source, global::Neumont.Tools.ORM.ObjectModel.Role target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole>(source, global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole link in links )
			{
				if ( target.Equals(link.TargetRole) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoleProxyHasRole link between a given RoleProxyand a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole GetLink( global::Neumont.Tools.ORM.ObjectModel.RoleProxy source, global::Neumont.Tools.ORM.ObjectModel.Role target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole>(source, global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole link in links )
			{
				if ( target.Equals(link.TargetRole) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasDerivationExpression
	/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("27127a53-8e17-420f-9e87-9812f7c76cd8")]
	public partial class FactTypeHasDerivationExpression : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasDerivationExpression domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x27127a53, 0x8e17, 0x420f, 0x9e, 0x87, 0x98, 0x12, 0xf7, 0xc7, 0x6c, 0xd8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasDerivationExpression link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">FactTypeDerivationExpression to use as the target of the relationship.</param>
		public FactTypeHasDerivationExpression(FactType source, FactTypeDerivationExpression target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasDerivationExpression.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasDerivationExpression.DerivationRuleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasDerivationExpression(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasDerivationExpression(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasDerivationExpression(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasDerivationExpression(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0x73b1a9d8, 0x42a4, 0x44e0, 0xb9, 0x06, 0xae, 0xf1, 0x0e, 0x34, 0x6d, 0xb6);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression/FactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression/FactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DerivationRule", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("73b1a9d8-42a4-44e0-b906-aef10e346db6")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a FactTypeDerivationExpression
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(FactTypeDerivationExpression element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DerivationRuleDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(FactTypeDerivationExpression element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DerivationRuleDomainRoleId, newFactType);
		}
		#endregion
		#region DerivationRule domain role code
		
		/// <summary>
		/// DerivationRule domain role Id.
		/// </summary>
		public static readonly global::System.Guid DerivationRuleDomainRoleId = new global::System.Guid(0xf0ebcc89, 0x95a8, 0x45e8, 0x98, 0x65, 0x61, 0x6a, 0x9a, 0xc8, 0x58, 0xf9);
		
		/// <summary>
		/// DomainRole DerivationRule
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRule
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression/DerivationRule.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression/DerivationRule.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression/DerivationRule.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f0ebcc89-95a8-45e8-9865-616a9ac858f9")]
		public virtual FactTypeDerivationExpression DerivationRule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactTypeDerivationExpression)DslModeling::DomainRoleInfo.GetRolePlayer(this, DerivationRuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DerivationRuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivationRule of a FactType
		/// <summary>
		/// Gets DerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactTypeDerivationExpression GetDerivationRule(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as FactTypeDerivationExpression;
		}
		
		/// <summary>
		/// Sets DerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDerivationRule(FactType element, FactTypeDerivationExpression newDerivationRule)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newDerivationRule);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the FactTypeHasDerivationExpression link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression GetLinkToDerivationRule (global::Neumont.Tools.ORM.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression>(factTypeInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DerivationRule link accessor
		/// <summary>
		/// Get the FactTypeHasDerivationExpression link to a FactTypeDerivationExpression.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression GetLinkToFactType (global::Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression derivationRuleInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression>(derivationRuleInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DerivationRule not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasDerivationExpression instance accessors
		
		/// <summary>
		/// Get any FactTypeHasDerivationExpression links between a given FactType and a FactTypeDerivationExpression.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression> GetLinks( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression link in links )
			{
				if ( target.Equals(link.DerivationRule) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasDerivationExpression link between a given FactTypeand a FactTypeDerivationExpression.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression GetLink( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression link in links )
			{
				if ( target.Equals(link.DerivationRule) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship EntityTypeHasEntityTypeInstance
	/// Description for Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0f9cda9d-88ce-47dd-b202-93b1455e08c3")]
	public partial class EntityTypeHasEntityTypeInstance : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeHasEntityTypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0f9cda9d, 0x88ce, 0x47dd, 0xb2, 0x02, 0x93, 0xb1, 0x45, 0x5e, 0x08, 0xc3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeHasEntityTypeInstance link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">EntityTypeInstance to use as the target of the relationship.</param>
		public EntityTypeHasEntityTypeInstance(ObjectType source, EntityTypeInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeHasEntityTypeInstance.EntityTypeDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeHasEntityTypeInstance.EntityTypeInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasEntityTypeInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasEntityTypeInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasEntityTypeInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasEntityTypeInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityType domain role code
		
		/// <summary>
		/// EntityType domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeDomainRoleId = new global::System.Guid(0x5a293722, 0x12d6, 0x4b42, 0xa3, 0x36, 0x32, 0x81, 0xa4, 0x04, 0xe7, 0x85);
		
		/// <summary>
		/// DomainRole EntityType
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance.EntityType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance/EntityType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance/EntityType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EntityTypeInstanceCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance/EntityType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5a293722-12d6-4b42-a336-3281a404e785")]
		public virtual ObjectType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityType of a EntityTypeInstance
		/// <summary>
		/// Gets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetEntityType(EntityTypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityTypeInstanceDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntityType(EntityTypeInstance element, ObjectType newEntityType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityTypeInstanceDomainRoleId, newEntityType);
		}
		#endregion
		#region EntityTypeInstance domain role code
		
		/// <summary>
		/// EntityTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeInstanceDomainRoleId = new global::System.Guid(0xdcb0cb77, 0x842d, 0x4b69, 0x95, 0x0d, 0x26, 0xc3, 0xc4, 0x50, 0x9b, 0x6d);
		
		/// <summary>
		/// DomainRole EntityTypeInstance
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance/EntityTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance/EntityTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance/EntityTypeInstance.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("dcb0cb77-842d-4b69-950d-26c3c4509b6d")]
		public virtual EntityTypeInstance EntityTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityTypeInstanceCollection of a ObjectType
		/// <summary>
		/// Gets a list of EntityTypeInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityTypeInstance> GetEntityTypeInstanceCollection(ObjectType element)
		{
			return new DslModeling::LinkedElementCollection<EntityTypeInstance>(element, EntityTypeDomainRoleId);
		}
		#endregion
		#region EntityType link accessor
		/// <summary>
		/// Get the list of EntityTypeHasEntityTypeInstance links to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance> GetLinksToEntityTypeInstanceCollection ( global::Neumont.Tools.ORM.ObjectModel.ObjectType entityTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance>(entityTypeInstance, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeDomainRoleId);
		}
		#endregion
		#region EntityTypeInstance link accessor
		/// <summary>
		/// Get the EntityTypeHasEntityTypeInstance link to a EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance GetLinkToEntityType (global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstance entityTypeInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance>(entityTypeInstanceInstance, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EntityTypeInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityTypeHasEntityTypeInstance instance accessors
		
		/// <summary>
		/// Get any EntityTypeHasEntityTypeInstance links between a given ObjectType and a EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstance target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance>(source, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance link in links )
			{
				if ( target.Equals(link.EntityTypeInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeHasEntityTypeInstance link between a given ObjectTypeand a EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance GetLink( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstance target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance>(source, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance link in links )
			{
				if ( target.Equals(link.EntityTypeInstance) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueTypeHasValueTypeInstance
	/// Description for Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e01b8ec6-f3bf-4963-92db-7e352501c04d")]
	public partial class ValueTypeHasValueTypeInstance : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueTypeHasValueTypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe01b8ec6, 0xf3bf, 0x4963, 0x92, 0xdb, 0x7e, 0x35, 0x25, 0x01, 0xc0, 0x4d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueTypeHasValueTypeInstance link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">ValueTypeInstance to use as the target of the relationship.</param>
		public ValueTypeHasValueTypeInstance(ObjectType source, ValueTypeInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueTypeHasValueTypeInstance.ValueTypeDomainRoleId, source), new DslModeling::RoleAssignment(ValueTypeHasValueTypeInstance.ValueTypeInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeHasValueTypeInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeHasValueTypeInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeHasValueTypeInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeHasValueTypeInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueType domain role code
		
		/// <summary>
		/// ValueType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeDomainRoleId = new global::System.Guid(0x9558751b, 0x6ae9, 0x424d, 0x8b, 0x62, 0x66, 0xb7, 0x1f, 0x01, 0xa2, 0x07);
		
		/// <summary>
		/// DomainRole ValueType
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance.ValueType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance/ValueType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance/ValueType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueTypeInstanceCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance/ValueType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9558751b-6ae9-424d-8b62-66b71f01a207")]
		public virtual ObjectType ValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueType of a ValueTypeInstance
		/// <summary>
		/// Gets ValueType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetValueType(ValueTypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueTypeInstanceDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ValueType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueType(ValueTypeInstance element, ObjectType newValueType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueTypeInstanceDomainRoleId, newValueType);
		}
		#endregion
		#region ValueTypeInstance domain role code
		
		/// <summary>
		/// ValueTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeInstanceDomainRoleId = new global::System.Guid(0x17da5f43, 0x028e, 0x4f9b, 0x8e, 0x91, 0x10, 0x5d, 0xbf, 0x10, 0xae, 0xe3);
		
		/// <summary>
		/// DomainRole ValueTypeInstance
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance/ValueTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance/ValueTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance/ValueTypeInstance.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("17da5f43-028e-4f9b-8e91-105dbf10aee3")]
		public virtual ValueTypeInstance ValueTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueTypeInstanceCollection of a ObjectType
		/// <summary>
		/// Gets a list of ValueTypeInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ValueTypeInstance> GetValueTypeInstanceCollection(ObjectType element)
		{
			return new DslModeling::LinkedElementCollection<ValueTypeInstance>(element, ValueTypeDomainRoleId);
		}
		#endregion
		#region ValueType link accessor
		/// <summary>
		/// Get the list of ValueTypeHasValueTypeInstance links to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance> GetLinksToValueTypeInstanceCollection ( global::Neumont.Tools.ORM.ObjectModel.ObjectType valueTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance>(valueTypeInstance, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeDomainRoleId);
		}
		#endregion
		#region ValueTypeInstance link accessor
		/// <summary>
		/// Get the ValueTypeHasValueTypeInstance link to a ValueTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance GetLinkToValueType (global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstance valueTypeInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance>(valueTypeInstanceInstance, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueTypeInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueTypeHasValueTypeInstance instance accessors
		
		/// <summary>
		/// Get any ValueTypeHasValueTypeInstance links between a given ObjectType and a ValueTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstance target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance>(source, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance link in links )
			{
				if ( target.Equals(link.ValueTypeInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueTypeHasValueTypeInstance link between a given ObjectTypeand a ValueTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance GetLink( global::Neumont.Tools.ORM.ObjectModel.ObjectType source, global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstance target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance>(source, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance link in links )
			{
				if ( target.Equals(link.ValueTypeInstance) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship RoleInstance
	/// Description for Neumont.Tools.ORM.ObjectModel.RoleInstance
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("d3162c67-de52-4b0d-802f-824e6ed5b74b")]
	public abstract partial class RoleInstance : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd3162c67, 0xde52, 0x4b0d, 0x80, 0x2f, 0x82, 0x4e, 0x6e, 0xd5, 0xb7, 0x4b);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected RoleInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0xc927c1aa, 0x2e2d, 0x41cf, 0x9d, 0x87, 0x0a, 0x69, 0xa6, 0x3f, 0x3e, 0x99);
		
		/// <summary>
		/// DomainRole Role
		/// Description for Neumont.Tools.ORM.ObjectModel.RoleInstance.Role
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleInstance/Role.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleInstance/Role.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectTypeInstanceCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.RoleInstance/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c927c1aa-2e2d-41cf-9d87-0a69a63f3e99")]
		public abstract Role Role
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access RoleCollection of a ObjectTypeInstance
		/// <summary>
		/// Gets a list of RoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<Role> GetRoleCollection(ObjectTypeInstance element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<Role>(element, ObjectTypeInstanceDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance domain role code
		
		/// <summary>
		/// ObjectTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeInstanceDomainRoleId = new global::System.Guid(0x7e4356d2, 0x05d5, 0x4194, 0xbd, 0xbc, 0xf5, 0xb9, 0x6d, 0x22, 0xe4, 0x19);
		
		/// <summary>
		/// DomainRole ObjectTypeInstance
		/// Description for Neumont.Tools.ORM.ObjectModel.RoleInstance.ObjectTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleInstance/ObjectTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleInstance/ObjectTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RoleCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.RoleInstance/ObjectTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("7e4356d2-05d5-4194-bdbc-f5b96d22e419")]
		public abstract ObjectTypeInstance ObjectTypeInstance
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ObjectTypeInstanceCollection of a Role
		/// <summary>
		/// Gets a list of ObjectTypeInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ObjectTypeInstance> GetObjectTypeInstanceCollection(Role element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ObjectTypeInstance>(element, RoleDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region PopulationUniquenessError opposite domain role accessor
		/// <summary>
		/// Gets or sets PopulationUniquenessError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError.RoleInstance
		/// </summary>
		public virtual PopulationUniquenessError PopulationUniquenessError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId) as PopulationUniquenessError;
			}
		}
		#endregion
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the list of RoleInstance links to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.RoleInstance> GetLinksToObjectTypeInstanceCollection ( global::Neumont.Tools.ORM.ObjectModel.Role roleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleInstance>(roleInstance, global::Neumont.Tools.ORM.ObjectModel.RoleInstance.RoleDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance link accessor
		/// <summary>
		/// Get the list of RoleInstance links to a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.RoleInstance> GetLinksToRoleCollection ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstance objectTypeInstanceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleInstance>(objectTypeInstanceInstance, global::Neumont.Tools.ORM.ObjectModel.RoleInstance.ObjectTypeInstanceDomainRoleId);
		}
		#endregion
		#region RoleInstance instance accessors
		
		/// <summary>
		/// Get any RoleInstance links between a given Role and a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.RoleInstance> GetLinks( global::Neumont.Tools.ORM.ObjectModel.Role source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstance target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.RoleInstance> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.RoleInstance>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.RoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.RoleInstance>(source, global::Neumont.Tools.ORM.ObjectModel.RoleInstance.RoleDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.RoleInstance link in links )
			{
				if ( target.Equals(link.ObjectTypeInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship EntityTypeRoleInstance
	/// Description for Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("5db3a2c1-c5de-4c4a-97c2-e09ce11537d3")]
	public partial class EntityTypeRoleInstance : RoleInstance
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeRoleInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5db3a2c1, 0xc5de, 0x4c4a, 0x97, 0xc2, 0xe0, 0x9c, 0xe1, 0x15, 0x37, 0xd3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeRoleInstance link in the same Partition as the given Role
		/// </summary>
		/// <param name="source">Role to use as the source of the relationship.</param>
		/// <param name="target">ObjectTypeInstance to use as the target of the relationship.</param>
		public EntityTypeRoleInstance(Role source, ObjectTypeInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeRoleInstance.RoleDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeRoleInstance.ObjectTypeInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeRoleInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeRoleInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeRoleInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeRoleInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly new global::System.Guid RoleDomainRoleId = new global::System.Guid(0x26d1bf78, 0xfc2b, 0x4d86, 0xbd, 0xb3, 0xc1, 0x85, 0xfe, 0x44, 0x3d, 0xac);
		
		/// <summary>
		/// DomainRole Role
		/// Description for Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance.Role
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance/Role.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance/Role.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectTypeInstanceCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("26d1bf78-fc2b-4d86-bdb3-c185fe443dac")]
		public override Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleCollection of a ObjectTypeInstance
		/// <summary>
		/// Gets a list of RoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new DslModeling::LinkedElementCollection<Role> GetRoleCollection(ObjectTypeInstance element)
		{
			return new DslModeling::LinkedElementCollection<Role>(element, ObjectTypeInstanceDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance domain role code
		
		/// <summary>
		/// ObjectTypeInstance domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ObjectTypeInstanceDomainRoleId = new global::System.Guid(0xb24b068f, 0xbf3c, 0x4d4a, 0x95, 0x69, 0x03, 0x05, 0xf9, 0xb5, 0xaa, 0x7e);
		
		/// <summary>
		/// DomainRole ObjectTypeInstance
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance.ObjectTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance/ObjectTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance/ObjectTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RoleCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance/ObjectTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("b24b068f-bf3c-4d4a-9569-0305f9b5aa7e")]
		public override ObjectTypeInstance ObjectTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectTypeInstanceCollection of a Role
		/// <summary>
		/// Gets a list of ObjectTypeInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new DslModeling::LinkedElementCollection<ObjectTypeInstance> GetObjectTypeInstanceCollection(Role element)
		{
			return new DslModeling::LinkedElementCollection<ObjectTypeInstance>(element, RoleDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region PopulationUniquenessError opposite domain role accessor
		/// <summary>
		/// Gets or sets PopulationUniquenessError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstance
		/// </summary>
		public virtual new PopulationUniquenessError PopulationUniquenessError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId) as PopulationUniquenessError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId, value);
			}
		}
		#endregion
		#region EntityTypeInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets EntityTypeInstance.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance.RoleInstance
		/// </summary>
		public virtual EntityTypeInstance EntityTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId) as EntityTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId, value);
			}
		}
		#endregion
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the list of EntityTypeRoleInstance links to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance> GetLinksToObjectTypeInstanceCollection ( global::Neumont.Tools.ORM.ObjectModel.Role roleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance>(roleInstance, global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance.RoleDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance link accessor
		/// <summary>
		/// Get the list of EntityTypeRoleInstance links to a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance> GetLinksToRoleCollection ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstance objectTypeInstanceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance>(objectTypeInstanceInstance, global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance.ObjectTypeInstanceDomainRoleId);
		}
		#endregion
		#region EntityTypeRoleInstance instance accessors
		
		/// <summary>
		/// Get any EntityTypeRoleInstance links between a given Role and a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance> GetLinks( global::Neumont.Tools.ORM.ObjectModel.Role source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstance target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance>(source, global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance.RoleDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance link in links )
			{
				if ( target.Equals(link.ObjectTypeInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeRoleInstance
	/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("fc7c9715-6886-46c2-a7a0-3bfd95cd0766")]
	public partial class FactTypeRoleInstance : RoleInstance
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeRoleInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfc7c9715, 0x6886, 0x46c2, 0xa7, 0xa0, 0x3b, 0xfd, 0x95, 0xcd, 0x07, 0x66);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeRoleInstance link in the same Partition as the given Role
		/// </summary>
		/// <param name="source">Role to use as the source of the relationship.</param>
		/// <param name="target">ObjectTypeInstance to use as the target of the relationship.</param>
		public FactTypeRoleInstance(Role source, ObjectTypeInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeRoleInstance.RoleDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeRoleInstance.ObjectTypeInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeRoleInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeRoleInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeRoleInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeRoleInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly new global::System.Guid RoleDomainRoleId = new global::System.Guid(0xbdeb47fc, 0xdd0a, 0x4509, 0x92, 0x69, 0x2e, 0xa5, 0xc1, 0x96, 0xf6, 0x8f);
		
		/// <summary>
		/// DomainRole Role
		/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance.Role
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance/Role.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance/Role.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectTypeInstanceCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bdeb47fc-dd0a-4509-9269-2ea5c196f68f")]
		public override Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleCollection of a ObjectTypeInstance
		/// <summary>
		/// Gets a list of RoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new DslModeling::LinkedElementCollection<Role> GetRoleCollection(ObjectTypeInstance element)
		{
			return new DslModeling::LinkedElementCollection<Role>(element, ObjectTypeInstanceDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance domain role code
		
		/// <summary>
		/// ObjectTypeInstance domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ObjectTypeInstanceDomainRoleId = new global::System.Guid(0x2cde9b25, 0x54c8, 0x42b6, 0xa5, 0x4f, 0x61, 0x21, 0x03, 0x45, 0xe9, 0xa0);
		
		/// <summary>
		/// DomainRole ObjectTypeInstance
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance.ObjectTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance/ObjectTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance/ObjectTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RoleCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance/ObjectTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("2cde9b25-54c8-42b6-a54f-61210345e9a0")]
		public override ObjectTypeInstance ObjectTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectTypeInstanceCollection of a Role
		/// <summary>
		/// Gets a list of ObjectTypeInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new DslModeling::LinkedElementCollection<ObjectTypeInstance> GetObjectTypeInstanceCollection(Role element)
		{
			return new DslModeling::LinkedElementCollection<ObjectTypeInstance>(element, RoleDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region PopulationUniquenessError opposite domain role accessor
		/// <summary>
		/// Gets or sets PopulationUniquenessError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstance
		/// </summary>
		public virtual new PopulationUniquenessError PopulationUniquenessError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId) as PopulationUniquenessError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId, value);
			}
		}
		#endregion
		#region FactTypeInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets FactTypeInstance.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance.RoleInstance
		/// </summary>
		public virtual FactTypeInstance FactTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId) as FactTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId, value);
			}
		}
		#endregion
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the list of FactTypeRoleInstance links to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance> GetLinksToObjectTypeInstanceCollection ( global::Neumont.Tools.ORM.ObjectModel.Role roleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance>(roleInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance.RoleDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance link accessor
		/// <summary>
		/// Get the list of FactTypeRoleInstance links to a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance> GetLinksToRoleCollection ( global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstance objectTypeInstanceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance>(objectTypeInstanceInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance.ObjectTypeInstanceDomainRoleId);
		}
		#endregion
		#region FactTypeRoleInstance instance accessors
		
		/// <summary>
		/// Get any FactTypeRoleInstance links between a given Role and a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance> GetLinks( global::Neumont.Tools.ORM.ObjectModel.Role source, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstance target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance.RoleDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance link in links )
			{
				if ( target.Equals(link.ObjectTypeInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship EntityTypeInstanceHasRoleInstance
	/// Description for Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("05c64570-96fe-42c4-b9a6-f88d3bdc7c1f")]
	public partial class EntityTypeInstanceHasRoleInstance : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeInstanceHasRoleInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x05c64570, 0x96fe, 0x42c4, 0xb9, 0xa6, 0xf8, 0x8d, 0x3b, 0xdc, 0x7c, 0x1f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeInstanceHasRoleInstance link in the same Partition as the given EntityTypeInstance
		/// </summary>
		/// <param name="source">EntityTypeInstance to use as the source of the relationship.</param>
		/// <param name="target">EntityTypeRoleInstance to use as the target of the relationship.</param>
		public EntityTypeInstanceHasRoleInstance(EntityTypeInstance source, EntityTypeRoleInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeInstanceHasRoleInstance.EntityTypeInstanceDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeInstanceHasRoleInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeInstanceHasRoleInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeInstanceHasRoleInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeInstanceHasRoleInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityTypeInstance domain role code
		
		/// <summary>
		/// EntityTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeInstanceDomainRoleId = new global::System.Guid(0x9997c315, 0x3b87, 0x4533, 0xa4, 0x5f, 0xc6, 0x2a, 0xfa, 0x68, 0x64, 0x7c);
		
		/// <summary>
		/// DomainRole EntityTypeInstance
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance.EntityTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance/EntityTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance/EntityTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RoleInstanceCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance/EntityTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("9997c315-3b87-4533-a45f-c62afa68647c")]
		public virtual EntityTypeInstance EntityTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityTypeInstance of a EntityTypeRoleInstance
		/// <summary>
		/// Gets EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityTypeInstance GetEntityTypeInstance(EntityTypeRoleInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleInstanceDomainRoleId) as EntityTypeInstance;
		}
		
		/// <summary>
		/// Sets EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntityTypeInstance(EntityTypeRoleInstance element, EntityTypeInstance newEntityTypeInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleInstanceDomainRoleId, newEntityTypeInstance);
		}
		#endregion
		#region RoleInstance domain role code
		
		/// <summary>
		/// RoleInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleInstanceDomainRoleId = new global::System.Guid(0xc85848f4, 0x9e45, 0x44e7, 0xaa, 0xaf, 0x5e, 0x63, 0x2c, 0xab, 0x6d, 0x09);
		
		/// <summary>
		/// DomainRole RoleInstance
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance.RoleInstance
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance/RoleInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance/RoleInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityTypeInstance", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance/RoleInstance.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c85848f4-9e45-44e7-aaaf-5e632cab6d09")]
		public virtual EntityTypeRoleInstance RoleInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityTypeRoleInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleInstanceCollection of a EntityTypeInstance
		/// <summary>
		/// Gets a list of RoleInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityTypeRoleInstance> GetRoleInstanceCollection(EntityTypeInstance element)
		{
			return new DslModeling::LinkedElementCollection<EntityTypeRoleInstance>(element, EntityTypeInstanceDomainRoleId);
		}
		#endregion
		#region EntityTypeInstance link accessor
		/// <summary>
		/// Get the list of EntityTypeInstanceHasRoleInstance links to a EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance> GetLinksToRoleInstanceCollection ( global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstance entityTypeInstanceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance>(entityTypeInstanceInstance, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance.EntityTypeInstanceDomainRoleId);
		}
		#endregion
		#region RoleInstance link accessor
		/// <summary>
		/// Get the EntityTypeInstanceHasRoleInstance link to a EntityTypeRoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance GetLinkToEntityTypeInstance (global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance roleInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance>(roleInstanceInstance, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityTypeInstanceHasRoleInstance instance accessors
		
		/// <summary>
		/// Get any EntityTypeInstanceHasRoleInstance links between a given EntityTypeInstance and a EntityTypeRoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance> GetLinks( global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstance source, global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance>(source, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance.EntityTypeInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance link in links )
			{
				if ( target.Equals(link.RoleInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeInstanceHasRoleInstance link between a given EntityTypeInstanceand a EntityTypeRoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance GetLink( global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstance source, global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstance target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance>(source, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance.EntityTypeInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance link in links )
			{
				if ( target.Equals(link.RoleInstance) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasFactTypeInstance
	/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5283f53b-0da8-4e4c-8a31-bde51057e7ef")]
	public partial class FactTypeHasFactTypeInstance : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasFactTypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5283f53b, 0x0da8, 0x4e4c, 0x8a, 0x31, 0xbd, 0xe5, 0x10, 0x57, 0xe7, 0xef);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasFactTypeInstance link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">FactTypeInstance to use as the target of the relationship.</param>
		public FactTypeHasFactTypeInstance(FactType source, FactTypeInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasFactTypeInstance.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasFactTypeInstance.FactTypeInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasFactTypeInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasFactTypeInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasFactTypeInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasFactTypeInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0x4690eaff, 0x667b, 0x4aa6, 0x93, 0xed, 0x94, 0x87, 0xe1, 0x09, 0xc7, 0xbc);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance/FactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance/FactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FactTypeInstanceCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4690eaff-667b-4aa6-93ed-9487e109c7bc")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a FactTypeInstance
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(FactTypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeInstanceDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(FactTypeInstance element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeInstanceDomainRoleId, newFactType);
		}
		#endregion
		#region FactTypeInstance domain role code
		
		/// <summary>
		/// FactTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeInstanceDomainRoleId = new global::System.Guid(0xe2961a99, 0x6eb7, 0x45d5, 0x9e, 0xaf, 0xec, 0x1c, 0x39, 0xfd, 0x02, 0x6b);
		
		/// <summary>
		/// DomainRole FactTypeInstance
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance.FactTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance/FactTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance/FactTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance/FactTypeInstance.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e2961a99-6eb7-45d5-9eaf-ec1c39fd026b")]
		public virtual FactTypeInstance FactTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeInstanceCollection of a FactType
		/// <summary>
		/// Gets a list of FactTypeInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactTypeInstance> GetFactTypeInstanceCollection(FactType element)
		{
			return new DslModeling::LinkedElementCollection<FactTypeInstance>(element, FactTypeDomainRoleId);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the list of FactTypeHasFactTypeInstance links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance> GetLinksToFactTypeInstanceCollection ( global::Neumont.Tools.ORM.ObjectModel.FactType factTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance>(factTypeInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance.FactTypeDomainRoleId);
		}
		#endregion
		#region FactTypeInstance link accessor
		/// <summary>
		/// Get the FactTypeHasFactTypeInstance link to a FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance GetLinkToFactType (global::Neumont.Tools.ORM.ObjectModel.FactTypeInstance factTypeInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance>(factTypeInstanceInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance.FactTypeInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactTypeInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasFactTypeInstance instance accessors
		
		/// <summary>
		/// Get any FactTypeHasFactTypeInstance links between a given FactType and a FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance> GetLinks( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstance target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance link in links )
			{
				if ( target.Equals(link.FactTypeInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasFactTypeInstance link between a given FactTypeand a FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance GetLink( global::Neumont.Tools.ORM.ObjectModel.FactType source, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstance target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance.FactTypeDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance link in links )
			{
				if ( target.Equals(link.FactTypeInstance) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeInstanceHasRoleInstance
	/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f92b6ec1-8055-4502-bd5d-763d1f5b6849")]
	public partial class FactTypeInstanceHasRoleInstance : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeInstanceHasRoleInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf92b6ec1, 0x8055, 0x4502, 0xbd, 0x5d, 0x76, 0x3d, 0x1f, 0x5b, 0x68, 0x49);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeInstanceHasRoleInstance link in the same Partition as the given FactTypeInstance
		/// </summary>
		/// <param name="source">FactTypeInstance to use as the source of the relationship.</param>
		/// <param name="target">FactTypeRoleInstance to use as the target of the relationship.</param>
		public FactTypeInstanceHasRoleInstance(FactTypeInstance source, FactTypeRoleInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeInstanceHasRoleInstance.FactTypeInstanceDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeInstanceHasRoleInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeInstanceHasRoleInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeInstanceHasRoleInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeInstanceHasRoleInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactTypeInstance domain role code
		
		/// <summary>
		/// FactTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeInstanceDomainRoleId = new global::System.Guid(0x82d54796, 0x2a6c, 0x48c4, 0x8b, 0x9c, 0x36, 0xce, 0x19, 0x14, 0xd3, 0xbc);
		
		/// <summary>
		/// DomainRole FactTypeInstance
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance.FactTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance/FactTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance/FactTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RoleInstanceCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance/FactTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("82d54796-2a6c-48c4-8b9c-36ce1914d3bc")]
		public virtual FactTypeInstance FactTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeInstance of a FactTypeRoleInstance
		/// <summary>
		/// Gets FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactTypeInstance GetFactTypeInstance(FactTypeRoleInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleInstanceDomainRoleId) as FactTypeInstance;
		}
		
		/// <summary>
		/// Sets FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactTypeInstance(FactTypeRoleInstance element, FactTypeInstance newFactTypeInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleInstanceDomainRoleId, newFactTypeInstance);
		}
		#endregion
		#region RoleInstance domain role code
		
		/// <summary>
		/// RoleInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleInstanceDomainRoleId = new global::System.Guid(0xaf7b2192, 0x02b6, 0x49a6, 0xa6, 0xd7, 0x67, 0xa6, 0x08, 0x12, 0x4b, 0xb6);
		
		/// <summary>
		/// DomainRole RoleInstance
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance.RoleInstance
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance/RoleInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance/RoleInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactTypeInstance", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance/RoleInstance.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("af7b2192-02b6-49a6-a6d7-67a608124bb6")]
		public virtual FactTypeRoleInstance RoleInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactTypeRoleInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleInstanceCollection of a FactTypeInstance
		/// <summary>
		/// Gets a list of RoleInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactTypeRoleInstance> GetRoleInstanceCollection(FactTypeInstance element)
		{
			return new DslModeling::LinkedElementCollection<FactTypeRoleInstance>(element, FactTypeInstanceDomainRoleId);
		}
		#endregion
		#region FactTypeInstance link accessor
		/// <summary>
		/// Get the list of FactTypeInstanceHasRoleInstance links to a FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance> GetLinksToRoleInstanceCollection ( global::Neumont.Tools.ORM.ObjectModel.FactTypeInstance factTypeInstanceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance>(factTypeInstanceInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance.FactTypeInstanceDomainRoleId);
		}
		#endregion
		#region RoleInstance link accessor
		/// <summary>
		/// Get the FactTypeInstanceHasRoleInstance link to a FactTypeRoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance GetLinkToFactTypeInstance (global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance roleInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance>(roleInstanceInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeInstanceHasRoleInstance instance accessors
		
		/// <summary>
		/// Get any FactTypeInstanceHasRoleInstance links between a given FactTypeInstance and a FactTypeRoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance> GetLinks( global::Neumont.Tools.ORM.ObjectModel.FactTypeInstance source, global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance.FactTypeInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance link in links )
			{
				if ( target.Equals(link.RoleInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeInstanceHasRoleInstance link between a given FactTypeInstanceand a FactTypeRoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance GetLink( global::Neumont.Tools.ORM.ObjectModel.FactTypeInstance source, global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstance target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance.FactTypeInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance link in links )
			{
				if ( target.Equals(link.RoleInstance) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("922e0a74-9384-4d25-9c38-e0ab709fee8f")]
	public partial class EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x922e0a74, 0x9384, 0x4d25, 0x9c, 0x38, 0xe0, 0xab, 0x70, 0x9f, 0xee, 0x8f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError link in the same Partition as the given EntityTypeInstance
		/// </summary>
		/// <param name="source">EntityTypeInstance to use as the source of the relationship.</param>
		/// <param name="target">TooFewEntityTypeRoleInstancesError to use as the target of the relationship.</param>
		public EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError(EntityTypeInstance source, TooFewEntityTypeRoleInstancesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityTypeInstance domain role code
		
		/// <summary>
		/// EntityTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeInstanceDomainRoleId = new global::System.Guid(0x715ed45e, 0x2c85, 0x491e, 0xa5, 0x77, 0x3a, 0x69, 0x85, 0x34, 0x76, 0x87);
		
		/// <summary>
		/// DomainRole EntityTypeInstance
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError/EntityTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError/EntityTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TooFewEntityTypeRoleInstancesError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError/EntityTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("715ed45e-2c85-491e-a577-3a6985347687")]
		public virtual EntityTypeInstance EntityTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityTypeInstance of a TooFewEntityTypeRoleInstancesError
		/// <summary>
		/// Gets EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityTypeInstance GetEntityTypeInstance(TooFewEntityTypeRoleInstancesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TooFewEntityTypeRoleInstancesErrorDomainRoleId) as EntityTypeInstance;
		}
		
		/// <summary>
		/// Sets EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntityTypeInstance(TooFewEntityTypeRoleInstancesError element, EntityTypeInstance newEntityTypeInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TooFewEntityTypeRoleInstancesErrorDomainRoleId, newEntityTypeInstance);
		}
		#endregion
		#region TooFewEntityTypeRoleInstancesError domain role code
		
		/// <summary>
		/// TooFewEntityTypeRoleInstancesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid TooFewEntityTypeRoleInstancesErrorDomainRoleId = new global::System.Guid(0x61d2d2df, 0x749c, 0x4d93, 0x8e, 0xf4, 0x5c, 0xcd, 0x92, 0xe0, 0x31, 0x54);
		
		/// <summary>
		/// DomainRole TooFewEntityTypeRoleInstancesError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError/TooFewEntityTypeRoleInstancesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError/TooFewEntityTypeRoleInstancesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityTypeInstance", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError/TooFewEntityTypeRoleInstancesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("61d2d2df-749c-4d93-8ef4-5ccd92e03154")]
		public virtual TooFewEntityTypeRoleInstancesError TooFewEntityTypeRoleInstancesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TooFewEntityTypeRoleInstancesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, TooFewEntityTypeRoleInstancesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TooFewEntityTypeRoleInstancesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TooFewEntityTypeRoleInstancesError of a EntityTypeInstance
		/// <summary>
		/// Gets TooFewEntityTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TooFewEntityTypeRoleInstancesError GetTooFewEntityTypeRoleInstancesError(EntityTypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityTypeInstanceDomainRoleId) as TooFewEntityTypeRoleInstancesError;
		}
		
		/// <summary>
		/// Sets TooFewEntityTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTooFewEntityTypeRoleInstancesError(EntityTypeInstance element, TooFewEntityTypeRoleInstancesError newTooFewEntityTypeRoleInstancesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityTypeInstanceDomainRoleId, newTooFewEntityTypeRoleInstancesError);
		}
		#endregion
		#region EntityTypeInstance link accessor
		/// <summary>
		/// Get the EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError link to a EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError GetLinkToTooFewEntityTypeRoleInstancesError (global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstance entityTypeInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError>(entityTypeInstanceInstance, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EntityTypeInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TooFewEntityTypeRoleInstancesError link accessor
		/// <summary>
		/// Get the EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError link to a TooFewEntityTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError GetLinkToEntityTypeInstance (global::Neumont.Tools.ORM.ObjectModel.TooFewEntityTypeRoleInstancesError tooFewEntityTypeRoleInstancesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError>(tooFewEntityTypeRoleInstancesErrorInstance, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TooFewEntityTypeRoleInstancesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError instance accessors
		
		/// <summary>
		/// Get any EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError links between a given EntityTypeInstance and a TooFewEntityTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstance source, global::Neumont.Tools.ORM.ObjectModel.TooFewEntityTypeRoleInstancesError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError>(source, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError link in links )
			{
				if ( target.Equals(link.TooFewEntityTypeRoleInstancesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError link between a given EntityTypeInstanceand a TooFewEntityTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError GetLink( global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstance source, global::Neumont.Tools.ORM.ObjectModel.TooFewEntityTypeRoleInstancesError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError>(source, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError link in links )
			{
				if ( target.Equals(link.TooFewEntityTypeRoleInstancesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeInstanceHasTooFewFactTypeRoleInstancesError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6ac86dd8-1766-472e-b70f-b788c04ed688")]
	public partial class FactTypeInstanceHasTooFewFactTypeRoleInstancesError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeInstanceHasTooFewFactTypeRoleInstancesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6ac86dd8, 0x1766, 0x472e, 0xb7, 0x0f, 0xb7, 0x88, 0xc0, 0x4e, 0xd6, 0x88);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeInstanceHasTooFewFactTypeRoleInstancesError link in the same Partition as the given FactTypeInstance
		/// </summary>
		/// <param name="source">FactTypeInstance to use as the source of the relationship.</param>
		/// <param name="target">TooFewFactTypeRoleInstancesError to use as the target of the relationship.</param>
		public FactTypeInstanceHasTooFewFactTypeRoleInstancesError(FactTypeInstance source, TooFewFactTypeRoleInstancesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeInstanceHasTooFewFactTypeRoleInstancesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeInstanceHasTooFewFactTypeRoleInstancesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeInstanceHasTooFewFactTypeRoleInstancesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeInstanceHasTooFewFactTypeRoleInstancesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactTypeInstance domain role code
		
		/// <summary>
		/// FactTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeInstanceDomainRoleId = new global::System.Guid(0xac1f89f9, 0x1dbc, 0x4826, 0x80, 0x35, 0x6e, 0xa0, 0xc1, 0xd3, 0x5e, 0xb1);
		
		/// <summary>
		/// DomainRole FactTypeInstance
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError/FactTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError/FactTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TooFewFactTypeRoleInstancesError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError/FactTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ac1f89f9-1dbc-4826-8035-6ea0c1d35eb1")]
		public virtual FactTypeInstance FactTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeInstance of a TooFewFactTypeRoleInstancesError
		/// <summary>
		/// Gets FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactTypeInstance GetFactTypeInstance(TooFewFactTypeRoleInstancesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TooFewFactTypeRoleInstancesErrorDomainRoleId) as FactTypeInstance;
		}
		
		/// <summary>
		/// Sets FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactTypeInstance(TooFewFactTypeRoleInstancesError element, FactTypeInstance newFactTypeInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TooFewFactTypeRoleInstancesErrorDomainRoleId, newFactTypeInstance);
		}
		#endregion
		#region TooFewFactTypeRoleInstancesError domain role code
		
		/// <summary>
		/// TooFewFactTypeRoleInstancesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid TooFewFactTypeRoleInstancesErrorDomainRoleId = new global::System.Guid(0x8d72911a, 0x53e9, 0x4e0d, 0x8b, 0xe7, 0x79, 0xfc, 0x16, 0x05, 0x7e, 0xd5);
		
		/// <summary>
		/// DomainRole TooFewFactTypeRoleInstancesError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError/TooFewFactTypeRoleInstancesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError/TooFewFactTypeRoleInstancesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactTypeInstance", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError/TooFewFactTypeRoleInstancesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8d72911a-53e9-4e0d-8be7-79fc16057ed5")]
		public virtual TooFewFactTypeRoleInstancesError TooFewFactTypeRoleInstancesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TooFewFactTypeRoleInstancesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, TooFewFactTypeRoleInstancesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TooFewFactTypeRoleInstancesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TooFewFactTypeRoleInstancesError of a FactTypeInstance
		/// <summary>
		/// Gets TooFewFactTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TooFewFactTypeRoleInstancesError GetTooFewFactTypeRoleInstancesError(FactTypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeInstanceDomainRoleId) as TooFewFactTypeRoleInstancesError;
		}
		
		/// <summary>
		/// Sets TooFewFactTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTooFewFactTypeRoleInstancesError(FactTypeInstance element, TooFewFactTypeRoleInstancesError newTooFewFactTypeRoleInstancesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeInstanceDomainRoleId, newTooFewFactTypeRoleInstancesError);
		}
		#endregion
		#region FactTypeInstance link accessor
		/// <summary>
		/// Get the FactTypeInstanceHasTooFewFactTypeRoleInstancesError link to a FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError GetLinkToTooFewFactTypeRoleInstancesError (global::Neumont.Tools.ORM.ObjectModel.FactTypeInstance factTypeInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError>(factTypeInstanceInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactTypeInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TooFewFactTypeRoleInstancesError link accessor
		/// <summary>
		/// Get the FactTypeInstanceHasTooFewFactTypeRoleInstancesError link to a TooFewFactTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError GetLinkToFactTypeInstance (global::Neumont.Tools.ORM.ObjectModel.TooFewFactTypeRoleInstancesError tooFewFactTypeRoleInstancesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError>(tooFewFactTypeRoleInstancesErrorInstance, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TooFewFactTypeRoleInstancesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeInstanceHasTooFewFactTypeRoleInstancesError instance accessors
		
		/// <summary>
		/// Get any FactTypeInstanceHasTooFewFactTypeRoleInstancesError links between a given FactTypeInstance and a TooFewFactTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.FactTypeInstance source, global::Neumont.Tools.ORM.ObjectModel.TooFewFactTypeRoleInstancesError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError link in links )
			{
				if ( target.Equals(link.TooFewFactTypeRoleInstancesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeInstanceHasTooFewFactTypeRoleInstancesError link between a given FactTypeInstanceand a TooFewFactTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError GetLink( global::Neumont.Tools.ORM.ObjectModel.FactTypeInstance source, global::Neumont.Tools.ORM.ObjectModel.TooFewFactTypeRoleInstancesError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError>(source, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError link in links )
			{
				if ( target.Equals(link.TooFewFactTypeRoleInstancesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueTypeInstanceHasCompatibleValueTypeInstanceValueError
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a8af2a8f-cdd0-41cb-b8cd-60cf28277288")]
	public partial class ValueTypeInstanceHasCompatibleValueTypeInstanceValueError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueTypeInstanceHasCompatibleValueTypeInstanceValueError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa8af2a8f, 0xcdd0, 0x41cb, 0xb8, 0xcd, 0x60, 0xcf, 0x28, 0x27, 0x72, 0x88);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueTypeInstanceHasCompatibleValueTypeInstanceValueError link in the same Partition as the given ValueTypeInstance
		/// </summary>
		/// <param name="source">ValueTypeInstance to use as the source of the relationship.</param>
		/// <param name="target">CompatibleValueTypeInstanceValueError to use as the target of the relationship.</param>
		public ValueTypeInstanceHasCompatibleValueTypeInstanceValueError(ValueTypeInstance source, CompatibleValueTypeInstanceValueError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId, source), new DslModeling::RoleAssignment(ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeInstanceHasCompatibleValueTypeInstanceValueError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeInstanceHasCompatibleValueTypeInstanceValueError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeInstanceHasCompatibleValueTypeInstanceValueError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeInstanceHasCompatibleValueTypeInstanceValueError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueTypeInstance domain role code
		
		/// <summary>
		/// ValueTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeInstanceDomainRoleId = new global::System.Guid(0x5c173594, 0xaa0c, 0x45ba, 0x92, 0xf1, 0x8d, 0x80, 0xa7, 0x4e, 0x13, 0x00);
		
		/// <summary>
		/// DomainRole ValueTypeInstance
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError/ValueTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError/ValueTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CompatibleValueTypeInstanceValueError", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError/ValueTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5c173594-aa0c-45ba-92f1-8d80a74e1300")]
		public virtual ValueTypeInstance ValueTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueTypeInstance of a CompatibleValueTypeInstanceValueError
		/// <summary>
		/// Gets ValueTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueTypeInstance GetValueTypeInstance(CompatibleValueTypeInstanceValueError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CompatibleValueTypeInstanceValueErrorDomainRoleId) as ValueTypeInstance;
		}
		
		/// <summary>
		/// Sets ValueTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueTypeInstance(CompatibleValueTypeInstanceValueError element, ValueTypeInstance newValueTypeInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CompatibleValueTypeInstanceValueErrorDomainRoleId, newValueTypeInstance);
		}
		#endregion
		#region CompatibleValueTypeInstanceValueError domain role code
		
		/// <summary>
		/// CompatibleValueTypeInstanceValueError domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompatibleValueTypeInstanceValueErrorDomainRoleId = new global::System.Guid(0x52774478, 0x7f8b, 0x4974, 0xa2, 0x66, 0x75, 0x46, 0x3e, 0xa1, 0x80, 0x8f);
		
		/// <summary>
		/// DomainRole CompatibleValueTypeInstanceValueError
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueError
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError/CompatibleValueTypeInstanceValueError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError/CompatibleValueTypeInstanceValueError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueTypeInstance", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError/CompatibleValueTypeInstanceValueError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("52774478-7f8b-4974-a266-75463ea1808f")]
		public virtual CompatibleValueTypeInstanceValueError CompatibleValueTypeInstanceValueError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CompatibleValueTypeInstanceValueError)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompatibleValueTypeInstanceValueErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompatibleValueTypeInstanceValueErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CompatibleValueTypeInstanceValueError of a ValueTypeInstance
		/// <summary>
		/// Gets CompatibleValueTypeInstanceValueError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CompatibleValueTypeInstanceValueError GetCompatibleValueTypeInstanceValueError(ValueTypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueTypeInstanceDomainRoleId) as CompatibleValueTypeInstanceValueError;
		}
		
		/// <summary>
		/// Sets CompatibleValueTypeInstanceValueError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCompatibleValueTypeInstanceValueError(ValueTypeInstance element, CompatibleValueTypeInstanceValueError newCompatibleValueTypeInstanceValueError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueTypeInstanceDomainRoleId, newCompatibleValueTypeInstanceValueError);
		}
		#endregion
		#region ValueTypeInstance link accessor
		/// <summary>
		/// Get the ValueTypeInstanceHasCompatibleValueTypeInstanceValueError link to a ValueTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError GetLinkToCompatibleValueTypeInstanceValueError (global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstance valueTypeInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError>(valueTypeInstanceInstance, global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueTypeInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CompatibleValueTypeInstanceValueError link accessor
		/// <summary>
		/// Get the ValueTypeInstanceHasCompatibleValueTypeInstanceValueError link to a CompatibleValueTypeInstanceValueError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError GetLinkToValueTypeInstance (global::Neumont.Tools.ORM.ObjectModel.CompatibleValueTypeInstanceValueError compatibleValueTypeInstanceValueErrorInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError>(compatibleValueTypeInstanceValueErrorInstance, global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CompatibleValueTypeInstanceValueError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueTypeInstanceHasCompatibleValueTypeInstanceValueError instance accessors
		
		/// <summary>
		/// Get any ValueTypeInstanceHasCompatibleValueTypeInstanceValueError links between a given ValueTypeInstance and a CompatibleValueTypeInstanceValueError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstance source, global::Neumont.Tools.ORM.ObjectModel.CompatibleValueTypeInstanceValueError target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError>(source, global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError link in links )
			{
				if ( target.Equals(link.CompatibleValueTypeInstanceValueError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueTypeInstanceHasCompatibleValueTypeInstanceValueError link between a given ValueTypeInstanceand a CompatibleValueTypeInstanceValueError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError GetLink( global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstance source, global::Neumont.Tools.ORM.ObjectModel.CompatibleValueTypeInstanceValueError target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError>(source, global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError link in links )
			{
				if ( target.Equals(link.CompatibleValueTypeInstanceValueError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship JoinHasRole
	/// Description for Neumont.Tools.ORM.ObjectModel.JoinHasRole
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.JoinHasRole.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.JoinHasRole.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("100dce21-d23a-4ed5-8919-a6fa9daa4f8b")]
	public abstract partial class JoinHasRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// JoinHasRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x100dce21, 0xd23a, 0x4ed5, 0x89, 0x19, 0xa6, 0xfa, 0x9d, 0xaa, 0x4f, 0x8b);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected JoinHasRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Join domain role code
		
		/// <summary>
		/// Join domain role Id.
		/// </summary>
		public static readonly global::System.Guid JoinDomainRoleId = new global::System.Guid(0x0d213b9c, 0xdc79, 0x4ae9, 0x8e, 0x50, 0x69, 0xab, 0x7b, 0xb0, 0x09, 0x5f);
		
		/// <summary>
		/// DomainRole Join
		/// Description for Neumont.Tools.ORM.ObjectModel.JoinHasRole.Join
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.JoinHasRole/Join.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.JoinHasRole/Join.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Role", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.JoinHasRole/Join.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("0d213b9c-dc79-4ae9-8e50-69ab7bb0095f")]
		public abstract Join Join
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access JoinCollection of a Role
		/// <summary>
		/// Gets a list of JoinCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<Join> GetJoinCollection(Role element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<Join>(element, RoleDomainRoleId);
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0x2b0eea3a, 0x5901, 0x48d8, 0xa3, 0x27, 0xae, 0x3d, 0xe2, 0xe0, 0xe4, 0x2f);
		
		/// <summary>
		/// DomainRole Role
		/// Description for Neumont.Tools.ORM.ObjectModel.JoinHasRole.Role
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.JoinHasRole/Role.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.JoinHasRole/Role.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "JoinCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.JoinHasRole/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2b0eea3a-5901-48d8-a327-ae3de2e0e42f")]
		public abstract Role Role
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Role of a Join
		/// <summary>
		/// Gets a list of Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<Role> GetRole(Join element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<Role>(element, JoinDomainRoleId);
		}
		#endregion
		#region Join link accessor
		/// <summary>
		/// Get the list of JoinHasRole links to a Join.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.JoinHasRole> GetLinksToRole ( global::Neumont.Tools.ORM.ObjectModel.Join joinInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.JoinHasRole>(joinInstance, global::Neumont.Tools.ORM.ObjectModel.JoinHasRole.JoinDomainRoleId);
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the list of JoinHasRole links to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.JoinHasRole> GetLinksToJoinCollection ( global::Neumont.Tools.ORM.ObjectModel.Role roleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.JoinHasRole>(roleInstance, global::Neumont.Tools.ORM.ObjectModel.JoinHasRole.RoleDomainRoleId);
		}
		#endregion
		#region JoinHasRole instance accessors
		
		/// <summary>
		/// Get any JoinHasRole links between a given Join and a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.JoinHasRole> GetLinks( global::Neumont.Tools.ORM.ObjectModel.Join source, global::Neumont.Tools.ORM.ObjectModel.Role target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.JoinHasRole> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.JoinHasRole>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.JoinHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.JoinHasRole>(source, global::Neumont.Tools.ORM.ObjectModel.JoinHasRole.JoinDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.JoinHasRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one JoinHasRole link between a given Joinand a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.JoinHasRole GetLink( global::Neumont.Tools.ORM.ObjectModel.Join source, global::Neumont.Tools.ORM.ObjectModel.Role target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.JoinHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.JoinHasRole>(source, global::Neumont.Tools.ORM.ObjectModel.JoinHasRole.JoinDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.JoinHasRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship JoinHasInputRole
	/// Description for Neumont.Tools.ORM.ObjectModel.JoinHasInputRole
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.JoinHasInputRole.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.JoinHasInputRole.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7f393586-4d6c-43f6-97d0-53e23b0a569c")]
	public partial class JoinHasInputRole : JoinHasRole
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// JoinHasInputRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7f393586, 0x4d6c, 0x43f6, 0x97, 0xd0, 0x53, 0xe2, 0x3b, 0x0a, 0x56, 0x9c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a JoinHasInputRole link in the same Partition as the given Join
		/// </summary>
		/// <param name="source">Join to use as the source of the relationship.</param>
		/// <param name="target">Role to use as the target of the relationship.</param>
		public JoinHasInputRole(Join source, Role target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(JoinHasInputRole.JoinDomainRoleId, source), new DslModeling::RoleAssignment(JoinHasInputRole.RoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public JoinHasInputRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public JoinHasInputRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public JoinHasInputRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public JoinHasInputRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Join domain role code
		
		/// <summary>
		/// Join domain role Id.
		/// </summary>
		public static readonly new global::System.Guid JoinDomainRoleId = new global::System.Guid(0x38d76a89, 0xdde7, 0x4f93, 0x9d, 0x0b, 0x00, 0xe8, 0x62, 0xda, 0xe9, 0xc6);
		
		/// <summary>
		/// DomainRole Join
		/// Description for Neumont.Tools.ORM.ObjectModel.JoinHasInputRole.Join
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.JoinHasInputRole/Join.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.JoinHasInputRole/Join.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InputRole", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.JoinHasInputRole/Join.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("38d76a89-dde7-4f93-9d0b-00e862dae9c6")]
		public override Join Join
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Join)DslModeling::DomainRoleInfo.GetRolePlayer(this, JoinDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, JoinDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access JoinCollection of a Role
		/// <summary>
		/// Gets a list of JoinCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new DslModeling::LinkedElementCollection<Join> GetJoinCollection(Role element)
		{
			return new DslModeling::LinkedElementCollection<Join>(element, RoleDomainRoleId);
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly new global::System.Guid RoleDomainRoleId = new global::System.Guid(0x170f3e22, 0x5670, 0x4d4f, 0x80, 0xb7, 0x77, 0xf2, 0x53, 0x2f, 0x92, 0x89);
		
		/// <summary>
		/// DomainRole Role
		/// Description for Neumont.Tools.ORM.ObjectModel.JoinHasInputRole.Role
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.JoinHasInputRole/Role.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.JoinHasInputRole/Role.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "JoinCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.JoinHasInputRole/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("170f3e22-5670-4d4f-80b7-77f2532f9289")]
		public override Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InputRole of a Join
		/// <summary>
		/// Gets InputRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Role GetInputRole(Join element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, JoinDomainRoleId) as Role;
		}
		
		/// <summary>
		/// Sets InputRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInputRole(Join element, Role newRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, JoinDomainRoleId, newRole);
		}
		#endregion
		#region Join link accessor
		/// <summary>
		/// Get the JoinHasInputRole link to a Join.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole GetLinkToInputRole (global::Neumont.Tools.ORM.ObjectModel.Join joinInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole>(joinInstance, global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole.JoinDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Join not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the list of JoinHasInputRole links to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole> GetLinksToJoinCollection ( global::Neumont.Tools.ORM.ObjectModel.Role roleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole>(roleInstance, global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole.RoleDomainRoleId);
		}
		#endregion
		#region JoinHasInputRole instance accessors
		
		/// <summary>
		/// Get any JoinHasInputRole links between a given Join and a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole> GetLinks( global::Neumont.Tools.ORM.ObjectModel.Join source, global::Neumont.Tools.ORM.ObjectModel.Role target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole>(source, global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole.JoinDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one JoinHasInputRole link between a given Joinand a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole GetLink( global::Neumont.Tools.ORM.ObjectModel.Join source, global::Neumont.Tools.ORM.ObjectModel.Role target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole>(source, global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole.JoinDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship JoinHasOutputRole
	/// Description for Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("78519cfe-11f8-45b2-89a0-7b1dcd4aba30")]
	public partial class JoinHasOutputRole : JoinHasRole
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// JoinHasOutputRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x78519cfe, 0x11f8, 0x45b2, 0x89, 0xa0, 0x7b, 0x1d, 0xcd, 0x4a, 0xba, 0x30);
	
				
		/// <summary>
		/// Constructor
		/// Creates a JoinHasOutputRole link in the same Partition as the given Join
		/// </summary>
		/// <param name="source">Join to use as the source of the relationship.</param>
		/// <param name="target">Role to use as the target of the relationship.</param>
		public JoinHasOutputRole(Join source, Role target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(JoinHasOutputRole.JoinDomainRoleId, source), new DslModeling::RoleAssignment(JoinHasOutputRole.RoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public JoinHasOutputRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public JoinHasOutputRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public JoinHasOutputRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public JoinHasOutputRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Join domain role code
		
		/// <summary>
		/// Join domain role Id.
		/// </summary>
		public static readonly new global::System.Guid JoinDomainRoleId = new global::System.Guid(0xe39a57ec, 0x8f97, 0x4d1a, 0xa6, 0xe2, 0x4a, 0xe6, 0x13, 0xfe, 0xcc, 0x41);
		
		/// <summary>
		/// DomainRole Join
		/// Description for Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole.Join
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole/Join.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole/Join.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "OutputRole", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole/Join.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e39a57ec-8f97-4d1a-a6e2-4ae613fecc41")]
		public override Join Join
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Join)DslModeling::DomainRoleInfo.GetRolePlayer(this, JoinDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, JoinDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access JoinCollection of a Role
		/// <summary>
		/// Gets a list of JoinCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new DslModeling::LinkedElementCollection<Join> GetJoinCollection(Role element)
		{
			return new DslModeling::LinkedElementCollection<Join>(element, RoleDomainRoleId);
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly new global::System.Guid RoleDomainRoleId = new global::System.Guid(0x2e0cc7ef, 0x2937, 0x4236, 0xb5, 0xd5, 0xcc, 0x61, 0x16, 0x7f, 0x4a, 0xe7);
		
		/// <summary>
		/// DomainRole Role
		/// Description for Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole.Role
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole/Role.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole/Role.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "JoinCollection", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2e0cc7ef-2937-4236-b5d5-cc61167f4ae7")]
		public override Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OutputRole of a Join
		/// <summary>
		/// Gets OutputRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Role GetOutputRole(Join element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, JoinDomainRoleId) as Role;
		}
		
		/// <summary>
		/// Sets OutputRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOutputRole(Join element, Role newRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, JoinDomainRoleId, newRole);
		}
		#endregion
		#region Join link accessor
		/// <summary>
		/// Get the JoinHasOutputRole link to a Join.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole GetLinkToOutputRole (global::Neumont.Tools.ORM.ObjectModel.Join joinInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole>(joinInstance, global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole.JoinDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Join not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the list of JoinHasOutputRole links to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole> GetLinksToJoinCollection ( global::Neumont.Tools.ORM.ObjectModel.Role roleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole>(roleInstance, global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole.RoleDomainRoleId);
		}
		#endregion
		#region JoinHasOutputRole instance accessors
		
		/// <summary>
		/// Get any JoinHasOutputRole links between a given Join and a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole> GetLinks( global::Neumont.Tools.ORM.ObjectModel.Join source, global::Neumont.Tools.ORM.ObjectModel.Role target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole>(source, global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole.JoinDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one JoinHasOutputRole link between a given Joinand a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole GetLink( global::Neumont.Tools.ORM.ObjectModel.Join source, global::Neumont.Tools.ORM.ObjectModel.Role target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole>(source, global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole.JoinDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ORMModelElementHasJoinPath
	/// Description for Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("744c121f-cb6c-4b1f-9ac0-867ebc2f3ad7")]
	public abstract partial class ORMModelElementHasJoinPath : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ORMModelElementHasJoinPath domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x744c121f, 0xcb6c, 0x4b1f, 0x9a, 0xc0, 0x86, 0x7e, 0xbc, 0x2f, 0x3a, 0xd7);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected ORMModelElementHasJoinPath(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region JoinPathOwner domain role code
		
		/// <summary>
		/// JoinPathOwner domain role Id.
		/// </summary>
		public static readonly global::System.Guid JoinPathOwnerDomainRoleId = new global::System.Guid(0xe8bed1b1, 0xf17a, 0x471e, 0x81, 0x1d, 0xe6, 0xa9, 0xd5, 0x91, 0x6c, 0xda);
		
		/// <summary>
		/// DomainRole JoinPathOwner
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath.JoinPathOwner
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath/JoinPathOwner.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath/JoinPathOwner.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "JoinPath", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath/JoinPathOwner.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e8bed1b1-f17a-471e-811d-e6a9d5916cda")]
		public abstract ORMModelElement JoinPathOwner
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access JoinPathOwner of a Join
		/// <summary>
		/// Gets JoinPathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModelElement GetJoinPathOwner(Join element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, JoinDomainRoleId) as ORMModelElement;
		}
		
		/// <summary>
		/// Sets JoinPathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetJoinPathOwner(Join element, ORMModelElement newJoinPathOwner)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, JoinDomainRoleId, newJoinPathOwner);
		}
		#endregion
		#region Join domain role code
		
		/// <summary>
		/// Join domain role Id.
		/// </summary>
		public static readonly global::System.Guid JoinDomainRoleId = new global::System.Guid(0xb5f5b7c2, 0xc5a1, 0x46bb, 0x89, 0x69, 0x26, 0x4f, 0x8d, 0xc5, 0x0b, 0xb7);
		
		/// <summary>
		/// DomainRole Join
		/// Description for Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath.Join
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath/Join.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath/Join.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "JoinPathOwner", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath/Join.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b5f5b7c2-c5a1-46bb-8969-264f8dc50bb7")]
		public abstract Join Join
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access JoinPath of a ORMModelElement
		/// <summary>
		/// Gets a list of JoinPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<Join> GetJoinPath(ORMModelElement element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<Join>(element, JoinPathOwnerDomainRoleId);
		}
		#endregion
		#region JoinPathOwner link accessor
		/// <summary>
		/// Get the list of ORMModelElementHasJoinPath links to a ORMModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath> GetLinksToJoinPath ( global::Neumont.Tools.ORM.ObjectModel.ORMModelElement joinPathOwnerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath>(joinPathOwnerInstance, global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath.JoinPathOwnerDomainRoleId);
		}
		#endregion
		#region Join link accessor
		/// <summary>
		/// Get the ORMModelElementHasJoinPath link to a Join.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath GetLinkToJoinPathOwner (global::Neumont.Tools.ORM.ObjectModel.Join joinInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath>(joinInstance, global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath.JoinDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Join not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ORMModelElementHasJoinPath instance accessors
		
		/// <summary>
		/// Get any ORMModelElementHasJoinPath links between a given ORMModelElement and a Join.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ORMModelElement source, global::Neumont.Tools.ORM.ObjectModel.Join target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath>(source, global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath.JoinPathOwnerDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath link in links )
			{
				if ( target.Equals(link.Join) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ORMModelElementHasJoinPath link between a given ORMModelElementand a Join.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath GetLink( global::Neumont.Tools.ORM.ObjectModel.ORMModelElement source, global::Neumont.Tools.ORM.ObjectModel.Join target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath>(source, global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath.JoinPathOwnerDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath link in links )
			{
				if ( target.Equals(link.Join) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleSequenceHasJoinPath
	/// Description for Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("62fc7ac1-eb51-4887-81d4-15007d5facbd")]
	public partial class ConstraintRoleSequenceHasJoinPath : ORMModelElementHasJoinPath
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleSequenceHasJoinPath domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x62fc7ac1, 0xeb51, 0x4887, 0x81, 0xd4, 0x15, 0x00, 0x7d, 0x5f, 0xac, 0xbd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleSequenceHasJoinPath link in the same Partition as the given ConstraintRoleSequence
		/// </summary>
		/// <param name="source">ConstraintRoleSequence to use as the source of the relationship.</param>
		/// <param name="target">Join to use as the target of the relationship.</param>
		public ConstraintRoleSequenceHasJoinPath(ConstraintRoleSequence source, Join target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleSequenceHasJoinPath.JoinPathOwnerDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleSequenceHasJoinPath.JoinDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceHasJoinPath(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceHasJoinPath(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceHasJoinPath(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceHasJoinPath(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region JoinPathOwner domain role code
		
		/// <summary>
		/// JoinPathOwner domain role Id.
		/// </summary>
		public static readonly new global::System.Guid JoinPathOwnerDomainRoleId = new global::System.Guid(0xd204614a, 0xa424, 0x426b, 0x92, 0x16, 0xfa, 0xb2, 0x1c, 0xd3, 0xba, 0x9c);
		
		/// <summary>
		/// DomainRole JoinPathOwner
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath.JoinPathOwner
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath/JoinPathOwner.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath/JoinPathOwner.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, RolePlayer = typeof(ConstraintRoleSequence), PropertyName = "JoinPath", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath/JoinPathOwner.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d204614a-a424-426b-9216-fab21cd3ba9c")]
		public override ORMModelElement JoinPathOwner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, JoinPathOwnerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, JoinPathOwnerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access JoinPathOwner of a Join
		/// <summary>
		/// Gets JoinPathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new ConstraintRoleSequence GetJoinPathOwner(Join element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, JoinDomainRoleId) as ConstraintRoleSequence;
		}
		
		/// <summary>
		/// Sets JoinPathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetJoinPathOwner(Join element, ConstraintRoleSequence newJoinPathOwner)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, JoinDomainRoleId, newJoinPathOwner);
		}
		#endregion
		#region Join domain role code
		
		/// <summary>
		/// Join domain role Id.
		/// </summary>
		public static readonly new global::System.Guid JoinDomainRoleId = new global::System.Guid(0xb8d5101b, 0x7904, 0x41b6, 0xb1, 0x4c, 0x5b, 0xe6, 0x67, 0xb2, 0xa6, 0xba);
		
		/// <summary>
		/// DomainRole Join
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath.Join
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath/Join.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath/Join.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "JoinPathOwner", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath/Join.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b8d5101b-7904-41b6-b14c-5be667b2a6ba")]
		public override Join Join
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Join)DslModeling::DomainRoleInfo.GetRolePlayer(this, JoinDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, JoinDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access JoinPath of a ConstraintRoleSequence
		/// <summary>
		/// Gets a list of JoinPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Join> GetJoinPath(ConstraintRoleSequence element)
		{
			return new DslModeling::LinkedElementCollection<Join>(element, JoinPathOwnerDomainRoleId);
		}
		#endregion
		#region JoinPathOwner link accessor
		/// <summary>
		/// Get the list of ConstraintRoleSequenceHasJoinPath links to a ConstraintRoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath> GetLinksToJoinPath ( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence joinPathOwnerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath>(joinPathOwnerInstance, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath.JoinPathOwnerDomainRoleId);
		}
		#endregion
		#region Join link accessor
		/// <summary>
		/// Get the ConstraintRoleSequenceHasJoinPath link to a Join.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath GetLinkToJoinPathOwner (global::Neumont.Tools.ORM.ObjectModel.Join joinInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath>(joinInstance, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath.JoinDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Join not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConstraintRoleSequenceHasJoinPath instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleSequenceHasJoinPath links between a given ConstraintRoleSequence and a Join.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence source, global::Neumont.Tools.ORM.ObjectModel.Join target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath>(source, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath.JoinPathOwnerDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath link in links )
			{
				if ( target.Equals(link.Join) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleSequenceHasJoinPath link between a given ConstraintRoleSequenceand a Join.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath GetLink( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence source, global::Neumont.Tools.ORM.ObjectModel.Join target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath>(source, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath.JoinPathOwnerDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath link in links )
			{
				if ( target.Equals(link.Join) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleSequenceHasRoleHasProjectionJoin
	/// Description for
	/// Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("314434d1-1e15-4e2f-a2a7-2d1d72343b06")]
	public partial class ConstraintRoleSequenceHasRoleHasProjectionJoin : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleSequenceHasRoleHasProjectionJoin domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x314434d1, 0x1e15, 0x4e2f, 0xa2, 0xa7, 0x2d, 0x1d, 0x72, 0x34, 0x3b, 0x06);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleSequenceHasRoleHasProjectionJoin link in the same Partition as the given ConstraintRoleSequenceHasRole
		/// </summary>
		/// <param name="source">ConstraintRoleSequenceHasRole to use as the source of the relationship.</param>
		/// <param name="target">Join to use as the target of the relationship.</param>
		public ConstraintRoleSequenceHasRoleHasProjectionJoin(ConstraintRoleSequenceHasRole source, Join target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleSequenceHasRoleHasProjectionJoin.ConstraintRoleSequenceHasRoleDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleSequenceHasRoleHasProjectionJoin.ProjectionJoinDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceHasRoleHasProjectionJoin(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceHasRoleHasProjectionJoin(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceHasRoleHasProjectionJoin(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceHasRoleHasProjectionJoin(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConstraintRoleSequenceHasRole domain role code
		
		/// <summary>
		/// ConstraintRoleSequenceHasRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintRoleSequenceHasRoleDomainRoleId = new global::System.Guid(0x20e93902, 0xf83a, 0x4273, 0xbf, 0xff, 0x94, 0x5e, 0x44, 0xd1, 0x72, 0xae);
		
		/// <summary>
		/// DomainRole ConstraintRoleSequenceHasRole
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin.ConstraintRoleSequenceHasRole
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin/ConstraintRoleSequenceHasRole.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin/ConstraintRoleSequenceHasRole.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectionJoin", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin/ConstraintRoleSequenceHasRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("20e93902-f83a-4273-bfff-945e44d172ae")]
		public virtual ConstraintRoleSequenceHasRole ConstraintRoleSequenceHasRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequenceHasRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintRoleSequenceHasRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintRoleSequenceHasRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConstraintRoleSequenceHasRole of a Join
		/// <summary>
		/// Gets a list of ConstraintRoleSequenceHasRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole> GetConstraintRoleSequenceHasRole(Join element)
		{
			return new DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole>(element, ProjectionJoinDomainRoleId);
		}
		#endregion
		#region ProjectionJoin domain role code
		
		/// <summary>
		/// ProjectionJoin domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProjectionJoinDomainRoleId = new global::System.Guid(0x98d276db, 0x7213, 0x46f9, 0xbb, 0xee, 0x2d, 0xc6, 0xd3, 0x26, 0xc5, 0xca);
		
		/// <summary>
		/// DomainRole ProjectionJoin
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin.ProjectionJoin
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin/ProjectionJoin.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin/ProjectionJoin.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConstraintRoleSequenceHasRole", PropertyDisplayNameKey="Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin/ProjectionJoin.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("98d276db-7213-46f9-bbee-2dc6d326c5ca")]
		public virtual Join ProjectionJoin
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Join)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProjectionJoinDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProjectionJoinDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectionJoin of a ConstraintRoleSequenceHasRole
		/// <summary>
		/// Gets ProjectionJoin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Join GetProjectionJoin(ConstraintRoleSequenceHasRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConstraintRoleSequenceHasRoleDomainRoleId) as Join;
		}
		
		/// <summary>
		/// Sets ProjectionJoin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjectionJoin(ConstraintRoleSequenceHasRole element, Join newProjectionJoin)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConstraintRoleSequenceHasRoleDomainRoleId, newProjectionJoin);
		}
		#endregion
		#region ConstraintRoleSequenceHasRole link accessor
		/// <summary>
		/// Get the ConstraintRoleSequenceHasRoleHasProjectionJoin link to a ConstraintRoleSequenceHasRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin GetLinkToProjectionJoin (global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole constraintRoleSequenceHasRoleInstance)
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin>(constraintRoleSequenceHasRoleInstance, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin.ConstraintRoleSequenceHasRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConstraintRoleSequenceHasRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ProjectionJoin link accessor
		/// <summary>
		/// Get the list of ConstraintRoleSequenceHasRoleHasProjectionJoin links to a Join.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin> GetLinksToConstraintRoleSequenceHasRole ( global::Neumont.Tools.ORM.ObjectModel.Join projectionJoinInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin>(projectionJoinInstance, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin.ProjectionJoinDomainRoleId);
		}
		#endregion
		#region ConstraintRoleSequenceHasRoleHasProjectionJoin instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleSequenceHasRoleHasProjectionJoin links between a given ConstraintRoleSequenceHasRole and a Join.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin> GetLinks( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole source, global::Neumont.Tools.ORM.ObjectModel.Join target )
		{
			global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin> outLinks = new global::System.Collections.Generic.List<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin>();
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin>(source, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin.ConstraintRoleSequenceHasRoleDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin link in links )
			{
				if ( target.Equals(link.ProjectionJoin) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleSequenceHasRoleHasProjectionJoin link between a given ConstraintRoleSequenceHasRoleand a Join.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin GetLink( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole source, global::Neumont.Tools.ORM.ObjectModel.Join target )
		{
			global::System.Collections.Generic.IList<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin>(source, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin.ConstraintRoleSequenceHasRoleDomainRoleId);
			foreach ( global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRoleHasProjectionJoin link in links )
			{
				if ( target.Equals(link.ProjectionJoin) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
