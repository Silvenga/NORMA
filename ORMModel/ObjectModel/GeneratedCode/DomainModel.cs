#region Common Public License Copyright Notice
/**************************************************************************\
* Neumont Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainModel ORMCoreDomainModel
	/// Description for Neumont.Tools.ORM.ObjectModel.ORMCore
	/// </summary>
	[DslModeling::ExtendsDomainModel("F60BC3F1-C38E-4C7D-9EE5-9211DB26CB45"/*Neumont.Tools.Modeling.FrameworkDomainModel*/)]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3eae649f-e654-4d04-8289-c25d2c0322d8")]
	public partial class ORMCoreDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// ORMCoreDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x3eae649f, 0xe654, 0x4d04, 0x82, 0x89, 0xc2, 0x5d, 0x2c, 0x03, 0x22, 0xd8);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public ORMCoreDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
		}
		
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(NameConsumer),
				typeof(OmittedWord),
				typeof(NameGenerator),
				typeof(NameUsage),
				typeof(ModelErrorCategory),
				typeof(ModelErrorDisplayFilter),
				typeof(PopulationErrorCategory),
				typeof(DataTypeAndValueErrorCategory),
				typeof(ConstraintImplicationAndContradictionErrorCategory),
				typeof(ConstraintStructureErrorCategory),
				typeof(FactTypeDefinitionErrorCategory),
				typeof(ReferenceSchemeErrorCategory),
				typeof(NameErrorCategory),
				typeof(ORMModelElement),
				typeof(ORMNamedElement),
				typeof(ORMModel),
				typeof(ObjectType),
				typeof(FactType),
				typeof(SubtypeFact),
				typeof(RoleBase),
				typeof(RoleProxy),
				typeof(Role),
				typeof(NameAlias),
				typeof(EqualityConstraint),
				typeof(ExclusionConstraint),
				typeof(SubsetConstraint),
				typeof(SetComparisonConstraint),
				typeof(Expression),
				typeof(SetComparisonConstraintRoleSequence),
				typeof(RingConstraint),
				typeof(FrequencyConstraint),
				typeof(UniquenessConstraint),
				typeof(MandatoryConstraint),
				typeof(SetConstraint),
				typeof(ConstraintRoleSequence),
				typeof(Join),
				typeof(TooFewRoleSequencesError),
				typeof(TooManyRoleSequencesError),
				typeof(ObjectTypeDuplicateNameError),
				typeof(PopulationUniquenessError),
				typeof(ContradictionError),
				typeof(ExclusionContradictsMandatoryError),
				typeof(ExclusionContradictsEqualityError),
				typeof(ExclusionContradictsSubsetError),
				typeof(NotWellModeledSubsetAndMandatoryError),
				typeof(PopulationMandatoryError),
				typeof(ConstraintDuplicateNameError),
				typeof(DuplicateNameError),
				typeof(TooFewReadingRolesError),
				typeof(TooManyReadingRolesError),
				typeof(ExternalConstraintRoleSequenceArityMismatchError),
				typeof(FactTypeRequiresReadingError),
				typeof(FactTypeRequiresInternalUniquenessConstraintError),
				typeof(DataTypeNotSpecifiedError),
				typeof(NMinusOneError),
				typeof(CompatibleRolePlayerTypeError),
				typeof(RolePlayerRequiredError),
				typeof(EqualityImpliedByMandatoryError),
				typeof(EntityTypeRequiresReferenceSchemeError),
				typeof(FrequencyConstraintMinMaxError),
				typeof(FrequencyConstraintExactlyOneError),
				typeof(ReadingRequiresUserModificationError),
				typeof(ModelError),
				typeof(ReferenceModeKind),
				typeof(IntrinsicReferenceMode),
				typeof(CustomReferenceMode),
				typeof(ReferenceMode),
				typeof(UnspecifiedDataType),
				typeof(FixedLengthTextDataType),
				typeof(VariableLengthTextDataType),
				typeof(LargeLengthTextDataType),
				typeof(TextDataType),
				typeof(SignedIntegerNumericDataType),
				typeof(SignedSmallIntegerNumericDataType),
				typeof(SignedLargeIntegerNumericDataType),
				typeof(UnsignedIntegerNumericDataType),
				typeof(UnsignedSmallIntegerNumericDataType),
				typeof(UnsignedLargeIntegerNumericDataType),
				typeof(AutoCounterNumericDataType),
				typeof(FloatingPointNumericDataType),
				typeof(SinglePrecisionFloatingPointNumericDataType),
				typeof(DoublePrecisionFloatingPointNumericDataType),
				typeof(DecimalNumericDataType),
				typeof(MoneyNumericDataType),
				typeof(NumericDataType),
				typeof(FixedLengthRawDataDataType),
				typeof(VariableLengthRawDataDataType),
				typeof(LargeLengthRawDataDataType),
				typeof(PictureRawDataDataType),
				typeof(OleObjectRawDataDataType),
				typeof(RawDataDataType),
				typeof(AutoTimestampTemporalDataType),
				typeof(TimeTemporalDataType),
				typeof(DateTemporalDataType),
				typeof(DateAndTimeTemporalDataType),
				typeof(TemporalDataType),
				typeof(TrueOrFalseLogicalDataType),
				typeof(YesOrNoLogicalDataType),
				typeof(LogicalDataType),
				typeof(RowIdOtherDataType),
				typeof(ObjectIdOtherDataType),
				typeof(OtherDataType),
				typeof(DataType),
				typeof(Reading),
				typeof(ReadingOrder),
				typeof(ValueRange),
				typeof(ValueTypeValueConstraint),
				typeof(RoleValueConstraint),
				typeof(ValueConstraint),
				typeof(ValueMismatchError),
				typeof(MinValueMismatchError),
				typeof(MaxValueMismatchError),
				typeof(ImpliedInternalUniquenessConstraintError),
				typeof(FrequencyConstraintContradictsInternalUniquenessConstraintError),
				typeof(RingConstraintTypeNotSpecifiedError),
				typeof(SubtypeMetaRole),
				typeof(SupertypeMetaRole),
				typeof(ObjectTypeRequiresPrimarySupertypeError),
				typeof(Definition),
				typeof(Note),
				typeof(ModelNote),
				typeof(CompatibleSupertypesError),
				typeof(ImplicationError),
				typeof(EqualityOrSubsetImpliedByMandatoryError),
				typeof(PreferredIdentifierRequiresMandatoryError),
				typeof(ValueRangeOverlapError),
				typeof(FactTypeDerivationExpression),
				typeof(ObjectTypeInstance),
				typeof(EntityTypeInstance),
				typeof(ValueTypeInstance),
				typeof(FactTypeInstance),
				typeof(TooFewEntityTypeRoleInstancesError),
				typeof(TooFewFactTypeRoleInstancesError),
				typeof(CompatibleValueTypeInstanceValueError),
				typeof(FactConstraint),
				typeof(FactSetComparisonConstraint),
				typeof(FactSetConstraint),
				typeof(ORMModelElementHasExtensionElement),
				typeof(ORMModelElementHasExtensionModelError),
				typeof(ValueTypeHasDataType),
				typeof(Objectification),
				typeof(ObjectTypePlaysRole),
				typeof(ModelHasObjectType),
				typeof(ModelHasFactType),
				typeof(ModelHasError),
				typeof(ModelHasReferenceModeKind),
				typeof(ModelHasReferenceMode),
				typeof(ModelHasSetConstraint),
				typeof(ObjectTypeImpliesMandatoryConstraint),
				typeof(ModelHasSetComparisonConstraint),
				typeof(ModelHasDataType),
				typeof(NameGeneratorRefinesNameGenerator),
				typeof(ElementHasAlias),
				typeof(ObjectTypeHasAbbreviation),
				typeof(NameGeneratorContainsOmittedWord),
				typeof(ExternalRoleConstraint),
				typeof(ExclusiveOrConstraintCoupler),
				typeof(SetComparisonConstraintHasRoleSequence),
				typeof(ConstraintRoleSequenceHasRole),
				typeof(SetComparisonConstraintHasTooFewRoleSequencesError),
				typeof(SetComparisonConstraintHasTooManyRoleSequencesError),
				typeof(ObjectTypeHasDuplicateNameError),
				typeof(RoleInstanceHasPopulationUniquenessError),
				typeof(EntityTypeRoleInstanceHasPopulationUniquenessError),
				typeof(FactTypeRoleInstanceHasPopulationUniquenessError),
				typeof(SetComparisonConstraintHasContradictionError),
				typeof(SetComparisonConstraintHasExclusionContradictsEqualityError),
				typeof(SetComparisonConstraintHasExclusionContradictsSubsetError),
				typeof(ExclusionConstraintHasExclusionContradictsMandatoryError),
				typeof(MandatoryConstraintHasExclusionContradictsMandatoryError),
				typeof(SubsetConstraintHasNotWellModeledSubsetAndMandatoryError),
				typeof(MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError),
				typeof(MandatoryConstraintHasPopulationMandatoryError),
				typeof(ObjectTypeInstanceHasPopulationMandatoryError),
				typeof(ReadingOrderHasReading),
				typeof(FactTypeHasReadingOrder),
				typeof(ReferenceModeHasReferenceModeKind),
				typeof(SetConstraintHasDuplicateNameError),
				typeof(SetComparisonConstraintHasDuplicateNameError),
				typeof(EntityTypeHasPreferredIdentifier),
				typeof(ReadingHasTooManyRolesError),
				typeof(ReadingHasTooFewRolesError),
				typeof(ReadingHasReadingRequiresUserModificationError),
				typeof(SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError),
				typeof(ElementAssociatedWithModelError),
				typeof(FactTypeHasFactTypeRequiresReadingError),
				typeof(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError),
				typeof(ValueTypeHasValueConstraint),
				typeof(RoleHasValueConstraint),
				typeof(ValueConstraintHasValueRange),
				typeof(ValueTypeHasUnspecifiedDataTypeError),
				typeof(SetComparisonConstraintHasCompatibleRolePlayerTypeError),
				typeof(SetConstraintHasCompatibleRolePlayerTypeError),
				typeof(UniquenessConstraintHasNMinusOneError),
				typeof(RoleHasRolePlayerRequiredError),
				typeof(EqualityConstraintHasEqualityImpliedByMandatoryError),
				typeof(ObjectTypeHasEntityTypeRequiresReferenceSchemeError),
				typeof(FrequencyConstraintHasFrequencyConstraintMinMaxError),
				typeof(FrequencyConstraintHasFrequencyConstraintExactlyOneError),
				typeof(ObjectificationImpliesFactType),
				typeof(ValueRangeHasMaxValueMismatchError),
				typeof(ValueRangeHasMinValueMismatchError),
				typeof(FactTypeHasImpliedInternalUniquenessConstraintError),
				typeof(SetConstraintHasTooFewRoleSequencesError),
				typeof(SetConstraintHasTooManyRoleSequencesError),
				typeof(FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError),
				typeof(FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError),
				typeof(RingConstraintHasRingConstraintTypeNotSpecifiedError),
				typeof(ValueConstraintHasDuplicateNameError),
				typeof(ObjectTypeHasObjectTypeRequiresPrimarySupertypeError),
				typeof(ObjectTypeHasDefinition),
				typeof(FactTypeHasDefinition),
				typeof(FactTypeHasNote),
				typeof(ObjectTypeHasNote),
				typeof(ModelHasModelNote),
				typeof(ModelNoteReferencesModelElement),
				typeof(ModelNoteReferencesFactType),
				typeof(ModelNoteReferencesObjectType),
				typeof(ModelNoteReferencesSetConstraint),
				typeof(ModelNoteReferencesSetComparisonConstraint),
				typeof(ObjectTypeHasCompatibleSupertypesError),
				typeof(SetConstraintHasImplicationError),
				typeof(SetComparisonConstraintHasImplicationError),
				typeof(SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError),
				typeof(ObjectTypeHasPreferredIdentifierRequiresMandatoryError),
				typeof(ValueConstraintHasValueRangeOverlapError),
				typeof(FactTypeHasRole),
				typeof(ReadingOrderHasRole),
				typeof(RoleProxyHasRole),
				typeof(FactTypeHasDerivationExpression),
				typeof(ObjectTypeHasObjectTypeInstance),
				typeof(EntityTypeHasEntityTypeInstance),
				typeof(ValueTypeHasValueTypeInstance),
				typeof(RoleInstance),
				typeof(EntityTypeRoleInstance),
				typeof(FactTypeRoleInstance),
				typeof(EntityTypeInstanceHasRoleInstance),
				typeof(FactTypeHasFactTypeInstance),
				typeof(FactTypeInstanceHasRoleInstance),
				typeof(EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError),
				typeof(FactTypeInstanceHasTooFewFactTypeRoleInstancesError),
				typeof(ValueTypeInstanceHasCompatibleValueTypeInstanceValueError),
				typeof(JoinHasRole),
				typeof(JoinHasInputRole),
				typeof(JoinHasOutputRole),
				typeof(ORMModelElementHasJoinPath),
				typeof(ConstraintRoleSequenceHasJoinPath),
				typeof(ConstraintRoleSequenceHasRoleHasProjectionJoin),
				typeof(ModelHasModelErrorDisplayFilter),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(OmittedWord), "Word", OmittedWord.WordDomainPropertyId, typeof(OmittedWord.WordPropertyHandler)),
				new DomainMemberInfo(typeof(NameGenerator), "NameUsage", NameGenerator.NameUsageDomainPropertyId, typeof(NameGenerator.NameUsagePropertyHandler)),
				new DomainMemberInfo(typeof(NameGenerator), "CasingOption", NameGenerator.CasingOptionDomainPropertyId, typeof(NameGenerator.CasingOptionPropertyHandler)),
				new DomainMemberInfo(typeof(NameGenerator), "SpacingFormat", NameGenerator.SpacingFormatDomainPropertyId, typeof(NameGenerator.SpacingFormatPropertyHandler)),
				new DomainMemberInfo(typeof(NameGenerator), "SpacingReplacement", NameGenerator.SpacingReplacementDomainPropertyId, typeof(NameGenerator.SpacingReplacementPropertyHandler)),
				new DomainMemberInfo(typeof(NameGenerator), "AutomaticallyShortenNames", NameGenerator.AutomaticallyShortenNamesDomainPropertyId, typeof(NameGenerator.AutomaticallyShortenNamesPropertyHandler)),
				new DomainMemberInfo(typeof(NameGenerator), "UseTargetDefaultMaximum", NameGenerator.UseTargetDefaultMaximumDomainPropertyId, typeof(NameGenerator.UseTargetDefaultMaximumPropertyHandler)),
				new DomainMemberInfo(typeof(NameGenerator), "UserDefinedMaximum", NameGenerator.UserDefinedMaximumDomainPropertyId, typeof(NameGenerator.UserDefinedMaximumPropertyHandler)),
				new DomainMemberInfo(typeof(ModelErrorDisplayFilter), "ExcludedCategories", ModelErrorDisplayFilter.ExcludedCategoriesDomainPropertyId, typeof(ModelErrorDisplayFilter.ExcludedCategoriesPropertyHandler)),
				new DomainMemberInfo(typeof(ModelErrorDisplayFilter), "IncludedErrors", ModelErrorDisplayFilter.IncludedErrorsDomainPropertyId, typeof(ModelErrorDisplayFilter.IncludedErrorsPropertyHandler)),
				new DomainMemberInfo(typeof(ModelErrorDisplayFilter), "ExcludedErrors", ModelErrorDisplayFilter.ExcludedErrorsDomainPropertyId, typeof(ModelErrorDisplayFilter.ExcludedErrorsPropertyHandler)),
				new DomainMemberInfo(typeof(ORMNamedElement), "Name", ORMNamedElement.NameDomainPropertyId, typeof(ORMNamedElement.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ORMModel), "ModelErrorDisplayFilterDisplay", ORMModel.ModelErrorDisplayFilterDisplayDomainPropertyId, typeof(ORMModel.ModelErrorDisplayFilterDisplayPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "IsExternal", ObjectType.IsExternalDomainPropertyId, typeof(ObjectType.IsExternalPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "DefinitionText", ObjectType.DefinitionTextDomainPropertyId, typeof(ObjectType.DefinitionTextPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "NoteText", ObjectType.NoteTextDomainPropertyId, typeof(ObjectType.NoteTextPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "IsIndependent", ObjectType.IsIndependentDomainPropertyId, typeof(ObjectType.IsIndependentPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "IsValueType", ObjectType.IsValueTypeDomainPropertyId, typeof(ObjectType.IsValueTypePropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "Scale", ObjectType.ScaleDomainPropertyId, typeof(ObjectType.ScalePropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "Length", ObjectType.LengthDomainPropertyId, typeof(ObjectType.LengthPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "ReferenceModeDisplay", ObjectType.ReferenceModeDisplayDomainPropertyId, typeof(ObjectType.ReferenceModeDisplayPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "ReferenceModeString", ObjectType.ReferenceModeStringDomainPropertyId, typeof(ObjectType.ReferenceModeStringPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "ReferenceMode", ObjectType.ReferenceModeDomainPropertyId, typeof(ObjectType.ReferenceModePropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "DataTypeDisplay", ObjectType.DataTypeDisplayDomainPropertyId, typeof(ObjectType.DataTypeDisplayPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "ValueRangeText", ObjectType.ValueRangeTextDomainPropertyId, typeof(ObjectType.ValueRangeTextPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "ValueTypeValueRangeText", ObjectType.ValueTypeValueRangeTextDomainPropertyId, typeof(ObjectType.ValueTypeValueRangeTextPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "IsPersonal", ObjectType.IsPersonalDomainPropertyId, typeof(ObjectType.IsPersonalPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "IsImplicitBooleanValue", ObjectType.IsImplicitBooleanValueDomainPropertyId, typeof(ObjectType.IsImplicitBooleanValuePropertyHandler)),
				new DomainMemberInfo(typeof(FactType), "IsExternal", FactType.IsExternalDomainPropertyId, typeof(FactType.IsExternalPropertyHandler)),
				new DomainMemberInfo(typeof(FactType), "DefinitionText", FactType.DefinitionTextDomainPropertyId, typeof(FactType.DefinitionTextPropertyHandler)),
				new DomainMemberInfo(typeof(FactType), "NoteText", FactType.NoteTextDomainPropertyId, typeof(FactType.NoteTextPropertyHandler)),
				new DomainMemberInfo(typeof(FactType), "Name", FactType.NameDomainPropertyId, typeof(FactType.NamePropertyHandler)),
				new DomainMemberInfo(typeof(FactType), "GeneratedName", FactType.GeneratedNameDomainPropertyId, typeof(FactType.GeneratedNamePropertyHandler)),
				new DomainMemberInfo(typeof(FactType), "NameChanged", FactType.NameChangedDomainPropertyId, typeof(FactType.NameChangedPropertyHandler)),
				new DomainMemberInfo(typeof(FactType), "DerivationRuleDisplay", FactType.DerivationRuleDisplayDomainPropertyId, typeof(FactType.DerivationRuleDisplayPropertyHandler)),
				new DomainMemberInfo(typeof(FactType), "DerivationStorageDisplay", FactType.DerivationStorageDisplayDomainPropertyId, typeof(FactType.DerivationStorageDisplayPropertyHandler)),
				new DomainMemberInfo(typeof(SubtypeFact), "IsPrimary", SubtypeFact.IsPrimaryDomainPropertyId, typeof(SubtypeFact.IsPrimaryPropertyHandler)),
				new DomainMemberInfo(typeof(Role), "RolePlayerDisplay", Role.RolePlayerDisplayDomainPropertyId, typeof(Role.RolePlayerDisplayPropertyHandler)),
				new DomainMemberInfo(typeof(Role), "IsMandatory", Role.IsMandatoryDomainPropertyId, typeof(Role.IsMandatoryPropertyHandler)),
				new DomainMemberInfo(typeof(Role), "Multiplicity", Role.MultiplicityDomainPropertyId, typeof(Role.MultiplicityPropertyHandler)),
				new DomainMemberInfo(typeof(Role), "ValueRangeText", Role.ValueRangeTextDomainPropertyId, typeof(Role.ValueRangeTextPropertyHandler)),
				new DomainMemberInfo(typeof(Role), "MandatoryConstraintName", Role.MandatoryConstraintNameDomainPropertyId, typeof(Role.MandatoryConstraintNamePropertyHandler)),
				new DomainMemberInfo(typeof(Role), "MandatoryConstraintModality", Role.MandatoryConstraintModalityDomainPropertyId, typeof(Role.MandatoryConstraintModalityPropertyHandler)),
				new DomainMemberInfo(typeof(Role), "Name", Role.NameDomainPropertyId, typeof(Role.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Role), "ObjectificationOppositeRoleName", Role.ObjectificationOppositeRoleNameDomainPropertyId, typeof(Role.ObjectificationOppositeRoleNamePropertyHandler)),
				new DomainMemberInfo(typeof(NameAlias), "NameConsumer", NameAlias.NameConsumerDomainPropertyId, typeof(NameAlias.NameConsumerPropertyHandler)),
				new DomainMemberInfo(typeof(NameAlias), "NameUsage", NameAlias.NameUsageDomainPropertyId, typeof(NameAlias.NameUsagePropertyHandler)),
				new DomainMemberInfo(typeof(SetComparisonConstraint), "Modality", SetComparisonConstraint.ModalityDomainPropertyId, typeof(SetComparisonConstraint.ModalityPropertyHandler)),
				new DomainMemberInfo(typeof(Expression), "Body", Expression.BodyDomainPropertyId, typeof(Expression.BodyPropertyHandler)),
				new DomainMemberInfo(typeof(Expression), "Language", Expression.LanguageDomainPropertyId, typeof(Expression.LanguagePropertyHandler)),
				new DomainMemberInfo(typeof(RingConstraint), "RingType", RingConstraint.RingTypeDomainPropertyId, typeof(RingConstraint.RingTypePropertyHandler)),
				new DomainMemberInfo(typeof(FrequencyConstraint), "MinFrequency", FrequencyConstraint.MinFrequencyDomainPropertyId, typeof(FrequencyConstraint.MinFrequencyPropertyHandler)),
				new DomainMemberInfo(typeof(FrequencyConstraint), "MaxFrequency", FrequencyConstraint.MaxFrequencyDomainPropertyId, typeof(FrequencyConstraint.MaxFrequencyPropertyHandler)),
				new DomainMemberInfo(typeof(UniquenessConstraint), "IsPreferred", UniquenessConstraint.IsPreferredDomainPropertyId, typeof(UniquenessConstraint.IsPreferredPropertyHandler)),
				new DomainMemberInfo(typeof(UniquenessConstraint), "IsInternal", UniquenessConstraint.IsInternalDomainPropertyId, typeof(UniquenessConstraint.IsInternalPropertyHandler)),
				new DomainMemberInfo(typeof(MandatoryConstraint), "IsSimple", MandatoryConstraint.IsSimpleDomainPropertyId, typeof(MandatoryConstraint.IsSimplePropertyHandler)),
				new DomainMemberInfo(typeof(MandatoryConstraint), "IsImplied", MandatoryConstraint.IsImpliedDomainPropertyId, typeof(MandatoryConstraint.IsImpliedPropertyHandler)),
				new DomainMemberInfo(typeof(SetConstraint), "Modality", SetConstraint.ModalityDomainPropertyId, typeof(SetConstraint.ModalityPropertyHandler)),
				new DomainMemberInfo(typeof(Join), "JoinType", Join.JoinTypeDomainPropertyId, typeof(Join.JoinTypePropertyHandler)),
				new DomainMemberInfo(typeof(CompatibleRolePlayerTypeError), "Column", CompatibleRolePlayerTypeError.ColumnDomainPropertyId, typeof(CompatibleRolePlayerTypeError.ColumnPropertyHandler)),
				new DomainMemberInfo(typeof(ModelError), "ErrorText", ModelError.ErrorTextDomainPropertyId, typeof(ModelError.ErrorTextPropertyHandler)),
				new DomainMemberInfo(typeof(ReferenceModeKind), "FormatString", ReferenceModeKind.FormatStringDomainPropertyId, typeof(ReferenceModeKind.FormatStringPropertyHandler)),
				new DomainMemberInfo(typeof(ReferenceModeKind), "ReferenceModeType", ReferenceModeKind.ReferenceModeTypeDomainPropertyId, typeof(ReferenceModeKind.ReferenceModeTypePropertyHandler)),
				new DomainMemberInfo(typeof(CustomReferenceMode), "CustomFormatString", CustomReferenceMode.CustomFormatStringDomainPropertyId, typeof(CustomReferenceMode.CustomFormatStringPropertyHandler)),
				new DomainMemberInfo(typeof(ReferenceMode), "KindDisplay", ReferenceMode.KindDisplayDomainPropertyId, typeof(ReferenceMode.KindDisplayPropertyHandler)),
				new DomainMemberInfo(typeof(Reading), "Text", Reading.TextDomainPropertyId, typeof(Reading.TextPropertyHandler)),
				new DomainMemberInfo(typeof(Reading), "IsPrimaryForReadingOrder", Reading.IsPrimaryForReadingOrderDomainPropertyId, typeof(Reading.IsPrimaryForReadingOrderPropertyHandler)),
				new DomainMemberInfo(typeof(Reading), "Language", Reading.LanguageDomainPropertyId, typeof(Reading.LanguagePropertyHandler)),
				new DomainMemberInfo(typeof(Reading), "IsPrimaryForFactType", Reading.IsPrimaryForFactTypeDomainPropertyId, typeof(Reading.IsPrimaryForFactTypePropertyHandler)),
				new DomainMemberInfo(typeof(ReadingOrder), "ReadingText", ReadingOrder.ReadingTextDomainPropertyId, typeof(ReadingOrder.ReadingTextPropertyHandler)),
				new DomainMemberInfo(typeof(ValueRange), "MinValue", ValueRange.MinValueDomainPropertyId, typeof(ValueRange.MinValuePropertyHandler)),
				new DomainMemberInfo(typeof(ValueRange), "MaxValue", ValueRange.MaxValueDomainPropertyId, typeof(ValueRange.MaxValuePropertyHandler)),
				new DomainMemberInfo(typeof(ValueRange), "Text", ValueRange.TextDomainPropertyId, typeof(ValueRange.TextPropertyHandler)),
				new DomainMemberInfo(typeof(ValueRange), "MinInclusion", ValueRange.MinInclusionDomainPropertyId, typeof(ValueRange.MinInclusionPropertyHandler)),
				new DomainMemberInfo(typeof(ValueRange), "MaxInclusion", ValueRange.MaxInclusionDomainPropertyId, typeof(ValueRange.MaxInclusionPropertyHandler)),
				new DomainMemberInfo(typeof(ValueConstraint), "Text", ValueConstraint.TextDomainPropertyId, typeof(ValueConstraint.TextPropertyHandler)),
				new DomainMemberInfo(typeof(ValueConstraint), "TextChanged", ValueConstraint.TextChangedDomainPropertyId, typeof(ValueConstraint.TextChangedPropertyHandler)),
				new DomainMemberInfo(typeof(Definition), "Text", Definition.TextDomainPropertyId, typeof(Definition.TextPropertyHandler)),
				new DomainMemberInfo(typeof(Note), "Text", Note.TextDomainPropertyId, typeof(Note.TextPropertyHandler)),
				new DomainMemberInfo(typeof(FactTypeDerivationExpression), "DerivationStorage", FactTypeDerivationExpression.DerivationStorageDomainPropertyId, typeof(FactTypeDerivationExpression.DerivationStoragePropertyHandler)),
				new DomainMemberInfo(typeof(ObjectTypeInstance), "Name", ObjectTypeInstance.NameDomainPropertyId, typeof(ObjectTypeInstance.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ObjectTypeInstance), "NameChanged", ObjectTypeInstance.NameChangedDomainPropertyId, typeof(ObjectTypeInstance.NameChangedPropertyHandler)),
				new DomainMemberInfo(typeof(ValueTypeInstance), "Value", ValueTypeInstance.ValueDomainPropertyId, typeof(ValueTypeInstance.ValuePropertyHandler)),
				new DomainMemberInfo(typeof(ValueTypeHasDataType), "Scale", ValueTypeHasDataType.ScaleDomainPropertyId, typeof(ValueTypeHasDataType.ScalePropertyHandler)),
				new DomainMemberInfo(typeof(ValueTypeHasDataType), "Length", ValueTypeHasDataType.LengthDomainPropertyId, typeof(ValueTypeHasDataType.LengthPropertyHandler)),
				new DomainMemberInfo(typeof(Objectification), "IsImplied", Objectification.IsImpliedDomainPropertyId, typeof(Objectification.IsImpliedPropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(FactConstraint), "FactType", FactConstraint.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactConstraint), "Constraint", FactConstraint.ConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactSetComparisonConstraint), "FactType", FactSetComparisonConstraint.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactSetComparisonConstraint), "SetComparisonConstraint", FactSetComparisonConstraint.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactSetConstraint), "FactType", FactSetConstraint.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactSetConstraint), "SetConstraint", FactSetConstraint.SetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ORMModelElementHasExtensionElement), "ExtendedElement", ORMModelElementHasExtensionElement.ExtendedElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ORMModelElementHasExtensionElement), "Extension", ORMModelElementHasExtensionElement.ExtensionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ORMModelElementHasExtensionModelError), "ExtendedElement", ORMModelElementHasExtensionModelError.ExtendedElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ORMModelElementHasExtensionModelError), "ExtensionModelError", ORMModelElementHasExtensionModelError.ExtensionModelErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeHasDataType), "ValueType", ValueTypeHasDataType.ValueTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeHasDataType), "DataType", ValueTypeHasDataType.DataTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(Objectification), "NestingType", Objectification.NestingTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(Objectification), "NestedFactType", Objectification.NestedFactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypePlaysRole), "PlayedRole", ObjectTypePlaysRole.PlayedRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypePlaysRole), "RolePlayer", ObjectTypePlaysRole.RolePlayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasObjectType), "Model", ModelHasObjectType.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasObjectType), "ObjectType", ModelHasObjectType.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasFactType), "Model", ModelHasFactType.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasFactType), "FactType", ModelHasFactType.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasError), "Model", ModelHasError.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasError), "Error", ModelHasError.ErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasReferenceModeKind), "Model", ModelHasReferenceModeKind.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasReferenceModeKind), "ReferenceModeKind", ModelHasReferenceModeKind.ReferenceModeKindDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasReferenceMode), "Model", ModelHasReferenceMode.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasReferenceMode), "ReferenceMode", ModelHasReferenceMode.ReferenceModeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasSetConstraint), "Model", ModelHasSetConstraint.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasSetConstraint), "SetConstraint", ModelHasSetConstraint.SetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeImpliesMandatoryConstraint), "ObjectType", ObjectTypeImpliesMandatoryConstraint.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeImpliesMandatoryConstraint), "MandatoryConstraint", ObjectTypeImpliesMandatoryConstraint.MandatoryConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasSetComparisonConstraint), "Model", ModelHasSetComparisonConstraint.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasSetComparisonConstraint), "SetComparisonConstraint", ModelHasSetComparisonConstraint.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasDataType), "Model", ModelHasDataType.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasDataType), "DataType", ModelHasDataType.DataTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(NameGeneratorRefinesNameGenerator), "Parent", NameGeneratorRefinesNameGenerator.ParentDomainRoleId),
				new DomainRolePlayerInfo(typeof(NameGeneratorRefinesNameGenerator), "Refinement", NameGeneratorRefinesNameGenerator.RefinementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementHasAlias), "Element", ElementHasAlias.ElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementHasAlias), "Alias", ElementHasAlias.AliasDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasAbbreviation), "ObjectType", ObjectTypeHasAbbreviation.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasAbbreviation), "Abbreviation", ObjectTypeHasAbbreviation.AbbreviationDomainRoleId),
				new DomainRolePlayerInfo(typeof(NameGeneratorContainsOmittedWord), "NameGenerator", NameGeneratorContainsOmittedWord.NameGeneratorDomainRoleId),
				new DomainRolePlayerInfo(typeof(NameGeneratorContainsOmittedWord), "OmittedWord", NameGeneratorContainsOmittedWord.OmittedWordDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExternalRoleConstraint), "ConstrainedRole", ExternalRoleConstraint.ConstrainedRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExternalRoleConstraint), "FactConstraint", ExternalRoleConstraint.FactConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExclusiveOrConstraintCoupler), "MandatoryConstraint", ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExclusiveOrConstraintCoupler), "ExclusionConstraint", ExclusiveOrConstraintCoupler.ExclusionConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasRoleSequence), "ExternalConstraint", SetComparisonConstraintHasRoleSequence.ExternalConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasRoleSequence), "RoleSequence", SetComparisonConstraintHasRoleSequence.RoleSequenceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceHasRole), "Role", ConstraintRoleSequenceHasRole.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceHasRole), "ConstraintRoleSequence", ConstraintRoleSequenceHasRole.ConstraintRoleSequenceDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasTooFewRoleSequencesError), "SetComparisonConstraint", SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasTooFewRoleSequencesError), "TooFewRoleSequencesError", SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasTooManyRoleSequencesError), "SetComparisonConstraint", SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasTooManyRoleSequencesError), "TooManyRoleSequencesError", SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasDuplicateNameError), "ObjectType", ObjectTypeHasDuplicateNameError.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasDuplicateNameError), "DuplicateNameError", ObjectTypeHasDuplicateNameError.DuplicateNameErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleInstanceHasPopulationUniquenessError), "RoleInstance", RoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleInstanceHasPopulationUniquenessError), "PopulationUniquenessError", RoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeRoleInstanceHasPopulationUniquenessError), "RoleInstance", EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeRoleInstanceHasPopulationUniquenessError), "PopulationUniquenessError", EntityTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeRoleInstanceHasPopulationUniquenessError), "RoleInstance", FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeRoleInstanceHasPopulationUniquenessError), "PopulationUniquenessError", FactTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasContradictionError), "SetComparisonConstraint", SetComparisonConstraintHasContradictionError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasContradictionError), "ContradictionError", SetComparisonConstraintHasContradictionError.ContradictionErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasExclusionContradictsEqualityError), "SetComparisonConstraint", SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasExclusionContradictsEqualityError), "ExclusionContradictsEqualityError", SetComparisonConstraintHasExclusionContradictsEqualityError.ExclusionContradictsEqualityErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasExclusionContradictsSubsetError), "SetComparisonConstraint", SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasExclusionContradictsSubsetError), "ExclusionContradictsSubsetError", SetComparisonConstraintHasExclusionContradictsSubsetError.ExclusionContradictsSubsetErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExclusionConstraintHasExclusionContradictsMandatoryError), "ExclusionConstraint", ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExclusionConstraintHasExclusionContradictsMandatoryError), "ExclusionContradictsMandatoryError", ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(MandatoryConstraintHasExclusionContradictsMandatoryError), "MandatoryConstraint", MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(MandatoryConstraintHasExclusionContradictsMandatoryError), "ExclusionContradictsMandatoryError", MandatoryConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubsetConstraintHasNotWellModeledSubsetAndMandatoryError), "SubsetConstraint", SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubsetConstraintHasNotWellModeledSubsetAndMandatoryError), "NotWellModeledSubsetAndMandatoryError", SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError), "MandatoryConstraint", MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError), "NotWellModeledSubsetAndMandatoryError", MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(MandatoryConstraintHasPopulationMandatoryError), "MandatoryConstraint", MandatoryConstraintHasPopulationMandatoryError.MandatoryConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(MandatoryConstraintHasPopulationMandatoryError), "PopulationMandatoryError", MandatoryConstraintHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeInstanceHasPopulationMandatoryError), "ObjectTypeInstance", ObjectTypeInstanceHasPopulationMandatoryError.ObjectTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeInstanceHasPopulationMandatoryError), "PopulationMandatoryError", ObjectTypeInstanceHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingOrderHasReading), "ReadingOrder", ReadingOrderHasReading.ReadingOrderDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingOrderHasReading), "Reading", ReadingOrderHasReading.ReadingDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasReadingOrder), "FactType", FactTypeHasReadingOrder.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasReadingOrder), "ReadingOrder", FactTypeHasReadingOrder.ReadingOrderDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReferenceModeHasReferenceModeKind), "ReferenceMode", ReferenceModeHasReferenceModeKind.ReferenceModeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReferenceModeHasReferenceModeKind), "Kind", ReferenceModeHasReferenceModeKind.KindDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasDuplicateNameError), "SetConstraint", SetConstraintHasDuplicateNameError.SetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasDuplicateNameError), "DuplicateNameError", SetConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasDuplicateNameError), "SetComparisonConstraint", SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasDuplicateNameError), "DuplicateNameError", SetComparisonConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeHasPreferredIdentifier), "PreferredIdentifierFor", EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeHasPreferredIdentifier), "PreferredIdentifier", EntityTypeHasPreferredIdentifier.PreferredIdentifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingHasTooManyRolesError), "Reading", ReadingHasTooManyRolesError.ReadingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingHasTooManyRolesError), "TooManyRolesError", ReadingHasTooManyRolesError.TooManyRolesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingHasTooFewRolesError), "Reading", ReadingHasTooFewRolesError.ReadingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingHasTooFewRolesError), "TooFewRolesError", ReadingHasTooFewRolesError.TooFewRolesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingHasReadingRequiresUserModificationError), "Reading", ReadingHasReadingRequiresUserModificationError.ReadingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingHasReadingRequiresUserModificationError), "RequiresUserModificationError", ReadingHasReadingRequiresUserModificationError.RequiresUserModificationErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError), "Constraint", SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError), "ArityMismatchError", SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementAssociatedWithModelError), "AssociatedElement", ElementAssociatedWithModelError.AssociatedElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementAssociatedWithModelError), "ModelError", ElementAssociatedWithModelError.ModelErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasFactTypeRequiresReadingError), "FactType", FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasFactTypeRequiresReadingError), "ReadingRequiredError", FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), "FactType", FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), "InternalUniquenessConstraintRequiredError", FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeHasValueConstraint), "ValueType", ValueTypeHasValueConstraint.ValueTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeHasValueConstraint), "ValueConstraint", ValueTypeHasValueConstraint.ValueConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleHasValueConstraint), "Role", RoleHasValueConstraint.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleHasValueConstraint), "ValueConstraint", RoleHasValueConstraint.ValueConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasValueRange), "ValueConstraint", ValueConstraintHasValueRange.ValueConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasValueRange), "ValueRange", ValueConstraintHasValueRange.ValueRangeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeHasUnspecifiedDataTypeError), "ValueTypeHasDataType", ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeHasUnspecifiedDataTypeError), "DataTypeNotSpecifiedError", ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasCompatibleRolePlayerTypeError), "SetComparisonConstraint", SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasCompatibleRolePlayerTypeError), "CompatibleRolePlayerTypeError", SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasCompatibleRolePlayerTypeError), "SetConstraint", SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasCompatibleRolePlayerTypeError), "CompatibleRolePlayerTypeError", SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(UniquenessConstraintHasNMinusOneError), "Constraint", UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(UniquenessConstraintHasNMinusOneError), "NMinusOneError", UniquenessConstraintHasNMinusOneError.NMinusOneErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleHasRolePlayerRequiredError), "Role", RoleHasRolePlayerRequiredError.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleHasRolePlayerRequiredError), "RolePlayerRequiredError", RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(EqualityConstraintHasEqualityImpliedByMandatoryError), "EqualityConstraint", EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(EqualityConstraintHasEqualityImpliedByMandatoryError), "EqualityImpliedByMandatoryError", EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasEntityTypeRequiresReferenceSchemeError), "ObjectType", ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasEntityTypeRequiresReferenceSchemeError), "ReferenceSchemeError", ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FrequencyConstraintHasFrequencyConstraintMinMaxError), "FrequencyConstraint", FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(FrequencyConstraintHasFrequencyConstraintMinMaxError), "FrequencyConstraintMinMaxError", FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FrequencyConstraintHasFrequencyConstraintExactlyOneError), "FrequencyConstraint", FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(FrequencyConstraintHasFrequencyConstraintExactlyOneError), "FrequencyConstraintExactlyOneError", FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintExactlyOneErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectificationImpliesFactType), "ImpliedByObjectification", ObjectificationImpliesFactType.ImpliedByObjectificationDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectificationImpliesFactType), "ImpliedFactType", ObjectificationImpliesFactType.ImpliedFactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueRangeHasMaxValueMismatchError), "ValueRange", ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueRangeHasMaxValueMismatchError), "MaxValueMismatchError", ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueRangeHasMinValueMismatchError), "ValueRange", ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueRangeHasMinValueMismatchError), "MinValueMismatchError", ValueRangeHasMinValueMismatchError.MinValueMismatchErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasImpliedInternalUniquenessConstraintError), "FactType", FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasImpliedInternalUniquenessConstraintError), "ImpliedInternalUniquenessConstraintError", FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasTooFewRoleSequencesError), "SetConstraint", SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasTooFewRoleSequencesError), "TooFewRoleSequencesError", SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasTooManyRoleSequencesError), "SetConstraint", SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasTooManyRoleSequencesError), "TooManyRoleSequencesError", SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError), "FrequencyConstraint", FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError), "FrequencyConstraintContradictsInternalUniquenessConstraintError", FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError), "FactType", FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError), "FrequencyConstraintContradictsInternalUniquenessConstraintError", FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(RingConstraintHasRingConstraintTypeNotSpecifiedError), "RingConstraint", RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(RingConstraintHasRingConstraintTypeNotSpecifiedError), "RingConstraintTypeNotSpecifiedError", RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasDuplicateNameError), "ValueConstraint", ValueConstraintHasDuplicateNameError.ValueConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasDuplicateNameError), "DuplicateNameError", ValueConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasObjectTypeRequiresPrimarySupertypeError), "ObjectType", ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasObjectTypeRequiresPrimarySupertypeError), "ObjectTypeRequiresPrimarySupertypeError", ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasDefinition), "ObjectType", ObjectTypeHasDefinition.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasDefinition), "Definition", ObjectTypeHasDefinition.DefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasDefinition), "FactType", FactTypeHasDefinition.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasDefinition), "Definition", FactTypeHasDefinition.DefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasNote), "FactType", FactTypeHasNote.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasNote), "Note", FactTypeHasNote.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasNote), "ObjectType", ObjectTypeHasNote.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasNote), "Note", ObjectTypeHasNote.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasModelNote), "Model", ModelHasModelNote.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasModelNote), "Note", ModelHasModelNote.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesModelElement), "Note", ModelNoteReferencesModelElement.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesModelElement), "Element", ModelNoteReferencesModelElement.ElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesFactType), "Note", ModelNoteReferencesFactType.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesFactType), "Element", ModelNoteReferencesFactType.ElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesObjectType), "Note", ModelNoteReferencesObjectType.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesObjectType), "Element", ModelNoteReferencesObjectType.ElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesSetConstraint), "Note", ModelNoteReferencesSetConstraint.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesSetConstraint), "Element", ModelNoteReferencesSetConstraint.ElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesSetComparisonConstraint), "Note", ModelNoteReferencesSetComparisonConstraint.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesSetComparisonConstraint), "Element", ModelNoteReferencesSetComparisonConstraint.ElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasCompatibleSupertypesError), "ObjectType", ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasCompatibleSupertypesError), "CompatibleSupertypesError", ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasImplicationError), "SetConstraint", SetConstraintHasImplicationError.SetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasImplicationError), "ImplicationError", SetConstraintHasImplicationError.ImplicationErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasImplicationError), "SetComparisonConstraint", SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasImplicationError), "ImplicationError", SetComparisonConstraintHasImplicationError.ImplicationErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError), "SetComparisonConstraint", SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError), "EqualityOrSubsetImpliedByMandatoryError", SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasPreferredIdentifierRequiresMandatoryError), "ObjectType", ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasPreferredIdentifierRequiresMandatoryError), "PreferredIdentifierRequiresMandatoryError", ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasValueRangeOverlapError), "ValueConstraint", ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasValueRangeOverlapError), "ValueRangeOverlapError", ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasRole), "FactType", FactTypeHasRole.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasRole), "Role", FactTypeHasRole.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingOrderHasRole), "ReadingOrder", ReadingOrderHasRole.ReadingOrderDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingOrderHasRole), "Role", ReadingOrderHasRole.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleProxyHasRole), "Proxy", RoleProxyHasRole.ProxyDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleProxyHasRole), "TargetRole", RoleProxyHasRole.TargetRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasDerivationExpression), "FactType", FactTypeHasDerivationExpression.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasDerivationExpression), "DerivationRule", FactTypeHasDerivationExpression.DerivationRuleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasObjectTypeInstance), "ObjectType", ObjectTypeHasObjectTypeInstance.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasObjectTypeInstance), "ObjectTypeInstance", ObjectTypeHasObjectTypeInstance.ObjectTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeHasEntityTypeInstance), "EntityType", EntityTypeHasEntityTypeInstance.EntityTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeHasEntityTypeInstance), "EntityTypeInstance", EntityTypeHasEntityTypeInstance.EntityTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeHasValueTypeInstance), "ValueType", ValueTypeHasValueTypeInstance.ValueTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeHasValueTypeInstance), "ValueTypeInstance", ValueTypeHasValueTypeInstance.ValueTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleInstance), "Role", RoleInstance.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleInstance), "ObjectTypeInstance", RoleInstance.ObjectTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeRoleInstance), "Role", EntityTypeRoleInstance.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeRoleInstance), "ObjectTypeInstance", EntityTypeRoleInstance.ObjectTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeRoleInstance), "Role", FactTypeRoleInstance.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeRoleInstance), "ObjectTypeInstance", FactTypeRoleInstance.ObjectTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeInstanceHasRoleInstance), "EntityTypeInstance", EntityTypeInstanceHasRoleInstance.EntityTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeInstanceHasRoleInstance), "RoleInstance", EntityTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasFactTypeInstance), "FactType", FactTypeHasFactTypeInstance.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasFactTypeInstance), "FactTypeInstance", FactTypeHasFactTypeInstance.FactTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeInstanceHasRoleInstance), "FactTypeInstance", FactTypeInstanceHasRoleInstance.FactTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeInstanceHasRoleInstance), "RoleInstance", FactTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError), "EntityTypeInstance", EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError), "TooFewEntityTypeRoleInstancesError", EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeInstanceHasTooFewFactTypeRoleInstancesError), "FactTypeInstance", FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeInstanceHasTooFewFactTypeRoleInstancesError), "TooFewFactTypeRoleInstancesError", FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeInstanceHasCompatibleValueTypeInstanceValueError), "ValueTypeInstance", ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeInstanceHasCompatibleValueTypeInstanceValueError), "CompatibleValueTypeInstanceValueError", ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(JoinHasRole), "Join", JoinHasRole.JoinDomainRoleId),
				new DomainRolePlayerInfo(typeof(JoinHasRole), "Role", JoinHasRole.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(JoinHasInputRole), "Join", JoinHasInputRole.JoinDomainRoleId),
				new DomainRolePlayerInfo(typeof(JoinHasInputRole), "Role", JoinHasInputRole.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(JoinHasOutputRole), "Join", JoinHasOutputRole.JoinDomainRoleId),
				new DomainRolePlayerInfo(typeof(JoinHasOutputRole), "Role", JoinHasOutputRole.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ORMModelElementHasJoinPath), "JoinPathOwner", ORMModelElementHasJoinPath.JoinPathOwnerDomainRoleId),
				new DomainRolePlayerInfo(typeof(ORMModelElementHasJoinPath), "Join", ORMModelElementHasJoinPath.JoinDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceHasJoinPath), "JoinPathOwner", ConstraintRoleSequenceHasJoinPath.JoinPathOwnerDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceHasJoinPath), "Join", ConstraintRoleSequenceHasJoinPath.JoinDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceHasRoleHasProjectionJoin), "ConstraintRoleSequenceHasRole", ConstraintRoleSequenceHasRoleHasProjectionJoin.ConstraintRoleSequenceHasRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceHasRoleHasProjectionJoin), "ProjectionJoin", ConstraintRoleSequenceHasRoleHasProjectionJoin.ProjectionJoinDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasModelErrorDisplayFilter), "Model", ModelHasModelErrorDisplayFilter.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasModelErrorDisplayFilter), "ModelErrorDisplayFilter", ModelHasModelErrorDisplayFilter.ModelErrorDisplayFilterDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(134);
				createElementMap.Add(typeof(NameConsumer), 0);
				createElementMap.Add(typeof(OmittedWord), 1);
				createElementMap.Add(typeof(NameGenerator), 2);
				createElementMap.Add(typeof(ModelErrorDisplayFilter), 3);
				createElementMap.Add(typeof(ORMModel), 4);
				createElementMap.Add(typeof(ObjectType), 5);
				createElementMap.Add(typeof(FactType), 6);
				createElementMap.Add(typeof(SubtypeFact), 7);
				createElementMap.Add(typeof(RoleProxy), 8);
				createElementMap.Add(typeof(Role), 9);
				createElementMap.Add(typeof(NameAlias), 10);
				createElementMap.Add(typeof(EqualityConstraint), 11);
				createElementMap.Add(typeof(ExclusionConstraint), 12);
				createElementMap.Add(typeof(SubsetConstraint), 13);
				createElementMap.Add(typeof(SetComparisonConstraintRoleSequence), 14);
				createElementMap.Add(typeof(RingConstraint), 15);
				createElementMap.Add(typeof(FrequencyConstraint), 16);
				createElementMap.Add(typeof(UniquenessConstraint), 17);
				createElementMap.Add(typeof(MandatoryConstraint), 18);
				createElementMap.Add(typeof(Join), 19);
				createElementMap.Add(typeof(TooFewRoleSequencesError), 20);
				createElementMap.Add(typeof(TooManyRoleSequencesError), 21);
				createElementMap.Add(typeof(ObjectTypeDuplicateNameError), 22);
				createElementMap.Add(typeof(PopulationUniquenessError), 23);
				createElementMap.Add(typeof(ExclusionContradictsMandatoryError), 24);
				createElementMap.Add(typeof(ExclusionContradictsEqualityError), 25);
				createElementMap.Add(typeof(ExclusionContradictsSubsetError), 26);
				createElementMap.Add(typeof(NotWellModeledSubsetAndMandatoryError), 27);
				createElementMap.Add(typeof(PopulationMandatoryError), 28);
				createElementMap.Add(typeof(ConstraintDuplicateNameError), 29);
				createElementMap.Add(typeof(TooFewReadingRolesError), 30);
				createElementMap.Add(typeof(TooManyReadingRolesError), 31);
				createElementMap.Add(typeof(ExternalConstraintRoleSequenceArityMismatchError), 32);
				createElementMap.Add(typeof(FactTypeRequiresReadingError), 33);
				createElementMap.Add(typeof(FactTypeRequiresInternalUniquenessConstraintError), 34);
				createElementMap.Add(typeof(DataTypeNotSpecifiedError), 35);
				createElementMap.Add(typeof(NMinusOneError), 36);
				createElementMap.Add(typeof(CompatibleRolePlayerTypeError), 37);
				createElementMap.Add(typeof(RolePlayerRequiredError), 38);
				createElementMap.Add(typeof(EqualityImpliedByMandatoryError), 39);
				createElementMap.Add(typeof(EntityTypeRequiresReferenceSchemeError), 40);
				createElementMap.Add(typeof(FrequencyConstraintMinMaxError), 41);
				createElementMap.Add(typeof(FrequencyConstraintExactlyOneError), 42);
				createElementMap.Add(typeof(ReadingRequiresUserModificationError), 43);
				createElementMap.Add(typeof(ReferenceModeKind), 44);
				createElementMap.Add(typeof(IntrinsicReferenceMode), 45);
				createElementMap.Add(typeof(CustomReferenceMode), 46);
				createElementMap.Add(typeof(UnspecifiedDataType), 47);
				createElementMap.Add(typeof(FixedLengthTextDataType), 48);
				createElementMap.Add(typeof(VariableLengthTextDataType), 49);
				createElementMap.Add(typeof(LargeLengthTextDataType), 50);
				createElementMap.Add(typeof(SignedIntegerNumericDataType), 51);
				createElementMap.Add(typeof(SignedSmallIntegerNumericDataType), 52);
				createElementMap.Add(typeof(SignedLargeIntegerNumericDataType), 53);
				createElementMap.Add(typeof(UnsignedIntegerNumericDataType), 54);
				createElementMap.Add(typeof(UnsignedSmallIntegerNumericDataType), 55);
				createElementMap.Add(typeof(UnsignedLargeIntegerNumericDataType), 56);
				createElementMap.Add(typeof(AutoCounterNumericDataType), 57);
				createElementMap.Add(typeof(FloatingPointNumericDataType), 58);
				createElementMap.Add(typeof(SinglePrecisionFloatingPointNumericDataType), 59);
				createElementMap.Add(typeof(DoublePrecisionFloatingPointNumericDataType), 60);
				createElementMap.Add(typeof(DecimalNumericDataType), 61);
				createElementMap.Add(typeof(MoneyNumericDataType), 62);
				createElementMap.Add(typeof(FixedLengthRawDataDataType), 63);
				createElementMap.Add(typeof(VariableLengthRawDataDataType), 64);
				createElementMap.Add(typeof(LargeLengthRawDataDataType), 65);
				createElementMap.Add(typeof(PictureRawDataDataType), 66);
				createElementMap.Add(typeof(OleObjectRawDataDataType), 67);
				createElementMap.Add(typeof(AutoTimestampTemporalDataType), 68);
				createElementMap.Add(typeof(TimeTemporalDataType), 69);
				createElementMap.Add(typeof(DateTemporalDataType), 70);
				createElementMap.Add(typeof(DateAndTimeTemporalDataType), 71);
				createElementMap.Add(typeof(TrueOrFalseLogicalDataType), 72);
				createElementMap.Add(typeof(YesOrNoLogicalDataType), 73);
				createElementMap.Add(typeof(RowIdOtherDataType), 74);
				createElementMap.Add(typeof(ObjectIdOtherDataType), 75);
				createElementMap.Add(typeof(Reading), 76);
				createElementMap.Add(typeof(ReadingOrder), 77);
				createElementMap.Add(typeof(ValueRange), 78);
				createElementMap.Add(typeof(ValueTypeValueConstraint), 79);
				createElementMap.Add(typeof(RoleValueConstraint), 80);
				createElementMap.Add(typeof(MinValueMismatchError), 81);
				createElementMap.Add(typeof(MaxValueMismatchError), 82);
				createElementMap.Add(typeof(ImpliedInternalUniquenessConstraintError), 83);
				createElementMap.Add(typeof(FrequencyConstraintContradictsInternalUniquenessConstraintError), 84);
				createElementMap.Add(typeof(RingConstraintTypeNotSpecifiedError), 85);
				createElementMap.Add(typeof(SubtypeMetaRole), 86);
				createElementMap.Add(typeof(SupertypeMetaRole), 87);
				createElementMap.Add(typeof(ObjectTypeRequiresPrimarySupertypeError), 88);
				createElementMap.Add(typeof(Definition), 89);
				createElementMap.Add(typeof(Note), 90);
				createElementMap.Add(typeof(ModelNote), 91);
				createElementMap.Add(typeof(CompatibleSupertypesError), 92);
				createElementMap.Add(typeof(ImplicationError), 93);
				createElementMap.Add(typeof(EqualityOrSubsetImpliedByMandatoryError), 94);
				createElementMap.Add(typeof(PreferredIdentifierRequiresMandatoryError), 95);
				createElementMap.Add(typeof(ValueRangeOverlapError), 96);
				createElementMap.Add(typeof(FactTypeDerivationExpression), 97);
				createElementMap.Add(typeof(EntityTypeInstance), 98);
				createElementMap.Add(typeof(ValueTypeInstance), 99);
				createElementMap.Add(typeof(FactTypeInstance), 100);
				createElementMap.Add(typeof(TooFewEntityTypeRoleInstancesError), 101);
				createElementMap.Add(typeof(TooFewFactTypeRoleInstancesError), 102);
				createElementMap.Add(typeof(CompatibleValueTypeInstanceValueError), 103);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				throw new global::System.ArgumentException("elementType is not recognized as a type of domain class which belongs to this domain model.");
			}
			switch (index)
			{
				case 0: return new NameConsumer(partition, propertyAssignments);
				case 1: return new OmittedWord(partition, propertyAssignments);
				case 2: return new NameGenerator(partition, propertyAssignments);
				case 3: return new ModelErrorDisplayFilter(partition, propertyAssignments);
				case 4: return new ORMModel(partition, propertyAssignments);
				case 5: return new ObjectType(partition, propertyAssignments);
				case 6: return new FactType(partition, propertyAssignments);
				case 7: return new SubtypeFact(partition, propertyAssignments);
				case 8: return new RoleProxy(partition, propertyAssignments);
				case 9: return new Role(partition, propertyAssignments);
				case 10: return new NameAlias(partition, propertyAssignments);
				case 11: return new EqualityConstraint(partition, propertyAssignments);
				case 12: return new ExclusionConstraint(partition, propertyAssignments);
				case 13: return new SubsetConstraint(partition, propertyAssignments);
				case 14: return new SetComparisonConstraintRoleSequence(partition, propertyAssignments);
				case 15: return new RingConstraint(partition, propertyAssignments);
				case 16: return new FrequencyConstraint(partition, propertyAssignments);
				case 17: return new UniquenessConstraint(partition, propertyAssignments);
				case 18: return new MandatoryConstraint(partition, propertyAssignments);
				case 19: return new Join(partition, propertyAssignments);
				case 20: return new TooFewRoleSequencesError(partition, propertyAssignments);
				case 21: return new TooManyRoleSequencesError(partition, propertyAssignments);
				case 22: return new ObjectTypeDuplicateNameError(partition, propertyAssignments);
				case 23: return new PopulationUniquenessError(partition, propertyAssignments);
				case 24: return new ExclusionContradictsMandatoryError(partition, propertyAssignments);
				case 25: return new ExclusionContradictsEqualityError(partition, propertyAssignments);
				case 26: return new ExclusionContradictsSubsetError(partition, propertyAssignments);
				case 27: return new NotWellModeledSubsetAndMandatoryError(partition, propertyAssignments);
				case 28: return new PopulationMandatoryError(partition, propertyAssignments);
				case 29: return new ConstraintDuplicateNameError(partition, propertyAssignments);
				case 30: return new TooFewReadingRolesError(partition, propertyAssignments);
				case 31: return new TooManyReadingRolesError(partition, propertyAssignments);
				case 32: return new ExternalConstraintRoleSequenceArityMismatchError(partition, propertyAssignments);
				case 33: return new FactTypeRequiresReadingError(partition, propertyAssignments);
				case 34: return new FactTypeRequiresInternalUniquenessConstraintError(partition, propertyAssignments);
				case 35: return new DataTypeNotSpecifiedError(partition, propertyAssignments);
				case 36: return new NMinusOneError(partition, propertyAssignments);
				case 37: return new CompatibleRolePlayerTypeError(partition, propertyAssignments);
				case 38: return new RolePlayerRequiredError(partition, propertyAssignments);
				case 39: return new EqualityImpliedByMandatoryError(partition, propertyAssignments);
				case 40: return new EntityTypeRequiresReferenceSchemeError(partition, propertyAssignments);
				case 41: return new FrequencyConstraintMinMaxError(partition, propertyAssignments);
				case 42: return new FrequencyConstraintExactlyOneError(partition, propertyAssignments);
				case 43: return new ReadingRequiresUserModificationError(partition, propertyAssignments);
				case 44: return new ReferenceModeKind(partition, propertyAssignments);
				case 45: return new IntrinsicReferenceMode(partition, propertyAssignments);
				case 46: return new CustomReferenceMode(partition, propertyAssignments);
				case 47: return new UnspecifiedDataType(partition, propertyAssignments);
				case 48: return new FixedLengthTextDataType(partition, propertyAssignments);
				case 49: return new VariableLengthTextDataType(partition, propertyAssignments);
				case 50: return new LargeLengthTextDataType(partition, propertyAssignments);
				case 51: return new SignedIntegerNumericDataType(partition, propertyAssignments);
				case 52: return new SignedSmallIntegerNumericDataType(partition, propertyAssignments);
				case 53: return new SignedLargeIntegerNumericDataType(partition, propertyAssignments);
				case 54: return new UnsignedIntegerNumericDataType(partition, propertyAssignments);
				case 55: return new UnsignedSmallIntegerNumericDataType(partition, propertyAssignments);
				case 56: return new UnsignedLargeIntegerNumericDataType(partition, propertyAssignments);
				case 57: return new AutoCounterNumericDataType(partition, propertyAssignments);
				case 58: return new FloatingPointNumericDataType(partition, propertyAssignments);
				case 59: return new SinglePrecisionFloatingPointNumericDataType(partition, propertyAssignments);
				case 60: return new DoublePrecisionFloatingPointNumericDataType(partition, propertyAssignments);
				case 61: return new DecimalNumericDataType(partition, propertyAssignments);
				case 62: return new MoneyNumericDataType(partition, propertyAssignments);
				case 63: return new FixedLengthRawDataDataType(partition, propertyAssignments);
				case 64: return new VariableLengthRawDataDataType(partition, propertyAssignments);
				case 65: return new LargeLengthRawDataDataType(partition, propertyAssignments);
				case 66: return new PictureRawDataDataType(partition, propertyAssignments);
				case 67: return new OleObjectRawDataDataType(partition, propertyAssignments);
				case 68: return new AutoTimestampTemporalDataType(partition, propertyAssignments);
				case 69: return new TimeTemporalDataType(partition, propertyAssignments);
				case 70: return new DateTemporalDataType(partition, propertyAssignments);
				case 71: return new DateAndTimeTemporalDataType(partition, propertyAssignments);
				case 72: return new TrueOrFalseLogicalDataType(partition, propertyAssignments);
				case 73: return new YesOrNoLogicalDataType(partition, propertyAssignments);
				case 74: return new RowIdOtherDataType(partition, propertyAssignments);
				case 75: return new ObjectIdOtherDataType(partition, propertyAssignments);
				case 76: return new Reading(partition, propertyAssignments);
				case 77: return new ReadingOrder(partition, propertyAssignments);
				case 78: return new ValueRange(partition, propertyAssignments);
				case 79: return new ValueTypeValueConstraint(partition, propertyAssignments);
				case 80: return new RoleValueConstraint(partition, propertyAssignments);
				case 81: return new MinValueMismatchError(partition, propertyAssignments);
				case 82: return new MaxValueMismatchError(partition, propertyAssignments);
				case 83: return new ImpliedInternalUniquenessConstraintError(partition, propertyAssignments);
				case 84: return new FrequencyConstraintContradictsInternalUniquenessConstraintError(partition, propertyAssignments);
				case 85: return new RingConstraintTypeNotSpecifiedError(partition, propertyAssignments);
				case 86: return new SubtypeMetaRole(partition, propertyAssignments);
				case 87: return new SupertypeMetaRole(partition, propertyAssignments);
				case 88: return new ObjectTypeRequiresPrimarySupertypeError(partition, propertyAssignments);
				case 89: return new Definition(partition, propertyAssignments);
				case 90: return new Note(partition, propertyAssignments);
				case 91: return new ModelNote(partition, propertyAssignments);
				case 92: return new CompatibleSupertypesError(partition, propertyAssignments);
				case 93: return new ImplicationError(partition, propertyAssignments);
				case 94: return new EqualityOrSubsetImpliedByMandatoryError(partition, propertyAssignments);
				case 95: return new PreferredIdentifierRequiresMandatoryError(partition, propertyAssignments);
				case 96: return new ValueRangeOverlapError(partition, propertyAssignments);
				case 97: return new FactTypeDerivationExpression(partition, propertyAssignments);
				case 98: return new EntityTypeInstance(partition, propertyAssignments);
				case 99: return new ValueTypeInstance(partition, propertyAssignments);
				case 100: return new FactTypeInstance(partition, propertyAssignments);
				case 101: return new TooFewEntityTypeRoleInstancesError(partition, propertyAssignments);
				case 102: return new TooFewFactTypeRoleInstancesError(partition, propertyAssignments);
				case 103: return new CompatibleValueTypeInstanceValueError(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(115);
				createElementLinkMap.Add(typeof(FactSetComparisonConstraint), 0);
				createElementLinkMap.Add(typeof(FactSetConstraint), 1);
				createElementLinkMap.Add(typeof(ORMModelElementHasExtensionElement), 2);
				createElementLinkMap.Add(typeof(ORMModelElementHasExtensionModelError), 3);
				createElementLinkMap.Add(typeof(ValueTypeHasDataType), 4);
				createElementLinkMap.Add(typeof(Objectification), 5);
				createElementLinkMap.Add(typeof(ObjectTypePlaysRole), 6);
				createElementLinkMap.Add(typeof(ModelHasObjectType), 7);
				createElementLinkMap.Add(typeof(ModelHasFactType), 8);
				createElementLinkMap.Add(typeof(ModelHasError), 9);
				createElementLinkMap.Add(typeof(ModelHasReferenceModeKind), 10);
				createElementLinkMap.Add(typeof(ModelHasReferenceMode), 11);
				createElementLinkMap.Add(typeof(ModelHasSetConstraint), 12);
				createElementLinkMap.Add(typeof(ObjectTypeImpliesMandatoryConstraint), 13);
				createElementLinkMap.Add(typeof(ModelHasSetComparisonConstraint), 14);
				createElementLinkMap.Add(typeof(ModelHasDataType), 15);
				createElementLinkMap.Add(typeof(NameGeneratorRefinesNameGenerator), 16);
				createElementLinkMap.Add(typeof(ObjectTypeHasAbbreviation), 17);
				createElementLinkMap.Add(typeof(NameGeneratorContainsOmittedWord), 18);
				createElementLinkMap.Add(typeof(ExternalRoleConstraint), 19);
				createElementLinkMap.Add(typeof(ExclusiveOrConstraintCoupler), 20);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasRoleSequence), 21);
				createElementLinkMap.Add(typeof(ConstraintRoleSequenceHasRole), 22);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasTooFewRoleSequencesError), 23);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasTooManyRoleSequencesError), 24);
				createElementLinkMap.Add(typeof(ObjectTypeHasDuplicateNameError), 25);
				createElementLinkMap.Add(typeof(EntityTypeRoleInstanceHasPopulationUniquenessError), 26);
				createElementLinkMap.Add(typeof(FactTypeRoleInstanceHasPopulationUniquenessError), 27);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasExclusionContradictsEqualityError), 28);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasExclusionContradictsSubsetError), 29);
				createElementLinkMap.Add(typeof(ExclusionConstraintHasExclusionContradictsMandatoryError), 30);
				createElementLinkMap.Add(typeof(MandatoryConstraintHasExclusionContradictsMandatoryError), 31);
				createElementLinkMap.Add(typeof(SubsetConstraintHasNotWellModeledSubsetAndMandatoryError), 32);
				createElementLinkMap.Add(typeof(MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError), 33);
				createElementLinkMap.Add(typeof(MandatoryConstraintHasPopulationMandatoryError), 34);
				createElementLinkMap.Add(typeof(ObjectTypeInstanceHasPopulationMandatoryError), 35);
				createElementLinkMap.Add(typeof(ReadingOrderHasReading), 36);
				createElementLinkMap.Add(typeof(FactTypeHasReadingOrder), 37);
				createElementLinkMap.Add(typeof(ReferenceModeHasReferenceModeKind), 38);
				createElementLinkMap.Add(typeof(SetConstraintHasDuplicateNameError), 39);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasDuplicateNameError), 40);
				createElementLinkMap.Add(typeof(EntityTypeHasPreferredIdentifier), 41);
				createElementLinkMap.Add(typeof(ReadingHasTooManyRolesError), 42);
				createElementLinkMap.Add(typeof(ReadingHasTooFewRolesError), 43);
				createElementLinkMap.Add(typeof(ReadingHasReadingRequiresUserModificationError), 44);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError), 45);
				createElementLinkMap.Add(typeof(ElementAssociatedWithModelError), 46);
				createElementLinkMap.Add(typeof(FactTypeHasFactTypeRequiresReadingError), 47);
				createElementLinkMap.Add(typeof(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), 48);
				createElementLinkMap.Add(typeof(ValueTypeHasValueConstraint), 49);
				createElementLinkMap.Add(typeof(RoleHasValueConstraint), 50);
				createElementLinkMap.Add(typeof(ValueConstraintHasValueRange), 51);
				createElementLinkMap.Add(typeof(ValueTypeHasUnspecifiedDataTypeError), 52);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasCompatibleRolePlayerTypeError), 53);
				createElementLinkMap.Add(typeof(SetConstraintHasCompatibleRolePlayerTypeError), 54);
				createElementLinkMap.Add(typeof(UniquenessConstraintHasNMinusOneError), 55);
				createElementLinkMap.Add(typeof(RoleHasRolePlayerRequiredError), 56);
				createElementLinkMap.Add(typeof(EqualityConstraintHasEqualityImpliedByMandatoryError), 57);
				createElementLinkMap.Add(typeof(ObjectTypeHasEntityTypeRequiresReferenceSchemeError), 58);
				createElementLinkMap.Add(typeof(FrequencyConstraintHasFrequencyConstraintMinMaxError), 59);
				createElementLinkMap.Add(typeof(FrequencyConstraintHasFrequencyConstraintExactlyOneError), 60);
				createElementLinkMap.Add(typeof(ObjectificationImpliesFactType), 61);
				createElementLinkMap.Add(typeof(ValueRangeHasMaxValueMismatchError), 62);
				createElementLinkMap.Add(typeof(ValueRangeHasMinValueMismatchError), 63);
				createElementLinkMap.Add(typeof(FactTypeHasImpliedInternalUniquenessConstraintError), 64);
				createElementLinkMap.Add(typeof(SetConstraintHasTooFewRoleSequencesError), 65);
				createElementLinkMap.Add(typeof(SetConstraintHasTooManyRoleSequencesError), 66);
				createElementLinkMap.Add(typeof(FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError), 67);
				createElementLinkMap.Add(typeof(FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError), 68);
				createElementLinkMap.Add(typeof(RingConstraintHasRingConstraintTypeNotSpecifiedError), 69);
				createElementLinkMap.Add(typeof(ValueConstraintHasDuplicateNameError), 70);
				createElementLinkMap.Add(typeof(ObjectTypeHasObjectTypeRequiresPrimarySupertypeError), 71);
				createElementLinkMap.Add(typeof(ObjectTypeHasDefinition), 72);
				createElementLinkMap.Add(typeof(FactTypeHasDefinition), 73);
				createElementLinkMap.Add(typeof(FactTypeHasNote), 74);
				createElementLinkMap.Add(typeof(ObjectTypeHasNote), 75);
				createElementLinkMap.Add(typeof(ModelHasModelNote), 76);
				createElementLinkMap.Add(typeof(ModelNoteReferencesFactType), 77);
				createElementLinkMap.Add(typeof(ModelNoteReferencesObjectType), 78);
				createElementLinkMap.Add(typeof(ModelNoteReferencesSetConstraint), 79);
				createElementLinkMap.Add(typeof(ModelNoteReferencesSetComparisonConstraint), 80);
				createElementLinkMap.Add(typeof(ObjectTypeHasCompatibleSupertypesError), 81);
				createElementLinkMap.Add(typeof(SetConstraintHasImplicationError), 82);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasImplicationError), 83);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError), 84);
				createElementLinkMap.Add(typeof(ObjectTypeHasPreferredIdentifierRequiresMandatoryError), 85);
				createElementLinkMap.Add(typeof(ValueConstraintHasValueRangeOverlapError), 86);
				createElementLinkMap.Add(typeof(FactTypeHasRole), 87);
				createElementLinkMap.Add(typeof(ReadingOrderHasRole), 88);
				createElementLinkMap.Add(typeof(RoleProxyHasRole), 89);
				createElementLinkMap.Add(typeof(FactTypeHasDerivationExpression), 90);
				createElementLinkMap.Add(typeof(ObjectTypeHasObjectTypeInstance), 91);
				createElementLinkMap.Add(typeof(EntityTypeHasEntityTypeInstance), 92);
				createElementLinkMap.Add(typeof(ValueTypeHasValueTypeInstance), 93);
				createElementLinkMap.Add(typeof(EntityTypeRoleInstance), 94);
				createElementLinkMap.Add(typeof(FactTypeRoleInstance), 95);
				createElementLinkMap.Add(typeof(EntityTypeInstanceHasRoleInstance), 96);
				createElementLinkMap.Add(typeof(FactTypeHasFactTypeInstance), 97);
				createElementLinkMap.Add(typeof(FactTypeInstanceHasRoleInstance), 98);
				createElementLinkMap.Add(typeof(EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError), 99);
				createElementLinkMap.Add(typeof(FactTypeInstanceHasTooFewFactTypeRoleInstancesError), 100);
				createElementLinkMap.Add(typeof(ValueTypeInstanceHasCompatibleValueTypeInstanceValueError), 101);
				createElementLinkMap.Add(typeof(JoinHasInputRole), 102);
				createElementLinkMap.Add(typeof(JoinHasOutputRole), 103);
				createElementLinkMap.Add(typeof(ConstraintRoleSequenceHasJoinPath), 104);
				createElementLinkMap.Add(typeof(ConstraintRoleSequenceHasRoleHasProjectionJoin), 105);
				createElementLinkMap.Add(typeof(ModelHasModelErrorDisplayFilter), 106);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				throw new global::System.ArgumentException("elementLinkType is not recognized as a type of domain relationship which belongs to this domain model.");
			}
			switch (index)
			{
				case 0: return new FactSetComparisonConstraint(partition, roleAssignments, propertyAssignments);
				case 1: return new FactSetConstraint(partition, roleAssignments, propertyAssignments);
				case 2: return new ORMModelElementHasExtensionElement(partition, roleAssignments, propertyAssignments);
				case 3: return new ORMModelElementHasExtensionModelError(partition, roleAssignments, propertyAssignments);
				case 4: return new ValueTypeHasDataType(partition, roleAssignments, propertyAssignments);
				case 5: return new Objectification(partition, roleAssignments, propertyAssignments);
				case 6: return new ObjectTypePlaysRole(partition, roleAssignments, propertyAssignments);
				case 7: return new ModelHasObjectType(partition, roleAssignments, propertyAssignments);
				case 8: return new ModelHasFactType(partition, roleAssignments, propertyAssignments);
				case 9: return new ModelHasError(partition, roleAssignments, propertyAssignments);
				case 10: return new ModelHasReferenceModeKind(partition, roleAssignments, propertyAssignments);
				case 11: return new ModelHasReferenceMode(partition, roleAssignments, propertyAssignments);
				case 12: return new ModelHasSetConstraint(partition, roleAssignments, propertyAssignments);
				case 13: return new ObjectTypeImpliesMandatoryConstraint(partition, roleAssignments, propertyAssignments);
				case 14: return new ModelHasSetComparisonConstraint(partition, roleAssignments, propertyAssignments);
				case 15: return new ModelHasDataType(partition, roleAssignments, propertyAssignments);
				case 16: return new NameGeneratorRefinesNameGenerator(partition, roleAssignments, propertyAssignments);
				case 17: return new ObjectTypeHasAbbreviation(partition, roleAssignments, propertyAssignments);
				case 18: return new NameGeneratorContainsOmittedWord(partition, roleAssignments, propertyAssignments);
				case 19: return new ExternalRoleConstraint(partition, roleAssignments, propertyAssignments);
				case 20: return new ExclusiveOrConstraintCoupler(partition, roleAssignments, propertyAssignments);
				case 21: return new SetComparisonConstraintHasRoleSequence(partition, roleAssignments, propertyAssignments);
				case 22: return new ConstraintRoleSequenceHasRole(partition, roleAssignments, propertyAssignments);
				case 23: return new SetComparisonConstraintHasTooFewRoleSequencesError(partition, roleAssignments, propertyAssignments);
				case 24: return new SetComparisonConstraintHasTooManyRoleSequencesError(partition, roleAssignments, propertyAssignments);
				case 25: return new ObjectTypeHasDuplicateNameError(partition, roleAssignments, propertyAssignments);
				case 26: return new EntityTypeRoleInstanceHasPopulationUniquenessError(partition, roleAssignments, propertyAssignments);
				case 27: return new FactTypeRoleInstanceHasPopulationUniquenessError(partition, roleAssignments, propertyAssignments);
				case 28: return new SetComparisonConstraintHasExclusionContradictsEqualityError(partition, roleAssignments, propertyAssignments);
				case 29: return new SetComparisonConstraintHasExclusionContradictsSubsetError(partition, roleAssignments, propertyAssignments);
				case 30: return new ExclusionConstraintHasExclusionContradictsMandatoryError(partition, roleAssignments, propertyAssignments);
				case 31: return new MandatoryConstraintHasExclusionContradictsMandatoryError(partition, roleAssignments, propertyAssignments);
				case 32: return new SubsetConstraintHasNotWellModeledSubsetAndMandatoryError(partition, roleAssignments, propertyAssignments);
				case 33: return new MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError(partition, roleAssignments, propertyAssignments);
				case 34: return new MandatoryConstraintHasPopulationMandatoryError(partition, roleAssignments, propertyAssignments);
				case 35: return new ObjectTypeInstanceHasPopulationMandatoryError(partition, roleAssignments, propertyAssignments);
				case 36: return new ReadingOrderHasReading(partition, roleAssignments, propertyAssignments);
				case 37: return new FactTypeHasReadingOrder(partition, roleAssignments, propertyAssignments);
				case 38: return new ReferenceModeHasReferenceModeKind(partition, roleAssignments, propertyAssignments);
				case 39: return new SetConstraintHasDuplicateNameError(partition, roleAssignments, propertyAssignments);
				case 40: return new SetComparisonConstraintHasDuplicateNameError(partition, roleAssignments, propertyAssignments);
				case 41: return new EntityTypeHasPreferredIdentifier(partition, roleAssignments, propertyAssignments);
				case 42: return new ReadingHasTooManyRolesError(partition, roleAssignments, propertyAssignments);
				case 43: return new ReadingHasTooFewRolesError(partition, roleAssignments, propertyAssignments);
				case 44: return new ReadingHasReadingRequiresUserModificationError(partition, roleAssignments, propertyAssignments);
				case 45: return new SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(partition, roleAssignments, propertyAssignments);
				case 46: return new ElementAssociatedWithModelError(partition, roleAssignments, propertyAssignments);
				case 47: return new FactTypeHasFactTypeRequiresReadingError(partition, roleAssignments, propertyAssignments);
				case 48: return new FactTypeHasFactTypeRequiresInternalUniquenessConstraintError(partition, roleAssignments, propertyAssignments);
				case 49: return new ValueTypeHasValueConstraint(partition, roleAssignments, propertyAssignments);
				case 50: return new RoleHasValueConstraint(partition, roleAssignments, propertyAssignments);
				case 51: return new ValueConstraintHasValueRange(partition, roleAssignments, propertyAssignments);
				case 52: return new ValueTypeHasUnspecifiedDataTypeError(partition, roleAssignments, propertyAssignments);
				case 53: return new SetComparisonConstraintHasCompatibleRolePlayerTypeError(partition, roleAssignments, propertyAssignments);
				case 54: return new SetConstraintHasCompatibleRolePlayerTypeError(partition, roleAssignments, propertyAssignments);
				case 55: return new UniquenessConstraintHasNMinusOneError(partition, roleAssignments, propertyAssignments);
				case 56: return new RoleHasRolePlayerRequiredError(partition, roleAssignments, propertyAssignments);
				case 57: return new EqualityConstraintHasEqualityImpliedByMandatoryError(partition, roleAssignments, propertyAssignments);
				case 58: return new ObjectTypeHasEntityTypeRequiresReferenceSchemeError(partition, roleAssignments, propertyAssignments);
				case 59: return new FrequencyConstraintHasFrequencyConstraintMinMaxError(partition, roleAssignments, propertyAssignments);
				case 60: return new FrequencyConstraintHasFrequencyConstraintExactlyOneError(partition, roleAssignments, propertyAssignments);
				case 61: return new ObjectificationImpliesFactType(partition, roleAssignments, propertyAssignments);
				case 62: return new ValueRangeHasMaxValueMismatchError(partition, roleAssignments, propertyAssignments);
				case 63: return new ValueRangeHasMinValueMismatchError(partition, roleAssignments, propertyAssignments);
				case 64: return new FactTypeHasImpliedInternalUniquenessConstraintError(partition, roleAssignments, propertyAssignments);
				case 65: return new SetConstraintHasTooFewRoleSequencesError(partition, roleAssignments, propertyAssignments);
				case 66: return new SetConstraintHasTooManyRoleSequencesError(partition, roleAssignments, propertyAssignments);
				case 67: return new FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError(partition, roleAssignments, propertyAssignments);
				case 68: return new FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError(partition, roleAssignments, propertyAssignments);
				case 69: return new RingConstraintHasRingConstraintTypeNotSpecifiedError(partition, roleAssignments, propertyAssignments);
				case 70: return new ValueConstraintHasDuplicateNameError(partition, roleAssignments, propertyAssignments);
				case 71: return new ObjectTypeHasObjectTypeRequiresPrimarySupertypeError(partition, roleAssignments, propertyAssignments);
				case 72: return new ObjectTypeHasDefinition(partition, roleAssignments, propertyAssignments);
				case 73: return new FactTypeHasDefinition(partition, roleAssignments, propertyAssignments);
				case 74: return new FactTypeHasNote(partition, roleAssignments, propertyAssignments);
				case 75: return new ObjectTypeHasNote(partition, roleAssignments, propertyAssignments);
				case 76: return new ModelHasModelNote(partition, roleAssignments, propertyAssignments);
				case 77: return new ModelNoteReferencesFactType(partition, roleAssignments, propertyAssignments);
				case 78: return new ModelNoteReferencesObjectType(partition, roleAssignments, propertyAssignments);
				case 79: return new ModelNoteReferencesSetConstraint(partition, roleAssignments, propertyAssignments);
				case 80: return new ModelNoteReferencesSetComparisonConstraint(partition, roleAssignments, propertyAssignments);
				case 81: return new ObjectTypeHasCompatibleSupertypesError(partition, roleAssignments, propertyAssignments);
				case 82: return new SetConstraintHasImplicationError(partition, roleAssignments, propertyAssignments);
				case 83: return new SetComparisonConstraintHasImplicationError(partition, roleAssignments, propertyAssignments);
				case 84: return new SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError(partition, roleAssignments, propertyAssignments);
				case 85: return new ObjectTypeHasPreferredIdentifierRequiresMandatoryError(partition, roleAssignments, propertyAssignments);
				case 86: return new ValueConstraintHasValueRangeOverlapError(partition, roleAssignments, propertyAssignments);
				case 87: return new FactTypeHasRole(partition, roleAssignments, propertyAssignments);
				case 88: return new ReadingOrderHasRole(partition, roleAssignments, propertyAssignments);
				case 89: return new RoleProxyHasRole(partition, roleAssignments, propertyAssignments);
				case 90: return new FactTypeHasDerivationExpression(partition, roleAssignments, propertyAssignments);
				case 91: return new ObjectTypeHasObjectTypeInstance(partition, roleAssignments, propertyAssignments);
				case 92: return new EntityTypeHasEntityTypeInstance(partition, roleAssignments, propertyAssignments);
				case 93: return new ValueTypeHasValueTypeInstance(partition, roleAssignments, propertyAssignments);
				case 94: return new EntityTypeRoleInstance(partition, roleAssignments, propertyAssignments);
				case 95: return new FactTypeRoleInstance(partition, roleAssignments, propertyAssignments);
				case 96: return new EntityTypeInstanceHasRoleInstance(partition, roleAssignments, propertyAssignments);
				case 97: return new FactTypeHasFactTypeInstance(partition, roleAssignments, propertyAssignments);
				case 98: return new FactTypeInstanceHasRoleInstance(partition, roleAssignments, propertyAssignments);
				case 99: return new EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError(partition, roleAssignments, propertyAssignments);
				case 100: return new FactTypeInstanceHasTooFewFactTypeRoleInstancesError(partition, roleAssignments, propertyAssignments);
				case 101: return new ValueTypeInstanceHasCompatibleValueTypeInstanceValueError(partition, roleAssignments, propertyAssignments);
				case 102: return new JoinHasInputRole(partition, roleAssignments, propertyAssignments);
				case 103: return new JoinHasOutputRole(partition, roleAssignments, propertyAssignments);
				case 104: return new ConstraintRoleSequenceHasJoinPath(partition, roleAssignments, propertyAssignments);
				case 105: return new ConstraintRoleSequenceHasRoleHasProjectionJoin(partition, roleAssignments, propertyAssignments);
				case 106: return new ModelHasModelErrorDisplayFilter(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ORMCoreDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (ORMCoreDomainModel.resourceManager == null)
				{
					ORMCoreDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(ORMCoreDomainModel).Assembly);
				}
				return ORMCoreDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return ORMCoreDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return ORMCoreDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (ORMCoreDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new ORMCoreCopyClosure());
					
					ORMCoreDomainModel.copyClosure = copyFilter;
				}
				return ORMCoreDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (ORMCoreDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new ORMCoreDeleteClosure());
		
					ORMCoreDomainModel.removeClosure = removeFilter;
				}
				return ORMCoreDomainModel.removeClosure;
			}
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ORMCoreDeleteClosure : ORMCoreDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMCoreDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	public partial class ORMCoreDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Generic.Dictionary<global::System.Guid, bool> domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMCoreDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtensionDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtensionModelErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ModelHasError.ErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.SetConstraintDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ObjectTypeImpliesMandatoryConstraint.MandatoryConstraintDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.NameGeneratorRefinesNameGenerator.RefinementDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ElementHasAlias.AliasDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasAbbreviation.AbbreviationDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.NameGeneratorContainsOmittedWord.OmittedWordDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ReadingHasReadingRequiresUserModificationError.RequiresUserModificationErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraintDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueRangeDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintExactlyOneErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDefinition.DefinitionDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDefinition.DefinitionDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.NoteDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.NoteDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote.NoteDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.ImplicationErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.ImplicationErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.RoleDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectTypeInstanceDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeInstanceDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeInstanceDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance.FactTypeInstanceDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueErrorDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.JoinHasRole.JoinDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole.JoinDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole.JoinDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath.JoinDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath.JoinDomainRoleId, true);
			DomainRoles.Add(global::Neumont.Tools.ORM.ObjectModel.ModelHasModelErrorDisplayFilter.ModelErrorDisplayFilterDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			return this.DomainRoles.ContainsKey(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Generic.Dictionary<global::System.Guid, bool> DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Generic.Dictionary<global::System.Guid, bool>();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ORMCoreCopyClosure : ORMCoreCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMCoreCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	public partial class ORMCoreCopyClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Generic.Dictionary<global::System.Guid, bool> domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMCoreCopyClosureBase()
		{
			#region Initialize DomainData Table
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return this.DomainRoles.ContainsKey(sourceRoleInfo.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			return this.DomainRoles.ContainsKey(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Generic.Dictionary<global::System.Guid, bool> DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Generic.Dictionary<global::System.Guid, bool>();
				}
				return this.domainRoles;
			}
		}
	
	}
	#endregion
		
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: DerivationStorageType
	/// Used to specify how/whether the contents of the fact should be stored by
	/// generated systems.
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::Neumont.Tools.Modeling.Design.EnumConverter<DerivationStorageType, global::Neumont.Tools.ORM.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum DerivationStorageType
	{
		/// <summary>
		/// Derived
		/// Fact is derived but should not be stored.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.DerivationStorageType/Derived.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Derived = 0,
		/// <summary>
		/// DerivedAndStored
		/// Fact is derived and should be stored.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.DerivationStorageType/DerivedAndStored.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		DerivedAndStored = 1,
		/// <summary>
		/// PartiallyDerived
		/// Fact is partially derived and should be stored.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.DerivationStorageType/PartiallyDerived.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		PartiallyDerived = 2,
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: ConstraintModality
	/// Description for Neumont.Tools.ORM.ObjectModel.ConstraintModality
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::Neumont.Tools.Modeling.Design.EnumConverter<ConstraintModality, global::Neumont.Tools.ORM.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum ConstraintModality
	{
		/// <summary>
		/// Alethic
		/// The constraint must hold.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ConstraintModality/Alethic.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Alethic = 0,
		/// <summary>
		/// Deontic
		/// The constraint should hold.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ConstraintModality/Deontic.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Deontic = 1,
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: RoleMultiplicity
	/// Defines the multiplicity for the roles. The role multiplicity is currently
	/// displayed only on roles associated with binary fact types and is calculated
	/// based on the existing mandatory and internal uniqueness constraints associated
	/// with the fact.
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::Neumont.Tools.Modeling.Design.EnumConverter<RoleMultiplicity, global::Neumont.Tools.ORM.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum RoleMultiplicity
	{
		/// <summary>
		/// Unspecified
		/// Insufficient constraints are present to determine the user intention.
		/// </summary>
		[global::System.ComponentModel.Browsable(false)]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleMultiplicity/Unspecified.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Unspecified = 0,
		/// <summary>
		/// Indeterminate
		/// Too many constraints are present to determine the user intention.
		/// </summary>
		[global::System.ComponentModel.Browsable(false)]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleMultiplicity/Indeterminate.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Indeterminate = 1,
		/// <summary>
		/// ZeroToOne
		/// 0..1
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleMultiplicity/ZeroToOne.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		ZeroToOne = 2,
		/// <summary>
		/// ZeroToMany
		/// 0..*
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleMultiplicity/ZeroToMany.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		ZeroToMany = 3,
		/// <summary>
		/// ExactlyOne
		/// 1
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleMultiplicity/ExactlyOne.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		ExactlyOne = 4,
		/// <summary>
		/// OneToMany
		/// 1..*
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleMultiplicity/OneToMany.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		OneToMany = 5,
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: RingConstraintType
	/// Description for Neumont.Tools.ORM.ObjectModel.RingConstraintType
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::Neumont.Tools.Modeling.Design.EnumConverter<RingConstraintType, global::Neumont.Tools.ORM.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum RingConstraintType
	{
		/// <summary>
		/// Undefined
		/// </summary>
		[global::System.ComponentModel.Browsable(false)]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraintType/Undefined.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Undefined = 0,
		/// <summary>
		/// PurelyReflexive
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraintType/PurelyReflexive.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		PurelyReflexive = 1,
		/// <summary>
		/// Irreflexive
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraintType/Irreflexive.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Irreflexive = 2,
		/// <summary>
		/// Symmetric
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraintType/Symmetric.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Symmetric = 3,
		/// <summary>
		/// Asymmetric
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraintType/Asymmetric.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Asymmetric = 4,
		/// <summary>
		/// Antisymmetric
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraintType/Antisymmetric.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Antisymmetric = 5,
		/// <summary>
		/// Intransitive
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraintType/Intransitive.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Intransitive = 6,
		/// <summary>
		/// Acyclic
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraintType/Acyclic.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Acyclic = 7,
		/// <summary>
		/// AcyclicIntransitive
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraintType/AcyclicIntransitive.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		AcyclicIntransitive = 8,
		/// <summary>
		/// AsymmetricIntransitive
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraintType/AsymmetricIntransitive.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		AsymmetricIntransitive = 9,
		/// <summary>
		/// SymmetricIntransitive
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraintType/SymmetricIntransitive.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		SymmetricIntransitive = 10,
		/// <summary>
		/// SymmetricIrreflexive
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraintType/SymmetricIrreflexive.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		SymmetricIrreflexive = 11,
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: ReferenceModeType
	/// Description for Neumont.Tools.ORM.ObjectModel.ReferenceModeType
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::Neumont.Tools.Modeling.Design.EnumConverter<ReferenceModeType, global::Neumont.Tools.ORM.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum ReferenceModeType
	{
		/// <summary>
		/// General
		/// That other reference mode type.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReferenceModeType/General.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		General = 0,
		/// <summary>
		/// Popular
		/// The 'in' and 'fashionable' reference mode type.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReferenceModeType/Popular.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Popular = 1,
		/// <summary>
		/// UnitBased
		/// The reference mode type based on units.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReferenceModeType/UnitBased.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		UnitBased = 2,
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: RangeInclusion
	/// Description for Neumont.Tools.ORM.ObjectModel.RangeInclusion
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::Neumont.Tools.Modeling.Design.EnumConverter<RangeInclusion, global::Neumont.Tools.ORM.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum RangeInclusion
	{
		/// <summary>
		/// NotSet
		/// Description for Neumont.Tools.ORM.ObjectModel.RangeInclusion.NotSet
		/// </summary>
		[global::System.ComponentModel.Browsable(false)]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RangeInclusion/NotSet.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		NotSet = 0,
		/// <summary>
		/// Open
		/// Indicates the specific value is not included in the range.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RangeInclusion/Open.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Open = 1,
		/// <summary>
		/// Closed
		/// Indicates the specific value is included in the range.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RangeInclusion/Closed.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Closed = 2,
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: JoinType
	/// Description for Neumont.Tools.ORM.ObjectModel.JoinType
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::Neumont.Tools.Modeling.Design.EnumConverter<JoinType, global::Neumont.Tools.ORM.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum JoinType
	{
		/// <summary>
		/// Inner
		/// Inner join.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.JoinType/Inner.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Inner = 0,
		/// <summary>
		/// Outer
		/// Outer join.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.JoinType/Outer.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Outer = 1,
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: NameGeneratorCasingOption
	/// Description for Neumont.Tools.ORM.ObjectModel.NameGeneratorCasingOption
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::Neumont.Tools.Modeling.Design.EnumConverter<NameGeneratorCasingOption, global::Neumont.Tools.ORM.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum NameGeneratorCasingOption
	{
		/// <summary>
		/// None
		/// Description for Neumont.Tools.ORM.ObjectModel.NameGeneratorCasingOption.None
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.NameGeneratorCasingOption/None.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		None = 0,
		/// <summary>
		/// Camel
		/// Indicates the casing of the string is Camel
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.NameGeneratorCasingOption/Camel.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Camel = 1,
		/// <summary>
		/// Pascal
		/// Indicates the casing of the string is Pascal.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.NameGeneratorCasingOption/Pascal.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Pascal = 2,
		/// <summary>
		/// Upper
		/// Indicates the casing of the string is Upper.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.NameGeneratorCasingOption/Upper.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Upper = 3,
		/// <summary>
		/// Lower
		/// Indicates the casing of the string is Lower.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.NameGeneratorCasingOption/Lower.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Lower = 4,
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: NameGeneratorSpacingFormat
	/// Description for Neumont.Tools.ORM.ObjectModel.NameGeneratorSpacingFormat
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::Neumont.Tools.Modeling.Design.EnumConverter<NameGeneratorSpacingFormat, global::Neumont.Tools.ORM.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum NameGeneratorSpacingFormat
	{
		/// <summary>
		/// Retain
		/// Description for Neumont.Tools.ORM.ObjectModel.NameGeneratorSpacingFormat.Retain
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.NameGeneratorSpacingFormat/Retain.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Retain = 0,
		/// <summary>
		/// Remove
		/// Indicates that spaces are Removed
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.NameGeneratorSpacingFormat/Remove.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Remove = 1,
		/// <summary>
		/// ReplaceWith
		/// Indicates that spaces are ReplacedWith a different string.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.NameGeneratorSpacingFormat/ReplaceWith.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		ReplaceWith = 2,
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: NameGeneratorSubjectArea
	/// Description for Neumont.Tools.ORM.ObjectModel.NameGeneratorSubjectArea
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::Neumont.Tools.Modeling.Design.EnumConverter<NameGeneratorSubjectArea, global::Neumont.Tools.ORM.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum NameGeneratorSubjectArea
	{
		/// <summary>
		/// None
		/// Description for Neumont.Tools.ORM.ObjectModel.NameGeneratorSubjectArea.None
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.NameGeneratorSubjectArea/None.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		None = 0,
		/// <summary>
		/// Prefix
		/// Indicates that the chosen subject will be prepended to the generated name.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.NameGeneratorSubjectArea/Prefix.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Prefix = 1,
		/// <summary>
		/// Suffix
		/// Indicates that the chosen subject will be appended to the generated name.
		/// </summary>
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.NameGeneratorSubjectArea/Suffix.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		Suffix = 2,
	}
}

