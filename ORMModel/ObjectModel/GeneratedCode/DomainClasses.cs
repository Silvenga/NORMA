#region Common Public License Copyright Notice
/**************************************************************************\
* Neumont Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass DelayValidateSignal
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.DelayValidateSignal.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.DelayValidateSignal.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c6d39cf7-e8aa-4be7-aa79-7659fbd32e54")]
	public sealed partial class DelayValidateSignal : DslModeling::ModelElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// DelayValidateSignal domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc6d39cf7, 0xe8aa, 0x4be7, 0xaa, 0x79, 0x76, 0x59, 0xfb, 0xd3, 0x2e, 0x54);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DelayValidateSignal(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DelayValidateSignal(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ModelErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelErrorCategory.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelErrorCategory.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c9730e21-67a1-47e1-a065-b08c2b3815ce")]
	public abstract partial class ModelErrorCategory : DslModeling::ModelElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ModelErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc9730e21, 0x67a1, 0x47e1, 0xa0, 0x65, 0xb0, 0x8c, 0x2b, 0x38, 0x15, 0xce);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ModelErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ModelErrorDisplayFilter
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelErrorDisplayFilter.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelErrorDisplayFilter.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("67cdce7b-3d28-4a92-b9eb-00418152a13f")]
	public sealed partial class ModelErrorDisplayFilter : DslModeling::ModelElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ModelErrorDisplayFilter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x67cdce7b, 0x3d28, 0x4a92, 0xb9, 0xeb, 0x00, 0x41, 0x81, 0x52, 0xa1, 0x3f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelErrorDisplayFilter(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelErrorDisplayFilter(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ExcludedCategories domain property code

		/// <summary>
		/// ExcludedCategories domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExcludedCategoriesDomainPropertyId = new global::System.Guid(0x46f355f4, 0x001c, 0x4a3f, 0x8a, 0x0f, 0x56, 0xbe, 0xc4, 0xea, 0xcd, 0xeb);

		/// <summary>
		/// Gets or sets the value of ExcludedCategories domain property.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelErrorDisplayFilter.ExcludedCategories
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelErrorDisplayFilter/ExcludedCategories.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelErrorDisplayFilter/ExcludedCategories.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("46f355f4-001c-4a3f-8a0f-56bec4eacdeb")]
		public global::System.String ExcludedCategories
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ExcludedCategoriesPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ExcludedCategoriesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelErrorDisplayFilter.ExcludedCategories domain property.
		/// </summary>
		internal sealed partial class ExcludedCategoriesPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelErrorDisplayFilter, global::System.String>
		{
			private ExcludedCategoriesPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ModelErrorDisplayFilter.ExcludedCategories domain property value handler.
			/// </summary>
			public static readonly ExcludedCategoriesPropertyHandler Instance = new ExcludedCategoriesPropertyHandler();

			/// <summary>
			/// Gets the Id of the ModelErrorDisplayFilter.ExcludedCategories domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ExcludedCategoriesDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelErrorDisplayFilter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ExcludedCategories because its Kind is
				// set to CustomStorage. Please provide the GetExcludedCategoriesValue()
				// method on the domain class.
				return element.GetExcludedCategoriesValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelErrorDisplayFilter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ExcludedCategories because its Kind is
					// set to CustomStorage. Please provide the SetExcludedCategoriesValue()
					// method on the domain class.
					element.SetExcludedCategoriesValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region IncludedErrors domain property code

		/// <summary>
		/// IncludedErrors domain property Id.
		/// </summary>
		public static readonly global::System.Guid IncludedErrorsDomainPropertyId = new global::System.Guid(0xd83d0737, 0x79b4, 0x415d, 0x9c, 0x93, 0x73, 0x44, 0x2f, 0x3c, 0x60, 0x6f);

		/// <summary>
		/// Gets or sets the value of IncludedErrors domain property.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelErrorDisplayFilter.IncludedErrors
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelErrorDisplayFilter/IncludedErrors.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelErrorDisplayFilter/IncludedErrors.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("d83d0737-79b4-415d-9c93-73442f3c606f")]
		public global::System.String IncludedErrors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IncludedErrorsPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IncludedErrorsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelErrorDisplayFilter.IncludedErrors domain property.
		/// </summary>
		internal sealed partial class IncludedErrorsPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelErrorDisplayFilter, global::System.String>
		{
			private IncludedErrorsPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ModelErrorDisplayFilter.IncludedErrors domain property value handler.
			/// </summary>
			public static readonly IncludedErrorsPropertyHandler Instance = new IncludedErrorsPropertyHandler();

			/// <summary>
			/// Gets the Id of the ModelErrorDisplayFilter.IncludedErrors domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IncludedErrorsDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelErrorDisplayFilter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IncludedErrors because its Kind is
				// set to CustomStorage. Please provide the GetIncludedErrorsValue()
				// method on the domain class.
				return element.GetIncludedErrorsValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelErrorDisplayFilter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IncludedErrors because its Kind is
					// set to CustomStorage. Please provide the SetIncludedErrorsValue()
					// method on the domain class.
					element.SetIncludedErrorsValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region ExcludedErrors domain property code

		/// <summary>
		/// ExcludedErrors domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExcludedErrorsDomainPropertyId = new global::System.Guid(0x593d1e1a, 0xc01d, 0x48e8, 0x83, 0x85, 0x15, 0x07, 0xc7, 0xf9, 0x5a, 0x25);

		/// <summary>
		/// Gets or sets the value of ExcludedErrors domain property.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelErrorDisplayFilter.ExcludedErrors
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelErrorDisplayFilter/ExcludedErrors.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelErrorDisplayFilter/ExcludedErrors.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("593d1e1a-c01d-48e8-8385-1507c7f95a25")]
		public global::System.String ExcludedErrors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ExcludedErrorsPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ExcludedErrorsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelErrorDisplayFilter.ExcludedErrors domain property.
		/// </summary>
		internal sealed partial class ExcludedErrorsPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelErrorDisplayFilter, global::System.String>
		{
			private ExcludedErrorsPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ModelErrorDisplayFilter.ExcludedErrors domain property value handler.
			/// </summary>
			public static readonly ExcludedErrorsPropertyHandler Instance = new ExcludedErrorsPropertyHandler();

			/// <summary>
			/// Gets the Id of the ModelErrorDisplayFilter.ExcludedErrors domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ExcludedErrorsDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelErrorDisplayFilter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ExcludedErrors because its Kind is
				// set to CustomStorage. Please provide the GetExcludedErrorsValue()
				// method on the domain class.
				return element.GetExcludedErrorsValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelErrorDisplayFilter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ExcludedErrors because its Kind is
					// set to CustomStorage. Please provide the SetExcludedErrorsValue()
					// method on the domain class.
					element.SetExcludedErrorsValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelHasModelErrorDisplayFilter.ModelErrorDisplayFilter
		/// </summary>
		public ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasModelErrorDisplayFilter.ModelErrorDisplayFilterDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ModelHasModelErrorDisplayFilter.ModelDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ModelHasModelErrorDisplayFilter.ModelDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasModelErrorDisplayFilter.ModelErrorDisplayFilterDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass PopulationErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.PopulationErrorCategory.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.PopulationErrorCategory.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("18c1ae31-7241-453e-9dcb-9409aca41896")]
	public abstract partial class PopulationErrorCategory : ModelErrorCategory
	{
		#region Constructors, domain class Id

		/// <summary>
		/// PopulationErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x18c1ae31, 0x7241, 0x453e, 0x9d, 0xcb, 0x94, 0x09, 0xac, 0xa4, 0x18, 0x96);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected PopulationErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass DataTypeAndValueErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.DataTypeAndValueErrorCategory.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.DataTypeAndValueErrorCategory.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d98ce8a4-2cb0-423e-80ac-4e4e7a963ec3")]
	public abstract partial class DataTypeAndValueErrorCategory : ModelErrorCategory
	{
		#region Constructors, domain class Id

		/// <summary>
		/// DataTypeAndValueErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd98ce8a4, 0x2cb0, 0x423e, 0x80, 0xac, 0x4e, 0x4e, 0x7a, 0x96, 0x3e, 0xc3);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected DataTypeAndValueErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ConstraintImplicationAndContradictionErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ConstraintImplicationAndContradictionErrorCategory.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ConstraintImplicationAndContradictionErrorCategory.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a8846faf-a765-4e39-a876-cfa09a1ffb3a")]
	public abstract partial class ConstraintImplicationAndContradictionErrorCategory : ModelErrorCategory
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ConstraintImplicationAndContradictionErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa8846faf, 0xa765, 0x4e39, 0xa8, 0x76, 0xcf, 0xa0, 0x9a, 0x1f, 0xfb, 0x3a);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ConstraintImplicationAndContradictionErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ConstraintStructureErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ConstraintStructureErrorCategory.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ConstraintStructureErrorCategory.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("feabde83-e7b0-44c1-b6c8-3f0ef3e09589")]
	public abstract partial class ConstraintStructureErrorCategory : ModelErrorCategory
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ConstraintStructureErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfeabde83, 0xe7b0, 0x44c1, 0xb6, 0xc8, 0x3f, 0x0e, 0xf3, 0xe0, 0x95, 0x89);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ConstraintStructureErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass FactTypeDefinitionErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeDefinitionErrorCategory.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeDefinitionErrorCategory.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1360b437-c64f-4a30-956b-47d4f1c7e85b")]
	public abstract partial class FactTypeDefinitionErrorCategory : ModelErrorCategory
	{
		#region Constructors, domain class Id

		/// <summary>
		/// FactTypeDefinitionErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1360b437, 0xc64f, 0x4a30, 0x95, 0x6b, 0x47, 0xd4, 0xf1, 0xc7, 0xe8, 0x5b);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected FactTypeDefinitionErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ReferenceSchemeErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReferenceSchemeErrorCategory.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReferenceSchemeErrorCategory.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2f515685-36d3-4631-a6c4-572bd9644fd7")]
	public abstract partial class ReferenceSchemeErrorCategory : ModelErrorCategory
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ReferenceSchemeErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2f515685, 0x36d3, 0x4631, 0xa6, 0xc4, 0x57, 0x2b, 0xd9, 0x64, 0x4f, 0xd7);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ReferenceSchemeErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass NameErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.NameErrorCategory.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.NameErrorCategory.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("57ae5888-89e0-4449-b0c8-80802deb014c")]
	public abstract partial class NameErrorCategory : ModelErrorCategory
	{
		#region Constructors, domain class Id

		/// <summary>
		/// NameErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x57ae5888, 0x89e0, 0x4449, 0xb0, 0xc8, 0x80, 0x80, 0x2d, 0xeb, 0x01, 0x4c);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NameErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ORMModelElement
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::Neumont.Tools.Modeling.Design.ElementTypeDescriptionProvider<ORMModelElement, Design.ORMModelElementTypeDescriptor<ORMModelElement>>))]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ORMModelElement.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ORMModelElement.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bfbbee5e-c691-4299-b958-77ac1b701f28")]
	public abstract partial class ORMModelElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ORMModelElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbfbbee5e, 0xc691, 0x4299, 0xb9, 0x58, 0x77, 0xac, 0x1b, 0x70, 0x1f, 0x28);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ORMModelElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ExtensionCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ExtensionCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtendedElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> ExtensionCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>(this, global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionElement.ExtendedElementDomainRoleId);
			}
		}
		#endregion
		#region ExtensionModelErrorCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ExtensionModelErrorCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtendedElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelError> ExtensionModelErrorCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelError>(this, global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasExtensionModelError.ExtendedElementDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ORMNamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ORMNamedElement.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ORMNamedElement.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("c2be18ba-bc16-4764-baa1-18e721435bce")]
	public abstract partial class ORMNamedElement : ORMModelElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ORMNamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc2be18ba, 0xbc16, 0x4764, 0xba, 0xa1, 0x18, 0xe7, 0x21, 0x43, 0x5b, 0xce);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ORMNamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code

		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x4a557c1e, 0x0a89, 0x49b7, 0xb4, 0xbd, 0xfa, 0x09, 0x5f, 0x62, 0x67, 0xd7);

		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;

		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ORMNamedElement.Name
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ORMNamedElement/Name.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ORMNamedElement/Name.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("4a557c1e-0a89-49b7-b4bd-fa095f6267d7")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ORMNamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ORMNamedElement, global::System.String>
		{
			private NamePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ORMNamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();

			/// <summary>
			/// Gets the Id of the ORMNamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ORMNamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ORMNamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ORMModel
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ORMModel.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ORMModel.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("73e1f528-9e60-4198-aac2-f8d6ccf62eb3")]
	public partial class ORMModel : ORMNamedElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ORMModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x73e1f528, 0x9e60, 0x4198, 0xaa, 0xc2, 0xf8, 0xd6, 0xcc, 0xf6, 0x2e, 0xb3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ORMModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ORMModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ModelErrorDisplayFilterDisplay domain property code

		/// <summary>
		/// ModelErrorDisplayFilterDisplay domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModelErrorDisplayFilterDisplayDomainPropertyId = new global::System.Guid(0xc5a66492, 0x0ffa, 0x46f9, 0xa6, 0x4b, 0x36, 0x1e, 0x62, 0xd6, 0x96, 0xb0);

		/// <summary>
		/// Gets or sets the value of ModelErrorDisplayFilterDisplay domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ORMModel.ErrorDisplay
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::Neumont.Tools.ORM.ObjectModel.Design.ModelErrorDisplayFilterEditor), typeof(global::System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ORMModel/ModelErrorDisplayFilterDisplay.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ORMModel/ModelErrorDisplayFilterDisplay.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("c5a66492-0ffa-46f9-a64b-361e62d696b0")]
		public ModelErrorDisplayFilter ModelErrorDisplayFilterDisplay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ModelErrorDisplayFilterDisplayPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModelErrorDisplayFilterDisplayPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ORMModel.ModelErrorDisplayFilterDisplay domain property.
		/// </summary>
		internal sealed partial class ModelErrorDisplayFilterDisplayPropertyHandler : DslModeling::DomainPropertyValueHandler<ORMModel, ModelErrorDisplayFilter>
		{
			private ModelErrorDisplayFilterDisplayPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ORMModel.ModelErrorDisplayFilterDisplay domain property value handler.
			/// </summary>
			public static readonly ModelErrorDisplayFilterDisplayPropertyHandler Instance = new ModelErrorDisplayFilterDisplayPropertyHandler();

			/// <summary>
			/// Gets the Id of the ORMModel.ModelErrorDisplayFilterDisplay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModelErrorDisplayFilterDisplayDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ModelErrorDisplayFilter GetValue(ORMModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ModelErrorDisplayFilterDisplay because its Kind is
				// set to CustomStorage. Please provide the GetModelErrorDisplayFilterDisplayValue()
				// method on the domain class.
				return element.GetModelErrorDisplayFilterDisplayValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ORMModel element, ModelErrorDisplayFilter newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				ModelErrorDisplayFilter oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ModelErrorDisplayFilterDisplay because its Kind is
					// set to CustomStorage. Please provide the SetModelErrorDisplayFilterDisplayValue()
					// method on the domain class.
					element.SetModelErrorDisplayFilterDisplayValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region ObjectTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ObjectTypeCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ObjectType> ObjectTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ObjectType>(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ModelDomainRoleId);
			}
		}
		#endregion
		#region FactTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasFactType.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactType> FactTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FactType>(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType.ModelDomainRoleId);
			}
		}
		#endregion
		#region ReferenceModeKindCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ReferenceModeKindCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ReferenceModeKind> ReferenceModeKindCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ReferenceModeKind>(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ModelDomainRoleId);
			}
		}
		#endregion
		#region ReferenceModeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ReferenceModeCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ReferenceMode> ReferenceModeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ReferenceMode>(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ModelDomainRoleId);
			}
		}
		#endregion
		#region SetConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of SetConstraintCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SetConstraint> SetConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<SetConstraint>(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.ModelDomainRoleId);
			}
		}
		#endregion
		#region SetComparisonConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SetComparisonConstraint> SetComparisonConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<SetComparisonConstraint>(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.ModelDomainRoleId);
			}
		}
		#endregion
		#region DataTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of DataTypeCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasDataType.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DataType> DataTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<DataType>(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType.ModelDomainRoleId);
			}
		}
		#endregion
		#region NoteCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of NoteCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasModelNote.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelNote> NoteCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelNote>(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote.ModelDomainRoleId);
			}
		}
		#endregion
		#region ModelErrorDisplayFilter opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelErrorDisplayFilter.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelHasModelErrorDisplayFilter.Model
		/// </summary>
		public virtual ModelErrorDisplayFilter ModelErrorDisplayFilter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasModelErrorDisplayFilter.ModelDomainRoleId) as ModelErrorDisplayFilter;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ModelHasModelErrorDisplayFilter.ModelErrorDisplayFilterDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ModelHasModelErrorDisplayFilter.ModelErrorDisplayFilterDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasModelErrorDisplayFilter.ModelDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if (elementGroupPrototype == null) throw new global::System.ArgumentNullException("elementGroupPrototype");

			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);

				if (rootElementDomainInfo.IsDerivedFrom(global::Neumont.Tools.ORM.ObjectModel.SetConstraint.DomainClassId))
				{
					// Call custom method implemented in partial class
					return this.CanMergeSetConstraint(rootElement, elementGroupPrototype);
				}

				if (rootElementDomainInfo.IsDerivedFrom(global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint.DomainClassId))
				{
					return true;
				}

				if (rootElementDomainInfo.IsDerivedFrom(global::Neumont.Tools.ORM.ObjectModel.ModelNote.DomainClassId))
				{
					return true;
				}

				if (rootElementDomainInfo.IsDerivedFrom(global::Neumont.Tools.ORM.ObjectModel.ObjectType.DomainClassId))
				{
					return true;
				}

				if (rootElementDomainInfo.IsDerivedFrom(global::Neumont.Tools.ORM.ObjectModel.FactType.DomainClassId))
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}

		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");


			global::Neumont.Tools.ORM.ObjectModel.SetConstraint sourceSetConstraint1 = sourceElement as global::Neumont.Tools.ORM.ObjectModel.SetConstraint;
			if (sourceSetConstraint1 != null)
			{
				// Create link for path ModelHasSetConstraint.SetConstraintCollection
				this.SetConstraintCollection.Add(sourceSetConstraint1);

				return;
			}

			global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint sourceSetComparisonConstraint2 = sourceElement as global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint;
			if (sourceSetComparisonConstraint2 != null)
			{
				// Create link for path ModelHasSetComparisonConstraint.SetComparisonConstraintCollection
				this.SetComparisonConstraintCollection.Add(sourceSetComparisonConstraint2);

				return;
			}

			global::Neumont.Tools.ORM.ObjectModel.ModelNote sourceModelNote3 = sourceElement as global::Neumont.Tools.ORM.ObjectModel.ModelNote;
			if (sourceModelNote3 != null)
			{
				// Create link for path ModelHasModelNote.NoteCollection
				this.NoteCollection.Add(sourceModelNote3);

				return;
			}

			global::Neumont.Tools.ORM.ObjectModel.ObjectType sourceObjectType4 = sourceElement as global::Neumont.Tools.ORM.ObjectModel.ObjectType;
			if (sourceObjectType4 != null)
			{

				// Call custom method implemented in partial class
				this.MergeRelateObjectType(sourceElement, elementGroup);
				return;
			}

			global::Neumont.Tools.ORM.ObjectModel.FactType sourceFactType5 = sourceElement as global::Neumont.Tools.ORM.ObjectModel.FactType;
			if (sourceFactType5 != null)
			{
				// Create link for path ModelHasFactType.FactTypeCollection
				this.FactTypeCollection.Add(sourceFactType5);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}

		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");

			global::Neumont.Tools.ORM.ObjectModel.SetConstraint sourceSetConstraint1 = sourceElement as global::Neumont.Tools.ORM.ObjectModel.SetConstraint;
			if (sourceSetConstraint1 != null)
			{
				// Delete link for path ModelHasSetConstraint.SetConstraintCollection

				foreach (DslModeling::ElementLink link in global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.GetLinks((global::Neumont.Tools.ORM.ObjectModel.ORMModel)this, sourceSetConstraint1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.ModelDomainRoleId, global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.SetConstraintDomainRoleId);
				}

				return;
			}

			global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint sourceSetComparisonConstraint2 = sourceElement as global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint;
			if (sourceSetComparisonConstraint2 != null)
			{
				// Delete link for path ModelHasSetComparisonConstraint.SetComparisonConstraintCollection

				foreach (DslModeling::ElementLink link in global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.GetLinks((global::Neumont.Tools.ORM.ObjectModel.ORMModel)this, sourceSetComparisonConstraint2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.ModelDomainRoleId, global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintDomainRoleId);
				}

				return;
			}

			global::Neumont.Tools.ORM.ObjectModel.ModelNote sourceModelNote3 = sourceElement as global::Neumont.Tools.ORM.ObjectModel.ModelNote;
			if (sourceModelNote3 != null)
			{
				// Delete link for path ModelHasModelNote.NoteCollection

				foreach (DslModeling::ElementLink link in global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote.GetLinks((global::Neumont.Tools.ORM.ObjectModel.ORMModel)this, sourceModelNote3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote.ModelDomainRoleId, global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote.NoteDomainRoleId);
				}

				return;
			}

			global::Neumont.Tools.ORM.ObjectModel.ObjectType sourceObjectType4 = sourceElement as global::Neumont.Tools.ORM.ObjectModel.ObjectType;
			if (sourceObjectType4 != null)
			{

				// Call custom method implemented in partial class
				this.MergeDisconnectObjectType(sourceElement);
				return;
			}

			global::Neumont.Tools.ORM.ObjectModel.FactType sourceFactType5 = sourceElement as global::Neumont.Tools.ORM.ObjectModel.FactType;
			if (sourceFactType5 != null)
			{
				// Delete link for path ModelHasFactType.FactTypeCollection

				foreach (DslModeling::ElementLink link in global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType.GetLinks((global::Neumont.Tools.ORM.ObjectModel.ORMModel)this, sourceFactType5))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType.ModelDomainRoleId, global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ObjectType
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::Neumont.Tools.Modeling.Design.ElementTypeDescriptionProvider<ObjectType, Design.ObjectTypeTypeDescriptor<ObjectType>>))]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2fed415e-1786-4fbf-8556-a507f2f765fd")]
	public partial class ObjectType : ORMNamedElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2fed415e, 0x1786, 0x4fbf, 0x85, 0x56, 0xa5, 0x07, 0xf2, 0xf7, 0x65, 0xfd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsExternal domain property code

		/// <summary>
		/// IsExternal domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsExternalDomainPropertyId = new global::System.Guid(0xd03828fd, 0x1da7, 0x4804, 0xa1, 0x6b, 0xcc, 0x27, 0xf2, 0x04, 0x6f, 0x57);

		/// <summary>
		/// Storage for IsExternal
		/// </summary>
		private global::System.Boolean isExternalPropertyStorage;

		/// <summary>
		/// Gets or sets the value of IsExternal domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectType.IsExternal
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectType/IsExternal.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectType/IsExternal.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("d03828fd-1da7-4804-a16b-cc27f2046f57")]
		public global::System.Boolean IsExternal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isExternalPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsExternalPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.IsExternal domain property.
		/// </summary>
		internal sealed partial class IsExternalPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Boolean>
		{
			private IsExternalPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ObjectType.IsExternal domain property value handler.
			/// </summary>
			public static readonly IsExternalPropertyHandler Instance = new IsExternalPropertyHandler();

			/// <summary>
			/// Gets the Id of the ObjectType.IsExternal domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsExternalDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isExternalPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isExternalPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region NoteText domain property code

		/// <summary>
		/// NoteText domain property Id.
		/// </summary>
		public static readonly global::System.Guid NoteTextDomainPropertyId = new global::System.Guid(0x17c4e23d, 0xca49, 0x4329, 0x98, 0x2f, 0x48, 0xf4, 0xef, 0xca, 0x23, 0xbd);

		/// <summary>
		/// Gets or sets the value of NoteText domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectType.Note
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::Neumont.Tools.Modeling.Design.MultilineTextEditor<global::Neumont.Tools.ORM.ObjectModel.Note>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectType/NoteText.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectType/NoteText.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("17c4e23d-ca49-4329-982f-48f4efca23bd")]
		public global::System.String NoteText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NoteTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NoteTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.NoteText domain property.
		/// </summary>
		internal sealed partial class NoteTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.String>
		{
			private NoteTextPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ObjectType.NoteText domain property value handler.
			/// </summary>
			public static readonly NoteTextPropertyHandler Instance = new NoteTextPropertyHandler();

			/// <summary>
			/// Gets the Id of the ObjectType.NoteText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NoteTextDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NoteText because its Kind is
				// set to CustomStorage. Please provide the GetNoteTextValue()
				// method on the domain class.
				return element.GetNoteTextValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NoteText because its Kind is
					// set to CustomStorage. Please provide the SetNoteTextValue()
					// method on the domain class.
					element.SetNoteTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region IsIndependent domain property code

		/// <summary>
		/// IsIndependent domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsIndependentDomainPropertyId = new global::System.Guid(0xd52257ef, 0xd76a, 0x404d, 0xaa, 0xc5, 0x74, 0x50, 0xba, 0x5c, 0xc7, 0x90);

		/// <summary>
		/// Storage for IsIndependent
		/// </summary>
		private global::System.Boolean isIndependentPropertyStorage;

		/// <summary>
		/// Gets or sets the value of IsIndependent domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectType.IsIndependent
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectType/IsIndependent.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectType/IsIndependent.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("d52257ef-d76a-404d-aac5-7450ba5cc790")]
		public global::System.Boolean IsIndependent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isIndependentPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsIndependentPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.IsIndependent domain property.
		/// </summary>
		internal sealed partial class IsIndependentPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Boolean>
		{
			private IsIndependentPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ObjectType.IsIndependent domain property value handler.
			/// </summary>
			public static readonly IsIndependentPropertyHandler Instance = new IsIndependentPropertyHandler();

			/// <summary>
			/// Gets the Id of the ObjectType.IsIndependent domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsIndependentDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isIndependentPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isIndependentPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region IsValueType domain property code

		/// <summary>
		/// IsValueType domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsValueTypeDomainPropertyId = new global::System.Guid(0xf63acb94, 0x8526, 0x432e, 0x96, 0x4c, 0x3b, 0x44, 0x41, 0x19, 0x57, 0x54);

		/// <summary>
		/// Gets or sets the value of IsValueType domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectType.IsValueType
		/// </summary>
		[global::System.ComponentModel.RefreshProperties(global::System.ComponentModel.RefreshProperties.All)]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectType/IsValueType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectType/IsValueType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("f63acb94-8526-432e-964c-3b4441195754")]
		public global::System.Boolean IsValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsValueTypePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsValueTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.IsValueType domain property.
		/// </summary>
		internal sealed partial class IsValueTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Boolean>
		{
			private IsValueTypePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ObjectType.IsValueType domain property value handler.
			/// </summary>
			public static readonly IsValueTypePropertyHandler Instance = new IsValueTypePropertyHandler();

			/// <summary>
			/// Gets the Id of the ObjectType.IsValueType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsValueTypeDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsValueType because its Kind is
				// set to CustomStorage. Please provide the GetIsValueTypeValue()
				// method on the domain class.
				return element.GetIsValueTypeValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IsValueType because its Kind is
					// set to CustomStorage. Please provide the SetIsValueTypeValue()
					// method on the domain class.
					element.SetIsValueTypeValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region Scale domain property code

		/// <summary>
		/// Scale domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScaleDomainPropertyId = new global::System.Guid(0xbd2d708a, 0x7687, 0x4218, 0x94, 0xbc, 0x05, 0x83, 0x4a, 0xfa, 0xc8, 0x69);

		/// <summary>
		/// Gets or sets the value of Scale domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectType.Scale
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectType/Scale.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectType/Scale.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("bd2d708a-7687-4218-94bc-05834afac869")]
		public global::System.Int32 Scale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ScalePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.Scale domain property.
		/// </summary>
		internal sealed partial class ScalePropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Int32>
		{
			private ScalePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ObjectType.Scale domain property value handler.
			/// </summary>
			public static readonly ScalePropertyHandler Instance = new ScalePropertyHandler();

			/// <summary>
			/// Gets the Id of the ObjectType.Scale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScaleDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Scale because its Kind is
				// set to CustomStorage. Please provide the GetScaleValue()
				// method on the domain class.
				return element.GetScaleValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Scale because its Kind is
					// set to CustomStorage. Please provide the SetScaleValue()
					// method on the domain class.
					element.SetScaleValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region Length domain property code

		/// <summary>
		/// Length domain property Id.
		/// </summary>
		public static readonly global::System.Guid LengthDomainPropertyId = new global::System.Guid(0xc9b01797, 0x2ca1, 0x4ff8, 0x86, 0x5a, 0xfd, 0xa0, 0xdd, 0xf3, 0x3f, 0x8d);

		/// <summary>
		/// Gets or sets the value of Length domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectType.Length
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectType/Length.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectType/Length.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("c9b01797-2ca1-4ff8-865a-fda0ddf33f8d")]
		public global::System.Int32 Length
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return LengthPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.Length domain property.
		/// </summary>
		internal sealed partial class LengthPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Int32>
		{
			private LengthPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ObjectType.Length domain property value handler.
			/// </summary>
			public static readonly LengthPropertyHandler Instance = new LengthPropertyHandler();

			/// <summary>
			/// Gets the Id of the ObjectType.Length domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LengthDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Length because its Kind is
				// set to CustomStorage. Please provide the GetLengthValue()
				// method on the domain class.
				return element.GetLengthValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Length because its Kind is
					// set to CustomStorage. Please provide the SetLengthValue()
					// method on the domain class.
					element.SetLengthValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region ReferenceModeDisplay domain property code

		/// <summary>
		/// ReferenceModeDisplay domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceModeDisplayDomainPropertyId = new global::System.Guid(0x2e56d25a, 0xbd96, 0x4478, 0xa5, 0x5c, 0x9f, 0x17, 0xa1, 0x5c, 0x94, 0xb6);

		/// <summary>
		/// Gets or sets the value of ReferenceModeDisplay domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectType.RefMode
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::Neumont.Tools.ORM.ObjectModel.Design.ReferenceModePicker), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.TypeConverter(typeof(global::Neumont.Tools.ORM.ObjectModel.Design.ReferenceModeConverter))]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectType/ReferenceModeDisplay.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectType/ReferenceModeDisplay.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("2e56d25a-bd96-4478-a55c-9f17a15c94b6")]
		public global::System.Object ReferenceModeDisplay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ReferenceModeDisplayPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReferenceModeDisplayPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.ReferenceModeDisplay domain property.
		/// </summary>
		internal sealed partial class ReferenceModeDisplayPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Object>
		{
			private ReferenceModeDisplayPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ObjectType.ReferenceModeDisplay domain property value handler.
			/// </summary>
			public static readonly ReferenceModeDisplayPropertyHandler Instance = new ReferenceModeDisplayPropertyHandler();

			/// <summary>
			/// Gets the Id of the ObjectType.ReferenceModeDisplay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReferenceModeDisplayDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Object GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ReferenceModeDisplay because its Kind is
				// set to CustomStorage. Please provide the GetReferenceModeDisplayValue()
				// method on the domain class.
				return element.GetReferenceModeDisplayValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Object newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Object oldValue = GetValue(element);
				// Don't use != with object properties
				if (!global::System.Object.Equals(newValue, oldValue))
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ReferenceModeDisplay because its Kind is
					// set to CustomStorage. Please provide the SetReferenceModeDisplayValue()
					// method on the domain class.
					element.SetReferenceModeDisplayValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region ReferenceModeString domain property code

		/// <summary>
		/// ReferenceModeString domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceModeStringDomainPropertyId = new global::System.Guid(0xce61c7ad, 0xb177, 0x4c56, 0x88, 0x43, 0x14, 0x9c, 0x01, 0x43, 0x9d, 0x25);

		/// <summary>
		/// Gets or sets the value of ReferenceModeString domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectType.ReferenceModeString
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectType/ReferenceModeString.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectType/ReferenceModeString.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("ce61c7ad-b177-4c56-8843-149c01439d25")]
		public global::System.String ReferenceModeString
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ReferenceModeStringPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReferenceModeStringPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.ReferenceModeString domain property.
		/// </summary>
		internal sealed partial class ReferenceModeStringPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.String>
		{
			private ReferenceModeStringPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ObjectType.ReferenceModeString domain property value handler.
			/// </summary>
			public static readonly ReferenceModeStringPropertyHandler Instance = new ReferenceModeStringPropertyHandler();

			/// <summary>
			/// Gets the Id of the ObjectType.ReferenceModeString domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReferenceModeStringDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ReferenceModeString because its Kind is
				// set to CustomStorage. Please provide the GetReferenceModeStringValue()
				// method on the domain class.
				return element.GetReferenceModeStringValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ReferenceModeString because its Kind is
					// set to CustomStorage. Please provide the SetReferenceModeStringValue()
					// method on the domain class.
					element.SetReferenceModeStringValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region ReferenceMode domain property code

		/// <summary>
		/// ReferenceMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceModeDomainPropertyId = new global::System.Guid(0xe2049ba3, 0xf50d, 0x4e1c, 0x9a, 0xbd, 0x8a, 0x7e, 0xbe, 0xcf, 0xed, 0xf5);

		/// <summary>
		/// Gets or sets the value of ReferenceMode domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectType.ReferenceMode
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectType/ReferenceMode.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectType/ReferenceMode.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("e2049ba3-f50d-4e1c-9abd-8a7ebecfedf5")]
		public ReferenceMode ReferenceMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ReferenceModePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReferenceModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.ReferenceMode domain property.
		/// </summary>
		internal sealed partial class ReferenceModePropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, ReferenceMode>
		{
			private ReferenceModePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ObjectType.ReferenceMode domain property value handler.
			/// </summary>
			public static readonly ReferenceModePropertyHandler Instance = new ReferenceModePropertyHandler();

			/// <summary>
			/// Gets the Id of the ObjectType.ReferenceMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReferenceModeDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ReferenceMode GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ReferenceMode because its Kind is
				// set to CustomStorage. Please provide the GetReferenceModeValue()
				// method on the domain class.
				return element.GetReferenceModeValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, ReferenceMode newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				ReferenceMode oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ReferenceMode because its Kind is
					// set to CustomStorage. Please provide the SetReferenceModeValue()
					// method on the domain class.
					element.SetReferenceModeValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region DataTypeDisplay domain property code

		/// <summary>
		/// DataTypeDisplay domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDisplayDomainPropertyId = new global::System.Guid(0x3e8893a7, 0x5985, 0x4200, 0xa5, 0x95, 0xcb, 0x1e, 0x9e, 0xc9, 0xad, 0xa7);

		/// <summary>
		/// Gets or sets the value of DataTypeDisplay domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectType.DataType
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::Neumont.Tools.ORM.ObjectModel.Design.DataTypePicker), typeof(global::System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectType/DataTypeDisplay.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectType/DataTypeDisplay.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("3e8893a7-5985-4200-a595-cb1e9ec9ada7")]
		public DataType DataTypeDisplay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DataTypeDisplayPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypeDisplayPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.DataTypeDisplay domain property.
		/// </summary>
		internal sealed partial class DataTypeDisplayPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, DataType>
		{
			private DataTypeDisplayPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ObjectType.DataTypeDisplay domain property value handler.
			/// </summary>
			public static readonly DataTypeDisplayPropertyHandler Instance = new DataTypeDisplayPropertyHandler();

			/// <summary>
			/// Gets the Id of the ObjectType.DataTypeDisplay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeDisplayDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DataType GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DataTypeDisplay because its Kind is
				// set to CustomStorage. Please provide the GetDataTypeDisplayValue()
				// method on the domain class.
				return element.GetDataTypeDisplayValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, DataType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				DataType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DataTypeDisplay because its Kind is
					// set to CustomStorage. Please provide the SetDataTypeDisplayValue()
					// method on the domain class.
					element.SetDataTypeDisplayValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region ValueRangeText domain property code

		/// <summary>
		/// ValueRangeText domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueRangeTextDomainPropertyId = new global::System.Guid(0xf0662c59, 0x700b, 0x435c, 0xb5, 0x7b, 0x93, 0xe5, 0xfd, 0x84, 0xb7, 0x1f);

		/// <summary>
		/// Gets or sets the value of ValueRangeText domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectType.ValueRange
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectType/ValueRangeText.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectType/ValueRangeText.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("f0662c59-700b-435c-b57b-93e5fd84b71f")]
		public global::System.String ValueRangeText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ValueRangeTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValueRangeTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.ValueRangeText domain property.
		/// </summary>
		internal sealed partial class ValueRangeTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.String>
		{
			private ValueRangeTextPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ObjectType.ValueRangeText domain property value handler.
			/// </summary>
			public static readonly ValueRangeTextPropertyHandler Instance = new ValueRangeTextPropertyHandler();

			/// <summary>
			/// Gets the Id of the ObjectType.ValueRangeText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueRangeTextDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ValueRangeText because its Kind is
				// set to CustomStorage. Please provide the GetValueRangeTextValue()
				// method on the domain class.
				return element.GetValueRangeTextValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ValueRangeText because its Kind is
					// set to CustomStorage. Please provide the SetValueRangeTextValue()
					// method on the domain class.
					element.SetValueRangeTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region ValueTypeValueRangeText domain property code

		/// <summary>
		/// ValueTypeValueRangeText domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeValueRangeTextDomainPropertyId = new global::System.Guid(0x6ebe45bb, 0x1054, 0x4785, 0x8c, 0x9d, 0x90, 0x5a, 0x41, 0x59, 0x9e, 0xf9);

		/// <summary>
		/// Gets or sets the value of ValueTypeValueRangeText domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectType.ValueTypeValueRange
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectType/ValueTypeValueRangeText.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectType/ValueTypeValueRangeText.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("6ebe45bb-1054-4785-8c9d-905a41599ef9")]
		public global::System.String ValueTypeValueRangeText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ValueTypeValueRangeTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValueTypeValueRangeTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.ValueTypeValueRangeText domain property.
		/// </summary>
		internal sealed partial class ValueTypeValueRangeTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.String>
		{
			private ValueTypeValueRangeTextPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ObjectType.ValueTypeValueRangeText domain property value handler.
			/// </summary>
			public static readonly ValueTypeValueRangeTextPropertyHandler Instance = new ValueTypeValueRangeTextPropertyHandler();

			/// <summary>
			/// Gets the Id of the ObjectType.ValueTypeValueRangeText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueTypeValueRangeTextDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ValueTypeValueRangeText because its Kind is
				// set to CustomStorage. Please provide the GetValueTypeValueRangeTextValue()
				// method on the domain class.
				return element.GetValueTypeValueRangeTextValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ValueTypeValueRangeText because its Kind is
					// set to CustomStorage. Please provide the SetValueTypeValueRangeTextValue()
					// method on the domain class.
					element.SetValueTypeValueRangeTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region IsPersonal domain property code

		/// <summary>
		/// IsPersonal domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPersonalDomainPropertyId = new global::System.Guid(0xef9ae461, 0x4327, 0x46dc, 0x8f, 0xe0, 0xd1, 0x38, 0x8f, 0x06, 0x1b, 0x30);

		/// <summary>
		/// Storage for IsPersonal
		/// </summary>
		private global::System.Boolean isPersonalPropertyStorage;

		/// <summary>
		/// Gets or sets the value of IsPersonal domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectType.IsPersonal
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectType/IsPersonal.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectType/IsPersonal.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("ef9ae461-4327-46dc-8fe0-d1388f061b30")]
		public global::System.Boolean IsPersonal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPersonalPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPersonalPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.IsPersonal domain property.
		/// </summary>
		internal sealed partial class IsPersonalPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Boolean>
		{
			private IsPersonalPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ObjectType.IsPersonal domain property value handler.
			/// </summary>
			public static readonly IsPersonalPropertyHandler Instance = new IsPersonalPropertyHandler();

			/// <summary>
			/// Gets the Id of the ObjectType.IsPersonal domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPersonalDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isPersonalPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPersonalPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region IsImplicitBooleanValue domain property code

		/// <summary>
		/// IsImplicitBooleanValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsImplicitBooleanValueDomainPropertyId = new global::System.Guid(0xae665fcf, 0xb90a, 0x41bd, 0xb3, 0xe9, 0x86, 0x11, 0xb4, 0x2e, 0x66, 0x8c);

		/// <summary>
		/// Storage for IsImplicitBooleanValue
		/// </summary>
		private global::System.Boolean isImplicitBooleanValuePropertyStorage;

		/// <summary>
		/// Gets or sets the value of IsImplicitBooleanValue domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectType.IsImplicitBooleanValue
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectType/IsImplicitBooleanValue.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectType/IsImplicitBooleanValue.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("ae665fcf-b90a-41bd-b3e9-8611b42e668c")]
		public global::System.Boolean IsImplicitBooleanValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isImplicitBooleanValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsImplicitBooleanValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.IsImplicitBooleanValue domain property.
		/// </summary>
		internal sealed partial class IsImplicitBooleanValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Boolean>
		{
			private IsImplicitBooleanValuePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ObjectType.IsImplicitBooleanValue domain property value handler.
			/// </summary>
			public static readonly IsImplicitBooleanValuePropertyHandler Instance = new IsImplicitBooleanValuePropertyHandler();

			/// <summary>
			/// Gets the Id of the ObjectType.IsImplicitBooleanValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsImplicitBooleanValueDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isImplicitBooleanValuePropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isImplicitBooleanValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region DataType opposite domain role accessor
		/// <summary>
		/// Gets or sets DataType.
		/// Description for Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueType
		/// </summary>
		public virtual DataType DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeDomainRoleId) as DataType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.ValueTypeDomainRoleId, value);
			}
		}
		#endregion
		#region NestedFactType opposite domain role accessor
		/// <summary>
		/// Gets or sets NestedFactType.
		/// Description for Neumont.Tools.ORM.ObjectModel.Objectification.NestingType
		/// </summary>
		public virtual FactType NestedFactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.Objectification.NestingTypeDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.Objectification.NestedFactTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.Objectification.NestedFactTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.Objectification.NestingTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region PlayedRoleCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of PlayedRoleCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Role> PlayedRoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Role>(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.RolePlayerDomainRoleId);
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectType
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasObjectType.ObjectTypeDomainRoleId, value);
			}
		}
		#endregion
		#region DuplicateNameError opposite domain role accessor
		/// <summary>
		/// Gets or sets DuplicateNameError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectType
		/// </summary>
		public virtual ObjectTypeDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeDomainRoleId) as ObjectTypeDuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeDomainRoleId, value);
			}
		}
		#endregion
		#region PreferredIdentifier opposite domain role accessor
		/// <summary>
		/// Gets or sets PreferredIdentifier.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierFor
		/// </summary>
		public virtual UniquenessConstraint PreferredIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId) as UniquenessConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ValueConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueType
		/// </summary>
		public virtual ValueTypeValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueTypeDomainRoleId) as ValueTypeValueConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ReferenceSchemeError opposite domain role accessor
		/// <summary>
		/// Gets or sets ReferenceSchemeError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectType
		/// </summary>
		public virtual EntityTypeRequiresReferenceSchemeError ReferenceSchemeError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId) as EntityTypeRequiresReferenceSchemeError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ObjectTypeRequiresPrimarySupertypeError opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectTypeRequiresPrimarySupertypeError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectType
		/// </summary>
		public virtual ObjectTypeRequiresPrimarySupertypeError ObjectTypeRequiresPrimarySupertypeError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeDomainRoleId) as ObjectTypeRequiresPrimarySupertypeError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Note opposite domain role accessor
		/// <summary>
		/// Gets or sets Note.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectType
		/// </summary>
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectTypeDomainRoleId) as Note;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.NoteDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.NoteDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ModelNoteCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ModelNoteCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType.Element
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelNote> ModelNoteCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelNote>(this, global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType.ElementDomainRoleId);
			}
		}
		#endregion
		#region CompatibleSupertypesError opposite domain role accessor
		/// <summary>
		/// Gets or sets CompatibleSupertypesError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectType
		/// </summary>
		public virtual CompatibleSupertypesError CompatibleSupertypesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId) as CompatibleSupertypesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region PreferredIdentifierRequiresMandatoryError opposite domain role accessor
		/// <summary>
		/// Gets or sets PreferredIdentifierRequiresMandatoryError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectType
		/// </summary>
		public virtual PreferredIdentifierRequiresMandatoryError PreferredIdentifierRequiresMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId) as PreferredIdentifierRequiresMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region EntityTypeInstanceCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of EntityTypeInstanceCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance.EntityType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntityTypeInstance> EntityTypeInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<EntityTypeInstance>(this, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeDomainRoleId);
			}
		}
		#endregion
		#region ValueTypeInstanceCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ValueTypeInstanceCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance.ValueType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ValueTypeInstance> ValueTypeInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ValueTypeInstance>(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass FactType
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::Neumont.Tools.Modeling.Design.ElementTypeDescriptionProvider<FactType, Design.FactTypeTypeDescriptor<FactType>>))]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {Name})")]
	[DslModeling::DomainObjectId("723a2b28-6cda-4185-b597-87866e257265")]
	public partial class FactType : ORMModelElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// FactType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x723a2b28, 0x6cda, 0x4185, 0xb5, 0x97, 0x87, 0x86, 0x6e, 0x25, 0x72, 0x65);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsExternal domain property code

		/// <summary>
		/// IsExternal domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsExternalDomainPropertyId = new global::System.Guid(0x67ea8c95, 0xfd9a, 0x473b, 0x8a, 0xa2, 0xe3, 0x5f, 0xcd, 0xd6, 0x83, 0x61);

		/// <summary>
		/// Storage for IsExternal
		/// </summary>
		private global::System.Boolean isExternalPropertyStorage;

		/// <summary>
		/// Gets or sets the value of IsExternal domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.FactType.IsExternal
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactType/IsExternal.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactType/IsExternal.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("67ea8c95-fd9a-473b-8aa2-e35fcdd68361")]
		public global::System.Boolean IsExternal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isExternalPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsExternalPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactType.IsExternal domain property.
		/// </summary>
		internal sealed partial class IsExternalPropertyHandler : DslModeling::DomainPropertyValueHandler<FactType, global::System.Boolean>
		{
			private IsExternalPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the FactType.IsExternal domain property value handler.
			/// </summary>
			public static readonly IsExternalPropertyHandler Instance = new IsExternalPropertyHandler();

			/// <summary>
			/// Gets the Id of the FactType.IsExternal domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsExternalDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FactType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isExternalPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isExternalPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region NoteText domain property code

		/// <summary>
		/// NoteText domain property Id.
		/// </summary>
		public static readonly global::System.Guid NoteTextDomainPropertyId = new global::System.Guid(0xaf6200b1, 0x068d, 0x434a, 0x98, 0xd3, 0x44, 0xe8, 0x72, 0xb9, 0x21, 0xbd);

		/// <summary>
		/// Gets or sets the value of NoteText domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.FactType.Note
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::Neumont.Tools.Modeling.Design.MultilineTextEditor<global::Neumont.Tools.ORM.ObjectModel.Note>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactType/NoteText.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactType/NoteText.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("af6200b1-068d-434a-98d3-44e872b921bd")]
		public global::System.String NoteText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NoteTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NoteTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactType.NoteText domain property.
		/// </summary>
		internal sealed partial class NoteTextPropertyHandler : DslModeling::DomainPropertyValueHandler<FactType, global::System.String>
		{
			private NoteTextPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the FactType.NoteText domain property value handler.
			/// </summary>
			public static readonly NoteTextPropertyHandler Instance = new NoteTextPropertyHandler();

			/// <summary>
			/// Gets the Id of the FactType.NoteText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NoteTextDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FactType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NoteText because its Kind is
				// set to CustomStorage. Please provide the GetNoteTextValue()
				// method on the domain class.
				return element.GetNoteTextValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NoteText because its Kind is
					// set to CustomStorage. Please provide the SetNoteTextValue()
					// method on the domain class.
					element.SetNoteTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region Name domain property code

		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xb17f5e42, 0xa0fa, 0x4b88, 0x9d, 0x24, 0xd1, 0x48, 0xce, 0xee, 0x7d, 0xb0);

		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.FactType.Name
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactType/Name.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactType/Name.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("b17f5e42-a0fa-4b88-9d24-d148ceee7db0")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactType.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<FactType, global::System.String>
		{
			private NamePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the FactType.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();

			/// <summary>
			/// Gets the Id of the FactType.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FactType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Name because its Kind is
				// set to CustomStorage. Please provide the GetNameValue()
				// method on the domain class.
				return element.GetNameValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Name because its Kind is
					// set to CustomStorage. Please provide the SetNameValue()
					// method on the domain class.
					element.SetNameValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region GeneratedName domain property code

		/// <summary>
		/// GeneratedName domain property Id.
		/// </summary>
		public static readonly global::System.Guid GeneratedNameDomainPropertyId = new global::System.Guid(0xf6fc3149, 0x2ed8, 0x458d, 0xa2, 0x9c, 0xfd, 0x64, 0x0a, 0x81, 0x0a, 0x79);

		/// <summary>
		/// Gets or sets the value of GeneratedName domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.FactType.GeneratedName
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactType/GeneratedName.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactType/GeneratedName.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("f6fc3149-2ed8-458d-a29c-fd640a810a79")]
		private global::System.String GeneratedName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GeneratedNamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GeneratedNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactType.GeneratedName domain property.
		/// </summary>
		internal sealed partial class GeneratedNamePropertyHandler : DslModeling::DomainPropertyValueHandler<FactType, global::System.String>
		{
			private GeneratedNamePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the FactType.GeneratedName domain property value handler.
			/// </summary>
			public static readonly GeneratedNamePropertyHandler Instance = new GeneratedNamePropertyHandler();

			/// <summary>
			/// Gets the Id of the FactType.GeneratedName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GeneratedNameDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FactType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for GeneratedName because its Kind is
				// set to CustomStorage. Please provide the GetGeneratedNameValue()
				// method on the domain class.
				return element.GetGeneratedNameValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for GeneratedName because its Kind is
					// set to CustomStorage. Please provide the SetGeneratedNameValue()
					// method on the domain class.
					element.SetGeneratedNameValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region NameChanged domain property code

		/// <summary>
		/// NameChanged domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameChangedDomainPropertyId = new global::System.Guid(0x20a75b4b, 0x69d4, 0x4d1b, 0xbe, 0xb5, 0x9b, 0x0d, 0x66, 0xfd, 0xb1, 0xf3);

		/// <summary>
		/// Gets or sets the value of NameChanged domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.FactType.NameChanged
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactType/NameChanged.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactType/NameChanged.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("20a75b4b-69d4-4d1b-beb5-9b0d66fdb1f3")]
		public global::System.Int64 NameChanged
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NameChangedPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NameChangedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactType.NameChanged domain property.
		/// </summary>
		internal sealed partial class NameChangedPropertyHandler : DslModeling::DomainPropertyValueHandler<FactType, global::System.Int64>
		{
			private NameChangedPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the FactType.NameChanged domain property value handler.
			/// </summary>
			public static readonly NameChangedPropertyHandler Instance = new NameChangedPropertyHandler();

			/// <summary>
			/// Gets the Id of the FactType.NameChanged domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameChangedDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int64 GetValue(FactType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NameChanged because its Kind is
				// set to CustomStorage. Please provide the GetNameChangedValue()
				// method on the domain class.
				return element.GetNameChangedValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactType element, global::System.Int64 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Int64 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NameChanged because its Kind is
					// set to CustomStorage. Please provide the SetNameChangedValue()
					// method on the domain class.
					element.SetNameChangedValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region DerivationRuleDisplay domain property code

		/// <summary>
		/// DerivationRuleDisplay domain property Id.
		/// </summary>
		public static readonly global::System.Guid DerivationRuleDisplayDomainPropertyId = new global::System.Guid(0x7af5c436, 0xc28a, 0x49ba, 0xb8, 0xe0, 0x05, 0xc4, 0x09, 0xb6, 0x73, 0x58);

		/// <summary>
		/// Gets or sets the value of DerivationRuleDisplay domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.FactType.DerivationRule
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::Neumont.Tools.ORM.ObjectModel.Design.DerivationRuleEditor), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactType/DerivationRuleDisplay.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactType/DerivationRuleDisplay.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("7af5c436-c28a-49ba-b8e0-05c409b67358")]
		public global::System.String DerivationRuleDisplay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DerivationRuleDisplayPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DerivationRuleDisplayPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactType.DerivationRuleDisplay domain property.
		/// </summary>
		internal sealed partial class DerivationRuleDisplayPropertyHandler : DslModeling::DomainPropertyValueHandler<FactType, global::System.String>
		{
			private DerivationRuleDisplayPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the FactType.DerivationRuleDisplay domain property value handler.
			/// </summary>
			public static readonly DerivationRuleDisplayPropertyHandler Instance = new DerivationRuleDisplayPropertyHandler();

			/// <summary>
			/// Gets the Id of the FactType.DerivationRuleDisplay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DerivationRuleDisplayDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FactType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DerivationRuleDisplay because its Kind is
				// set to CustomStorage. Please provide the GetDerivationRuleDisplayValue()
				// method on the domain class.
				return element.GetDerivationRuleDisplayValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DerivationRuleDisplay because its Kind is
					// set to CustomStorage. Please provide the SetDerivationRuleDisplayValue()
					// method on the domain class.
					element.SetDerivationRuleDisplayValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region DerivationStorageDisplay domain property code

		/// <summary>
		/// DerivationStorageDisplay domain property Id.
		/// </summary>
		public static readonly global::System.Guid DerivationStorageDisplayDomainPropertyId = new global::System.Guid(0x307c9629, 0xace8, 0x43e1, 0xab, 0xf3, 0x33, 0xe8, 0xbb, 0x71, 0x46, 0xb7);

		/// <summary>
		/// Gets or sets the value of DerivationStorageDisplay domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.FactType.DerivationStorage
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactType/DerivationStorageDisplay.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactType/DerivationStorageDisplay.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("307c9629-ace8-43e1-abf3-33e8bb7146b7")]
		public DerivationStorageType DerivationStorageDisplay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DerivationStorageDisplayPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DerivationStorageDisplayPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactType.DerivationStorageDisplay domain property.
		/// </summary>
		internal sealed partial class DerivationStorageDisplayPropertyHandler : DslModeling::DomainPropertyValueHandler<FactType, DerivationStorageType>
		{
			private DerivationStorageDisplayPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the FactType.DerivationStorageDisplay domain property value handler.
			/// </summary>
			public static readonly DerivationStorageDisplayPropertyHandler Instance = new DerivationStorageDisplayPropertyHandler();

			/// <summary>
			/// Gets the Id of the FactType.DerivationStorageDisplay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DerivationStorageDisplayDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DerivationStorageType GetValue(FactType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DerivationStorageDisplay because its Kind is
				// set to CustomStorage. Please provide the GetDerivationStorageDisplayValue()
				// method on the domain class.
				return element.GetDerivationStorageDisplayValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactType element, DerivationStorageType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				DerivationStorageType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DerivationStorageDisplay because its Kind is
					// set to CustomStorage. Please provide the SetDerivationStorageDisplayValue()
					// method on the domain class.
					element.SetDerivationStorageDisplayValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region SetComparisonConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.FactType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SetComparisonConstraint> SetComparisonConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<SetComparisonConstraint>(this, global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.FactTypeDomainRoleId);
			}
		}
		#endregion
		#region SetConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of SetConstraintCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.FactSetConstraint.FactType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SetConstraint> SetConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<SetConstraint>(this, global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint.FactTypeDomainRoleId);
			}
		}
		#endregion
		#region NestingType opposite domain role accessor
		/// <summary>
		/// Gets or sets NestingType.
		/// Description for Neumont.Tools.ORM.ObjectModel.Objectification.NestedFactType
		/// </summary>
		public virtual ObjectType NestingType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.Objectification.NestedFactTypeDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.Objectification.NestingTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.Objectification.NestingTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.Objectification.NestedFactTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasFactType.FactType
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasFactType.FactTypeDomainRoleId, value);
			}
		}
		#endregion
		#region ReadingOrderCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ReadingOrderCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ReadingOrder> ReadingOrderCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ReadingOrder>(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.FactTypeDomainRoleId);
			}
		}
		#endregion
		#region ReadingRequiredError opposite domain role accessor
		/// <summary>
		/// Gets or sets ReadingRequiredError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactType
		/// </summary>
		public virtual FactTypeRequiresReadingError ReadingRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId) as FactTypeRequiresReadingError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region InternalUniquenessConstraintRequiredError opposite domain role accessor
		/// <summary>
		/// Gets or sets InternalUniquenessConstraintRequiredError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactType
		/// </summary>
		public virtual FactTypeRequiresInternalUniquenessConstraintError InternalUniquenessConstraintRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId) as FactTypeRequiresInternalUniquenessConstraintError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ImpliedByObjectification opposite domain role accessor
		/// <summary>
		/// Gets or sets ImpliedByObjectification.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedFactType
		/// </summary>
		public virtual Objectification ImpliedByObjectification
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeDomainRoleId) as Objectification;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeDomainRoleId, value);
			}
		}
		#endregion
		#region ImpliedInternalUniquenessConstraintError opposite domain role accessor
		/// <summary>
		/// Gets or sets ImpliedInternalUniquenessConstraintError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactType
		/// </summary>
		public virtual ImpliedInternalUniquenessConstraintError ImpliedInternalUniquenessConstraintError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId) as ImpliedInternalUniquenessConstraintError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FactType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FrequencyConstraintContradictsInternalUniquenessConstraintError> FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FrequencyConstraintContradictsInternalUniquenessConstraintError>(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FactTypeDomainRoleId);
			}
		}
		#endregion
		#region Note opposite domain role accessor
		/// <summary>
		/// Gets or sets Note.
		/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactType
		/// </summary>
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactTypeDomainRoleId) as Note;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.NoteDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.NoteDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ModelNoteCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ModelNoteCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType.Element
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelNote> ModelNoteCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelNote>(this, global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType.ElementDomainRoleId);
			}
		}
		#endregion
		#region RoleCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of RoleCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.FactType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RoleBase> RoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<RoleBase>(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.FactTypeDomainRoleId);
			}
		}
		#endregion
		#region DerivationRule opposite domain role accessor
		/// <summary>
		/// Gets or sets DerivationRule.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactType
		/// </summary>
		public virtual FactTypeDerivationExpression DerivationRule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactTypeDomainRoleId) as FactTypeDerivationExpression;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region FactTypeInstanceCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of FactTypeInstanceCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance.FactType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactTypeInstance> FactTypeInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FactTypeInstance>(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance.FactTypeDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass SubtypeFact
	/// Description for Neumont.Tools.ORM.ObjectModel.SubtypeFact
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::Neumont.Tools.Modeling.Design.ElementTypeDescriptionProvider<SubtypeFact, Design.SubtypeFactTypeDescriptor<SubtypeFact>>))]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SubtypeFact.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SubtypeFact.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7a957450-ad7e-4c29-af59-a10f8c8052cc")]
	public partial class SubtypeFact : FactType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// SubtypeFact domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7a957450, 0xad7e, 0x4c29, 0xaf, 0x59, 0xa1, 0x0f, 0x8c, 0x80, 0x52, 0xcc);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubtypeFact(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubtypeFact(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsPrimary domain property code

		/// <summary>
		/// IsPrimary domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPrimaryDomainPropertyId = new global::System.Guid(0x9a2a6585, 0x7caa, 0x41f9, 0x81, 0x17, 0x9f, 0x35, 0x7a, 0x6c, 0x36, 0x26);

		/// <summary>
		/// Storage for IsPrimary
		/// </summary>
		private global::System.Boolean isPrimaryPropertyStorage;

		/// <summary>
		/// Gets or sets the value of IsPrimary domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.SubtypeFact.IsPrimary
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SubtypeFact/IsPrimary.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SubtypeFact/IsPrimary.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("9a2a6585-7caa-41f9-8117-9f357a6c3626")]
		public global::System.Boolean IsPrimary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPrimaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPrimaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SubtypeFact.IsPrimary domain property.
		/// </summary>
		internal sealed partial class IsPrimaryPropertyHandler : DslModeling::DomainPropertyValueHandler<SubtypeFact, global::System.Boolean>
		{
			private IsPrimaryPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the SubtypeFact.IsPrimary domain property value handler.
			/// </summary>
			public static readonly IsPrimaryPropertyHandler Instance = new IsPrimaryPropertyHandler();

			/// <summary>
			/// Gets the Id of the SubtypeFact.IsPrimary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPrimaryDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(SubtypeFact element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isPrimaryPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SubtypeFact element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPrimaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass RoleBase
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleBase.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleBase.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("62293718-2f14-4a4c-88eb-0ba3aa6b7b91")]
	public abstract partial class RoleBase : ORMModelElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// RoleBase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x62293718, 0x2f14, 0x4a4c, 0x88, 0xeb, 0x0b, 0xa3, 0xaa, 0x6b, 0x7b, 0x91);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected RoleBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.Role
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.RoleDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasRole.RoleDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass RoleProxy
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleProxy.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleProxy.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ff552152-bd43-4731-8eda-675e68d6c5db")]
	public partial class RoleProxy : RoleBase
	{
		#region Constructors, domain class Id

		/// <summary>
		/// RoleProxy domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xff552152, 0xbd43, 0x4731, 0x8e, 0xda, 0x67, 0x5e, 0x68, 0xd6, 0xc5, 0xdb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RoleProxy(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RoleProxy(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TargetRole opposite domain role accessor
		/// <summary>
		/// Gets or sets TargetRole.
		/// Description for Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.Proxy
		/// </summary>
		public virtual Role TargetRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyDomainRoleId) as Role;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.TargetRoleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.TargetRoleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass Role
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::Neumont.Tools.Modeling.Design.ElementTypeDescriptionProvider<Role, Design.RoleTypeDescriptor<Role>>))]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Role.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Role.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("291feb71-371a-4b23-9ddc-61154a10a3d7")]
	public partial class Role : RoleBase
	{
		#region Constructors, domain class Id

		/// <summary>
		/// Role domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x291feb71, 0x371a, 0x4b23, 0x9d, 0xdc, 0x61, 0x15, 0x4a, 0x10, 0xa3, 0xd7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Role(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Role(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RolePlayerDisplay domain property code

		/// <summary>
		/// RolePlayerDisplay domain property Id.
		/// </summary>
		public static readonly global::System.Guid RolePlayerDisplayDomainPropertyId = new global::System.Guid(0xb66fca99, 0xe6ec, 0x46c9, 0xb4, 0x45, 0xd5, 0x49, 0xf6, 0xd7, 0xab, 0xe1);

		/// <summary>
		/// Gets or sets the value of RolePlayerDisplay domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.Role.RolePlayer
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::Neumont.Tools.ORM.ObjectModel.Design.RolePlayerPicker), typeof(global::System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Role/RolePlayerDisplay.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Role/RolePlayerDisplay.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("b66fca99-e6ec-46c9-b445-d549f6d7abe1")]
		public ObjectType RolePlayerDisplay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return RolePlayerDisplayPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RolePlayerDisplayPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Role.RolePlayerDisplay domain property.
		/// </summary>
		internal sealed partial class RolePlayerDisplayPropertyHandler : DslModeling::DomainPropertyValueHandler<Role, ObjectType>
		{
			private RolePlayerDisplayPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the Role.RolePlayerDisplay domain property value handler.
			/// </summary>
			public static readonly RolePlayerDisplayPropertyHandler Instance = new RolePlayerDisplayPropertyHandler();

			/// <summary>
			/// Gets the Id of the Role.RolePlayerDisplay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RolePlayerDisplayDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ObjectType GetValue(Role element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for RolePlayerDisplay because its Kind is
				// set to CustomStorage. Please provide the GetRolePlayerDisplayValue()
				// method on the domain class.
				return element.GetRolePlayerDisplayValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Role element, ObjectType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				ObjectType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for RolePlayerDisplay because its Kind is
					// set to CustomStorage. Please provide the SetRolePlayerDisplayValue()
					// method on the domain class.
					element.SetRolePlayerDisplayValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region IsMandatory domain property code

		/// <summary>
		/// IsMandatory domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsMandatoryDomainPropertyId = new global::System.Guid(0x0f5eed7e, 0x7584, 0x413a, 0x92, 0x50, 0xbd, 0x46, 0x24, 0xdc, 0x16, 0x4e);

		/// <summary>
		/// Gets or sets the value of IsMandatory domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.Role.IsMandatory
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Role/IsMandatory.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Role/IsMandatory.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("0f5eed7e-7584-413a-9250-bd4624dc164e")]
		public global::System.Boolean IsMandatory
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsMandatoryPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsMandatoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Role.IsMandatory domain property.
		/// </summary>
		internal sealed partial class IsMandatoryPropertyHandler : DslModeling::DomainPropertyValueHandler<Role, global::System.Boolean>
		{
			private IsMandatoryPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the Role.IsMandatory domain property value handler.
			/// </summary>
			public static readonly IsMandatoryPropertyHandler Instance = new IsMandatoryPropertyHandler();

			/// <summary>
			/// Gets the Id of the Role.IsMandatory domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsMandatoryDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Role element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsMandatory because its Kind is
				// set to CustomStorage. Please provide the GetIsMandatoryValue()
				// method on the domain class.
				return element.GetIsMandatoryValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Role element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IsMandatory because its Kind is
					// set to CustomStorage. Please provide the SetIsMandatoryValue()
					// method on the domain class.
					element.SetIsMandatoryValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region Multiplicity domain property code

		/// <summary>
		/// Multiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid MultiplicityDomainPropertyId = new global::System.Guid(0xada46024, 0x61b8, 0x4e1d, 0xbb, 0x28, 0x2f, 0xf2, 0xc7, 0x1b, 0x83, 0xcd);

		/// <summary>
		/// Gets or sets the value of Multiplicity domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.Role.Multiplicity
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Role/Multiplicity.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Role/Multiplicity.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Neumont.Tools.ORM.ObjectModel.RoleMultiplicity.Unspecified)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("ada46024-61b8-4e1d-bb28-2ff2c71b83cd")]
		public RoleMultiplicity Multiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return MultiplicityPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Role.Multiplicity domain property.
		/// </summary>
		internal sealed partial class MultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<Role, RoleMultiplicity>
		{
			private MultiplicityPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the Role.Multiplicity domain property value handler.
			/// </summary>
			public static readonly MultiplicityPropertyHandler Instance = new MultiplicityPropertyHandler();

			/// <summary>
			/// Gets the Id of the Role.Multiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MultiplicityDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed RoleMultiplicity GetValue(Role element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Multiplicity because its Kind is
				// set to CustomStorage. Please provide the GetMultiplicityValue()
				// method on the domain class.
				return element.GetMultiplicityValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Role element, RoleMultiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				RoleMultiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Multiplicity because its Kind is
					// set to CustomStorage. Please provide the SetMultiplicityValue()
					// method on the domain class.
					element.SetMultiplicityValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region ValueRangeText domain property code

		/// <summary>
		/// ValueRangeText domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueRangeTextDomainPropertyId = new global::System.Guid(0x3882c0ac, 0x6f4a, 0x4cf1, 0xb8, 0x56, 0xe5, 0x7a, 0x2d, 0xd4, 0x65, 0x0c);

		/// <summary>
		/// Gets or sets the value of ValueRangeText domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.Role.ValueRange
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Role/ValueRangeText.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Role/ValueRangeText.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("3882c0ac-6f4a-4cf1-b856-e57a2dd4650c")]
		public global::System.String ValueRangeText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ValueRangeTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValueRangeTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Role.ValueRangeText domain property.
		/// </summary>
		internal sealed partial class ValueRangeTextPropertyHandler : DslModeling::DomainPropertyValueHandler<Role, global::System.String>
		{
			private ValueRangeTextPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the Role.ValueRangeText domain property value handler.
			/// </summary>
			public static readonly ValueRangeTextPropertyHandler Instance = new ValueRangeTextPropertyHandler();

			/// <summary>
			/// Gets the Id of the Role.ValueRangeText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueRangeTextDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Role element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ValueRangeText because its Kind is
				// set to CustomStorage. Please provide the GetValueRangeTextValue()
				// method on the domain class.
				return element.GetValueRangeTextValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Role element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ValueRangeText because its Kind is
					// set to CustomStorage. Please provide the SetValueRangeTextValue()
					// method on the domain class.
					element.SetValueRangeTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region MandatoryConstraintName domain property code

		/// <summary>
		/// MandatoryConstraintName domain property Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryConstraintNameDomainPropertyId = new global::System.Guid(0xa6680c0f, 0x84b1, 0x499c, 0x8b, 0x58, 0x1e, 0x1c, 0x5d, 0x09, 0x57, 0x0c);

		/// <summary>
		/// Gets or sets the value of MandatoryConstraintName domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.Role.MandatoryConstraintName
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Role/MandatoryConstraintName.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Role/MandatoryConstraintName.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("a6680c0f-84b1-499c-8b58-1e1c5d09570c")]
		public global::System.String MandatoryConstraintName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return MandatoryConstraintNamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MandatoryConstraintNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Role.MandatoryConstraintName domain property.
		/// </summary>
		internal sealed partial class MandatoryConstraintNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Role, global::System.String>
		{
			private MandatoryConstraintNamePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the Role.MandatoryConstraintName domain property value handler.
			/// </summary>
			public static readonly MandatoryConstraintNamePropertyHandler Instance = new MandatoryConstraintNamePropertyHandler();

			/// <summary>
			/// Gets the Id of the Role.MandatoryConstraintName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MandatoryConstraintNameDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Role element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for MandatoryConstraintName because its Kind is
				// set to CustomStorage. Please provide the GetMandatoryConstraintNameValue()
				// method on the domain class.
				return element.GetMandatoryConstraintNameValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Role element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for MandatoryConstraintName because its Kind is
					// set to CustomStorage. Please provide the SetMandatoryConstraintNameValue()
					// method on the domain class.
					element.SetMandatoryConstraintNameValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region MandatoryConstraintModality domain property code

		/// <summary>
		/// MandatoryConstraintModality domain property Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryConstraintModalityDomainPropertyId = new global::System.Guid(0x29b14765, 0x434b, 0x4ccf, 0x9c, 0x93, 0xbe, 0xe8, 0xbb, 0x7e, 0x26, 0x97);

		/// <summary>
		/// Gets or sets the value of MandatoryConstraintModality domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.Role.MandatoryConstraintModality
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Role/MandatoryConstraintModality.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Role/MandatoryConstraintModality.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("29b14765-434b-4ccf-9c93-bee8bb7e2697")]
		public ConstraintModality MandatoryConstraintModality
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return MandatoryConstraintModalityPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MandatoryConstraintModalityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Role.MandatoryConstraintModality domain property.
		/// </summary>
		internal sealed partial class MandatoryConstraintModalityPropertyHandler : DslModeling::DomainPropertyValueHandler<Role, ConstraintModality>
		{
			private MandatoryConstraintModalityPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the Role.MandatoryConstraintModality domain property value handler.
			/// </summary>
			public static readonly MandatoryConstraintModalityPropertyHandler Instance = new MandatoryConstraintModalityPropertyHandler();

			/// <summary>
			/// Gets the Id of the Role.MandatoryConstraintModality domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MandatoryConstraintModalityDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ConstraintModality GetValue(Role element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for MandatoryConstraintModality because its Kind is
				// set to CustomStorage. Please provide the GetMandatoryConstraintModalityValue()
				// method on the domain class.
				return element.GetMandatoryConstraintModalityValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Role element, ConstraintModality newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				ConstraintModality oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for MandatoryConstraintModality because its Kind is
					// set to CustomStorage. Please provide the SetMandatoryConstraintModalityValue()
					// method on the domain class.
					element.SetMandatoryConstraintModalityValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region Name domain property code

		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xf173d0fa, 0x8f94, 0x479d, 0x87, 0x94, 0x25, 0x72, 0xb8, 0xcd, 0x8d, 0x9a);

		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;

		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.Role.Name
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Role/Name.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Role/Name.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("f173d0fa-8f94-479d-8794-2572b8cd8d9a")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Role.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Role, global::System.String>
		{
			private NamePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the Role.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();

			/// <summary>
			/// Gets the Id of the Role.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Role element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Role element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region ObjectificationOppositeRoleName domain property code

		/// <summary>
		/// ObjectificationOppositeRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ObjectificationOppositeRoleNameDomainPropertyId = new global::System.Guid(0x4719aac4, 0xe0e7, 0x467a, 0xb2, 0x61, 0xcd, 0xb8, 0xae, 0x98, 0x26, 0xed);

		/// <summary>
		/// Gets or sets the value of ObjectificationOppositeRoleName domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.Role.ImpliedRoleName
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Role/ObjectificationOppositeRoleName.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Role/ObjectificationOppositeRoleName.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("4719aac4-e0e7-467a-b261-cdb8ae9826ed")]
		public global::System.String ObjectificationOppositeRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ObjectificationOppositeRoleNamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ObjectificationOppositeRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Role.ObjectificationOppositeRoleName domain property.
		/// </summary>
		internal sealed partial class ObjectificationOppositeRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Role, global::System.String>
		{
			private ObjectificationOppositeRoleNamePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the Role.ObjectificationOppositeRoleName domain property value handler.
			/// </summary>
			public static readonly ObjectificationOppositeRoleNamePropertyHandler Instance = new ObjectificationOppositeRoleNamePropertyHandler();

			/// <summary>
			/// Gets the Id of the Role.ObjectificationOppositeRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ObjectificationOppositeRoleNameDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Role element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ObjectificationOppositeRoleName because its Kind is
				// set to CustomStorage. Please provide the GetObjectificationOppositeRoleNameValue()
				// method on the domain class.
				return element.GetObjectificationOppositeRoleNameValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Role element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ObjectificationOppositeRoleName because its Kind is
					// set to CustomStorage. Please provide the SetObjectificationOppositeRoleNameValue()
					// method on the domain class.
					element.SetObjectificationOppositeRoleNameValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region RolePlayer opposite domain role accessor
		/// <summary>
		/// Gets or sets RolePlayer.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRole
		/// </summary>
		public virtual ObjectType RolePlayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypePlaysRole.PlayedRoleDomainRoleId, value);
			}
		}
		#endregion
		#region ConstraintRoleSequenceCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ConstraintRoleSequenceCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.Role
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConstraintRoleSequence> ConstraintRoleSequenceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ConstraintRoleSequence>(this, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.RoleDomainRoleId);
			}
		}
		#endregion
		#region ValueConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueConstraint.
		/// Description for Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.Role
		/// </summary>
		public virtual RoleValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.RoleDomainRoleId) as RoleValueConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.RoleDomainRoleId, value);
				}
			}
		}
		#endregion
		#region RolePlayerRequiredError opposite domain role accessor
		/// <summary>
		/// Gets or sets RolePlayerRequiredError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.Role
		/// </summary>
		public virtual RolePlayerRequiredError RolePlayerRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleDomainRoleId) as RolePlayerRequiredError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Proxy opposite domain role accessor
		/// <summary>
		/// Gets or sets Proxy.
		/// Description for Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.TargetRole
		/// </summary>
		public virtual RoleProxy Proxy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.TargetRoleDomainRoleId) as RoleProxy;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.ProxyDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.RoleProxyHasRole.TargetRoleDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ObjectTypeInstanceCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ObjectTypeInstanceCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.RoleInstance.Role
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<ObjectTypeInstance> ObjectTypeInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::ReadOnlyLinkedElementCollection<ObjectTypeInstance>(this, global::Neumont.Tools.ORM.ObjectModel.RoleInstance.RoleDomainRoleId);
			}
		}
		#endregion
		#region JoinCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of JoinCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.JoinHasRole.Role
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<Join> JoinCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::ReadOnlyLinkedElementCollection<Join>(this, global::Neumont.Tools.ORM.ObjectModel.JoinHasRole.RoleDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass EqualityConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EqualityConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EqualityConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e4f8e935-c07c-4269-81e3-978110f6dc68")]
	public partial class EqualityConstraint : SetComparisonConstraint
	{
		#region Constructors, domain class Id

		/// <summary>
		/// EqualityConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe4f8e935, 0xc07c, 0x4269, 0x81, 0xe3, 0x97, 0x81, 0x10, 0xf6, 0xdc, 0x68);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EqualityConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EqualityConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EqualityImpliedByMandatoryError opposite domain role accessor
		/// <summary>
		/// Gets or sets EqualityImpliedByMandatoryError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraint
		/// </summary>
		public virtual EqualityImpliedByMandatoryError EqualityImpliedByMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintDomainRoleId) as EqualityImpliedByMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ExclusionConstraint
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::Neumont.Tools.Modeling.Design.ElementTypeDescriptionProvider<ExclusionConstraint, Design.ExclusionConstraintTypeDescriptor<ExclusionConstraint>>))]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ExclusionConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ExclusionConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7766c350-adfc-464c-b200-e4473f551e03")]
	public partial class ExclusionConstraint : SetComparisonConstraint
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ExclusionConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7766c350, 0xadfc, 0x464c, 0xb2, 0x00, 0xe4, 0x47, 0x3f, 0x55, 0x1e, 0x03);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ExclusiveOrMandatoryConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ExclusiveOrMandatoryConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.ExclusionConstraint
		/// </summary>
		public virtual MandatoryConstraint ExclusiveOrMandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.ExclusionConstraintDomainRoleId) as MandatoryConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.ExclusionConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ExclusionContradictsMandatoryError opposite domain role accessor
		/// <summary>
		/// Gets or sets ExclusionContradictsMandatoryError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraint
		/// </summary>
		public virtual ExclusionContradictsMandatoryError ExclusionContradictsMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraintDomainRoleId) as ExclusionContradictsMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraintDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass SubsetConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SubsetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SubsetConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9b5982e3-a852-4071-a973-9719f87546f0")]
	public partial class SubsetConstraint : SetComparisonConstraint
	{
		#region Constructors, domain class Id

		/// <summary>
		/// SubsetConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9b5982e3, 0xa852, 0x4071, 0xa9, 0x73, 0x97, 0x19, 0xf8, 0x75, 0x46, 0xf0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubsetConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubsetConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region NotWellModeledSubsetAndMandatoryError opposite domain role accessor
		/// <summary>
		/// Gets or sets NotWellModeledSubsetAndMandatoryError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraint
		/// </summary>
		public virtual NotWellModeledSubsetAndMandatoryError NotWellModeledSubsetAndMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId) as NotWellModeledSubsetAndMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass SetComparisonConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("85074b82-ed14-4d70-b95c-0b29f2d64210")]
	public abstract partial class SetComparisonConstraint : ORMNamedElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// SetComparisonConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x85074b82, 0xed14, 0x4d70, 0xb9, 0x5c, 0x0b, 0x29, 0xf2, 0xd6, 0x42, 0x10);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected SetComparisonConstraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Modality domain property code

		/// <summary>
		/// Modality domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModalityDomainPropertyId = new global::System.Guid(0xc0aef802, 0xd9e9, 0x4938, 0xb4, 0x4b, 0xde, 0x9a, 0x6a, 0x53, 0x0d, 0x9b);

		/// <summary>
		/// Storage for Modality
		/// </summary>
		private ConstraintModality modalityPropertyStorage = Neumont.Tools.ORM.ObjectModel.ConstraintModality.Alethic;

		/// <summary>
		/// Gets or sets the value of Modality domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint.Modality
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint/Modality.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraint/Modality.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Neumont.Tools.ORM.ObjectModel.ConstraintModality.Alethic)]
		[DslModeling::DomainObjectId("c0aef802-d9e9-4938-b44b-de9a6a530d9b")]
		public ConstraintModality Modality
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modalityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModalityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SetComparisonConstraint.Modality domain property.
		/// </summary>
		internal sealed partial class ModalityPropertyHandler : DslModeling::DomainPropertyValueHandler<SetComparisonConstraint, ConstraintModality>
		{
			private ModalityPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the SetComparisonConstraint.Modality domain property value handler.
			/// </summary>
			public static readonly ModalityPropertyHandler Instance = new ModalityPropertyHandler();

			/// <summary>
			/// Gets the Id of the SetComparisonConstraint.Modality domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModalityDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ConstraintModality GetValue(SetComparisonConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modalityPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SetComparisonConstraint element, ConstraintModality newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				ConstraintModality oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modalityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region FactTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.SetComparisonConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactType> FactTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FactType>(this, global::Neumont.Tools.ORM.ObjectModel.FactSetComparisonConstraint.SetComparisonConstraintDomainRoleId);
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraint
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region RoleSequenceCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of RoleSequenceCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SetComparisonConstraintRoleSequence> RoleSequenceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<SetComparisonConstraintRoleSequence>(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraintDomainRoleId);
			}
		}
		#endregion
		#region TooFewRoleSequencesError opposite domain role accessor
		/// <summary>
		/// Gets or sets TooFewRoleSequencesError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraint
		/// </summary>
		public virtual TooFewRoleSequencesError TooFewRoleSequencesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId) as TooFewRoleSequencesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region TooManyRoleSequencesError opposite domain role accessor
		/// <summary>
		/// Gets or sets TooManyRoleSequencesError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraint
		/// </summary>
		public virtual TooManyRoleSequencesError TooManyRoleSequencesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId) as TooManyRoleSequencesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ContradictionError opposite domain role accessor
		/// <summary>
		/// Gets a list of ContradictionError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError.SetComparisonConstraint
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<ContradictionError> ContradictionError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::ReadOnlyLinkedElementCollection<ContradictionError>(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError.SetComparisonConstraintDomainRoleId);
			}
		}
		#endregion
		#region ExclusionContradictsEqualityError opposite domain role accessor
		/// <summary>
		/// Gets or sets ExclusionContradictsEqualityError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraint
		/// </summary>
		public virtual ExclusionContradictsEqualityError ExclusionContradictsEqualityError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraintDomainRoleId) as ExclusionContradictsEqualityError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region ExclusionContradictsSubsetError opposite domain role accessor
		/// <summary>
		/// Gets or sets ExclusionContradictsSubsetError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraint
		/// </summary>
		public virtual ExclusionContradictsSubsetError ExclusionContradictsSubsetError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraintDomainRoleId) as ExclusionContradictsSubsetError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region DuplicateNameError opposite domain role accessor
		/// <summary>
		/// Gets or sets DuplicateNameError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraint
		/// </summary>
		public virtual ConstraintDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintDomainRoleId) as ConstraintDuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region ArityMismatchError opposite domain role accessor
		/// <summary>
		/// Gets or sets ArityMismatchError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.Constraint
		/// </summary>
		public virtual ExternalConstraintRoleSequenceArityMismatchError ArityMismatchError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId) as ExternalConstraintRoleSequenceArityMismatchError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region CompatibleRolePlayerTypeErrorCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of CompatibleRolePlayerTypeErrorCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CompatibleRolePlayerTypeError> CompatibleRolePlayerTypeErrorCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<CompatibleRolePlayerTypeError>(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintDomainRoleId);
			}
		}
		#endregion
		#region ImplicationError opposite domain role accessor
		/// <summary>
		/// Gets or sets ImplicationError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraint
		/// </summary>
		public virtual ImplicationError ImplicationError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId) as ImplicationError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.ImplicationErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.ImplicationErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region EqualityOrSubsetImpliedByMandatoryError opposite domain role accessor
		/// <summary>
		/// Gets or sets EqualityOrSubsetImpliedByMandatoryError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraint
		/// </summary>
		public virtual EqualityOrSubsetImpliedByMandatoryError EqualityOrSubsetImpliedByMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId) as EqualityOrSubsetImpliedByMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass Expression
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Expression.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Expression.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1b62af68-86a9-4a14-8b32-8988041bbccf")]
	public abstract partial class Expression : ORMModelElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// Expression domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1b62af68, 0x86a9, 0x4a14, 0x8b, 0x32, 0x89, 0x88, 0x04, 0x1b, 0xbc, 0xcf);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Expression(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Body domain property code

		/// <summary>
		/// Body domain property Id.
		/// </summary>
		public static readonly global::System.Guid BodyDomainPropertyId = new global::System.Guid(0x9760d258, 0x0126, 0x4749, 0xa3, 0x70, 0xd7, 0xcc, 0x5a, 0x04, 0xf1, 0x38);

		/// <summary>
		/// Storage for Body
		/// </summary>
		private global::System.String bodyPropertyStorage = string.Empty;

		/// <summary>
		/// Gets or sets the value of Body domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.Expression.Body
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Expression/Body.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Expression/Body.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("9760d258-0126-4749-a370-d7cc5a04f138")]
		public global::System.String Body
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return bodyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BodyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Expression.Body domain property.
		/// </summary>
		internal sealed partial class BodyPropertyHandler : DslModeling::DomainPropertyValueHandler<Expression, global::System.String>
		{
			private BodyPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the Expression.Body domain property value handler.
			/// </summary>
			public static readonly BodyPropertyHandler Instance = new BodyPropertyHandler();

			/// <summary>
			/// Gets the Id of the Expression.Body domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BodyDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Expression element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.bodyPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Expression element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.bodyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region Language domain property code

		/// <summary>
		/// Language domain property Id.
		/// </summary>
		public static readonly global::System.Guid LanguageDomainPropertyId = new global::System.Guid(0x53d116fa, 0xe39c, 0x47c5, 0xa4, 0xd6, 0x41, 0xe4, 0x27, 0x86, 0xee, 0xdb);

		/// <summary>
		/// Storage for Language
		/// </summary>
		private global::System.String languagePropertyStorage = string.Empty;

		/// <summary>
		/// Gets or sets the value of Language domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.Expression.Language
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Expression/Language.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Expression/Language.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("53d116fa-e39c-47c5-a4d6-41e42786eedb")]
		public global::System.String Language
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return languagePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LanguagePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Expression.Language domain property.
		/// </summary>
		internal sealed partial class LanguagePropertyHandler : DslModeling::DomainPropertyValueHandler<Expression, global::System.String>
		{
			private LanguagePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the Expression.Language domain property value handler.
			/// </summary>
			public static readonly LanguagePropertyHandler Instance = new LanguagePropertyHandler();

			/// <summary>
			/// Gets the Id of the Expression.Language domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LanguageDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Expression element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.languagePropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Expression element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.languagePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass SetComparisonConstraintRoleSequence
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintRoleSequence.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9e59f946-8745-4936-a4aa-74552664790e")]
	public partial class SetComparisonConstraintRoleSequence : ConstraintRoleSequence
	{
		#region Constructors, domain class Id

		/// <summary>
		/// SetComparisonConstraintRoleSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9e59f946, 0x8745, 0x4936, 0xa4, 0xaa, 0x74, 0x55, 0x26, 0x64, 0x79, 0x0e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SetComparisonConstraintRoleSequence(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SetComparisonConstraintRoleSequence(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ExternalConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ExternalConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequence
		/// </summary>
		public virtual SetComparisonConstraint ExternalConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceDomainRoleId) as SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass RingConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RingConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("31792dbe-49eb-4544-9fb4-3a692aac39c9")]
	public partial class RingConstraint : SetConstraint
	{
		#region Constructors, domain class Id

		/// <summary>
		/// RingConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x31792dbe, 0x49eb, 0x4544, 0x9f, 0xb4, 0x3a, 0x69, 0x2a, 0xac, 0x39, 0xc9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RingConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RingConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RingType domain property code

		/// <summary>
		/// RingType domain property Id.
		/// </summary>
		public static readonly global::System.Guid RingTypeDomainPropertyId = new global::System.Guid(0x54d182e1, 0x6650, 0x4393, 0x8b, 0xd8, 0x9d, 0x9e, 0x42, 0xbb, 0x8c, 0xe7);

		/// <summary>
		/// Storage for RingType
		/// </summary>
		private RingConstraintType ringTypePropertyStorage = Neumont.Tools.ORM.ObjectModel.RingConstraintType.Undefined;

		/// <summary>
		/// Gets or sets the value of RingType domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.RingConstraint.RingType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RingConstraint/RingType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraint/RingType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Neumont.Tools.ORM.ObjectModel.RingConstraintType.Undefined)]
		[DslModeling::DomainObjectId("54d182e1-6650-4393-8bd8-9d9e42bb8ce7")]
		public RingConstraintType RingType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ringTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RingTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RingConstraint.RingType domain property.
		/// </summary>
		internal sealed partial class RingTypePropertyHandler : DslModeling::DomainPropertyValueHandler<RingConstraint, RingConstraintType>
		{
			private RingTypePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the RingConstraint.RingType domain property value handler.
			/// </summary>
			public static readonly RingTypePropertyHandler Instance = new RingTypePropertyHandler();

			/// <summary>
			/// Gets the Id of the RingConstraint.RingType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RingTypeDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed RingConstraintType GetValue(RingConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ringTypePropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RingConstraint element, RingConstraintType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				RingConstraintType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.ringTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region RingConstraintTypeNotSpecifiedError opposite domain role accessor
		/// <summary>
		/// Gets or sets RingConstraintTypeNotSpecifiedError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraint
		/// </summary>
		public virtual RingConstraintTypeNotSpecifiedError RingConstraintTypeNotSpecifiedError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId) as RingConstraintTypeNotSpecifiedError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass FrequencyConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a6d76d01-fdc3-43a2-8aaf-56c2e0bd0465")]
	public partial class FrequencyConstraint : SetConstraint
	{
		#region Constructors, domain class Id

		/// <summary>
		/// FrequencyConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa6d76d01, 0xfdc3, 0x43a2, 0x8a, 0xaf, 0x56, 0xc2, 0xe0, 0xbd, 0x04, 0x65);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region MinFrequency domain property code

		/// <summary>
		/// MinFrequency domain property Id.
		/// </summary>
		public static readonly global::System.Guid MinFrequencyDomainPropertyId = new global::System.Guid(0x2d48d3ca, 0x564d, 0x459e, 0xa7, 0x01, 0x42, 0x09, 0xa1, 0x2c, 0x47, 0x83);

		/// <summary>
		/// Storage for MinFrequency
		/// </summary>
		private global::System.Int32 minFrequencyPropertyStorage = 1;

		/// <summary>
		/// Gets or sets the value of MinFrequency domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.MinFrequency
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraint/MinFrequency.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraint/MinFrequency.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(1)]
		[DslModeling::DomainObjectId("2d48d3ca-564d-459e-a701-4209a12c4783")]
		public global::System.Int32 MinFrequency
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return minFrequencyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MinFrequencyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FrequencyConstraint.MinFrequency domain property.
		/// </summary>
		internal sealed partial class MinFrequencyPropertyHandler : DslModeling::DomainPropertyValueHandler<FrequencyConstraint, global::System.Int32>
		{
			private MinFrequencyPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the FrequencyConstraint.MinFrequency domain property value handler.
			/// </summary>
			public static readonly MinFrequencyPropertyHandler Instance = new MinFrequencyPropertyHandler();

			/// <summary>
			/// Gets the Id of the FrequencyConstraint.MinFrequency domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MinFrequencyDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(FrequencyConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.minFrequencyPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FrequencyConstraint element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.minFrequencyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region MaxFrequency domain property code

		/// <summary>
		/// MaxFrequency domain property Id.
		/// </summary>
		public static readonly global::System.Guid MaxFrequencyDomainPropertyId = new global::System.Guid(0xf46d9200, 0x3602, 0x435c, 0xb8, 0x52, 0xc5, 0x3b, 0xe1, 0x0d, 0x99, 0xc6);

		/// <summary>
		/// Storage for MaxFrequency
		/// </summary>
		private global::System.Int32 maxFrequencyPropertyStorage = 2;

		/// <summary>
		/// Gets or sets the value of MaxFrequency domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.FrequencyConstraint.MaxFrequency
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraint/MaxFrequency.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraint/MaxFrequency.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(2)]
		[DslModeling::DomainObjectId("f46d9200-3602-435c-b852-c53be10d99c6")]
		public global::System.Int32 MaxFrequency
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return maxFrequencyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MaxFrequencyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FrequencyConstraint.MaxFrequency domain property.
		/// </summary>
		internal sealed partial class MaxFrequencyPropertyHandler : DslModeling::DomainPropertyValueHandler<FrequencyConstraint, global::System.Int32>
		{
			private MaxFrequencyPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the FrequencyConstraint.MaxFrequency domain property value handler.
			/// </summary>
			public static readonly MaxFrequencyPropertyHandler Instance = new MaxFrequencyPropertyHandler();

			/// <summary>
			/// Gets the Id of the FrequencyConstraint.MaxFrequency domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MaxFrequencyDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(FrequencyConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.maxFrequencyPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FrequencyConstraint element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.maxFrequencyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region FrequencyConstraintMinMaxError opposite domain role accessor
		/// <summary>
		/// Gets or sets FrequencyConstraintMinMaxError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraint
		/// </summary>
		public virtual FrequencyConstraintMinMaxError FrequencyConstraintMinMaxError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId) as FrequencyConstraintMinMaxError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FrequencyConstraintContradictsInternalUniquenessConstraintError> FrequencyConstraintContradictsInternalUniquenessConstraintErrorCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FrequencyConstraintContradictsInternalUniquenessConstraintError>(this, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass UniquenessConstraint
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::Neumont.Tools.Modeling.Design.ElementTypeDescriptionProvider<UniquenessConstraint, Design.UniquenessConstraintTypeDescriptor<UniquenessConstraint>>))]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("49c7e3ce-c4f9-417d-b49c-27ea4016371e")]
	public partial class UniquenessConstraint : SetConstraint
	{
		#region Constructors, domain class Id

		/// <summary>
		/// UniquenessConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x49c7e3ce, 0xc4f9, 0x417d, 0xb4, 0x9c, 0x27, 0xea, 0x40, 0x16, 0x37, 0x1e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UniquenessConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UniquenessConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsPreferred domain property code

		/// <summary>
		/// IsPreferred domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPreferredDomainPropertyId = new global::System.Guid(0x585de7a0, 0x8e09, 0x43f3, 0x84, 0x63, 0xf2, 0x06, 0x09, 0xa1, 0x67, 0x90);

		/// <summary>
		/// Gets or sets the value of IsPreferred domain property.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.IsPreferredIdentifier
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.UniquenessConstraint/IsPreferred.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.UniquenessConstraint/IsPreferred.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("585de7a0-8e09-43f3-8463-f20609a16790")]
		public global::System.Boolean IsPreferred
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsPreferredPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPreferredPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the UniquenessConstraint.IsPreferred domain property.
		/// </summary>
		internal sealed partial class IsPreferredPropertyHandler : DslModeling::DomainPropertyValueHandler<UniquenessConstraint, global::System.Boolean>
		{
			private IsPreferredPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the UniquenessConstraint.IsPreferred domain property value handler.
			/// </summary>
			public static readonly IsPreferredPropertyHandler Instance = new IsPreferredPropertyHandler();

			/// <summary>
			/// Gets the Id of the UniquenessConstraint.IsPreferred domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPreferredDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(UniquenessConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsPreferred because its Kind is
				// set to CustomStorage. Please provide the GetIsPreferredValue()
				// method on the domain class.
				return element.GetIsPreferredValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(UniquenessConstraint element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IsPreferred because its Kind is
					// set to CustomStorage. Please provide the SetIsPreferredValue()
					// method on the domain class.
					element.SetIsPreferredValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region IsInternal domain property code

		/// <summary>
		/// IsInternal domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsInternalDomainPropertyId = new global::System.Guid(0x55b187ed, 0x3869, 0x4f83, 0xb6, 0xa7, 0x86, 0x61, 0xd6, 0x1b, 0x1c, 0x62);

		/// <summary>
		/// Storage for IsInternal
		/// </summary>
		private global::System.Boolean isInternalPropertyStorage;

		/// <summary>
		/// Gets or sets the value of IsInternal domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.UniquenessConstraint.IsInternal
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.UniquenessConstraint/IsInternal.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.UniquenessConstraint/IsInternal.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("55b187ed-3869-4f83-b6a7-8661d61b1c62")]
		public global::System.Boolean IsInternal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isInternalPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsInternalPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the UniquenessConstraint.IsInternal domain property.
		/// </summary>
		internal sealed partial class IsInternalPropertyHandler : DslModeling::DomainPropertyValueHandler<UniquenessConstraint, global::System.Boolean>
		{
			private IsInternalPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the UniquenessConstraint.IsInternal domain property value handler.
			/// </summary>
			public static readonly IsInternalPropertyHandler Instance = new IsInternalPropertyHandler();

			/// <summary>
			/// Gets the Id of the UniquenessConstraint.IsInternal domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsInternalDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(UniquenessConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isInternalPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(UniquenessConstraint element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isInternalPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region PreferredIdentifierFor opposite domain role accessor
		/// <summary>
		/// Gets or sets PreferredIdentifierFor.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifier
		/// </summary>
		public virtual ObjectType PreferredIdentifierFor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierDomainRoleId, value);
				}
			}
		}
		#endregion
		#region NMinusOneError opposite domain role accessor
		/// <summary>
		/// Gets or sets NMinusOneError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.Constraint
		/// </summary>
		public virtual NMinusOneError NMinusOneError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId) as NMinusOneError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass MandatoryConstraint
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::Neumont.Tools.Modeling.Design.ElementTypeDescriptionProvider<MandatoryConstraint, Design.MandatoryConstraintTypeDescriptor<MandatoryConstraint>>))]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f054be4d-bfca-4cd3-a0d8-97f61c165753")]
	public partial class MandatoryConstraint : SetConstraint
	{
		#region Constructors, domain class Id

		/// <summary>
		/// MandatoryConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf054be4d, 0xbfca, 0x4cd3, 0xa0, 0xd8, 0x97, 0xf6, 0x1c, 0x16, 0x57, 0x53);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MandatoryConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MandatoryConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsSimple domain property code

		/// <summary>
		/// IsSimple domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsSimpleDomainPropertyId = new global::System.Guid(0xbbda6bd3, 0xb3ac, 0x4e26, 0xab, 0xc3, 0x3f, 0xe1, 0xda, 0xfa, 0x01, 0x65);

		/// <summary>
		/// Storage for IsSimple
		/// </summary>
		private global::System.Boolean isSimplePropertyStorage;

		/// <summary>
		/// Gets or sets the value of IsSimple domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.MandatoryConstraint.IsSimple
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraint/IsSimple.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.MandatoryConstraint/IsSimple.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("bbda6bd3-b3ac-4e26-abc3-3fe1dafa0165")]
		public global::System.Boolean IsSimple
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isSimplePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsSimplePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MandatoryConstraint.IsSimple domain property.
		/// </summary>
		internal sealed partial class IsSimplePropertyHandler : DslModeling::DomainPropertyValueHandler<MandatoryConstraint, global::System.Boolean>
		{
			private IsSimplePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the MandatoryConstraint.IsSimple domain property value handler.
			/// </summary>
			public static readonly IsSimplePropertyHandler Instance = new IsSimplePropertyHandler();

			/// <summary>
			/// Gets the Id of the MandatoryConstraint.IsSimple domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsSimpleDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(MandatoryConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isSimplePropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MandatoryConstraint element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isSimplePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region ExclusiveOrExclusionConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ExclusiveOrExclusionConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraint
		/// </summary>
		public virtual ExclusionConstraint ExclusiveOrExclusionConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId) as ExclusionConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.ExclusionConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.ExclusionConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ExclusionContradictsMandatoryError opposite domain role accessor
		/// <summary>
		/// Gets or sets ExclusionContradictsMandatoryError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraint
		/// </summary>
		public virtual ExclusionContradictsMandatoryError ExclusionContradictsMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraintDomainRoleId) as ExclusionContradictsMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region NotWellModeledSubsetAndMandatoryError opposite domain role accessor
		/// <summary>
		/// Gets or sets NotWellModeledSubsetAndMandatoryError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraint
		/// </summary>
		public virtual NotWellModeledSubsetAndMandatoryError NotWellModeledSubsetAndMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId) as NotWellModeledSubsetAndMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass SetConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1b85e4be-0c95-45bd-a76f-2087456f891b")]
	public abstract partial class SetConstraint : ConstraintRoleSequence
	{
		#region Constructors, domain class Id

		/// <summary>
		/// SetConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1b85e4be, 0x0c95, 0x45bd, 0xa7, 0x6f, 0x20, 0x87, 0x45, 0x6f, 0x89, 0x1b);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected SetConstraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Modality domain property code

		/// <summary>
		/// Modality domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModalityDomainPropertyId = new global::System.Guid(0xb4f1902a, 0x7eb9, 0x464f, 0xa0, 0xf8, 0xf8, 0x16, 0x65, 0x8c, 0x1b, 0xd8);

		/// <summary>
		/// Storage for Modality
		/// </summary>
		private ConstraintModality modalityPropertyStorage = Neumont.Tools.ORM.ObjectModel.ConstraintModality.Alethic;

		/// <summary>
		/// Gets or sets the value of Modality domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.SetConstraint.Modality
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SetConstraint/Modality.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SetConstraint/Modality.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Neumont.Tools.ORM.ObjectModel.ConstraintModality.Alethic)]
		[DslModeling::DomainObjectId("b4f1902a-7eb9-464f-a0f8-f816658c1bd8")]
		public ConstraintModality Modality
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modalityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModalityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SetConstraint.Modality domain property.
		/// </summary>
		internal sealed partial class ModalityPropertyHandler : DslModeling::DomainPropertyValueHandler<SetConstraint, ConstraintModality>
		{
			private ModalityPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the SetConstraint.Modality domain property value handler.
			/// </summary>
			public static readonly ModalityPropertyHandler Instance = new ModalityPropertyHandler();

			/// <summary>
			/// Gets the Id of the SetConstraint.Modality domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModalityDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ConstraintModality GetValue(SetConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modalityPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SetConstraint element, ConstraintModality newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				ConstraintModality oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modalityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region FactTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.FactSetConstraint.SetConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactType> FactTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FactType>(this, global::Neumont.Tools.ORM.ObjectModel.FactSetConstraint.SetConstraintDomainRoleId);
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.SetConstraint
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.SetConstraintDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasSetConstraint.SetConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region DuplicateNameError opposite domain role accessor
		/// <summary>
		/// Gets or sets DuplicateNameError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraint
		/// </summary>
		public virtual ConstraintDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintDomainRoleId) as ConstraintDuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region CompatibleRolePlayerTypeError opposite domain role accessor
		/// <summary>
		/// Gets or sets CompatibleRolePlayerTypeError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraint
		/// </summary>
		public virtual CompatibleRolePlayerTypeError CompatibleRolePlayerTypeError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId) as CompatibleRolePlayerTypeError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region TooFewRoleSequencesError opposite domain role accessor
		/// <summary>
		/// Gets or sets TooFewRoleSequencesError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraint
		/// </summary>
		public virtual TooFewRoleSequencesError TooFewRoleSequencesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId) as TooFewRoleSequencesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region TooManyRoleSequencesError opposite domain role accessor
		/// <summary>
		/// Gets or sets TooManyRoleSequencesError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraint
		/// </summary>
		public virtual TooManyRoleSequencesError TooManyRoleSequencesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId) as TooManyRoleSequencesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ImplicationError opposite domain role accessor
		/// <summary>
		/// Gets or sets ImplicationError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.SetConstraint
		/// </summary>
		public virtual ImplicationError ImplicationError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.SetConstraintDomainRoleId) as ImplicationError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.ImplicationErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.ImplicationErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.SetConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ConstraintRoleSequence
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequence.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e279c66b-e89c-4e02-9de2-64791c8a4511")]
	public abstract partial class ConstraintRoleSequence : ORMNamedElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ConstraintRoleSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe279c66b, 0xe89c, 0x4e02, 0x9d, 0xe2, 0x64, 0x79, 0x1c, 0x8a, 0x45, 0x11);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ConstraintRoleSequence(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RoleCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of RoleCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequence
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Role> RoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Role>(this, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceDomainRoleId);
			}
		}
		#endregion
		#region PopulationMandatoryErrorCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of PopulationMandatoryErrorCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.MandatoryConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PopulationMandatoryError> PopulationMandatoryErrorCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<PopulationMandatoryError>(this, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.MandatoryConstraintDomainRoleId);
			}
		}
		#endregion
		#region JoinPath opposite domain role accessor
		/// <summary>
		/// Gets a list of JoinPath.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath.JoinPathOwner
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Join> JoinPath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Join>(this, global::Neumont.Tools.ORM.ObjectModel.ConstraintRoleSequenceHasJoinPath.JoinPathOwnerDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass Join
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::Neumont.Tools.Modeling.Design.ElementTypeDescriptionProvider<Join, Design.JoinTypeDescriptor<Join>>))]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Join.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Join.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("efde476d-c440-4524-97da-42697fa92ce9")]
	public partial class Join : ORMModelElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// Join domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xefde476d, 0xc440, 0x4524, 0x97, 0xda, 0x42, 0x69, 0x7f, 0xa9, 0x2c, 0xe9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Join(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Join(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region JoinType domain property code

		/// <summary>
		/// JoinType domain property Id.
		/// </summary>
		public static readonly global::System.Guid JoinTypeDomainPropertyId = new global::System.Guid(0x59049038, 0xa13e, 0x4ad1, 0xa8, 0x6b, 0x8e, 0xc3, 0x49, 0x3d, 0xfd, 0xc9);

		/// <summary>
		/// Storage for JoinType
		/// </summary>
		private JoinType joinTypePropertyStorage = Neumont.Tools.ORM.ObjectModel.JoinType.Inner;

		/// <summary>
		/// Gets or sets the value of JoinType domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.Join.JoinType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Join/JoinType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Join/JoinType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Neumont.Tools.ORM.ObjectModel.JoinType.Inner)]
		[DslModeling::DomainObjectId("59049038-a13e-4ad1-a86b-8ec3493dfdc9")]
		public JoinType JoinType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return joinTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				JoinTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Join.JoinType domain property.
		/// </summary>
		internal sealed partial class JoinTypePropertyHandler : DslModeling::DomainPropertyValueHandler<Join, JoinType>
		{
			private JoinTypePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the Join.JoinType domain property value handler.
			/// </summary>
			public static readonly JoinTypePropertyHandler Instance = new JoinTypePropertyHandler();

			/// <summary>
			/// Gets the Id of the Join.JoinType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return JoinTypeDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed JoinType GetValue(Join element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.joinTypePropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Join element, JoinType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				JoinType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.joinTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region InputRole opposite domain role accessor
		/// <summary>
		/// Gets or sets InputRole.
		/// Description for Neumont.Tools.ORM.ObjectModel.JoinHasInputRole.Join
		/// </summary>
		public virtual Role InputRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole.JoinDomainRoleId) as Role;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.JoinHasInputRole.JoinDomainRoleId, value);
			}
		}
		#endregion
		#region OutputRole opposite domain role accessor
		/// <summary>
		/// Gets or sets OutputRole.
		/// Description for Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole.Join
		/// </summary>
		public virtual Role OutputRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole.JoinDomainRoleId) as Role;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.JoinHasOutputRole.JoinDomainRoleId, value);
			}
		}
		#endregion
		#region JoinPathOwner opposite domain role accessor
		/// <summary>
		/// Gets or sets JoinPathOwner.
		/// Description for Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath.Join
		/// </summary>
		public virtual ORMModelElement JoinPathOwner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ORMModelElementHasJoinPath.JoinDomainRoleId) as ORMModelElement;
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass TooFewRoleSequencesError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.TooFewRoleSequencesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("686a4b07-0ed9-4143-8225-5524c4d6c001")]
	public partial class TooFewRoleSequencesError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// TooFewRoleSequencesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x686a4b07, 0x0ed9, 0x4143, 0x82, 0x25, 0x55, 0x24, 0xc4, 0xd6, 0xc0, 0x01);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooFewRoleSequencesError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooFewRoleSequencesError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetComparisonConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesError
		/// </summary>
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId) as SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
		#region SetConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesError
		/// </summary>
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId) as SetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass TooManyRoleSequencesError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.TooManyRoleSequencesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1adacf12-94f5-430d-9e14-6a3b0334139e")]
	public partial class TooManyRoleSequencesError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// TooManyRoleSequencesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1adacf12, 0x94f5, 0x430d, 0x9e, 0x14, 0x6a, 0x3b, 0x03, 0x34, 0x13, 0x9e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooManyRoleSequencesError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooManyRoleSequencesError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetComparisonConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesError
		/// </summary>
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId) as SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
		#region SetConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesError
		/// </summary>
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId) as SetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ObjectTypeDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeDuplicateNameError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("798d4cc7-1ad8-4a83-afd5-5730ac342dc2")]
	public partial class ObjectTypeDuplicateNameError : DuplicateNameError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ObjectTypeDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x798d4cc7, 0x1ad8, 0x4a83, 0xaf, 0xd5, 0x57, 0x30, 0xac, 0x34, 0x2d, 0xc2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectTypeDuplicateNameError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectTypeDuplicateNameError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ObjectTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ObjectTypeCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ObjectType> ObjectTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ObjectType>(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass PopulationUniquenessError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.PopulationUniquenessError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.PopulationUniquenessError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ba0a8f9e-91e1-4d56-8a44-9f49432c63c5")]
	public partial class PopulationUniquenessError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// PopulationUniquenessError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xba0a8f9e, 0x91e1, 0x4d56, 0x8a, 0x44, 0x9f, 0x49, 0x43, 0x2c, 0x63, 0xc5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PopulationUniquenessError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PopulationUniquenessError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RoleInstanceCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of RoleInstanceCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError.PopulationUniquenessError
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<RoleInstance> RoleInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::ReadOnlyLinkedElementCollection<RoleInstance>(this, global::Neumont.Tools.ORM.ObjectModel.RoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId);
			}
		}
		#endregion
		#region EntityTypeRoleInstanceCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of EntityTypeRoleInstanceCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntityTypeRoleInstance> EntityTypeRoleInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<EntityTypeRoleInstance>(this, global::Neumont.Tools.ORM.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId);
			}
		}
		#endregion
		#region FactTypeRoleInstanceCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of FactTypeRoleInstanceCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactTypeRoleInstance> FactTypeRoleInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FactTypeRoleInstance>(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ContradictionError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ContradictionError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ContradictionError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b42b88e4-ca87-4dfa-90be-00606e4be23b")]
	public abstract partial class ContradictionError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ContradictionError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb42b88e4, 0xca87, 0x4dfa, 0x90, 0xbe, 0x00, 0x60, 0x6e, 0x4b, 0xe2, 0x3b);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ContradictionError(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError.ContradictionError
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<SetComparisonConstraint> SetComparisonConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::ReadOnlyLinkedElementCollection<SetComparisonConstraint>(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasContradictionError.ContradictionErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ExclusionContradictsMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ExclusionContradictsMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ExclusionContradictsMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5a57ea68-918d-4ae3-af7f-d9f7cdb5ab34")]
	public partial class ExclusionContradictsMandatoryError : ContradictionError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ExclusionContradictsMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5a57ea68, 0x918d, 0x4ae3, 0xaf, 0x7f, 0xd9, 0xf7, 0xcd, 0xb5, 0xab, 0x34);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionContradictsMandatoryError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionContradictsMandatoryError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ExclusionConstraint opposite domain role accessor
		/// <summary>
		/// Gets a list of ExclusionConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ExclusionConstraint> ExclusionConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ExclusionConstraint>(this, global::Neumont.Tools.ORM.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryErrorDomainRoleId);
			}
		}
		#endregion
		#region MandatoryConstraint opposite domain role accessor
		/// <summary>
		/// Gets a list of MandatoryConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MandatoryConstraint> MandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<MandatoryConstraint>(this, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ExclusionContradictsEqualityError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ExclusionContradictsEqualityError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ExclusionContradictsEqualityError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d8714f74-60b7-48f5-bf7d-88d8736cb22a")]
	public partial class ExclusionContradictsEqualityError : ContradictionError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ExclusionContradictsEqualityError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd8714f74, 0x60b7, 0x48f5, 0xbf, 0x7d, 0x88, 0xd8, 0x73, 0x6c, 0xb2, 0x2a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionContradictsEqualityError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionContradictsEqualityError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.ExclusionContradictsEqualityError
		/// </summary>
		public virtual new DslModeling::LinkedElementCollection<SetComparisonConstraint> SetComparisonConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<SetComparisonConstraint>(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.ExclusionContradictsEqualityErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ExclusionContradictsSubsetError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ExclusionContradictsSubsetError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ExclusionContradictsSubsetError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f671fe6d-ba8a-4bf2-afb6-be5827996c50")]
	public partial class ExclusionContradictsSubsetError : ContradictionError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ExclusionContradictsSubsetError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf671fe6d, 0xba8a, 0x4bf2, 0xaf, 0xb6, 0xbe, 0x58, 0x27, 0x99, 0x6c, 0x50);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionContradictsSubsetError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionContradictsSubsetError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.ExclusionContradictsSubsetError
		/// </summary>
		public virtual new DslModeling::LinkedElementCollection<SetComparisonConstraint> SetComparisonConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<SetComparisonConstraint>(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.ExclusionContradictsSubsetErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass NotWellModeledSubsetAndMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.NotWellModeledSubsetAndMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.NotWellModeledSubsetAndMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2decdc39-e109-4d59-8bf3-046e2cd8584c")]
	public partial class NotWellModeledSubsetAndMandatoryError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// NotWellModeledSubsetAndMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2decdc39, 0xe109, 0x4d59, 0x8b, 0xf3, 0x04, 0x6e, 0x2c, 0xd8, 0x58, 0x4c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NotWellModeledSubsetAndMandatoryError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NotWellModeledSubsetAndMandatoryError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SubsetConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SubsetConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryError
		/// </summary>
		public virtual SubsetConstraint SubsetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId) as SubsetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId, value);
				}
			}
		}
		#endregion
		#region MandatoryConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets MandatoryConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryError
		/// </summary>
		public virtual MandatoryConstraint MandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId) as MandatoryConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass PopulationMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.PopulationMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.PopulationMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5b76cb18-90b2-4656-bb0d-0788460fdb70")]
	public partial class PopulationMandatoryError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// PopulationMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5b76cb18, 0x90b2, 0x4656, 0xbb, 0x0d, 0x07, 0x88, 0x46, 0x0f, 0xdb, 0x70);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PopulationMandatoryError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PopulationMandatoryError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region MandatoryConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets MandatoryConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.PopulationMandatoryError
		/// </summary>
		public virtual ConstraintRoleSequence MandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId) as ConstraintRoleSequence;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId, value);
			}
		}
		#endregion
		#region ObjectTypeInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectTypeInstance.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.PopulationMandatoryError
		/// </summary>
		public virtual ObjectTypeInstance ObjectTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId) as ObjectTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ConstraintDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ConstraintDuplicateNameError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("aa63e81b-6978-49a2-a4ac-86022a172edd")]
	public partial class ConstraintDuplicateNameError : DuplicateNameError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ConstraintDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaa63e81b, 0x6978, 0x49a2, 0xa4, 0xac, 0x86, 0x02, 0x2a, 0x17, 0x2e, 0xdd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConstraintDuplicateNameError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConstraintDuplicateNameError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SetConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of SetConstraintCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.DuplicateNameError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SetConstraint> SetConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<SetConstraint>(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
			}
		}
		#endregion
		#region SetComparisonConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DuplicateNameError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SetComparisonConstraint> SetComparisonConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<SetComparisonConstraint>(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
			}
		}
		#endregion
		#region ValueConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ValueConstraintCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.DuplicateNameError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ValueConstraint> ValueConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ValueConstraint>(this, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass DuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.DuplicateNameError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.DuplicateNameError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9e29c624-4559-4020-9163-7b5846c94c0c")]
	public abstract partial class DuplicateNameError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// DuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9e29c624, 0x4559, 0x4020, 0x91, 0x63, 0x7b, 0x58, 0x46, 0xc9, 0x4c, 0x0c);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected DuplicateNameError(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass TooFewReadingRolesError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.TooFewReadingRolesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1d2b23ef-456e-4e80-91d8-fb384f779a54")]
	public partial class TooFewReadingRolesError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// TooFewReadingRolesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1d2b23ef, 0x456e, 0x4e80, 0x91, 0xd8, 0xfb, 0x38, 0x4f, 0x77, 0x9a, 0x54);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooFewReadingRolesError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooFewReadingRolesError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Reading opposite domain role accessor
		/// <summary>
		/// Gets or sets Reading.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesError
		/// </summary>
		public virtual Reading Reading
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorDomainRoleId) as Reading;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass TooManyReadingRolesError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.TooManyReadingRolesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("50c98172-412c-40c0-add3-82809c3d82f7")]
	public partial class TooManyReadingRolesError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// TooManyReadingRolesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x50c98172, 0x412c, 0x40c0, 0xad, 0xd3, 0x82, 0x80, 0x9c, 0x3d, 0x82, 0xf7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooManyReadingRolesError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooManyReadingRolesError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Reading opposite domain role accessor
		/// <summary>
		/// Gets or sets Reading.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesError
		/// </summary>
		public virtual Reading Reading
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorDomainRoleId) as Reading;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ExternalConstraintRoleSequenceArityMismatchError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3da5385a-d9de-4f3d-9d2e-ca79f10ab542")]
	public partial class ExternalConstraintRoleSequenceArityMismatchError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ExternalConstraintRoleSequenceArityMismatchError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3da5385a, 0xd9de, 0x4f3d, 0x9d, 0x2e, 0xca, 0x79, 0xf1, 0x0a, 0xb5, 0x42);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExternalConstraintRoleSequenceArityMismatchError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExternalConstraintRoleSequenceArityMismatchError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Constraint opposite domain role accessor
		/// <summary>
		/// Gets or sets Constraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchError
		/// </summary>
		public virtual SetComparisonConstraint Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorDomainRoleId) as SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass FactTypeRequiresReadingError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeRequiresReadingError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3eca7e92-45b2-45bd-bad3-6af0c4b40e70")]
	public partial class FactTypeRequiresReadingError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// FactTypeRequiresReadingError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3eca7e92, 0x45b2, 0x45bd, 0xba, 0xd3, 0x6a, 0xf0, 0xc4, 0xb4, 0x0e, 0x70);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeRequiresReadingError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeRequiresReadingError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredError
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass FactTypeRequiresInternalUniquenessConstraintError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("295d4b3d-1351-431d-b72f-28661d744b58")]
	public partial class FactTypeRequiresInternalUniquenessConstraintError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// FactTypeRequiresInternalUniquenessConstraintError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x295d4b3d, 0x1351, 0x431d, 0xb7, 0x2f, 0x28, 0x66, 0x1d, 0x74, 0x4b, 0x58);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeRequiresInternalUniquenessConstraintError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeRequiresInternalUniquenessConstraintError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredError
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass DataTypeNotSpecifiedError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.DataTypeNotSpecifiedError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8afa102f-529c-4896-aeb3-9d714e28fc61")]
	public partial class DataTypeNotSpecifiedError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// DataTypeNotSpecifiedError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8afa102f, 0x529c, 0x4896, 0xae, 0xb3, 0x9d, 0x71, 0x4e, 0x28, 0xfc, 0x61);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataTypeNotSpecifiedError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataTypeNotSpecifiedError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueTypeHasDataType opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueTypeHasDataType.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedError
		/// </summary>
		public virtual ValueTypeHasDataType ValueTypeHasDataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorDomainRoleId) as ValueTypeHasDataType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass NMinusOneError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.NMinusOneError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.NMinusOneError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("497754b3-5176-4712-bc46-2e4377354c8b")]
	public partial class NMinusOneError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// NMinusOneError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x497754b3, 0x5176, 0x4712, 0xbc, 0x46, 0x2e, 0x43, 0x77, 0x35, 0x4c, 0x8b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NMinusOneError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NMinusOneError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Constraint opposite domain role accessor
		/// <summary>
		/// Gets or sets Constraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneError
		/// </summary>
		public virtual UniquenessConstraint Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorDomainRoleId) as UniquenessConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass CompatibleRolePlayerTypeError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5c8d3150-2604-44fc-a468-b678f9b4206e")]
	public partial class CompatibleRolePlayerTypeError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// CompatibleRolePlayerTypeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5c8d3150, 0x2604, 0x44fc, 0xa4, 0x68, 0xb6, 0x78, 0xf9, 0xb4, 0x20, 0x6e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompatibleRolePlayerTypeError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompatibleRolePlayerTypeError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Column domain property code

		/// <summary>
		/// Column domain property Id.
		/// </summary>
		public static readonly global::System.Guid ColumnDomainPropertyId = new global::System.Guid(0x222dcf1c, 0x83fb, 0x43f1, 0xa8, 0xbe, 0x3d, 0x05, 0xb8, 0xcf, 0x16, 0x93);

		/// <summary>
		/// Storage for Column
		/// </summary>
		private global::System.Int32 columnPropertyStorage;

		/// <summary>
		/// Gets or sets the value of Column domain property.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError.Column
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError/Column.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.CompatibleRolePlayerTypeError/Column.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("222dcf1c-83fb-43f1-a8be-3d05b8cf1693")]
		public global::System.Int32 Column
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return columnPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ColumnPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CompatibleRolePlayerTypeError.Column domain property.
		/// </summary>
		internal sealed partial class ColumnPropertyHandler : DslModeling::DomainPropertyValueHandler<CompatibleRolePlayerTypeError, global::System.Int32>
		{
			private ColumnPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the CompatibleRolePlayerTypeError.Column domain property value handler.
			/// </summary>
			public static readonly ColumnPropertyHandler Instance = new ColumnPropertyHandler();

			/// <summary>
			/// Gets the Id of the CompatibleRolePlayerTypeError.Column domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ColumnDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(CompatibleRolePlayerTypeError element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.columnPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CompatibleRolePlayerTypeError element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.columnPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region SetComparisonConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetComparisonConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeError
		/// </summary>
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId) as SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId, value);
			}
		}
		#endregion
		#region SetConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeError
		/// </summary>
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId) as SetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass RolePlayerRequiredError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RolePlayerRequiredError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("59a21fde-d979-4b18-9088-707b79fce19e")]
	public partial class RolePlayerRequiredError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// RolePlayerRequiredError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x59a21fde, 0xd979, 0x4b18, 0x90, 0x88, 0x70, 0x7b, 0x79, 0xfc, 0xe1, 0x9e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RolePlayerRequiredError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RolePlayerRequiredError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Role opposite domain role accessor
		/// <summary>
		/// Gets or sets Role.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredError
		/// </summary>
		public virtual Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorDomainRoleId) as Role;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RoleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass EqualityImpliedByMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EqualityImpliedByMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0809316f-ae25-4d6a-8ff2-8ce8a685d32d")]
	public partial class EqualityImpliedByMandatoryError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// EqualityImpliedByMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0809316f, 0xae25, 0x4d6a, 0x8f, 0xf2, 0x8c, 0xe8, 0xa6, 0x85, 0xd3, 0x2d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EqualityImpliedByMandatoryError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EqualityImpliedByMandatoryError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EqualityConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets EqualityConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryError
		/// </summary>
		public virtual EqualityConstraint EqualityConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorDomainRoleId) as EqualityConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EqualityConstraintHasEqualityImpliedByMandatoryError.EqualityImpliedByMandatoryErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass EntityTypeRequiresReferenceSchemeError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeRequiresReferenceSchemeError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a9177733-169b-418a-a843-3e3777dc9982")]
	public partial class EntityTypeRequiresReferenceSchemeError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// EntityTypeRequiresReferenceSchemeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa9177733, 0x169b, 0x418a, 0xa8, 0x43, 0x3e, 0x37, 0x77, 0xdc, 0x99, 0x82);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityTypeRequiresReferenceSchemeError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityTypeRequiresReferenceSchemeError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectType.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeError
		/// </summary>
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass FrequencyConstraintMinMaxError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraintMinMaxError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5586c408-1a46-4ca7-8b0d-0462cd904009")]
	public partial class FrequencyConstraintMinMaxError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// FrequencyConstraintMinMaxError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5586c408, 0x1a46, 0x4ca7, 0x8b, 0x0d, 0x04, 0x62, 0xcd, 0x90, 0x40, 0x09);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraintMinMaxError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraintMinMaxError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FrequencyConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets FrequencyConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxError
		/// </summary>
		public virtual FrequencyConstraint FrequencyConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorDomainRoleId) as FrequencyConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ReadingRequiresUserModificationError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReadingRequiresUserModificationError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReadingRequiresUserModificationError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("56d0b016-eaf3-4e4f-b17a-7f7987ebc0cb")]
	public partial class ReadingRequiresUserModificationError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ReadingRequiresUserModificationError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x56d0b016, 0xeaf3, 0x4e4f, 0xb1, 0x7a, 0x7f, 0x79, 0x87, 0xeb, 0xc0, 0xcb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReadingRequiresUserModificationError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReadingRequiresUserModificationError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Reading opposite domain role accessor
		/// <summary>
		/// Gets or sets Reading.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ReadingHasReadingRequiresUserModificationError.RequiresUserModificationError
		/// </summary>
		public virtual Reading Reading
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ReadingHasReadingRequiresUserModificationError.RequiresUserModificationErrorDomainRoleId) as Reading;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ReadingHasReadingRequiresUserModificationError.ReadingDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ReadingHasReadingRequiresUserModificationError.ReadingDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ReadingHasReadingRequiresUserModificationError.RequiresUserModificationErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ModelError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (ErrorText = {errorTextPropertyStorage})")]
	[DslModeling::DomainObjectId("16df5c5e-83ef-4edc-b54a-56d58d62d982")]
	public abstract partial class ModelError : ORMModelElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ModelError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x16df5c5e, 0x83ef, 0x4edc, 0xb5, 0x4a, 0x56, 0xd5, 0x8d, 0x62, 0xd9, 0x82);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ModelError(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ErrorText domain property code

		/// <summary>
		/// ErrorText domain property Id.
		/// </summary>
		public static readonly global::System.Guid ErrorTextDomainPropertyId = new global::System.Guid(0x6a6023e7, 0xac27, 0x4d86, 0xaf, 0xe4, 0x64, 0x28, 0x65, 0x9a, 0x04, 0x8e);

		/// <summary>
		/// Storage for ErrorText
		/// </summary>
		private global::System.String errorTextPropertyStorage = string.Empty;

		/// <summary>
		/// Gets or sets the value of ErrorText domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelError.ErrorText
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelError/ErrorText.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelError/ErrorText.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("6a6023e7-ac27-4d86-afe4-6428659a048e")]
		public global::System.String ErrorText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return errorTextPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ErrorTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelError.ErrorText domain property.
		/// </summary>
		internal sealed partial class ErrorTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelError, global::System.String>
		{
			private ErrorTextPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ModelError.ErrorText domain property value handler.
			/// </summary>
			public static readonly ErrorTextPropertyHandler Instance = new ErrorTextPropertyHandler();

			/// <summary>
			/// Gets the Id of the ModelError.ErrorText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ErrorTextDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelError element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.errorTextPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelError element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.errorTextPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasError.Error
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasError.ErrorDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasError.ErrorDomainRoleId, value);
			}
		}
		#endregion
		#region AssociatedElementCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of AssociatedElementCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> AssociatedElementCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>(this, global::Neumont.Tools.ORM.ObjectModel.ElementAssociatedWithModelError.ModelErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ReferenceModeKind
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7ec5e835-5eeb-4fb1-aa09-9bd6aba531e1")]
	public partial class ReferenceModeKind : ORMNamedElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ReferenceModeKind domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7ec5e835, 0x5eeb, 0x4fb1, 0xaa, 0x09, 0x9b, 0xd6, 0xab, 0xa5, 0x31, 0xe1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReferenceModeKind(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReferenceModeKind(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FormatString domain property code

		/// <summary>
		/// FormatString domain property Id.
		/// </summary>
		public static readonly global::System.Guid FormatStringDomainPropertyId = new global::System.Guid(0x3d1b9c67, 0xff56, 0x4345, 0xb4, 0x45, 0x30, 0xf1, 0xf3, 0x36, 0x76, 0x13);

		/// <summary>
		/// Storage for FormatString
		/// </summary>
		private global::System.String formatStringPropertyStorage = string.Empty;

		/// <summary>
		/// Gets or sets the value of FormatString domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.FormatString
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReferenceModeKind/FormatString.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReferenceModeKind/FormatString.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("3d1b9c67-ff56-4345-b445-30f1f3367613")]
		public global::System.String FormatString
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return formatStringPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FormatStringPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ReferenceModeKind.FormatString domain property.
		/// </summary>
		internal sealed partial class FormatStringPropertyHandler : DslModeling::DomainPropertyValueHandler<ReferenceModeKind, global::System.String>
		{
			private FormatStringPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ReferenceModeKind.FormatString domain property value handler.
			/// </summary>
			public static readonly FormatStringPropertyHandler Instance = new FormatStringPropertyHandler();

			/// <summary>
			/// Gets the Id of the ReferenceModeKind.FormatString domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FormatStringDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ReferenceModeKind element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.formatStringPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ReferenceModeKind element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.formatStringPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region ReferenceModeType domain property code

		/// <summary>
		/// ReferenceModeType domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceModeTypeDomainPropertyId = new global::System.Guid(0x3543e2cb, 0x037d, 0x4d6e, 0xa7, 0x6a, 0x10, 0xcb, 0xdf, 0xb0, 0x51, 0x46);

		/// <summary>
		/// Storage for ReferenceModeType
		/// </summary>
		private ReferenceModeType referenceModeTypePropertyStorage = Neumont.Tools.ORM.ObjectModel.ReferenceModeType.General;

		/// <summary>
		/// Gets or sets the value of ReferenceModeType domain property.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ReferenceModeKind.ReferenceModeType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReferenceModeKind/ReferenceModeType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReferenceModeKind/ReferenceModeType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Neumont.Tools.ORM.ObjectModel.ReferenceModeType.General)]
		[DslModeling::DomainObjectId("3543e2cb-037d-4d6e-a76a-10cbdfb05146")]
		public ReferenceModeType ReferenceModeType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return referenceModeTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReferenceModeTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ReferenceModeKind.ReferenceModeType domain property.
		/// </summary>
		internal sealed partial class ReferenceModeTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ReferenceModeKind, ReferenceModeType>
		{
			private ReferenceModeTypePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ReferenceModeKind.ReferenceModeType domain property value handler.
			/// </summary>
			public static readonly ReferenceModeTypePropertyHandler Instance = new ReferenceModeTypePropertyHandler();

			/// <summary>
			/// Gets the Id of the ReferenceModeKind.ReferenceModeType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReferenceModeTypeDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ReferenceModeType GetValue(ReferenceModeKind element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.referenceModeTypePropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ReferenceModeKind element, ReferenceModeType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				ReferenceModeType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.referenceModeTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKind
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindDomainRoleId, value);
			}
		}
		#endregion
		#region ReferenceModeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ReferenceModeCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.Kind
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ReferenceMode> ReferenceModeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ReferenceMode>(this, global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.KindDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass IntrinsicReferenceMode
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.IntrinsicReferenceMode.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.IntrinsicReferenceMode.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f34a46fd-d7ea-4423-b40f-90a6662cadb9")]
	public partial class IntrinsicReferenceMode : ReferenceMode
	{
		#region Constructors, domain class Id

		/// <summary>
		/// IntrinsicReferenceMode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf34a46fd, 0xd7ea, 0x4423, 0xb4, 0x0f, 0x90, 0xa6, 0x66, 0x2c, 0xad, 0xb9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IntrinsicReferenceMode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IntrinsicReferenceMode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass CustomReferenceMode
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.CustomReferenceMode.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.CustomReferenceMode.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bb33470d-3c98-4b2e-9134-9347c8008861")]
	public partial class CustomReferenceMode : ReferenceMode
	{
		#region Constructors, domain class Id

		/// <summary>
		/// CustomReferenceMode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbb33470d, 0x3c98, 0x4b2e, 0x91, 0x34, 0x93, 0x47, 0xc8, 0x00, 0x88, 0x61);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CustomReferenceMode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CustomReferenceMode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CustomFormatString domain property code

		/// <summary>
		/// CustomFormatString domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomFormatStringDomainPropertyId = new global::System.Guid(0x4a7202ff, 0x1d4f, 0x4770, 0x95, 0x3a, 0xd6, 0x3a, 0xda, 0x84, 0x9c, 0xb3);

		/// <summary>
		/// Storage for CustomFormatString
		/// </summary>
		private global::System.String customFormatStringPropertyStorage = string.Empty;

		/// <summary>
		/// Gets or sets the value of CustomFormatString domain property.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.CustomReferenceMode.CustomFormatString
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.CustomReferenceMode/CustomFormatString.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.CustomReferenceMode/CustomFormatString.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("4a7202ff-1d4f-4770-953a-d63ada849cb3")]
		public global::System.String CustomFormatString
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customFormatStringPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomFormatStringPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CustomReferenceMode.CustomFormatString domain property.
		/// </summary>
		internal sealed partial class CustomFormatStringPropertyHandler : DslModeling::DomainPropertyValueHandler<CustomReferenceMode, global::System.String>
		{
			private CustomFormatStringPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the CustomReferenceMode.CustomFormatString domain property value handler.
			/// </summary>
			public static readonly CustomFormatStringPropertyHandler Instance = new CustomFormatStringPropertyHandler();

			/// <summary>
			/// Gets the Id of the CustomReferenceMode.CustomFormatString domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomFormatStringDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CustomReferenceMode element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customFormatStringPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CustomReferenceMode element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customFormatStringPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ReferenceMode
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReferenceMode.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReferenceMode.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5123d945-262c-42b7-838d-1b7f4e5a911c")]
	public abstract partial class ReferenceMode : ORMNamedElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ReferenceMode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5123d945, 0x262c, 0x42b7, 0x83, 0x8d, 0x1b, 0x7f, 0x4e, 0x5a, 0x91, 0x1c);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ReferenceMode(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region KindDisplay domain property code

		/// <summary>
		/// KindDisplay domain property Id.
		/// </summary>
		public static readonly global::System.Guid KindDisplayDomainPropertyId = new global::System.Guid(0xbbc452ca, 0x0454, 0x4047, 0x91, 0x43, 0xb1, 0x1e, 0x06, 0x55, 0x56, 0xfb);

		/// <summary>
		/// Gets or sets the value of KindDisplay domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ReferenceMode.Kind
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::Neumont.Tools.ORM.ObjectModel.Design.ReferenceModeKindPicker), typeof(global::System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReferenceMode/KindDisplay.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReferenceMode/KindDisplay.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("bbc452ca-0454-4047-9143-b11e065556fb")]
		public ReferenceModeKind KindDisplay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return KindDisplayPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				KindDisplayPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ReferenceMode.KindDisplay domain property.
		/// </summary>
		internal sealed partial class KindDisplayPropertyHandler : DslModeling::DomainPropertyValueHandler<ReferenceMode, ReferenceModeKind>
		{
			private KindDisplayPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ReferenceMode.KindDisplay domain property value handler.
			/// </summary>
			public static readonly KindDisplayPropertyHandler Instance = new KindDisplayPropertyHandler();

			/// <summary>
			/// Gets the Id of the ReferenceMode.KindDisplay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return KindDisplayDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ReferenceModeKind GetValue(ReferenceMode element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for KindDisplay because its Kind is
				// set to CustomStorage. Please provide the GetKindDisplayValue()
				// method on the domain class.
				return element.GetKindDisplayValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ReferenceMode element, ReferenceModeKind newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				ReferenceModeKind oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for KindDisplay because its Kind is
					// set to CustomStorage. Please provide the SetKindDisplayValue()
					// method on the domain class.
					element.SetKindDisplayValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceMode
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasReferenceMode.ReferenceModeDomainRoleId, value);
			}
		}
		#endregion
		#region Kind opposite domain role accessor
		/// <summary>
		/// Gets or sets Kind.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceMode
		/// </summary>
		public virtual ReferenceModeKind Kind
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeDomainRoleId) as ReferenceModeKind;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass UnspecifiedDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.UnspecifiedDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.UnspecifiedDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b7dda0a4-c18a-4e85-8259-f529fc45f72e")]
	public partial class UnspecifiedDataType : DataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// UnspecifiedDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb7dda0a4, 0xc18a, 0x4e85, 0x82, 0x59, 0xf5, 0x29, 0xfc, 0x45, 0xf7, 0x2e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnspecifiedDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnspecifiedDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass FixedLengthTextDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FixedLengthTextDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FixedLengthTextDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2b525c4c-9b55-4c8d-98bb-63739e9d7c3d")]
	public partial class FixedLengthTextDataType : TextDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// FixedLengthTextDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2b525c4c, 0x9b55, 0x4c8d, 0x98, 0xbb, 0x63, 0x73, 0x9e, 0x9d, 0x7c, 0x3d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FixedLengthTextDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FixedLengthTextDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass VariableLengthTextDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.VariableLengthTextDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.VariableLengthTextDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6f30de79-85be-4194-b362-a39023a0e200")]
	public partial class VariableLengthTextDataType : TextDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// VariableLengthTextDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6f30de79, 0x85be, 0x4194, 0xb3, 0x62, 0xa3, 0x90, 0x23, 0xa0, 0xe2, 0x00);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VariableLengthTextDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VariableLengthTextDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass LargeLengthTextDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.LargeLengthTextDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.LargeLengthTextDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("27cbcb76-fac5-436a-950a-cc428fec9eed")]
	public partial class LargeLengthTextDataType : TextDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// LargeLengthTextDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x27cbcb76, 0xfac5, 0x436a, 0x95, 0x0a, 0xcc, 0x42, 0x8f, 0xec, 0x9e, 0xed);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LargeLengthTextDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LargeLengthTextDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass TextDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.TextDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.TextDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e1be56bd-6663-4f5c-af6a-39e03dfb2bfa")]
	public abstract partial class TextDataType : DataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// TextDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe1be56bd, 0x6663, 0x4f5c, 0xaf, 0x6a, 0x39, 0xe0, 0x3d, 0xfb, 0x2b, 0xfa);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected TextDataType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass SignedIntegerNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SignedIntegerNumericDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SignedIntegerNumericDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f4962b12-8c72-4fef-9c24-d23a5872a403")]
	public partial class SignedIntegerNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// SignedIntegerNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf4962b12, 0x8c72, 0x4fef, 0x9c, 0x24, 0xd2, 0x3a, 0x58, 0x72, 0xa4, 0x03);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SignedIntegerNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SignedIntegerNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass UnsignedIntegerNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.UnsignedIntegerNumericDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.UnsignedIntegerNumericDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9d76d09d-10f6-4db0-8890-1077a95fb364")]
	public partial class UnsignedIntegerNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// UnsignedIntegerNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9d76d09d, 0x10f6, 0x4db0, 0x88, 0x90, 0x10, 0x77, 0xa9, 0x5f, 0xb3, 0x64);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnsignedIntegerNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnsignedIntegerNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass AutoCounterNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.AutoCounterNumericDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.AutoCounterNumericDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e2f2cd9b-5c9d-439d-aeac-a2f093ed04fe")]
	public partial class AutoCounterNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// AutoCounterNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe2f2cd9b, 0x5c9d, 0x439d, 0xae, 0xac, 0xa2, 0xf0, 0x93, 0xed, 0x04, 0xfe);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AutoCounterNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AutoCounterNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass FloatingPointNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FloatingPointNumericDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FloatingPointNumericDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c82cd420-bb13-4f63-9ea7-850512e5b7dd")]
	public partial class FloatingPointNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// FloatingPointNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc82cd420, 0xbb13, 0x4f63, 0x9e, 0xa7, 0x85, 0x05, 0x12, 0xe5, 0xb7, 0xdd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FloatingPointNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FloatingPointNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass DecimalNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.DecimalNumericDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.DecimalNumericDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b86faadd-e5cf-4745-a796-fabd0310a4a8")]
	public partial class DecimalNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// DecimalNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb86faadd, 0xe5cf, 0x4745, 0xa7, 0x96, 0xfa, 0xbd, 0x03, 0x10, 0xa4, 0xa8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DecimalNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DecimalNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass MoneyNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.MoneyNumericDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.MoneyNumericDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("520a70da-acc3-47b2-b8ef-00af2ff6d170")]
	public partial class MoneyNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// MoneyNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x520a70da, 0xacc3, 0x47b2, 0xb8, 0xef, 0x00, 0xaf, 0x2f, 0xf6, 0xd1, 0x70);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MoneyNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MoneyNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass NumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.NumericDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.NumericDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("cccfb38b-956f-4e71-8cdc-7a9cd7d6052c")]
	public abstract partial class NumericDataType : DataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// NumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcccfb38b, 0x956f, 0x4e71, 0x8c, 0xdc, 0x7a, 0x9c, 0xd7, 0xd6, 0x05, 0x2c);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NumericDataType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass FixedLengthRawDataDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FixedLengthRawDataDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FixedLengthRawDataDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1aa62e47-0eb5-45b7-b1fa-ac17ef24e009")]
	public partial class FixedLengthRawDataDataType : RawDataDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// FixedLengthRawDataDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1aa62e47, 0x0eb5, 0x45b7, 0xb1, 0xfa, 0xac, 0x17, 0xef, 0x24, 0xe0, 0x09);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FixedLengthRawDataDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FixedLengthRawDataDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass VariableLengthRawDataDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.VariableLengthRawDataDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.VariableLengthRawDataDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("01a2ea3b-bc60-4e62-8819-26e81b8d871f")]
	public partial class VariableLengthRawDataDataType : RawDataDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// VariableLengthRawDataDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x01a2ea3b, 0xbc60, 0x4e62, 0x88, 0x19, 0x26, 0xe8, 0x1b, 0x8d, 0x87, 0x1f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VariableLengthRawDataDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VariableLengthRawDataDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass LargeLengthRawDataDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.LargeLengthRawDataDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.LargeLengthRawDataDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ff35ce6d-2bb6-4df4-a98c-d303a5698ad2")]
	public partial class LargeLengthRawDataDataType : RawDataDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// LargeLengthRawDataDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xff35ce6d, 0x2bb6, 0x4df4, 0xa9, 0x8c, 0xd3, 0x03, 0xa5, 0x69, 0x8a, 0xd2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LargeLengthRawDataDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LargeLengthRawDataDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass PictureRawDataDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.PictureRawDataDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.PictureRawDataDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d33dace5-3d70-4678-9325-058c1ccfd81f")]
	public partial class PictureRawDataDataType : RawDataDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// PictureRawDataDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd33dace5, 0x3d70, 0x4678, 0x93, 0x25, 0x05, 0x8c, 0x1c, 0xcf, 0xd8, 0x1f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PictureRawDataDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PictureRawDataDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass OleObjectRawDataDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.OleObjectRawDataDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.OleObjectRawDataDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0b79f4f9-09b6-408a-88a2-f8b1051c2b05")]
	public partial class OleObjectRawDataDataType : RawDataDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// OleObjectRawDataDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0b79f4f9, 0x09b6, 0x408a, 0x88, 0xa2, 0xf8, 0xb1, 0x05, 0x1c, 0x2b, 0x05);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public OleObjectRawDataDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public OleObjectRawDataDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass RawDataDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RawDataDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RawDataDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c5683946-df1b-42af-947a-006dd6875ccf")]
	public abstract partial class RawDataDataType : DataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// RawDataDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc5683946, 0xdf1b, 0x42af, 0x94, 0x7a, 0x00, 0x6d, 0xd6, 0x87, 0x5c, 0xcf);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected RawDataDataType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass AutoTimestampTemporalDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.AutoTimestampTemporalDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.AutoTimestampTemporalDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5553662c-93b7-4c7b-8723-ff56963ae644")]
	public partial class AutoTimestampTemporalDataType : TemporalDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// AutoTimestampTemporalDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5553662c, 0x93b7, 0x4c7b, 0x87, 0x23, 0xff, 0x56, 0x96, 0x3a, 0xe6, 0x44);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AutoTimestampTemporalDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AutoTimestampTemporalDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass TimeTemporalDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.TimeTemporalDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.TimeTemporalDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("13138b79-3cb9-479e-ac5b-569a755085c4")]
	public partial class TimeTemporalDataType : TemporalDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// TimeTemporalDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x13138b79, 0x3cb9, 0x479e, 0xac, 0x5b, 0x56, 0x9a, 0x75, 0x50, 0x85, 0xc4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TimeTemporalDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TimeTemporalDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass DateTemporalDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.DateTemporalDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.DateTemporalDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("abc122e6-894b-446e-8cd4-ead7d61fcc46")]
	public partial class DateTemporalDataType : TemporalDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// DateTemporalDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xabc122e6, 0x894b, 0x446e, 0x8c, 0xd4, 0xea, 0xd7, 0xd6, 0x1f, 0xcc, 0x46);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DateTemporalDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DateTemporalDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass DateAndTimeTemporalDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.DateAndTimeTemporalDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.DateAndTimeTemporalDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a5b3a699-dfb5-4522-b024-f55bde90ac6a")]
	public partial class DateAndTimeTemporalDataType : TemporalDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// DateAndTimeTemporalDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa5b3a699, 0xdfb5, 0x4522, 0xb0, 0x24, 0xf5, 0x5b, 0xde, 0x90, 0xac, 0x6a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DateAndTimeTemporalDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DateAndTimeTemporalDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass TemporalDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.TemporalDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.TemporalDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bfbef833-dd04-4db3-a167-d1314273b2c6")]
	public abstract partial class TemporalDataType : DataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// TemporalDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbfbef833, 0xdd04, 0x4db3, 0xa1, 0x67, 0xd1, 0x31, 0x42, 0x73, 0xb2, 0xc6);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected TemporalDataType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass TrueOrFalseLogicalDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.TrueOrFalseLogicalDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.TrueOrFalseLogicalDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("689ea7b7-31a8-4800-a98e-99ccd21e112c")]
	public partial class TrueOrFalseLogicalDataType : LogicalDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// TrueOrFalseLogicalDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x689ea7b7, 0x31a8, 0x4800, 0xa9, 0x8e, 0x99, 0xcc, 0xd2, 0x1e, 0x11, 0x2c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TrueOrFalseLogicalDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TrueOrFalseLogicalDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass YesOrNoLogicalDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.YesOrNoLogicalDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.YesOrNoLogicalDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7e694d96-8444-4007-bfeb-c1b0bd3f96de")]
	public partial class YesOrNoLogicalDataType : LogicalDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// YesOrNoLogicalDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7e694d96, 0x8444, 0x4007, 0xbf, 0xeb, 0xc1, 0xb0, 0xbd, 0x3f, 0x96, 0xde);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public YesOrNoLogicalDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public YesOrNoLogicalDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass LogicalDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.LogicalDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.LogicalDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a7d4d492-2702-4b87-bd9e-0d7d7d85943a")]
	public abstract partial class LogicalDataType : DataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// LogicalDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa7d4d492, 0x2702, 0x4b87, 0xbd, 0x9e, 0x0d, 0x7d, 0x7d, 0x85, 0x94, 0x3a);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected LogicalDataType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass RowIdOtherDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RowIdOtherDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RowIdOtherDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("42a558f7-1a61-49a6-a207-a706faf94dd8")]
	public partial class RowIdOtherDataType : OtherDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// RowIdOtherDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x42a558f7, 0x1a61, 0x49a6, 0xa2, 0x07, 0xa7, 0x06, 0xfa, 0xf9, 0x4d, 0xd8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RowIdOtherDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RowIdOtherDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ObjectIdOtherDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectIdOtherDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectIdOtherDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("48b82dab-a7e2-4dab-8d53-9840cf7a15dd")]
	public partial class ObjectIdOtherDataType : OtherDataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ObjectIdOtherDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x48b82dab, 0xa7e2, 0x4dab, 0x8d, 0x53, 0x98, 0x40, 0xcf, 0x7a, 0x15, 0xdd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectIdOtherDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectIdOtherDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass OtherDataType
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.OtherDataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.OtherDataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0b801e67-9d48-49f7-aa13-9c7bd8153624")]
	public abstract partial class OtherDataType : DataType
	{
		#region Constructors, domain class Id

		/// <summary>
		/// OtherDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0b801e67, 0x9d48, 0x49f7, 0xaa, 0x13, 0x9c, 0x7b, 0xd8, 0x15, 0x36, 0x24);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected OtherDataType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass DataType
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::Neumont.Tools.Modeling.Design.ElementTypeDescriptionProvider<DataType, Design.DataTypeTypeDescriptor<DataType>>))]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.DataType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.DataType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9d0c6367-617f-4a8c-a0e5-5da23828ed61")]
	public abstract partial class DataType : ORMModelElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// DataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9d0c6367, 0x617f, 0x4a8c, 0xa0, 0xe5, 0x5d, 0xa2, 0x38, 0x28, 0xed, 0x61);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected DataType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ValueTypeCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ObjectType> ValueTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ObjectType>(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasDataType.DataTypeDomainRoleId);
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasDataType.DataType
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasDataType.DataTypeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass Reading
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::Neumont.Tools.Modeling.Design.ElementTypeDescriptionProvider<Reading, Design.ReadingTypeDescriptor<Reading>>))]
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Reading.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Reading.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7544854f-a4a7-4429-8859-f1d3b0e52b03")]
	public partial class Reading : ORMModelElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// Reading domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7544854f, 0xa4a7, 0x4429, 0x88, 0x59, 0xf1, 0xd3, 0xb0, 0xe5, 0x2b, 0x03);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Reading(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Reading(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code

		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0xa6239359, 0x0ac5, 0x4934, 0xb3, 0x8a, 0x01, 0x1a, 0xa1, 0xf9, 0x35, 0xa6);

		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;

		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.Reading.Text
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Reading/Text.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Reading/Text.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("a6239359-0ac5-4934-b38a-011aa1f935a6")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Reading.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Reading, global::System.String>
		{
			private TextPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the Reading.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();

			/// <summary>
			/// Gets the Id of the Reading.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Reading element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Reading element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region IsPrimaryForReadingOrder domain property code

		/// <summary>
		/// IsPrimaryForReadingOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPrimaryForReadingOrderDomainPropertyId = new global::System.Guid(0x1a989428, 0xc41c, 0x498a, 0xbd, 0x90, 0x1b, 0x92, 0xa7, 0x03, 0xaa, 0x27);

		/// <summary>
		/// Gets or sets the value of IsPrimaryForReadingOrder domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.Reading.IsPrimaryForReadingOrder
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Reading/IsPrimaryForReadingOrder.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Reading/IsPrimaryForReadingOrder.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("1a989428-c41c-498a-bd90-1b92a703aa27")]
		public global::System.Boolean IsPrimaryForReadingOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsPrimaryForReadingOrderPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPrimaryForReadingOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Reading.IsPrimaryForReadingOrder domain property.
		/// </summary>
		internal sealed partial class IsPrimaryForReadingOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<Reading, global::System.Boolean>
		{
			private IsPrimaryForReadingOrderPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the Reading.IsPrimaryForReadingOrder domain property value handler.
			/// </summary>
			public static readonly IsPrimaryForReadingOrderPropertyHandler Instance = new IsPrimaryForReadingOrderPropertyHandler();

			/// <summary>
			/// Gets the Id of the Reading.IsPrimaryForReadingOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPrimaryForReadingOrderDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Reading element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsPrimaryForReadingOrder because its Kind is
				// set to CustomStorage. Please provide the GetIsPrimaryForReadingOrderValue()
				// method on the domain class.
				return element.GetIsPrimaryForReadingOrderValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Reading element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IsPrimaryForReadingOrder because its Kind is
					// set to CustomStorage. Please provide the SetIsPrimaryForReadingOrderValue()
					// method on the domain class.
					element.SetIsPrimaryForReadingOrderValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region Language domain property code

		/// <summary>
		/// Language domain property Id.
		/// </summary>
		public static readonly global::System.Guid LanguageDomainPropertyId = new global::System.Guid(0x34c42f00, 0x5d21, 0x4731, 0x8e, 0x38, 0x9a, 0x03, 0x27, 0x1f, 0x04, 0x5a);

		/// <summary>
		/// Storage for Language
		/// </summary>
		private global::System.String languagePropertyStorage = string.Empty;

		/// <summary>
		/// Gets or sets the value of Language domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.Reading.Language
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Reading/Language.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Reading/Language.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("34c42f00-5d21-4731-8e38-9a03271f045a")]
		public global::System.String Language
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return languagePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LanguagePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Reading.Language domain property.
		/// </summary>
		internal sealed partial class LanguagePropertyHandler : DslModeling::DomainPropertyValueHandler<Reading, global::System.String>
		{
			private LanguagePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the Reading.Language domain property value handler.
			/// </summary>
			public static readonly LanguagePropertyHandler Instance = new LanguagePropertyHandler();

			/// <summary>
			/// Gets the Id of the Reading.Language domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LanguageDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Reading element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.languagePropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Reading element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.languagePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region IsPrimaryForFactType domain property code

		/// <summary>
		/// IsPrimaryForFactType domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPrimaryForFactTypeDomainPropertyId = new global::System.Guid(0x1c5a6551, 0x972d, 0x42a6, 0xb4, 0x3d, 0xae, 0xc6, 0xd7, 0x30, 0x19, 0x77);

		/// <summary>
		/// Gets or sets the value of IsPrimaryForFactType domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.Reading.IsPrimaryForFactType
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Reading/IsPrimaryForFactType.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Reading/IsPrimaryForFactType.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("1c5a6551-972d-42a6-b43d-aec6d7301977")]
		public global::System.Boolean IsPrimaryForFactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsPrimaryForFactTypePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPrimaryForFactTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Reading.IsPrimaryForFactType domain property.
		/// </summary>
		internal sealed partial class IsPrimaryForFactTypePropertyHandler : DslModeling::DomainPropertyValueHandler<Reading, global::System.Boolean>
		{
			private IsPrimaryForFactTypePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the Reading.IsPrimaryForFactType domain property value handler.
			/// </summary>
			public static readonly IsPrimaryForFactTypePropertyHandler Instance = new IsPrimaryForFactTypePropertyHandler();

			/// <summary>
			/// Gets the Id of the Reading.IsPrimaryForFactType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPrimaryForFactTypeDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Reading element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsPrimaryForFactType because its Kind is
				// set to CustomStorage. Please provide the GetIsPrimaryForFactTypeValue()
				// method on the domain class.
				return element.GetIsPrimaryForFactTypeValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Reading element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IsPrimaryForFactType because its Kind is
					// set to CustomStorage. Please provide the SetIsPrimaryForFactTypeValue()
					// method on the domain class.
					element.SetIsPrimaryForFactTypeValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region ReadingOrder opposite domain role accessor
		/// <summary>
		/// Gets or sets ReadingOrder.
		/// Description for Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.Reading
		/// </summary>
		public virtual ReadingOrder ReadingOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingDomainRoleId) as ReadingOrder;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingDomainRoleId, value);
			}
		}
		#endregion
		#region TooManyRolesError opposite domain role accessor
		/// <summary>
		/// Gets or sets TooManyRolesError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.Reading
		/// </summary>
		public virtual TooManyReadingRolesError TooManyRolesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingDomainRoleId) as TooManyReadingRolesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooManyRolesError.ReadingDomainRoleId, value);
				}
			}
		}
		#endregion
		#region TooFewRolesError opposite domain role accessor
		/// <summary>
		/// Gets or sets TooFewRolesError.
		/// Description for Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.Reading
		/// </summary>
		public virtual TooFewReadingRolesError TooFewRolesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingDomainRoleId) as TooFewReadingRolesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ReadingHasTooFewRolesError.ReadingDomainRoleId, value);
				}
			}
		}
		#endregion
		#region RequiresUserModificationError opposite domain role accessor
		/// <summary>
		/// Gets or sets RequiresUserModificationError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ReadingHasReadingRequiresUserModificationError.Reading
		/// </summary>
		public virtual ReadingRequiresUserModificationError RequiresUserModificationError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ReadingHasReadingRequiresUserModificationError.ReadingDomainRoleId) as ReadingRequiresUserModificationError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ReadingHasReadingRequiresUserModificationError.RequiresUserModificationErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ReadingHasReadingRequiresUserModificationError.RequiresUserModificationErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ReadingHasReadingRequiresUserModificationError.ReadingDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ReadingOrder
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReadingOrder.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReadingOrder.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7cb4a39b-d11f-48fc-bfed-b80f5d3fc54e")]
	public partial class ReadingOrder : ORMModelElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ReadingOrder domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7cb4a39b, 0xd11f, 0x48fc, 0xbf, 0xed, 0xb8, 0x0f, 0x5d, 0x3f, 0xc5, 0x4e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReadingOrder(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReadingOrder(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ReadingText domain property code

		/// <summary>
		/// ReadingText domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReadingTextDomainPropertyId = new global::System.Guid(0x4e75ad63, 0xa42b, 0x4571, 0x85, 0xce, 0x81, 0xa4, 0xc5, 0xe0, 0x2c, 0x23);

		/// <summary>
		/// Gets or sets the value of ReadingText domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ReadingOrder.ReadingText
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::Neumont.Tools.ORM.ObjectModel.Design.ReadingTextEditor), typeof(global::System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ReadingOrder/ReadingText.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ReadingOrder/ReadingText.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("4e75ad63-a42b-4571-85ce-81a4c5e02c23")]
		public global::System.String ReadingText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ReadingTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReadingTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ReadingOrder.ReadingText domain property.
		/// </summary>
		internal sealed partial class ReadingTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ReadingOrder, global::System.String>
		{
			private ReadingTextPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ReadingOrder.ReadingText domain property value handler.
			/// </summary>
			public static readonly ReadingTextPropertyHandler Instance = new ReadingTextPropertyHandler();

			/// <summary>
			/// Gets the Id of the ReadingOrder.ReadingText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReadingTextDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ReadingOrder element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ReadingText because its Kind is
				// set to CustomStorage. Please provide the GetReadingTextValue()
				// method on the domain class.
				return element.GetReadingTextValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ReadingOrder element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ReadingText because its Kind is
					// set to CustomStorage. Please provide the SetReadingTextValue()
					// method on the domain class.
					element.SetReadingTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region ReadingCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ReadingCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrder
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Reading> ReadingCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Reading>(this, global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasReading.ReadingOrderDomainRoleId);
			}
		}
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrder
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasReadingOrder.ReadingOrderDomainRoleId, value);
			}
		}
		#endregion
		#region RoleCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of RoleCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.ReadingOrder
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RoleBase> RoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<RoleBase>(this, global::Neumont.Tools.ORM.ObjectModel.ReadingOrderHasRole.ReadingOrderDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ValueRange
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueRange.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueRange.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8987ecea-6c2a-4825-8c9f-465005272ce8")]
	public partial class ValueRange : ORMModelElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ValueRange domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8987ecea, 0x6c2a, 0x4825, 0x8c, 0x9f, 0x46, 0x50, 0x05, 0x27, 0x2c, 0xe8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueRange(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueRange(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region MinValue domain property code

		/// <summary>
		/// MinValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid MinValueDomainPropertyId = new global::System.Guid(0x59b141fd, 0x47ed, 0x43ff, 0x83, 0x7e, 0x85, 0x8f, 0x14, 0x0f, 0xad, 0x57);

		/// <summary>
		/// Storage for MinValue
		/// </summary>
		private global::System.String minValuePropertyStorage = string.Empty;

		/// <summary>
		/// Gets or sets the value of MinValue domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ValueRange.MinValue
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueRange/MinValue.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueRange/MinValue.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("59b141fd-47ed-43ff-837e-858f140fad57")]
		public global::System.String MinValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return minValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MinValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueRange.MinValue domain property.
		/// </summary>
		internal sealed partial class MinValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ValueRange, global::System.String>
		{
			private MinValuePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ValueRange.MinValue domain property value handler.
			/// </summary>
			public static readonly MinValuePropertyHandler Instance = new MinValuePropertyHandler();

			/// <summary>
			/// Gets the Id of the ValueRange.MinValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MinValueDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ValueRange element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.minValuePropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueRange element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.minValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region MaxValue domain property code

		/// <summary>
		/// MaxValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid MaxValueDomainPropertyId = new global::System.Guid(0x08199824, 0x9ddc, 0x4878, 0x8e, 0x04, 0xe0, 0xf4, 0x32, 0x06, 0x97, 0x26);

		/// <summary>
		/// Storage for MaxValue
		/// </summary>
		private global::System.String maxValuePropertyStorage = string.Empty;

		/// <summary>
		/// Gets or sets the value of MaxValue domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ValueRange.MaxValue
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueRange/MaxValue.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueRange/MaxValue.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("08199824-9ddc-4878-8e04-e0f432069726")]
		public global::System.String MaxValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return maxValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MaxValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueRange.MaxValue domain property.
		/// </summary>
		internal sealed partial class MaxValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ValueRange, global::System.String>
		{
			private MaxValuePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ValueRange.MaxValue domain property value handler.
			/// </summary>
			public static readonly MaxValuePropertyHandler Instance = new MaxValuePropertyHandler();

			/// <summary>
			/// Gets the Id of the ValueRange.MaxValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MaxValueDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ValueRange element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.maxValuePropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueRange element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.maxValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region Text domain property code

		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x1fb8c126, 0x4481, 0x41d0, 0xb4, 0x1c, 0x5a, 0x30, 0xbc, 0x72, 0x45, 0xde);

		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ValueRange.Text
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueRange/Text.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueRange/Text.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("1fb8c126-4481-41d0-b41c-5a30bc7245de")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueRange.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<ValueRange, global::System.String>
		{
			private TextPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ValueRange.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();

			/// <summary>
			/// Gets the Id of the ValueRange.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ValueRange element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Text because its Kind is
				// set to CustomStorage. Please provide the GetTextValue()
				// method on the domain class.
				return element.GetTextValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueRange element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Text because its Kind is
					// set to CustomStorage. Please provide the SetTextValue()
					// method on the domain class.
					element.SetTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region MinInclusion domain property code

		/// <summary>
		/// MinInclusion domain property Id.
		/// </summary>
		public static readonly global::System.Guid MinInclusionDomainPropertyId = new global::System.Guid(0xcde9fc53, 0xbe51, 0x4c27, 0x9e, 0x6c, 0x67, 0x5c, 0xdb, 0x58, 0x0f, 0x3a);

		/// <summary>
		/// Storage for MinInclusion
		/// </summary>
		private RangeInclusion minInclusionPropertyStorage = Neumont.Tools.ORM.ObjectModel.RangeInclusion.NotSet;

		/// <summary>
		/// Gets or sets the value of MinInclusion domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ValueRange.MinInclusion
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueRange/MinInclusion.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueRange/MinInclusion.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Neumont.Tools.ORM.ObjectModel.RangeInclusion.NotSet)]
		[DslModeling::DomainObjectId("cde9fc53-be51-4c27-9e6c-675cdb580f3a")]
		public RangeInclusion MinInclusion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return minInclusionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MinInclusionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueRange.MinInclusion domain property.
		/// </summary>
		internal sealed partial class MinInclusionPropertyHandler : DslModeling::DomainPropertyValueHandler<ValueRange, RangeInclusion>
		{
			private MinInclusionPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ValueRange.MinInclusion domain property value handler.
			/// </summary>
			public static readonly MinInclusionPropertyHandler Instance = new MinInclusionPropertyHandler();

			/// <summary>
			/// Gets the Id of the ValueRange.MinInclusion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MinInclusionDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed RangeInclusion GetValue(ValueRange element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.minInclusionPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueRange element, RangeInclusion newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				RangeInclusion oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.minInclusionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region MaxInclusion domain property code

		/// <summary>
		/// MaxInclusion domain property Id.
		/// </summary>
		public static readonly global::System.Guid MaxInclusionDomainPropertyId = new global::System.Guid(0xeb018230, 0x2726, 0x4206, 0xae, 0x2e, 0x1c, 0x91, 0x1b, 0x60, 0x6f, 0xc1);

		/// <summary>
		/// Storage for MaxInclusion
		/// </summary>
		private RangeInclusion maxInclusionPropertyStorage = Neumont.Tools.ORM.ObjectModel.RangeInclusion.NotSet;

		/// <summary>
		/// Gets or sets the value of MaxInclusion domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ValueRange.MaxInclusion
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueRange/MaxInclusion.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueRange/MaxInclusion.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Neumont.Tools.ORM.ObjectModel.RangeInclusion.NotSet)]
		[DslModeling::DomainObjectId("eb018230-2726-4206-ae2e-1c911b606fc1")]
		public RangeInclusion MaxInclusion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return maxInclusionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MaxInclusionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueRange.MaxInclusion domain property.
		/// </summary>
		internal sealed partial class MaxInclusionPropertyHandler : DslModeling::DomainPropertyValueHandler<ValueRange, RangeInclusion>
		{
			private MaxInclusionPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ValueRange.MaxInclusion domain property value handler.
			/// </summary>
			public static readonly MaxInclusionPropertyHandler Instance = new MaxInclusionPropertyHandler();

			/// <summary>
			/// Gets the Id of the ValueRange.MaxInclusion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MaxInclusionDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed RangeInclusion GetValue(ValueRange element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.maxInclusionPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueRange element, RangeInclusion newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				RangeInclusion oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.maxInclusionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region ValueConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueRange
		/// </summary>
		public virtual ValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueRangeDomainRoleId) as ValueConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueRangeDomainRoleId, value);
			}
		}
		#endregion
		#region MaxValueMismatchError opposite domain role accessor
		/// <summary>
		/// Gets or sets MaxValueMismatchError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRange
		/// </summary>
		public virtual MaxValueMismatchError MaxValueMismatchError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId) as MaxValueMismatchError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region MinValueMismatchError opposite domain role accessor
		/// <summary>
		/// Gets or sets MinValueMismatchError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRange
		/// </summary>
		public virtual MinValueMismatchError MinValueMismatchError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId) as MinValueMismatchError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ValueTypeValueConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeValueConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e46b0a2e-460e-4ff7-b447-c9c09597b500")]
	public partial class ValueTypeValueConstraint : ValueConstraint
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ValueTypeValueConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe46b0a2e, 0x460e, 0x4ff7, 0xb4, 0x47, 0xc9, 0xc0, 0x95, 0x97, 0xb5, 0x00);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueTypeValueConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueTypeValueConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueType opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueType.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraint
		/// </summary>
		public virtual ObjectType ValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass RoleValueConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RoleValueConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RoleValueConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6c223b62-6239-4514-81c5-aad6a10d3a2d")]
	public partial class RoleValueConstraint : ValueConstraint
	{
		#region Constructors, domain class Id

		/// <summary>
		/// RoleValueConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6c223b62, 0x6239, 0x4514, 0x81, 0xc5, 0xaa, 0xd6, 0xa1, 0x0d, 0x3a, 0x2d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RoleValueConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RoleValueConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Role opposite domain role accessor
		/// <summary>
		/// Gets or sets Role.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraint
		/// </summary>
		public virtual Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraintDomainRoleId) as Role;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.RoleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.RoleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.RoleHasValueConstraint.ValueConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ValueConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueConstraint.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueConstraint.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ef2efead-a124-413c-8f86-c95e2b47160c")]
	public abstract partial class ValueConstraint : ORMNamedElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ValueConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xef2efead, 0xa124, 0x413c, 0x8f, 0x86, 0xc9, 0x5e, 0x2b, 0x47, 0x16, 0x0c);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ValueConstraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code

		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x410fce34, 0xdacb, 0x4f59, 0x94, 0xa6, 0xff, 0x7e, 0x42, 0x10, 0x8e, 0x74);

		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ValueConstraint.Text
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueConstraint/Text.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueConstraint/Text.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("410fce34-dacb-4f59-94a6-ff7e42108e74")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueConstraint.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<ValueConstraint, global::System.String>
		{
			private TextPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ValueConstraint.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();

			/// <summary>
			/// Gets the Id of the ValueConstraint.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ValueConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Text because its Kind is
				// set to CustomStorage. Please provide the GetTextValue()
				// method on the domain class.
				return element.GetTextValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueConstraint element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Text because its Kind is
					// set to CustomStorage. Please provide the SetTextValue()
					// method on the domain class.
					element.SetTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region TextChanged domain property code

		/// <summary>
		/// TextChanged domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextChangedDomainPropertyId = new global::System.Guid(0xacb49806, 0xa830, 0x431d, 0x95, 0x9f, 0x20, 0xc7, 0xdd, 0x9c, 0x1d, 0x4d);

		/// <summary>
		/// Gets or sets the value of TextChanged domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ValueConstraint.TextChanged
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueConstraint/TextChanged.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueConstraint/TextChanged.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("acb49806-a830-431d-959f-20c7dd9c1d4d")]
		public global::System.Int64 TextChanged
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TextChangedPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextChangedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueConstraint.TextChanged domain property.
		/// </summary>
		internal sealed partial class TextChangedPropertyHandler : DslModeling::DomainPropertyValueHandler<ValueConstraint, global::System.Int64>
		{
			private TextChangedPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ValueConstraint.TextChanged domain property value handler.
			/// </summary>
			public static readonly TextChangedPropertyHandler Instance = new TextChangedPropertyHandler();

			/// <summary>
			/// Gets the Id of the ValueConstraint.TextChanged domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextChangedDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int64 GetValue(ValueConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TextChanged because its Kind is
				// set to CustomStorage. Please provide the GetTextChangedValue()
				// method on the domain class.
				return element.GetTextChangedValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueConstraint element, global::System.Int64 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Int64 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for TextChanged because its Kind is
					// set to CustomStorage. Please provide the SetTextChangedValue()
					// method on the domain class.
					element.SetTextChangedValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region ValueRangeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ValueRangeCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ValueRange> ValueRangeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ValueRange>(this, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRange.ValueConstraintDomainRoleId);
			}
		}
		#endregion
		#region DuplicateNameError opposite domain role accessor
		/// <summary>
		/// Gets or sets DuplicateNameError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraint
		/// </summary>
		public virtual ConstraintDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintDomainRoleId) as ConstraintDuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region ValueRangeOverlapError opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueRangeOverlapError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraint
		/// </summary>
		public virtual ValueRangeOverlapError ValueRangeOverlapError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId) as ValueRangeOverlapError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ValueMismatchError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueMismatchError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueMismatchError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a18fa855-e7ca-4716-8e8d-1606c09b090a")]
	public abstract partial class ValueMismatchError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ValueMismatchError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa18fa855, 0xe7ca, 0x4716, 0x8e, 0x8d, 0x16, 0x06, 0xc0, 0x9b, 0x09, 0x0a);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ValueMismatchError(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass MinValueMismatchError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.MinValueMismatchError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.MinValueMismatchError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7e0d53cf-d374-4eda-b6a6-04d381aa0dc5")]
	public partial class MinValueMismatchError : ValueMismatchError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// MinValueMismatchError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7e0d53cf, 0xd374, 0x4eda, 0xb6, 0xa6, 0x04, 0xd3, 0x81, 0xaa, 0x0d, 0xc5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MinValueMismatchError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MinValueMismatchError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueRange opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueRange.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchError
		/// </summary>
		public virtual ValueRange ValueRange
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorDomainRoleId) as ValueRange;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass MaxValueMismatchError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.MaxValueMismatchError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.MaxValueMismatchError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("cce42465-23a0-4726-8881-3adb48e2cc67")]
	public partial class MaxValueMismatchError : ValueMismatchError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// MaxValueMismatchError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcce42465, 0x23a0, 0x4726, 0x88, 0x81, 0x3a, 0xdb, 0x48, 0xe2, 0xcc, 0x67);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MaxValueMismatchError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MaxValueMismatchError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueRange opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueRange.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchError
		/// </summary>
		public virtual ValueRange ValueRange
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorDomainRoleId) as ValueRange;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ImpliedInternalUniquenessConstraintError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ImpliedInternalUniquenessConstraintError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b7381f8b-c95e-408d-9747-4b6bb35c1171")]
	public partial class ImpliedInternalUniquenessConstraintError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ImpliedInternalUniquenessConstraintError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb7381f8b, 0xc95e, 0x408d, 0x97, 0x47, 0x4b, 0x6b, 0xb3, 0x5c, 0x11, 0x71);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpliedInternalUniquenessConstraintError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpliedInternalUniquenessConstraintError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintError
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass FrequencyConstraintContradictsInternalUniquenessConstraintError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FrequencyConstraintContradictsInternalUniquenessConstraintError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a080c2b2-f666-4689-a63e-bd97cb0491e2")]
	public partial class FrequencyConstraintContradictsInternalUniquenessConstraintError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// FrequencyConstraintContradictsInternalUniquenessConstraintError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa080c2b2, 0xf666, 0x4689, 0xa6, 0x3e, 0xbd, 0x97, 0xcb, 0x04, 0x91, 0xe2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraintContradictsInternalUniquenessConstraintError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraintContradictsInternalUniquenessConstraintError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FrequencyConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets FrequencyConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintError
		/// </summary>
		public virtual FrequencyConstraint FrequencyConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId) as FrequencyConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FrequencyConstraintHasFrequencyConstraintInvalidatedByInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId, value);
			}
		}
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintError
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFrequencyConstraintContradictsInternalUniquenessConstraintError.FrequencyConstraintContradictsInternalUniquenessConstraintErrorDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass RingConstraintTypeNotSpecifiedError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.RingConstraintTypeNotSpecifiedError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("15026270-dfd6-470d-a997-233173e644dc")]
	public partial class RingConstraintTypeNotSpecifiedError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// RingConstraintTypeNotSpecifiedError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x15026270, 0xdfd6, 0x470d, 0xa9, 0x97, 0x23, 0x31, 0x73, 0xe6, 0x44, 0xdc);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RingConstraintTypeNotSpecifiedError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RingConstraintTypeNotSpecifiedError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RingConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets RingConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedError
		/// </summary>
		public virtual RingConstraint RingConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorDomainRoleId) as RingConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass SubtypeMetaRole
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SubtypeMetaRole.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SubtypeMetaRole.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4ad109e1-3ab4-4f8a-a862-1694aee06289")]
	public partial class SubtypeMetaRole : Role
	{
		#region Constructors, domain class Id

		/// <summary>
		/// SubtypeMetaRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4ad109e1, 0x3ab4, 0x4f8a, 0xa8, 0x62, 0x16, 0x94, 0xae, 0xe0, 0x62, 0x89);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubtypeMetaRole(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubtypeMetaRole(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass SupertypeMetaRole
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.SupertypeMetaRole.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.SupertypeMetaRole.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e559a725-bba4-4068-b247-dc8c4b1628d7")]
	public partial class SupertypeMetaRole : Role
	{
		#region Constructors, domain class Id

		/// <summary>
		/// SupertypeMetaRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe559a725, 0xbba4, 0x4068, 0xb2, 0x47, 0xdc, 0x8c, 0x4b, 0x16, 0x28, 0xd7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SupertypeMetaRole(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SupertypeMetaRole(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ObjectTypeRequiresPrimarySupertypeError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeRequiresPrimarySupertypeError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c35dee5a-63c5-457c-a015-6e988cbab8c5")]
	public partial class ObjectTypeRequiresPrimarySupertypeError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ObjectTypeRequiresPrimarySupertypeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc35dee5a, 0x63c5, 0x457c, 0xa0, 0x15, 0x6e, 0x98, 0x8c, 0xba, 0xb8, 0xc5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectTypeRequiresPrimarySupertypeError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectTypeRequiresPrimarySupertypeError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectType.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeError
		/// </summary>
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasObjectTypeRequiresPrimarySupertypeError.ObjectTypeRequiresPrimarySupertypeErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass Note
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Note.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Note.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c3de6c8c-2215-49b0-bd70-70d2c3630c33")]
	public partial class Note : ORMModelElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// Note domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc3de6c8c, 0x2215, 0x49b0, 0xbd, 0x70, 0x70, 0xd2, 0xc3, 0x63, 0x0c, 0x33);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Note(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Note(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code

		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x0ef3bc12, 0x45ff, 0x46a8, 0xb3, 0x25, 0xcd, 0xfc, 0xc1, 0x05, 0xa1, 0xe1);

		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;

		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.Note.Note
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::Neumont.Tools.Modeling.Design.MultilineTextEditor<global::Neumont.Tools.ORM.ObjectModel.Note>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.Note/Text.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.Note/Text.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("0ef3bc12-45ff-46a8-b325-cdfcc105a1e1")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Note.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Note, global::System.String>
		{
			private TextPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the Note.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();

			/// <summary>
			/// Gets the Id of the Note.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Note element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Note element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.Note
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.NoteDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.FactTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasNote.NoteDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectType.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.Note
		/// </summary>
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.NoteDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.ObjectTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasNote.NoteDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ModelNote
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ModelNote.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ModelNote.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("41d610c9-bacc-473d-bfe6-7034e6ff0b11")]
	public partial class ModelNote : Note
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ModelNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x41d610c9, 0xbacc, 0x473d, 0xbf, 0xe6, 0x70, 0x34, 0xe6, 0xff, 0x0b, 0x11);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelNote(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelNote(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelHasModelNote.Note
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote.NoteDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ModelHasModelNote.NoteDomainRoleId, value);
			}
		}
		#endregion
		#region ElementCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ElementCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement.Note
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> ElementCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::ReadOnlyLinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>(this, global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesModelElement.NoteDomainRoleId);
			}
		}
		#endregion
		#region FactTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType.Note
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactType> FactTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FactType>(this, global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesFactType.NoteDomainRoleId);
			}
		}
		#endregion
		#region ObjectTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ObjectTypeCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType.Note
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ObjectType> ObjectTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ObjectType>(this, global::Neumont.Tools.ORM.ObjectModel.ModelNoteReferencesObjectType.NoteDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass CompatibleSupertypesError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.CompatibleSupertypesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("70a9ed25-7a0e-4dec-b39d-83bb1a6294b8")]
	public partial class CompatibleSupertypesError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// CompatibleSupertypesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x70a9ed25, 0x7a0e, 0x4dec, 0xb3, 0x9d, 0x83, 0xbb, 0x1a, 0x62, 0x94, 0xb8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompatibleSupertypesError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompatibleSupertypesError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectType.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesError
		/// </summary>
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ImplicationError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ImplicationError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ImplicationError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("78026aea-19eb-497a-a596-25c929f67aa8")]
	public partial class ImplicationError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ImplicationError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x78026aea, 0x19eb, 0x497a, 0xa5, 0x96, 0x25, 0xc9, 0x29, 0xf6, 0x7a, 0xa8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImplicationError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImplicationError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SetConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.ImplicationError
		/// </summary>
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.ImplicationErrorDomainRoleId) as SetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.SetConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.SetConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetConstraintHasImplicationError.ImplicationErrorDomainRoleId, value);
				}
			}
		}
		#endregion
		#region SetComparisonConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetComparisonConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.ImplicationError
		/// </summary>
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.ImplicationErrorDomainRoleId) as SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasImplicationError.ImplicationErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass EqualityOrSubsetImpliedByMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EqualityOrSubsetImpliedByMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EqualityOrSubsetImpliedByMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("80b1f784-858e-483b-91a5-e55cfeba44b9")]
	public partial class EqualityOrSubsetImpliedByMandatoryError : ImplicationError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// EqualityOrSubsetImpliedByMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x80b1f784, 0x858e, 0x483b, 0x91, 0xa5, 0xe5, 0x5c, 0xfe, 0xba, 0x44, 0xb9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EqualityOrSubsetImpliedByMandatoryError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EqualityOrSubsetImpliedByMandatoryError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetComparisonConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryError
		/// </summary>
		public override SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId) as SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != (SetComparisonConstraint)value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement((SetComparisonConstraint)value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId)))
				{
					if (existingSource != (SetComparisonConstraint)value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement((SetComparisonConstraint)value, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId, (SetComparisonConstraint)value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass PreferredIdentifierRequiresMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.PreferredIdentifierRequiresMandatoryError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("129cce68-7ce9-4a97-bad3-c36b4d372a77")]
	public partial class PreferredIdentifierRequiresMandatoryError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// PreferredIdentifierRequiresMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x129cce68, 0x7ce9, 0x4a97, 0xba, 0xd3, 0xc3, 0x6b, 0x4d, 0x37, 0x2a, 0x77);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PreferredIdentifierRequiresMandatoryError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PreferredIdentifierRequiresMandatoryError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectType.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryError
		/// </summary>
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ValueRangeOverlapError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueRangeOverlapError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2cf1ee1a-1737-4868-9b5c-95b2c0f9488b")]
	public partial class ValueRangeOverlapError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ValueRangeOverlapError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2cf1ee1a, 0x1737, 0x4868, 0x9b, 0x5c, 0x95, 0xb2, 0xc0, 0xf9, 0x48, 0x8b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueRangeOverlapError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueRangeOverlapError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueConstraint.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapError
		/// </summary>
		public virtual ValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorDomainRoleId) as ValueConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass FactTypeDerivationExpression
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2a29f892-b69b-4eeb-bf50-a0e59b6e64c2")]
	public partial class FactTypeDerivationExpression : Expression
	{
		#region Constructors, domain class Id

		/// <summary>
		/// FactTypeDerivationExpression domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2a29f892, 0xb69b, 0x4eeb, 0xbf, 0x50, 0xa0, 0xe5, 0x9b, 0x6e, 0x64, 0xc2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeDerivationExpression(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeDerivationExpression(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DerivationStorage domain property code

		/// <summary>
		/// DerivationStorage domain property Id.
		/// </summary>
		public static readonly global::System.Guid DerivationStorageDomainPropertyId = new global::System.Guid(0x6b011b44, 0x9854, 0x436a, 0xad, 0xed, 0x7b, 0xbc, 0x63, 0x5a, 0x7c, 0x1f);

		/// <summary>
		/// Storage for DerivationStorage
		/// </summary>
		private DerivationStorageType derivationStoragePropertyStorage = Neumont.Tools.ORM.ObjectModel.DerivationStorageType.Derived;

		/// <summary>
		/// Gets or sets the value of DerivationStorage domain property.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression.DerivationStorage
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression/DerivationStorage.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeDerivationExpression/DerivationStorage.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Neumont.Tools.ORM.ObjectModel.DerivationStorageType.Derived)]
		[DslModeling::DomainObjectId("6b011b44-9854-436a-aded-7bbc635a7c1f")]
		public DerivationStorageType DerivationStorage
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return derivationStoragePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DerivationStoragePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactTypeDerivationExpression.DerivationStorage domain property.
		/// </summary>
		internal sealed partial class DerivationStoragePropertyHandler : DslModeling::DomainPropertyValueHandler<FactTypeDerivationExpression, DerivationStorageType>
		{
			private DerivationStoragePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the FactTypeDerivationExpression.DerivationStorage domain property value handler.
			/// </summary>
			public static readonly DerivationStoragePropertyHandler Instance = new DerivationStoragePropertyHandler();

			/// <summary>
			/// Gets the Id of the FactTypeDerivationExpression.DerivationStorage domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DerivationStorageDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DerivationStorageType GetValue(FactTypeDerivationExpression element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.derivationStoragePropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactTypeDerivationExpression element, DerivationStorageType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				DerivationStorageType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.derivationStoragePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRule
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.FactTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ObjectTypeInstance
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {Name})")]
	[DslModeling::DomainObjectId("870f5ee8-0859-4710-a526-66635f4efd14")]
	public abstract partial class ObjectTypeInstance : ORMModelElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ObjectTypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x870f5ee8, 0x0859, 0x4710, 0xa5, 0x26, 0x66, 0x63, 0x5f, 0x4e, 0xfd, 0x14);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ObjectTypeInstance(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code

		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x553deb12, 0x8fe0, 0x4fe4, 0xb9, 0x4e, 0x52, 0xf1, 0xcd, 0x5d, 0xcf, 0x0a);

		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectTypeInstance.Name
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeInstance/Name.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeInstance/Name.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::ElementName]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("553deb12-8fe0-4fe4-b94e-52f1cd5dcf0a")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NamePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the ObjectTypeInstance.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::CalculatedPropertyValueHandler<ObjectTypeInstance, global::System.String>
		{
			private NamePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ObjectTypeInstance.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();

			/// <summary>
			/// Gets the Id of the ObjectTypeInstance.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectTypeInstance element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Name because its Kind is
				// set to Calculated. Please provide the GetNameValue()
				// method on the domain class.
				return element.GetNameValue();
			}

		}

		#endregion
		#region NameChanged domain property code

		/// <summary>
		/// NameChanged domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameChangedDomainPropertyId = new global::System.Guid(0xf1e0bb68, 0xf047, 0x464b, 0xb1, 0x7b, 0x6b, 0xa8, 0x65, 0x14, 0x4b, 0xb4);

		/// <summary>
		/// Gets or sets the value of NameChanged domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ObjectTypeInstance.NameChanged
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeInstance/NameChanged.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ObjectTypeInstance/NameChanged.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("f1e0bb68-f047-464b-b17b-6ba865144bb4")]
		public global::System.Int64 NameChanged
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NameChangedPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NameChangedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectTypeInstance.NameChanged domain property.
		/// </summary>
		internal sealed partial class NameChangedPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectTypeInstance, global::System.Int64>
		{
			private NameChangedPropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ObjectTypeInstance.NameChanged domain property value handler.
			/// </summary>
			public static readonly NameChangedPropertyHandler Instance = new NameChangedPropertyHandler();

			/// <summary>
			/// Gets the Id of the ObjectTypeInstance.NameChanged domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameChangedDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int64 GetValue(ObjectTypeInstance element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NameChanged because its Kind is
				// set to CustomStorage. Please provide the GetNameChangedValue()
				// method on the domain class.
				return element.GetNameChangedValue();
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectTypeInstance element, global::System.Int64 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.Int64 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NameChanged because its Kind is
					// set to CustomStorage. Please provide the SetNameChangedValue()
					// method on the domain class.
					element.SetNameChangedValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region PopulationMandatoryErrorCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of PopulationMandatoryErrorCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.ObjectTypeInstance
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PopulationMandatoryError> PopulationMandatoryErrorCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<PopulationMandatoryError>(this, global::Neumont.Tools.ORM.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.ObjectTypeInstanceDomainRoleId);
			}
		}
		#endregion
		#region RoleCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of RoleCollection.
		/// Description for Neumont.Tools.ORM.ObjectModel.RoleInstance.ObjectTypeInstance
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<Role> RoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::ReadOnlyLinkedElementCollection<Role>(this, global::Neumont.Tools.ORM.ObjectModel.RoleInstance.ObjectTypeInstanceDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass EntityTypeInstance
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.EntityTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.EntityTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5f8b6a1c-3020-41c9-97b4-e54a3e98b368")]
	public partial class EntityTypeInstance : ObjectTypeInstance
	{
		#region Constructors, domain class Id

		/// <summary>
		/// EntityTypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5f8b6a1c, 0x3020, 0x41c9, 0x97, 0xb4, 0xe5, 0x4a, 0x3e, 0x98, 0xb3, 0x68);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityTypeInstance(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityTypeInstance(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EntityType opposite domain role accessor
		/// <summary>
		/// Gets or sets EntityType.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeInstance
		/// </summary>
		public virtual ObjectType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeInstanceDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeInstanceDomainRoleId, value);
			}
		}
		#endregion
		#region RoleInstanceCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of RoleInstanceCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance.EntityTypeInstance
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntityTypeRoleInstance> RoleInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<EntityTypeRoleInstance>(this, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasRoleInstance.EntityTypeInstanceDomainRoleId);
			}
		}
		#endregion
		#region TooFewEntityTypeRoleInstancesError opposite domain role accessor
		/// <summary>
		/// Gets or sets TooFewEntityTypeRoleInstancesError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstance
		/// </summary>
		public virtual TooFewEntityTypeRoleInstancesError TooFewEntityTypeRoleInstancesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId) as TooFewEntityTypeRoleInstancesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass ValueTypeInstance
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bcc1483d-cbb8-4e4f-903b-16224768f6f5")]
	public partial class ValueTypeInstance : ObjectTypeInstance
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ValueTypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbcc1483d, 0xcbb8, 0x4e4f, 0x90, 0x3b, 0x16, 0x22, 0x47, 0x68, 0xf6, 0xf5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueTypeInstance(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueTypeInstance(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Value domain property code

		/// <summary>
		/// Value domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainPropertyId = new global::System.Guid(0x1d0232ba, 0xa92f, 0x4b81, 0x99, 0xbf, 0x2a, 0x2a, 0x44, 0x82, 0x10, 0x30);

		/// <summary>
		/// Storage for Value
		/// </summary>
		private global::System.String valuePropertyStorage = string.Empty;

		/// <summary>
		/// Gets or sets the value of Value domain property.
		/// Description for Neumont.Tools.ORM.ObjectModel.ValueTypeInstance.Value
		/// </summary>
		[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.ValueTypeInstance/Value.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.ValueTypeInstance/Value.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("1d0232ba-a92f-4b81-99bf-2a2a44821030")]
		public global::System.String Value
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return valuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueTypeInstance.Value domain property.
		/// </summary>
		internal sealed partial class ValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ValueTypeInstance, global::System.String>
		{
			private ValuePropertyHandler() { }

			/// <summary>
			/// Gets the singleton instance of the ValueTypeInstance.Value domain property value handler.
			/// </summary>
			public static readonly ValuePropertyHandler Instance = new ValuePropertyHandler();

			/// <summary>
			/// Gets the Id of the ValueTypeInstance.Value domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueDomainPropertyId;
				}
			}

			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ValueTypeInstance element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.valuePropertyStorage;
			}

			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueTypeInstance element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");

				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.valuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}

		#endregion
		#region ValueType opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueType.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeInstance
		/// </summary>
		public virtual ObjectType ValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeInstanceDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeInstanceDomainRoleId, value);
			}
		}
		#endregion
		#region CompatibleValueTypeInstanceValueError opposite domain role accessor
		/// <summary>
		/// Gets or sets CompatibleValueTypeInstanceValueError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstance
		/// </summary>
		public virtual CompatibleValueTypeInstanceValueError CompatibleValueTypeInstanceValueError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId) as CompatibleValueTypeInstanceValueError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass FactTypeInstance
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.FactTypeInstance.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.FactTypeInstance.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("78458a27-fdb1-4b6e-9d0a-d42dd8d5aead")]
	public partial class FactTypeInstance : ORMModelElement
	{
		#region Constructors, domain class Id

		/// <summary>
		/// FactTypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x78458a27, 0xfdb1, 0x4b6e, 0x9d, 0x0a, 0xd4, 0x2d, 0xd8, 0xd5, 0xae, 0xad);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeInstance(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeInstance(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance.FactTypeInstance
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance.FactTypeInstanceDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeHasFactTypeInstance.FactTypeInstanceDomainRoleId, value);
			}
		}
		#endregion
		#region RoleInstanceCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of RoleInstanceCollection.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance.FactTypeInstance
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactTypeRoleInstance> RoleInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FactTypeRoleInstance>(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasRoleInstance.FactTypeInstanceDomainRoleId);
			}
		}
		#endregion
		#region TooFewFactTypeRoleInstancesError opposite domain role accessor
		/// <summary>
		/// Gets or sets TooFewFactTypeRoleInstancesError.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstance
		/// </summary>
		public virtual TooFewFactTypeRoleInstancesError TooFewFactTypeRoleInstancesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId) as TooFewFactTypeRoleInstancesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass TooFewEntityTypeRoleInstancesError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.TooFewEntityTypeRoleInstancesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.TooFewEntityTypeRoleInstancesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("39f447ea-8ea4-483d-b791-848ad27544e2")]
	public partial class TooFewEntityTypeRoleInstancesError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// TooFewEntityTypeRoleInstancesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x39f447ea, 0x8ea4, 0x483d, 0xb7, 0x91, 0x84, 0x8a, 0xd2, 0x75, 0x44, 0xe2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooFewEntityTypeRoleInstancesError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooFewEntityTypeRoleInstancesError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EntityTypeInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets EntityTypeInstance.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesError
		/// </summary>
		public virtual EntityTypeInstance EntityTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesErrorDomainRoleId) as EntityTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass TooFewFactTypeRoleInstancesError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.TooFewFactTypeRoleInstancesError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.TooFewFactTypeRoleInstancesError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("be44dd74-2569-421e-8e1b-abcdc7810c92")]
	public partial class TooFewFactTypeRoleInstancesError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// TooFewFactTypeRoleInstancesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbe44dd74, 0x2569, 0x421e, 0x8e, 0x1b, 0xab, 0xcd, 0xc7, 0x81, 0x0c, 0x92);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooFewFactTypeRoleInstancesError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooFewFactTypeRoleInstancesError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FactTypeInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets FactTypeInstance.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesError
		/// </summary>
		public virtual FactTypeInstance FactTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesErrorDomainRoleId) as FactTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace Neumont.Tools.ORM.ObjectModel
{
	/// <summary>
	/// DomainClass CompatibleValueTypeInstanceValueError
	/// </summary>
	[DslDesign::DisplayNameResource("Neumont.Tools.ORM.ObjectModel.CompatibleValueTypeInstanceValueError.DisplayName", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("Neumont.Tools.ORM.ObjectModel.CompatibleValueTypeInstanceValueError.Description", typeof(global::Neumont.Tools.ORM.ObjectModel.ORMCoreDomainModel), "Neumont.Tools.ORM.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d5b21137-31e8-444d-bcd2-58bbf442b4c0")]
	public partial class CompatibleValueTypeInstanceValueError : ModelError
	{
		#region Constructors, domain class Id

		/// <summary>
		/// CompatibleValueTypeInstanceValueError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd5b21137, 0x31e8, 0x444d, 0xbc, 0xd2, 0x58, 0xbb, 0xf4, 0x42, 0xb4, 0xc0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompatibleValueTypeInstanceValueError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompatibleValueTypeInstanceValueError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueTypeInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueTypeInstance.
		/// Description for
		/// Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueError
		/// </summary>
		public virtual ValueTypeInstance ValueTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueErrorDomainRoleId) as ValueTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Neumont.Tools.ORM.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
