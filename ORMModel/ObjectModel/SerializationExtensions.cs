//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.44
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Northface.Tools.ORM.ObjectModel
{
    using System;
    using System.Collections;
    using System.Collections.ObjectModel;
    using System.Collections.Generic;
    using Microsoft.VisualStudio.Modeling;
    using Microsoft.VisualStudio.Modeling.Diagrams;
    using Northface.Tools.ORM.Shell;
    
    /// <summary>
    ///</summary>
    public partial class ORMMetaModel : IORMCustomSerializedMetaModel
    {
        private Dictionary<MetaClassInfo, object> myCustomSerializationOmissions;
        private static Dictionary<string, Guid> myClassNameMap;
        private static Collection<string> myValidNamespaces;
        /// <summary>
        ///</summary>
        protected static string DefaultElementPrefix
        {
            get
            {
                return "orm";
            }
        }
        string IORMCustomSerializedMetaModel.DefaultElementPrefix
        {
            get
            {
                return ORMMetaModel.DefaultElementPrefix;
            }
        }
        /// <summary>
        ///</summary>
        protected static string[,] GetCustomElementNamespaces()
        {
            string[,] ret = new string[2, 2];
            ret[0, 0] = "orm";
            ret[0, 1] = "http://Schemas.Northface.edu/ORM/ORMCore";
            ret[1, 0] = "ormDerived";
            ret[1, 1] = "http://Schemas.Northface.edu/ORM/ORMDerived";
            return ret;
        }
        string[,] IORMCustomSerializedMetaModel.GetCustomElementNamespaces()
        {
            return ORMMetaModel.GetCustomElementNamespaces();
        }
        private static Dictionary<MetaClassInfo, object> BuildCustomSerializationOmissions(Store store)
        {
            Dictionary<MetaClassInfo, object> retVal = new Dictionary<MetaClassInfo, object>();
            MetaDataDirectory dataDir = store.MetaDataDirectory;
            retVal[dataDir.FindMetaRelationship(MultiColumnExternalFactConstraint.MetaRelationshipGuid)] = null;
            retVal[dataDir.FindMetaRelationship(SingleColumnExternalFactConstraint.MetaRelationshipGuid)] = null;
            retVal[dataDir.FindMetaRelationship(ExternalRoleConstraint.MetaRelationshipGuid)] = null;
            retVal[dataDir.FindMetaClass(IntrinsicReferenceMode.MetaClassGuid)] = null;
            retVal[dataDir.FindMetaRelationship(Microsoft.VisualStudio.Modeling.SubjectHasPresentation.MetaRelationshipGuid)] = null;
            return retVal;
        }
        /// <summary>
        ///</summary>
        protected bool ShouldSerializeMetaClass(Store store, MetaClassInfo classInfo)
        {
            Dictionary<MetaClassInfo, object> omissions = this.myCustomSerializationOmissions;
            if ((omissions == null))
            {
                omissions = ORMMetaModel.BuildCustomSerializationOmissions(store);
                this.myCustomSerializationOmissions = omissions;
            }
            return !(omissions.ContainsKey(classInfo));
        }
        bool IORMCustomSerializedMetaModel.ShouldSerializeMetaClass(Store store, MetaClassInfo classInfo)
        {
            return this.ShouldSerializeMetaClass(store, classInfo);
        }
        /// <summary>
        ///</summary>
        protected static Guid[] GetRootElementClasses()
        {
            return new Guid[] {
                    ORMModel.MetaClassGuid};
        }
        Guid[] IORMCustomSerializedMetaModel.GetRootElementClasses()
        {
            return ORMMetaModel.GetRootElementClasses();
        }
        /// <summary>
        ///</summary>
        protected static Guid MapRootElement(string xmlNamespace, string elementName)
        {
            if (((elementName == "ORMModel") 
                        && (xmlNamespace == "http://Schemas.Northface.edu/ORM/ORMCore")))
            {
                return ORMModel.MetaClassGuid;
            }
            return default(Guid);
        }
        Guid IORMCustomSerializedMetaModel.MapRootElement(string xmlNamespace, string elementName)
        {
            return ORMMetaModel.MapRootElement(xmlNamespace, elementName);
        }
        /// <summary>
        ///</summary>
        protected static Guid MapClassName(string xmlNamespace, string elementName)
        {
            Collection<string> validNamespaces = ORMMetaModel.myValidNamespaces;
            Dictionary<string, Guid> classNameMap = ORMMetaModel.myClassNameMap;
            if ((validNamespaces == null))
            {
                validNamespaces = new Collection<string>();
                validNamespaces.Add("http://Schemas.Northface.edu/ORM/ORMCore");
                validNamespaces.Add("http://Schemas.Northface.edu/ORM/ORMDerived");
                ORMMetaModel.myValidNamespaces = validNamespaces;
            }
            if ((classNameMap == null))
            {
                classNameMap = new Dictionary<string, Guid>();
                classNameMap.Add("ORMModel", ORMModel.MetaClassGuid);
                classNameMap.Add("EntityType", ObjectType.MetaClassGuid);
                classNameMap.Add("ValueType", ObjectType.MetaClassGuid);
                classNameMap.Add("ObjectifiedType", ObjectType.MetaClassGuid);
                classNameMap.Add("CustomReferenceMode", CustomReferenceMode.MetaClassGuid);
                classNameMap.Add("ValueTypeHasDataType", ValueTypeHasDataType.MetaClassGuid);
                classNameMap.Add("DataType", DataType.MetaClassGuid);
                classNameMap.Add("ReferenceModeKind", ReferenceModeKind.MetaClassGuid);
                classNameMap.Add("BaseValueRangeDefinition", ValueRangeDefinition.MetaClassGuid);
                classNameMap.Add("ValueRangeDefinition", ValueTypeValueRangeDefinition.MetaClassGuid);
                classNameMap.Add("RoleValueRangeDefinition", RoleValueRangeDefinition.MetaClassGuid);
                classNameMap.Add("Fact", FactType.MetaClassGuid);
                classNameMap.Add("ReadingOrder", ReadingOrder.MetaClassGuid);
                classNameMap.Add("Reading", Reading.MetaClassGuid);
                classNameMap.Add("Role", Role.MetaClassGuid);
                classNameMap.Add("MultiColumnExternalConstraint", MultiColumnExternalConstraint.MetaClassGuid);
                classNameMap.Add("RoleSequence", MultiColumnExternalConstraintRoleSequence.MetaClassGuid);
                classNameMap.Add("SingleColumnExternalConstraint", SingleColumnExternalConstraint.MetaClassGuid);
                classNameMap.Add("ExternalUniquenessConstraint", ExternalUniquenessConstraint.MetaClassGuid);
                classNameMap.Add("InternalUniquenessConstraint", InternalUniquenessConstraint.MetaClassGuid);
                classNameMap.Add("SimpleMandatoryConstraint", SimpleMandatoryConstraint.MetaClassGuid);
                classNameMap.Add("EqualityConstraint", EqualityConstraint.MetaClassGuid);
                classNameMap.Add("ConstraintDuplicateNameError", ConstraintDuplicateNameError.MetaClassGuid);
                classNameMap.Add("FactTypeDuplicateNameError", FactTypeDuplicateNameError.MetaClassGuid);
                classNameMap.Add("ObjectTypeDuplicateNameError", ObjectTypeDuplicateNameError.MetaClassGuid);
                classNameMap.Add("EntityTypeRequiresReferenceSchemeError", EntityTypeRequiresReferenceSchemeError.MetaClassGuid);
                classNameMap.Add("ExternalConstraintRoleSequenceArityMismatchError", ExternalConstraintRoleSequenceArityMismatchError.MetaClassGuid);
                classNameMap.Add("FactTypeRequiresInternalUniquenessConstraintError", FactTypeRequiresInternalUniquenessConstraintError.MetaClassGuid);
                classNameMap.Add("FactTypeRequiresReadingError", FactTypeRequiresReadingError.MetaClassGuid);
                classNameMap.Add("TooFewReadingRolesError", TooFewReadingRolesError.MetaClassGuid);
                classNameMap.Add("TooFewRoleSequencesError", TooFewRoleSequencesError.MetaClassGuid);
                classNameMap.Add("TooManyReadingRolesError", TooManyReadingRolesError.MetaClassGuid);
                classNameMap.Add("TooManyRoleSequencesError", TooManyRoleSequencesError.MetaClassGuid);
                classNameMap.Add("DataTypeNotSpecifiedError", DataTypeNotSpecifiedError.MetaClassGuid);
                classNameMap.Add("EqualityIsImpliedByMandatoryError", EqualityIsImpliedByMandatoryError.MetaClassGuid);
                classNameMap.Add("NMinusOneError", NMinusOneError.MetaClassGuid);
                classNameMap.Add("CompatibleRolePlayerTypeError", CompatibleRolePlayerTypeError.MetaClassGuid);
                classNameMap.Add("RolePlayerRequiredError", RolePlayerRequiredError.MetaClassGuid);
                ORMMetaModel.myClassNameMap = classNameMap;
            }
            if ((validNamespaces.Contains(xmlNamespace) && classNameMap.ContainsKey(elementName)))
            {
                return classNameMap[elementName];
            }
            return default(Guid);
        }
        Guid IORMCustomSerializedMetaModel.MapClassName(string xmlNamespace, string elementName)
        {
            return ORMMetaModel.MapClassName(xmlNamespace, elementName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class ORMModel : IORMCustomSerializedElement
    {
        private static Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] myCustomSerializedChildElementInfo;
        private static IComparer<MetaRoleInfo> myCustomSortChildComparer;
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.ChildElementInfo 
                            | (ORMCustomSerializedElementSupportedOperations.ElementInfo | ORMCustomSerializedElementSupportedOperations.CustomSortChildRoles));
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                return new ORMCustomSerializedElementInfo(null, "ORMModel", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                IComparer<MetaRoleInfo> retVal = ORMModel.myCustomSortChildComparer;
                if ((null == retVal))
                {
                    retVal = new CustomSortChildComparer(this.Store);
                    ORMModel.myCustomSortChildComparer = retVal;
                }
                return retVal;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] ret = ORMModel.myCustomSerializedChildElementInfo;
            if ((ret == null))
            {
                ret = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[7];
                ret[0] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "Objects", null, ORMCustomSerializedElementWriteStyle.Element, null, ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid);
                ret[1] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "Facts", null, ORMCustomSerializedElementWriteStyle.Element, null, ModelHasFactType.FactTypeCollectionMetaRoleGuid);
                ret[2] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "ExternalConstraints", null, ORMCustomSerializedElementWriteStyle.Element, null, ModelHasMultiColumnExternalConstraint.MultiColumnExternalConstraintCollectionMetaRoleGuid, ModelHasSingleColumnExternalConstraint.SingleColumnExternalConstraintCollectionMetaRoleGuid);
                ret[3] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "DataTypes", null, ORMCustomSerializedElementWriteStyle.Element, null, ModelHasDataType.DataTypeCollectionMetaRoleGuid);
                ret[4] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "CustomReferenceModes", null, ORMCustomSerializedElementWriteStyle.Element, null, ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuid);
                ret[5] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "ModelErrors", null, ORMCustomSerializedElementWriteStyle.Element, null, ModelHasError.ErrorCollectionMetaRoleGuid);
                ret[6] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "ReferenceModeKinds", null, ORMCustomSerializedElementWriteStyle.Element, null, ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuid);
                ORMModel.myCustomSerializedChildElementInfo = ret;
            }
            return ret;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = ORMModel.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|Objects||", match);
                match.InitializeRoles(ModelHasFactType.FactTypeCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|Facts||", match);
                match.InitializeRoles(ModelHasMultiColumnExternalConstraint.MultiColumnExternalConstraintCollectionMetaRoleGuid, ModelHasSingleColumnExternalConstraint.SingleColumnExternalConstraintCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|ExternalConstraints||", match);
                match.InitializeRoles(ModelHasDataType.DataTypeCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|DataTypes||", match);
                match.InitializeRoles(ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|CustomReferenceModes||", match);
                match.InitializeRoles(ModelHasError.ErrorCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|ModelErrors||", match);
                match.InitializeRoles(ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|ReferenceModeKinds||", match);
                ORMModel.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
        private class CustomSortChildComparer : IComparer<MetaRoleInfo>
        {
            private Dictionary<MetaRoleInfo, int> myRoleOrderDictionary;
            /// <summary>
            ///</summary>
            public CustomSortChildComparer(Store store)
            {
                MetaDataDirectory metaDataDir = store.MetaDataDirectory;
                Dictionary<MetaRoleInfo, int> roleOrderDictionary = new Dictionary<MetaRoleInfo, int>();
                MetaRoleInfo metaRole;
                metaRole = metaDataDir.FindMetaRole(ModelHasObjectType.ObjectTypeCollectionMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 0;
                metaRole = metaDataDir.FindMetaRole(ModelHasFactType.FactTypeCollectionMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 1;
                metaRole = metaDataDir.FindMetaRole(ModelHasMultiColumnExternalConstraint.MultiColumnExternalConstraintCollectionMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 2;
                metaRole = metaDataDir.FindMetaRole(ModelHasSingleColumnExternalConstraint.SingleColumnExternalConstraintCollectionMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 2;
                metaRole = metaDataDir.FindMetaRole(ModelHasDataType.DataTypeCollectionMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 3;
                metaRole = metaDataDir.FindMetaRole(ModelHasReferenceMode.ReferenceModeCollectionMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 4;
                metaRole = metaDataDir.FindMetaRole(ModelHasError.ErrorCollectionMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 5;
                metaRole = metaDataDir.FindMetaRole(ModelHasReferenceModeKind.ReferenceModeKindCollectionMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 6;
                this.myRoleOrderDictionary = roleOrderDictionary;
            }
            /// <summary>
            ///</summary>
            public int Compare(MetaRoleInfo x, MetaRoleInfo y)
            {
                int xPos;
                if (!(this.myRoleOrderDictionary.TryGetValue(x, out xPos)))
                {
                    xPos = int.MaxValue;
                }
                int yPos;
                if (!(this.myRoleOrderDictionary.TryGetValue(y, out yPos)))
                {
                    yPos = int.MaxValue;
                }
                if ((xPos == yPos))
                {
                    return 0;
                }
                else
                {
                    if ((xPos < yPos))
                    {
                        return -1;
                    }
                }
                return 1;
            }
        }
    }
    /// <summary>
    ///</summary>
    public partial class ObjectType : IORMCustomSerializedElement
    {
        private static Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] myCustomSerializedChildElementInfo;
        private static IComparer<MetaRoleInfo> myCustomSortChildComparer;
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        private static Dictionary<string, Guid> myCustomSerializedAttributes;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.ChildElementInfo 
                            | (ORMCustomSerializedElementSupportedOperations.ElementInfo 
                            | (ORMCustomSerializedElementSupportedOperations.AttributeInfo 
                            | (ORMCustomSerializedElementSupportedOperations.LinkInfo | ORMCustomSerializedElementSupportedOperations.CustomSortChildRoles))));
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                string name = "EntityType";
                if (this.IsValueType)
                {
                    
										name = "ValueType";
                }
                else
                {
                    if ((this.NestedFactType != null))
                    {
                        
												name = "ObjectifiedType";
                    }
                }
                return new ORMCustomSerializedElementInfo(null, 
						name, null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                IComparer<MetaRoleInfo> retVal = ObjectType.myCustomSortChildComparer;
                if ((null == retVal))
                {
                    retVal = new CustomSortChildComparer(this.Store);
                    ObjectType.myCustomSortChildComparer = retVal;
                }
                return retVal;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] ret = ObjectType.myCustomSerializedChildElementInfo;
            if ((ret == null))
            {
                ret = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[2];
                ret[0] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "PlayedRoles", null, ORMCustomSerializedElementWriteStyle.Element, null, ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuid);
                ret[1] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "ValueConstraint", null, ORMCustomSerializedElementWriteStyle.Element, null, ValueTypeHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid);
                ObjectType.myCustomSerializedChildElementInfo = ret;
            }
            return ret;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((attributeInfo.Id == ObjectType.ReferenceModeStringMetaAttributeGuid))
            {
                if (this.IsValueType)
                {
                    return new ORMCustomSerializedAttributeInfo(null, null, null, false, ORMCustomSerializedAttributeWriteStyle.NotWritten, null);
                }
                if ((this.NestedFactType != null))
                {
                    return new ORMCustomSerializedAttributeInfo(null, null, null, false, ORMCustomSerializedAttributeWriteStyle.NotWritten, null);
                }
                return new ORMCustomSerializedAttributeInfo(null, "ReferenceMode", null, true, ORMCustomSerializedAttributeWriteStyle.Attribute, null);
            }
            return ORMCustomSerializedAttributeInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == ValueTypeHasDataType.DataTypeMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "ConceptualDataType", null, ORMCustomSerializedElementWriteStyle.PrimaryLinkElement, null);
            }
            if ((rolePlayedInfo.Id == ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Role", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            if ((rolePlayedInfo.Id == NestingEntityTypeHasFactType.NestedFactTypeMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "NestedPredicate", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            if ((rolePlayedInfo.Id == EntityTypeHasPreferredIdentifier.PreferredIdentifierMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "PreferredIdentifier", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            if ((rolePlayedInfo.Id == ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, null, null, ORMCustomSerializedElementWriteStyle.NotWritten, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = ObjectType.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(ValueTypeHasDataType.DataTypeMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|ConceptualDataType", match);
                match.InitializeRoles(NestingEntityTypeHasFactType.NestedFactTypeMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|NestedPredicate", match);
                match.InitializeRoles(EntityTypeHasPreferredIdentifier.PreferredIdentifierMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|PreferredIdentifier", match);
                match.InitializeRoles(ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|PlayedRoles|http://Schemas.Northface.edu" +
                        "/ORM/ORMCore|Role", match);
                match.InitializeRoles(ValueTypeHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|ValueConstraint||", match);
                ObjectType.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            Dictionary<string, Guid> customSerializedAttributes = ObjectType.myCustomSerializedAttributes;
            if ((customSerializedAttributes == null))
            {
                customSerializedAttributes = new Dictionary<string, Guid>();
                customSerializedAttributes.Add("ReferenceMode", ObjectType.ReferenceModeStringMetaAttributeGuid);
                ObjectType.myCustomSerializedAttributes = customSerializedAttributes;
            }
            Guid rVal;
            string key = attributeName;
            if (!((xmlNamespace.Length == 0)))
            {
                key = string.Concat(xmlNamespace, "|", attributeName);
            }
            customSerializedAttributes.TryGetValue(key, out rVal);
            return rVal;
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
        private class CustomSortChildComparer : IComparer<MetaRoleInfo>
        {
            private Dictionary<MetaRoleInfo, int> myRoleOrderDictionary;
            /// <summary>
            ///</summary>
            public CustomSortChildComparer(Store store)
            {
                MetaDataDirectory metaDataDir = store.MetaDataDirectory;
                Dictionary<MetaRoleInfo, int> roleOrderDictionary = new Dictionary<MetaRoleInfo, int>();
                MetaRoleInfo metaRole;
                metaRole = metaDataDir.FindMetaRole(ObjectTypePlaysRole.PlayedRoleCollectionMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 0;
                metaRole = metaDataDir.FindMetaRole(ValueTypeHasDataType.DataTypeMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 1;
                metaRole = metaDataDir.FindMetaRole(ValueTypeHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 2;
                metaRole = metaDataDir.FindMetaRole(NestingEntityTypeHasFactType.NestedFactTypeMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 3;
                metaRole = metaDataDir.FindMetaRole(EntityTypeHasPreferredIdentifier.PreferredIdentifierMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 4;
                metaRole = metaDataDir.FindMetaRole(ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 5;
                this.myRoleOrderDictionary = roleOrderDictionary;
            }
            /// <summary>
            ///</summary>
            public int Compare(MetaRoleInfo x, MetaRoleInfo y)
            {
                int xPos;
                if (!(this.myRoleOrderDictionary.TryGetValue(x, out xPos)))
                {
                    xPos = int.MaxValue;
                }
                int yPos;
                if (!(this.myRoleOrderDictionary.TryGetValue(y, out yPos)))
                {
                    yPos = int.MaxValue;
                }
                if ((xPos == yPos))
                {
                    return 0;
                }
                else
                {
                    if ((xPos < yPos))
                    {
                        return -1;
                    }
                }
                return 1;
            }
        }
    }
    /// <summary>
    ///</summary>
    public partial class CustomReferenceMode : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.AttributeInfo 
                            | (ORMCustomSerializedElementSupportedOperations.LinkInfo | ORMCustomSerializedElementSupportedOperations.MixedTypedAttributes));
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((attributeInfo.Id == CustomReferenceMode.CustomFormatStringMetaAttributeGuid))
            {
                return new ORMCustomSerializedAttributeInfo(null, null, null, false, ORMCustomSerializedAttributeWriteStyle.Element, null);
            }
            return ORMCustomSerializedAttributeInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == ReferenceModeHasReferenceModeKind.KindMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Kind", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = CustomReferenceMode.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(ReferenceModeHasReferenceModeKind.KindMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|Kind", match);
                match.InitializeAttribute(CustomReferenceMode.CustomFormatStringMetaAttributeGuid, null);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|CustomFormatString", match);
                CustomReferenceMode.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class ValueTypeHasDataType : IORMCustomSerializedElement
    {
        private static Dictionary<string, Guid> myCustomSerializedAttributes;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.AttributeInfo | ORMCustomSerializedElementSupportedOperations.MixedTypedAttributes);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((attributeInfo.Id == ValueTypeHasDataType.ScaleMetaAttributeGuid))
            {
                if ((rolePlayedInfo.Id == ValueTypeHasDataType.ValueTypeCollectionMetaRoleGuid))
                {
                    return new ORMCustomSerializedAttributeInfo(null, "Scale", null, false, ORMCustomSerializedAttributeWriteStyle.Attribute, null);
                }
                return new ORMCustomSerializedAttributeInfo(null, null, null, false, ORMCustomSerializedAttributeWriteStyle.Attribute, null);
            }
            return ORMCustomSerializedAttributeInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return default(ORMCustomSerializedElementMatch);
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            Dictionary<string, Guid> customSerializedAttributes = ValueTypeHasDataType.myCustomSerializedAttributes;
            if ((customSerializedAttributes == null))
            {
                customSerializedAttributes = new Dictionary<string, Guid>();
                customSerializedAttributes.Add("Scale", ValueTypeHasDataType.ScaleMetaAttributeGuid);
                ValueTypeHasDataType.myCustomSerializedAttributes = customSerializedAttributes;
            }
            Guid rVal;
            string key = attributeName;
            if (!((xmlNamespace.Length == 0)))
            {
                key = string.Concat(xmlNamespace, "|", attributeName);
            }
            customSerializedAttributes.TryGetValue(key, out rVal);
            return rVal;
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class DataType : IORMCustomSerializedElement
    {
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return ORMCustomSerializedElementSupportedOperations.LinkInfo;
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == ValueTypeHasDataType.ValueTypeCollectionMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, null, null, ORMCustomSerializedElementWriteStyle.NotWritten, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return default(ORMCustomSerializedElementMatch);
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class ReferenceModeKind : IORMCustomSerializedElement
    {
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.ElementInfo 
                            | (ORMCustomSerializedElementSupportedOperations.AttributeInfo | ORMCustomSerializedElementSupportedOperations.LinkInfo));
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                return new ORMCustomSerializedElementInfo(null, "ReferenceModeKind", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((attributeInfo.Id == ReferenceModeKind.NameMetaAttributeGuid))
            {
                return new ORMCustomSerializedAttributeInfo(null, null, null, false, ORMCustomSerializedAttributeWriteStyle.NotWritten, null);
            }
            return ORMCustomSerializedAttributeInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == ReferenceModeHasReferenceModeKind.ReferenceModeCollectionMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, null, null, ORMCustomSerializedElementWriteStyle.NotWritten, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return default(ORMCustomSerializedElementMatch);
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class ValueRangeDefinition : IORMCustomSerializedElement
    {
        private static Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] myCustomSerializedChildElementInfo;
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.ChildElementInfo | ORMCustomSerializedElementSupportedOperations.ElementInfo);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                return new ORMCustomSerializedElementInfo(null, "BaseValueRangeDefinition", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] ret = ValueRangeDefinition.myCustomSerializedChildElementInfo;
            if ((ret == null))
            {
                ret = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[1];
                ret[0] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "ValueRanges", null, ORMCustomSerializedElementWriteStyle.Element, null, ValueRangeDefinitionHasValueRange.ValueRangeCollectionMetaRoleGuid);
                ValueRangeDefinition.myCustomSerializedChildElementInfo = ret;
            }
            return ret;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = ValueRangeDefinition.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(ValueRangeDefinitionHasValueRange.ValueRangeCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|ValueRanges||", match);
                ValueRangeDefinition.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class ValueTypeValueRangeDefinition : IORMCustomSerializedElement
    {
        /// <summary>
        ///</summary>
        protected new Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (base.SupportedCustomSerializedOperations | ORMCustomSerializedElementSupportedOperations.ElementInfo);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected new Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                return new ORMCustomSerializedElementInfo(null, "ValueRangeDefinition", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
    }
    /// <summary>
    ///</summary>
    public partial class RoleValueRangeDefinition : IORMCustomSerializedElement
    {
        /// <summary>
        ///</summary>
        protected new Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (base.SupportedCustomSerializedOperations | ORMCustomSerializedElementSupportedOperations.ElementInfo);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected new Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                return new ORMCustomSerializedElementInfo(null, "RoleValueRangeDefinition", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
    }
    /// <summary>
    ///</summary>
    public partial class FactType : IORMCustomSerializedElement
    {
        private static Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] myCustomSerializedChildElementInfo;
        private static IComparer<MetaRoleInfo> myCustomSortChildComparer;
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.ChildElementInfo 
                            | (ORMCustomSerializedElementSupportedOperations.ElementInfo 
                            | (ORMCustomSerializedElementSupportedOperations.LinkInfo | ORMCustomSerializedElementSupportedOperations.CustomSortChildRoles)));
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                return new ORMCustomSerializedElementInfo(null, "Fact", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                IComparer<MetaRoleInfo> retVal = FactType.myCustomSortChildComparer;
                if ((null == retVal))
                {
                    retVal = new CustomSortChildComparer(this.Store);
                    FactType.myCustomSortChildComparer = retVal;
                }
                return retVal;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] ret = FactType.myCustomSerializedChildElementInfo;
            if ((ret == null))
            {
                ret = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[3];
                ret[0] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "FactRoles", null, ORMCustomSerializedElementWriteStyle.Element, null, FactTypeHasRole.RoleCollectionMetaRoleGuid);
                ret[1] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "ReadingOrders", null, ORMCustomSerializedElementWriteStyle.Element, null, FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid);
                ret[2] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "InternalConstraints", null, ORMCustomSerializedElementWriteStyle.Element, null, FactTypeHasInternalConstraint.InternalConstraintCollectionMetaRoleGuid);
                FactType.myCustomSerializedChildElementInfo = ret;
            }
            return ret;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == NestingEntityTypeHasFactType.NestingTypeMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, null, null, ORMCustomSerializedElementWriteStyle.NotWritten, null);
            }
            if ((rolePlayedInfo.Id == FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, null, null, ORMCustomSerializedElementWriteStyle.NotWritten, null);
            }
            if ((rolePlayedInfo.Id == FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, null, null, ORMCustomSerializedElementWriteStyle.NotWritten, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = FactType.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(FactTypeHasRole.RoleCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|FactRoles||", match);
                match.InitializeRoles(FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|ReadingOrders||", match);
                match.InitializeRoles(FactTypeHasInternalConstraint.InternalConstraintCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|InternalConstraints||", match);
                FactType.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
        private class CustomSortChildComparer : IComparer<MetaRoleInfo>
        {
            private Dictionary<MetaRoleInfo, int> myRoleOrderDictionary;
            /// <summary>
            ///</summary>
            public CustomSortChildComparer(Store store)
            {
                MetaDataDirectory metaDataDir = store.MetaDataDirectory;
                Dictionary<MetaRoleInfo, int> roleOrderDictionary = new Dictionary<MetaRoleInfo, int>();
                MetaRoleInfo metaRole;
                metaRole = metaDataDir.FindMetaRole(FactTypeHasRole.RoleCollectionMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 0;
                metaRole = metaDataDir.FindMetaRole(FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 1;
                metaRole = metaDataDir.FindMetaRole(FactTypeHasInternalConstraint.InternalConstraintCollectionMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 2;
                metaRole = metaDataDir.FindMetaRole(NestingEntityTypeHasFactType.NestingTypeMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 3;
                metaRole = metaDataDir.FindMetaRole(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 4;
                metaRole = metaDataDir.FindMetaRole(FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 5;
                this.myRoleOrderDictionary = roleOrderDictionary;
            }
            /// <summary>
            ///</summary>
            public int Compare(MetaRoleInfo x, MetaRoleInfo y)
            {
                int xPos;
                if (!(this.myRoleOrderDictionary.TryGetValue(x, out xPos)))
                {
                    xPos = int.MaxValue;
                }
                int yPos;
                if (!(this.myRoleOrderDictionary.TryGetValue(y, out yPos)))
                {
                    yPos = int.MaxValue;
                }
                if ((xPos == yPos))
                {
                    return 0;
                }
                else
                {
                    if ((xPos < yPos))
                    {
                        return -1;
                    }
                }
                return 1;
            }
        }
    }
    /// <summary>
    ///</summary>
    public partial class ReadingOrder : IORMCustomSerializedElement
    {
        private static Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] myCustomSerializedChildElementInfo;
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.ChildElementInfo | ORMCustomSerializedElementSupportedOperations.LinkInfo);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] ret = ReadingOrder.myCustomSerializedChildElementInfo;
            if ((ret == null))
            {
                ret = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[2];
                ret[0] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "Readings", null, ORMCustomSerializedElementWriteStyle.Element, null, ReadingOrderHasReading.ReadingCollectionMetaRoleGuid);
                ret[1] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "RoleSequence", null, ORMCustomSerializedElementWriteStyle.Element, null, ReadingOrderHasRole.RoleCollectionMetaRoleGuid);
                ReadingOrder.myCustomSerializedChildElementInfo = ret;
            }
            return ret;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == ReadingOrderHasRole.RoleCollectionMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Role", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = ReadingOrder.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(ReadingOrderHasRole.RoleCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|RoleSequence|http://Schemas.Northface.ed" +
                        "u/ORM/ORMCore|Role", match);
                match.InitializeRoles(ReadingOrderHasReading.ReadingCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|Readings||", match);
                ReadingOrder.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class Reading : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.AttributeInfo | ORMCustomSerializedElementSupportedOperations.MixedTypedAttributes);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((attributeInfo.Id == Reading.TextMetaAttributeGuid))
            {
                return new ORMCustomSerializedAttributeInfo(null, "Data", null, false, ORMCustomSerializedAttributeWriteStyle.Element, null);
            }
            if ((attributeInfo.Id == Reading.LanguageMetaAttributeGuid))
            {
                return new ORMCustomSerializedAttributeInfo(null, null, null, false, ORMCustomSerializedAttributeWriteStyle.NotWritten, null);
            }
            return ORMCustomSerializedAttributeInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = Reading.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeAttribute(Reading.TextMetaAttributeGuid, null);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|Data", match);
                Reading.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class Role : IORMCustomSerializedElement
    {
        private static Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] myCustomSerializedChildElementInfo;
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        private static Dictionary<string, Guid> myCustomSerializedAttributes;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.ChildElementInfo 
                            | (ORMCustomSerializedElementSupportedOperations.AttributeInfo | ORMCustomSerializedElementSupportedOperations.LinkInfo));
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] ret = Role.myCustomSerializedChildElementInfo;
            if ((ret == null))
            {
                ret = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[2];
                ret[0] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "ValueConstraint", null, ORMCustomSerializedElementWriteStyle.Element, null, RoleHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid);
                ret[1] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "ReadingOrders", null, ORMCustomSerializedElementWriteStyle.Element, null, FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid);
                Role.myCustomSerializedChildElementInfo = ret;
            }
            return ret;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((attributeInfo.Id == Role.IsMandatoryMetaAttributeGuid))
            {
                return new ORMCustomSerializedAttributeInfo(null, "IsMandatory", null, true, ORMCustomSerializedAttributeWriteStyle.Attribute, null);
            }
            if ((attributeInfo.Id == Role.MultiplicityMetaAttributeGuid))
            {
                return new ORMCustomSerializedAttributeInfo(null, "Multiplicity", null, true, ORMCustomSerializedAttributeWriteStyle.Attribute, null);
            }
            return ORMCustomSerializedAttributeInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == ObjectTypePlaysRole.RolePlayerMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "RolePlayer", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            if ((rolePlayedInfo.Id == ConstraintRoleSequenceHasRole.ConstraintRoleSequenceCollectionMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, null, null, ORMCustomSerializedElementWriteStyle.NotWritten, null);
            }
            if ((rolePlayedInfo.Id == ReadingOrderHasRole.ReadingOrderMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, null, null, ORMCustomSerializedElementWriteStyle.NotWritten, null);
            }
            if ((rolePlayedInfo.Id == RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, null, null, ORMCustomSerializedElementWriteStyle.NotWritten, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = Role.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(ObjectTypePlaysRole.RolePlayerMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|RolePlayer", match);
                match.InitializeRoles(RoleHasValueRangeDefinition.ValueRangeDefinitionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|ValueConstraint||", match);
                match.InitializeRoles(FactTypeHasReadingOrder.ReadingOrderCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|ReadingOrders||", match);
                Role.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            Dictionary<string, Guid> customSerializedAttributes = Role.myCustomSerializedAttributes;
            if ((customSerializedAttributes == null))
            {
                customSerializedAttributes = new Dictionary<string, Guid>();
                customSerializedAttributes.Add("IsMandatory", Role.IsMandatoryMetaAttributeGuid);
                customSerializedAttributes.Add("Multiplicity", Role.MultiplicityMetaAttributeGuid);
                Role.myCustomSerializedAttributes = customSerializedAttributes;
            }
            Guid rVal;
            string key = attributeName;
            if (!((xmlNamespace.Length == 0)))
            {
                key = string.Concat(xmlNamespace, "|", attributeName);
            }
            customSerializedAttributes.TryGetValue(key, out rVal);
            return rVal;
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class MultiColumnExternalConstraint : IORMCustomSerializedElement
    {
        private static Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] myCustomSerializedChildElementInfo;
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.ChildElementInfo | ORMCustomSerializedElementSupportedOperations.LinkInfo);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] ret = MultiColumnExternalConstraint.myCustomSerializedChildElementInfo;
            if ((ret == null))
            {
                ret = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[1];
                ret[0] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "RoleSequences", null, ORMCustomSerializedElementWriteStyle.Element, null, MultiColumnExternalConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuid);
                MultiColumnExternalConstraint.myCustomSerializedChildElementInfo = ret;
            }
            return ret;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorCollectionMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, null, null, ORMCustomSerializedElementWriteStyle.NotWritten, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = MultiColumnExternalConstraint.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(MultiColumnExternalConstraintHasRoleSequence.RoleSequenceCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|RoleSequences||", match);
                MultiColumnExternalConstraint.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class MultiColumnExternalConstraintRoleSequence : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.ElementInfo | ORMCustomSerializedElementSupportedOperations.LinkInfo);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                return new ORMCustomSerializedElementInfo(null, "RoleSequence", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Role", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = MultiColumnExternalConstraintRoleSequence.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|Role", match);
                MultiColumnExternalConstraintRoleSequence.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class SingleColumnExternalConstraint : IORMCustomSerializedElement
    {
        private static Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] myCustomSerializedChildElementInfo;
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.ChildElementInfo | ORMCustomSerializedElementSupportedOperations.LinkInfo);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] ret = SingleColumnExternalConstraint.myCustomSerializedChildElementInfo;
            if ((ret == null))
            {
                ret = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[1];
                ret[0] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "RoleSequence", null, ORMCustomSerializedElementWriteStyle.Element, null, ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid);
                SingleColumnExternalConstraint.myCustomSerializedChildElementInfo = ret;
            }
            return ret;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Role", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            if ((rolePlayedInfo.Id == SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, null, null, ORMCustomSerializedElementWriteStyle.NotWritten, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = SingleColumnExternalConstraint.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|RoleSequence|http://Schemas.Northface.ed" +
                        "u/ORM/ORMCore|Role", match);
                SingleColumnExternalConstraint.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class ExternalUniquenessConstraint : IORMCustomSerializedElement
    {
        private static IComparer<MetaRoleInfo> myCustomSortChildComparer;
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected new Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (base.SupportedCustomSerializedOperations 
                            | (ORMCustomSerializedElementSupportedOperations.LinkInfo | ORMCustomSerializedElementSupportedOperations.CustomSortChildRoles));
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected new IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                IComparer<MetaRoleInfo> retVal = ExternalUniquenessConstraint.myCustomSortChildComparer;
                if ((null == retVal))
                {
                    IComparer<MetaRoleInfo> baseComparer = null;
                    if (!((0 
            == (ORMCustomSerializedElementSupportedOperations.CustomSortChildRoles & base.SupportedCustomSerializedOperations))))
                    {
                        baseComparer = base.CustomSerializedChildRoleComparer;
                    }
                    retVal = new CustomSortChildComparer(this.Store, baseComparer);
                    ExternalUniquenessConstraint.myCustomSortChildComparer = retVal;
                }
                return retVal;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected new Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "PreferredIdentifierFor", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            if (!((0 
            == (ORMCustomSerializedElementSupportedOperations.LinkInfo & base.SupportedCustomSerializedOperations))))
            {
                return base.GetCustomSerializedLinkInfo(rolePlayedInfo);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected new ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = ExternalUniquenessConstraint.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|PreferredIdentifierFor", match);
                ExternalUniquenessConstraint.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            if (!(childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal)))
            {
                rVal = base.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
            }
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        private class CustomSortChildComparer : IComparer<MetaRoleInfo>
        {
            private Dictionary<MetaRoleInfo, int> myRoleOrderDictionary;
            private IComparer<MetaRoleInfo> myBaseComparer;
            /// <summary>
            ///</summary>
            public CustomSortChildComparer(Store store, IComparer<MetaRoleInfo> baseComparer)
            {
                this.myBaseComparer = baseComparer;
                MetaDataDirectory metaDataDir = store.MetaDataDirectory;
                Dictionary<MetaRoleInfo, int> roleOrderDictionary = new Dictionary<MetaRoleInfo, int>();
                MetaRoleInfo metaRole;
                metaRole = metaDataDir.FindMetaRole(EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 0;
                this.myRoleOrderDictionary = roleOrderDictionary;
            }
            /// <summary>
            ///</summary>
            public int Compare(MetaRoleInfo x, MetaRoleInfo y)
            {
                if ((this.myBaseComparer != null))
                {
                    int baseOpinion = this.myBaseComparer.Compare(x, y);
                    if (!((0 == baseOpinion)))
                    {
                        return baseOpinion;
                    }
                }
                int xPos;
                if (!(this.myRoleOrderDictionary.TryGetValue(x, out xPos)))
                {
                    xPos = int.MaxValue;
                }
                int yPos;
                if (!(this.myRoleOrderDictionary.TryGetValue(y, out yPos)))
                {
                    yPos = int.MaxValue;
                }
                if ((xPos == yPos))
                {
                    return 0;
                }
                else
                {
                    if ((xPos < yPos))
                    {
                        return -1;
                    }
                }
                return 1;
            }
        }
    }
    /// <summary>
    ///</summary>
    public partial class InternalUniquenessConstraint : IORMCustomSerializedElement
    {
        private static Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] myCustomSerializedChildElementInfo;
        private static IComparer<MetaRoleInfo> myCustomSortChildComparer;
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.ChildElementInfo 
                            | (ORMCustomSerializedElementSupportedOperations.AttributeInfo 
                            | (ORMCustomSerializedElementSupportedOperations.LinkInfo | ORMCustomSerializedElementSupportedOperations.CustomSortChildRoles)));
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                IComparer<MetaRoleInfo> retVal = InternalUniquenessConstraint.myCustomSortChildComparer;
                if ((null == retVal))
                {
                    retVal = new CustomSortChildComparer(this.Store);
                    InternalUniquenessConstraint.myCustomSortChildComparer = retVal;
                }
                return retVal;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] ret = InternalUniquenessConstraint.myCustomSerializedChildElementInfo;
            if ((ret == null))
            {
                ret = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[1];
                ret[0] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "RoleSequence", null, ORMCustomSerializedElementWriteStyle.Element, null, ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid);
                InternalUniquenessConstraint.myCustomSerializedChildElementInfo = ret;
            }
            return ret;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((attributeInfo.Id == InternalUniquenessConstraint.NameMetaAttributeGuid))
            {
                return new ORMCustomSerializedAttributeInfo(null, null, null, false, ORMCustomSerializedAttributeWriteStyle.NotWritten, null);
            }
            return ORMCustomSerializedAttributeInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Role", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            if ((rolePlayedInfo.Id == EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "PreferredIdentifierFor", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            if ((rolePlayedInfo.Id == InternalUniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, null, null, ORMCustomSerializedElementWriteStyle.NotWritten, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = InternalUniquenessConstraint.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|PreferredIdentifierFor", match);
                match.InitializeRoles(ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|RoleSequence|http://Schemas.Northface.ed" +
                        "u/ORM/ORMCore|Role", match);
                InternalUniquenessConstraint.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
        private class CustomSortChildComparer : IComparer<MetaRoleInfo>
        {
            private Dictionary<MetaRoleInfo, int> myRoleOrderDictionary;
            /// <summary>
            ///</summary>
            public CustomSortChildComparer(Store store)
            {
                MetaDataDirectory metaDataDir = store.MetaDataDirectory;
                Dictionary<MetaRoleInfo, int> roleOrderDictionary = new Dictionary<MetaRoleInfo, int>();
                MetaRoleInfo metaRole;
                metaRole = metaDataDir.FindMetaRole(ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 0;
                metaRole = metaDataDir.FindMetaRole(EntityTypeHasPreferredIdentifier.PreferredIdentifierForMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 1;
                metaRole = metaDataDir.FindMetaRole(InternalUniquenessConstraintHasNMinusOneError.NMinusOneErrorMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 2;
                this.myRoleOrderDictionary = roleOrderDictionary;
            }
            /// <summary>
            ///</summary>
            public int Compare(MetaRoleInfo x, MetaRoleInfo y)
            {
                int xPos;
                if (!(this.myRoleOrderDictionary.TryGetValue(x, out xPos)))
                {
                    xPos = int.MaxValue;
                }
                int yPos;
                if (!(this.myRoleOrderDictionary.TryGetValue(y, out yPos)))
                {
                    yPos = int.MaxValue;
                }
                if ((xPos == yPos))
                {
                    return 0;
                }
                else
                {
                    if ((xPos < yPos))
                    {
                        return -1;
                    }
                }
                return 1;
            }
        }
    }
    /// <summary>
    ///</summary>
    public partial class SimpleMandatoryConstraint : IORMCustomSerializedElement
    {
        private static Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] myCustomSerializedChildElementInfo;
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.ChildElementInfo 
                            | (ORMCustomSerializedElementSupportedOperations.AttributeInfo | ORMCustomSerializedElementSupportedOperations.LinkInfo));
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] ret = SimpleMandatoryConstraint.myCustomSerializedChildElementInfo;
            if ((ret == null))
            {
                ret = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[1];
                ret[0] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "RoleSequence", null, ORMCustomSerializedElementWriteStyle.Element, null, ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid);
                SimpleMandatoryConstraint.myCustomSerializedChildElementInfo = ret;
            }
            return ret;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((attributeInfo.Id == SimpleMandatoryConstraint.NameMetaAttributeGuid))
            {
                return new ORMCustomSerializedAttributeInfo(null, null, null, false, ORMCustomSerializedAttributeWriteStyle.NotWritten, null);
            }
            return ORMCustomSerializedAttributeInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Role", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = SimpleMandatoryConstraint.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(ConstraintRoleSequenceHasRole.RoleCollectionMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMCore|RoleSequence|http://Schemas.Northface.ed" +
                        "u/ORM/ORMCore|Role", match);
                SimpleMandatoryConstraint.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class EqualityConstraint : IORMCustomSerializedElement
    {
        /// <summary>
        ///</summary>
        protected new Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (base.SupportedCustomSerializedOperations | ORMCustomSerializedElementSupportedOperations.LinkInfo);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected new Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == EqualityConstraintHasEqualityIsImpliedByMandatoryError.EqualityIsImpliedByMandatoryErrorMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, null, null, ORMCustomSerializedElementWriteStyle.NotWritten, null);
            }
            if (!((0 
            == (ORMCustomSerializedElementSupportedOperations.LinkInfo & base.SupportedCustomSerializedOperations))))
            {
                return base.GetCustomSerializedLinkInfo(rolePlayedInfo);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
    }
    /// <summary>
    ///</summary>
    public partial class ConstraintDuplicateNameError : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return ORMCustomSerializedElementSupportedOperations.LinkInfo;
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == MultiColumnExternalConstraintHasDuplicateNameError.MultiColumnExternalConstraintCollectionMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Constraint", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = ConstraintDuplicateNameError.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(MultiColumnExternalConstraintHasDuplicateNameError.MultiColumnExternalConstraintCollectionMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|Constraint", match);
                ConstraintDuplicateNameError.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class FactTypeDuplicateNameError : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return ORMCustomSerializedElementSupportedOperations.LinkInfo;
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == FactTypeHasDuplicateNameError.FactTypeCollectionMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Facts", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = FactTypeDuplicateNameError.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(FactTypeHasDuplicateNameError.FactTypeCollectionMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|Facts", match);
                FactTypeDuplicateNameError.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class ObjectTypeDuplicateNameError : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return ORMCustomSerializedElementSupportedOperations.LinkInfo;
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == ObjectTypeHasDuplicateNameError.ObjectTypeCollectionMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Objects", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = ObjectTypeDuplicateNameError.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(ObjectTypeHasDuplicateNameError.ObjectTypeCollectionMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|Objects", match);
                ObjectTypeDuplicateNameError.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class EntityTypeRequiresReferenceSchemeError : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return ORMCustomSerializedElementSupportedOperations.LinkInfo;
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "EntityType", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = EntityTypeRequiresReferenceSchemeError.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|EntityType", match);
                EntityTypeRequiresReferenceSchemeError.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class ExternalConstraintRoleSequenceArityMismatchError : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return ORMCustomSerializedElementSupportedOperations.LinkInfo;
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Constraint", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = ExternalConstraintRoleSequenceArityMismatchError.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(MultiColumnExternalConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|Constraint", match);
                ExternalConstraintRoleSequenceArityMismatchError.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class FactTypeRequiresInternalUniquenessConstraintError : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return ORMCustomSerializedElementSupportedOperations.LinkInfo;
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Fact", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = FactTypeRequiresInternalUniquenessConstraintError.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|Fact", match);
                FactTypeRequiresInternalUniquenessConstraintError.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class FactTypeRequiresReadingError : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return ORMCustomSerializedElementSupportedOperations.LinkInfo;
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Fact", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = FactTypeRequiresReadingError.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(FactTypeHasFactTypeRequiresReadingError.FactTypeMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|Fact", match);
                FactTypeRequiresReadingError.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class TooFewReadingRolesError : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return ORMCustomSerializedElementSupportedOperations.LinkInfo;
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == ReadingHasTooFewRolesError.ReadingMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Reading", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = TooFewReadingRolesError.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(ReadingHasTooFewRolesError.ReadingMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|Reading", match);
                TooFewReadingRolesError.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class TooFewRoleSequencesError : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return ORMCustomSerializedElementSupportedOperations.LinkInfo;
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == ExternalConstraintHasTooFewRoleSequencesError.ConstraintMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Constraint", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = TooFewRoleSequencesError.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(ExternalConstraintHasTooFewRoleSequencesError.ConstraintMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|Constraint", match);
                TooFewRoleSequencesError.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class TooManyReadingRolesError : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return ORMCustomSerializedElementSupportedOperations.LinkInfo;
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == ReadingHasTooManyRolesError.ReadingMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Reading", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = TooManyReadingRolesError.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(ReadingHasTooManyRolesError.ReadingMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|Reading", match);
                TooManyReadingRolesError.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class TooManyRoleSequencesError : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return ORMCustomSerializedElementSupportedOperations.LinkInfo;
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == ExternalConstraintHasTooManyRoleSequencesError.ConstraintMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Constraint", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = TooManyRoleSequencesError.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(ExternalConstraintHasTooManyRoleSequencesError.ConstraintMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|Constraint", match);
                TooManyRoleSequencesError.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class DataTypeNotSpecifiedError : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return ORMCustomSerializedElementSupportedOperations.LinkInfo;
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "ConceptualDataType", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = DataTypeNotSpecifiedError.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|ConceptualDataType", match);
                DataTypeNotSpecifiedError.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class EqualityIsImpliedByMandatoryError : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return ORMCustomSerializedElementSupportedOperations.LinkInfo;
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == EqualityConstraintHasEqualityIsImpliedByMandatoryError.EqualityConstraintMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "EqualityConstraint", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = EqualityIsImpliedByMandatoryError.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(EqualityConstraintHasEqualityIsImpliedByMandatoryError.EqualityConstraintMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|EqualityConstraint", match);
                EqualityIsImpliedByMandatoryError.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class NMinusOneError : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return ORMCustomSerializedElementSupportedOperations.LinkInfo;
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == InternalUniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "InternalUniquenessConstraint", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = NMinusOneError.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(InternalUniquenessConstraintHasNMinusOneError.ConstraintMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|InternalUniquenessConstraint", match);
                NMinusOneError.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class CompatibleRolePlayerTypeError : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        private static Dictionary<string, Guid> myCustomSerializedAttributes;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.AttributeInfo | ORMCustomSerializedElementSupportedOperations.LinkInfo);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((attributeInfo.Id == CompatibleRolePlayerTypeError.ColumnMetaAttributeGuid))
            {
                if ((this.SingleColumnExternalConstraint != null))
                {
                    return new ORMCustomSerializedAttributeInfo(null, null, null, false, ORMCustomSerializedAttributeWriteStyle.NotWritten, null);
                }
                return new ORMCustomSerializedAttributeInfo(null, null, null, false, ORMCustomSerializedAttributeWriteStyle.Attribute, null);
            }
            return ORMCustomSerializedAttributeInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.MultiColumnExternalConstraintMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "MultiColumnConstraint", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            if ((rolePlayedInfo.Id == SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.SingleColumnExternalConstraintMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "SingleColumnConstraint", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = CompatibleRolePlayerTypeError.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(MultiColumnExternalConstraintHasCompatibleRolePlayerTypeError.MultiColumnExternalConstraintMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|MultiColumnConstraint", match);
                match.InitializeRoles(SingleColumnExternalConstraintHasCompatibleRolePlayerTypeError.SingleColumnExternalConstraintMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|SingleColumnConstraint", match);
                CompatibleRolePlayerTypeError.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            Dictionary<string, Guid> customSerializedAttributes = CompatibleRolePlayerTypeError.myCustomSerializedAttributes;
            if ((customSerializedAttributes == null))
            {
                customSerializedAttributes = new Dictionary<string, Guid>();
                customSerializedAttributes.Add("Column", CompatibleRolePlayerTypeError.ColumnMetaAttributeGuid);
                CompatibleRolePlayerTypeError.myCustomSerializedAttributes = customSerializedAttributes;
            }
            Guid rVal;
            string key = attributeName;
            if (!((xmlNamespace.Length == 0)))
            {
                key = string.Concat(xmlNamespace, "|", attributeName);
            }
            customSerializedAttributes.TryGetValue(key, out rVal);
            return rVal;
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class RolePlayerRequiredError : IORMCustomSerializedElement
    {
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return ORMCustomSerializedElementSupportedOperations.LinkInfo;
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                return null;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == RoleHasRolePlayerRequiredError.RoleMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Role", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = RolePlayerRequiredError.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(RoleHasRolePlayerRequiredError.RoleMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMCore|Role", match);
                RolePlayerRequiredError.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
    }
}
namespace Northface.Tools.ORM.ShapeModel
{
    using System;
    using System.Collections;
    using System.Collections.ObjectModel;
    using System.Collections.Generic;
    using Microsoft.VisualStudio.Modeling;
    using Microsoft.VisualStudio.Modeling.Diagrams;
    using Northface.Tools.ORM.Shell;
    
    /// <summary>
    ///</summary>
    public partial class ORMShapeModel : IORMCustomSerializedMetaModel
    {
        private Dictionary<MetaClassInfo, object> myCustomSerializationOmissions;
        private static Dictionary<string, Guid> myClassNameMap;
        private static Collection<string> myValidNamespaces;
        /// <summary>
        ///</summary>
        protected static string DefaultElementPrefix
        {
            get
            {
                return "ormDiagram";
            }
        }
        string IORMCustomSerializedMetaModel.DefaultElementPrefix
        {
            get
            {
                return ORMShapeModel.DefaultElementPrefix;
            }
        }
        /// <summary>
        ///</summary>
        protected static string[,] GetCustomElementNamespaces()
        {
            string[,] ret = new string[1, 2];
            ret[0, 0] = "ormDiagram";
            ret[0, 1] = "http://Schemas.Northface.edu/ORM/ORMDiagram";
            return ret;
        }
        string[,] IORMCustomSerializedMetaModel.GetCustomElementNamespaces()
        {
            return ORMShapeModel.GetCustomElementNamespaces();
        }
        private static Dictionary<MetaClassInfo, object> BuildCustomSerializationOmissions(Store store)
        {
            Dictionary<MetaClassInfo, object> retVal = new Dictionary<MetaClassInfo, object>();
            MetaDataDirectory dataDir = store.MetaDataDirectory;
            retVal[dataDir.FindMetaClass(ExternalConstraintLink.MetaClassGuid)] = null;
            retVal[dataDir.FindMetaClass(ValueRangeLink.MetaClassGuid)] = null;
            retVal[dataDir.FindMetaClass(RolePlayerLink.MetaClassGuid)] = null;
            retVal[dataDir.FindMetaClass(SubtypeLink.MetaClassGuid)] = null;
            retVal[dataDir.FindMetaRelationship(Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.MetaRelationshipGuid)] = null;
            return retVal;
        }
        /// <summary>
        ///</summary>
        protected bool ShouldSerializeMetaClass(Store store, MetaClassInfo classInfo)
        {
            Dictionary<MetaClassInfo, object> omissions = this.myCustomSerializationOmissions;
            if ((omissions == null))
            {
                omissions = ORMShapeModel.BuildCustomSerializationOmissions(store);
                this.myCustomSerializationOmissions = omissions;
            }
            return !(omissions.ContainsKey(classInfo));
        }
        bool IORMCustomSerializedMetaModel.ShouldSerializeMetaClass(Store store, MetaClassInfo classInfo)
        {
            return this.ShouldSerializeMetaClass(store, classInfo);
        }
        /// <summary>
        ///</summary>
        protected static Guid[] GetRootElementClasses()
        {
            return new Guid[] {
                    ORMDiagram.MetaClassGuid};
        }
        Guid[] IORMCustomSerializedMetaModel.GetRootElementClasses()
        {
            return ORMShapeModel.GetRootElementClasses();
        }
        /// <summary>
        ///</summary>
        protected static Guid MapRootElement(string xmlNamespace, string elementName)
        {
            if (((elementName == "ORMDiagram") 
                        && (xmlNamespace == "http://Schemas.Northface.edu/ORM/ORMDiagram")))
            {
                return ORMDiagram.MetaClassGuid;
            }
            return default(Guid);
        }
        Guid IORMCustomSerializedMetaModel.MapRootElement(string xmlNamespace, string elementName)
        {
            return ORMShapeModel.MapRootElement(xmlNamespace, elementName);
        }
        /// <summary>
        ///</summary>
        protected static Guid MapClassName(string xmlNamespace, string elementName)
        {
            Collection<string> validNamespaces = ORMShapeModel.myValidNamespaces;
            Dictionary<string, Guid> classNameMap = ORMShapeModel.myClassNameMap;
            if ((validNamespaces == null))
            {
                validNamespaces = new Collection<string>();
                validNamespaces.Add("http://Schemas.Northface.edu/ORM/ORMDiagram");
                ORMShapeModel.myValidNamespaces = validNamespaces;
            }
            if ((classNameMap == null))
            {
                classNameMap = new Dictionary<string, Guid>();
                classNameMap.Add("ORMDiagram", ORMDiagram.MetaClassGuid);
                classNameMap.Add("ORMBaseShape", ORMBaseShape.MetaClassGuid);
                classNameMap.Add("ObjectTypeShape", ObjectTypeShape.MetaClassGuid);
                classNameMap.Add("ObjectifiedFactTypeNameShape", ObjectifiedFactTypeNameShape.MetaClassGuid);
                classNameMap.Add("ReadingShape", ReadingShape.MetaClassGuid);
                classNameMap.Add("ValueRangeShape", ValueRangeShape.MetaClassGuid);
                ORMShapeModel.myClassNameMap = classNameMap;
            }
            if ((validNamespaces.Contains(xmlNamespace) && classNameMap.ContainsKey(elementName)))
            {
                return classNameMap[elementName];
            }
            return default(Guid);
        }
        Guid IORMCustomSerializedMetaModel.MapClassName(string xmlNamespace, string elementName)
        {
            return ORMShapeModel.MapClassName(xmlNamespace, elementName);
        }
    }
    /// <summary>
    ///</summary>
    public partial class ORMDiagram : IORMCustomSerializedElement
    {
        private static Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] myCustomSerializedChildElementInfo;
        private static IComparer<MetaRoleInfo> myCustomSortChildComparer;
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.ChildElementInfo 
                            | (ORMCustomSerializedElementSupportedOperations.LinkInfo | ORMCustomSerializedElementSupportedOperations.CustomSortChildRoles));
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                IComparer<MetaRoleInfo> retVal = ORMDiagram.myCustomSortChildComparer;
                if ((null == retVal))
                {
                    retVal = new CustomSortChildComparer(this.Store);
                    ORMDiagram.myCustomSortChildComparer = retVal;
                }
                return retVal;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] ret = ORMDiagram.myCustomSerializedChildElementInfo;
            if ((ret == null))
            {
                ret = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[1];
                ret[0] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "Shapes", null, ORMCustomSerializedElementWriteStyle.Element, null, ParentShapeContainsNestedChildShapes.NestedChildShapesMetaRoleGuid);
                ORMDiagram.myCustomSerializedChildElementInfo = ret;
            }
            return ret;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            throw new System.NotSupportedException();
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == SubjectHasPresentation.SubjectMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Subject", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = ORMDiagram.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(SubjectHasPresentation.SubjectMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMDiagram|Subject", match);
                match.InitializeRoles(ParentShapeContainsNestedChildShapes.NestedChildShapesMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMDiagram|Shapes||", match);
                ORMDiagram.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            return default(Guid);
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
        private class CustomSortChildComparer : IComparer<MetaRoleInfo>
        {
            private Dictionary<MetaRoleInfo, int> myRoleOrderDictionary;
            /// <summary>
            ///</summary>
            public CustomSortChildComparer(Store store)
            {
                MetaDataDirectory metaDataDir = store.MetaDataDirectory;
                Dictionary<MetaRoleInfo, int> roleOrderDictionary = new Dictionary<MetaRoleInfo, int>();
                MetaRoleInfo metaRole;
                metaRole = metaDataDir.FindMetaRole(ParentShapeContainsNestedChildShapes.NestedChildShapesMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 0;
                metaRole = metaDataDir.FindMetaRole(SubjectHasPresentation.SubjectMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 1;
                this.myRoleOrderDictionary = roleOrderDictionary;
            }
            /// <summary>
            ///</summary>
            public int Compare(MetaRoleInfo x, MetaRoleInfo y)
            {
                int xPos;
                if (!(this.myRoleOrderDictionary.TryGetValue(x, out xPos)))
                {
                    xPos = int.MaxValue;
                }
                int yPos;
                if (!(this.myRoleOrderDictionary.TryGetValue(y, out yPos)))
                {
                    yPos = int.MaxValue;
                }
                if ((xPos == yPos))
                {
                    return 0;
                }
                else
                {
                    if ((xPos < yPos))
                    {
                        return -1;
                    }
                }
                return 1;
            }
        }
    }
    /// <summary>
    ///</summary>
    public partial class ORMBaseShape : IORMCustomSerializedElement
    {
        private static Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] myCustomSerializedChildElementInfo;
        private static IComparer<MetaRoleInfo> myCustomSortChildComparer;
        private static Dictionary<string, ORMCustomSerializedElementMatch> myChildElementMappings;
        private static Dictionary<string, Guid> myCustomSerializedAttributes;
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (ORMCustomSerializedElementSupportedOperations.ChildElementInfo 
                            | (ORMCustomSerializedElementSupportedOperations.AttributeInfo 
                            | (ORMCustomSerializedElementSupportedOperations.LinkInfo | ORMCustomSerializedElementSupportedOperations.CustomSortChildRoles)));
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo CustomSerializedElementInfo
        {
            get
            {
                throw new System.NotSupportedException();
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.CustomSerializedElementInfo
        {
            get
            {
                return this.CustomSerializedElementInfo;
            }
        }
        /// <summary>
        ///</summary>
        [CLSCompliant(false)]
        protected IComparer<MetaRoleInfo> CustomSerializedChildRoleComparer
        {
            get
            {
                IComparer<MetaRoleInfo> retVal = ORMBaseShape.myCustomSortChildComparer;
                if ((null == retVal))
                {
                    retVal = new CustomSortChildComparer(this.Store);
                    ORMBaseShape.myCustomSortChildComparer = retVal;
                }
                return retVal;
            }
        }
        IComparer<MetaRoleInfo> IORMCustomSerializedElement.CustomSerializedChildRoleComparer
        {
            get
            {
                return this.CustomSerializedChildRoleComparer;
            }
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] GetCustomSerializedChildElementInfo()
        {
            Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] ret = ORMBaseShape.myCustomSerializedChildElementInfo;
            if ((ret == null))
            {
                ret = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[2];
                ret[0] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "RelativeShapes", null, ORMCustomSerializedElementWriteStyle.Element, null, ParentShapeHasRelativeChildShapes.RelativeChildShapesMetaRoleGuid);
                ret[1] = new Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo(null, "NestedShapes", null, ORMCustomSerializedElementWriteStyle.Element, null, ParentShapeContainsNestedChildShapes.NestedChildShapesMetaRoleGuid);
                ORMBaseShape.myCustomSerializedChildElementInfo = ret;
            }
            return ret;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedChildElementInfo[] IORMCustomSerializedElement.GetCustomSerializedChildElementInfo()
        {
            return this.GetCustomSerializedChildElementInfo();
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((attributeInfo.Id == ORMBaseShape.IsExpandedMetaAttributeGuid))
            {
                return new ORMCustomSerializedAttributeInfo(null, null, null, true, ORMCustomSerializedAttributeWriteStyle.Attribute, null);
            }
            if ((attributeInfo.Id == ORMBaseShape.AbsoluteBoundsMetaAttributeGuid))
            {
                return new ORMCustomSerializedAttributeInfo(null, null, null, true, ORMCustomSerializedAttributeWriteStyle.Attribute, null);
            }
            return ORMCustomSerializedAttributeInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((rolePlayedInfo.Id == SubjectHasPresentation.SubjectMetaRoleGuid))
            {
                return new ORMCustomSerializedElementInfo(null, "Subject", null, ORMCustomSerializedElementWriteStyle.Element, null);
            }
            return ORMCustomSerializedElementInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementInfo IORMCustomSerializedElement.GetCustomSerializedLinkInfo(Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedLinkInfo(rolePlayedInfo);
        }
        /// <summary>
        ///</summary>
        protected ORMCustomSerializedElementMatch MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            Dictionary<string, ORMCustomSerializedElementMatch> childElementMappings = ORMBaseShape.myChildElementMappings;
            if ((childElementMappings == null))
            {
                childElementMappings = new Dictionary<string, ORMCustomSerializedElementMatch>();
                ORMCustomSerializedElementMatch match = new ORMCustomSerializedElementMatch();
                match.InitializeRoles(SubjectHasPresentation.SubjectMetaRoleGuid);
                childElementMappings.Add("||http://Schemas.Northface.edu/ORM/ORMDiagram|Subject", match);
                match.InitializeRoles(ParentShapeHasRelativeChildShapes.RelativeChildShapesMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMDiagram|RelativeShapes||", match);
                match.InitializeRoles(ParentShapeContainsNestedChildShapes.NestedChildShapesMetaRoleGuid);
                childElementMappings.Add("http://Schemas.Northface.edu/ORM/ORMDiagram|NestedShapes||", match);
                ORMBaseShape.myChildElementMappings = childElementMappings;
            }
            ORMCustomSerializedElementMatch rVal;
            childElementMappings.TryGetValue(string.Concat(containerNamespace, "|", containerName, "|", elementNamespace, "|", elementName), out rVal);
            return rVal;
        }
        ORMCustomSerializedElementMatch IORMCustomSerializedElement.MapChildElement(string elementNamespace, string elementName, string containerNamespace, string containerName)
        {
            return this.MapChildElement(elementNamespace, elementName, containerNamespace, containerName);
        }
        /// <summary>
        ///</summary>
        protected Guid MapAttribute(string xmlNamespace, string attributeName)
        {
            Dictionary<string, Guid> customSerializedAttributes = ORMBaseShape.myCustomSerializedAttributes;
            if ((customSerializedAttributes == null))
            {
                customSerializedAttributes = new Dictionary<string, Guid>();
                customSerializedAttributes.Add("IsExpanded", ORMBaseShape.IsExpandedMetaAttributeGuid);
                customSerializedAttributes.Add("AbsoluteBounds", ORMBaseShape.AbsoluteBoundsMetaAttributeGuid);
                ORMBaseShape.myCustomSerializedAttributes = customSerializedAttributes;
            }
            Guid rVal;
            string key = attributeName;
            if (!((xmlNamespace.Length == 0)))
            {
                key = string.Concat(xmlNamespace, "|", attributeName);
            }
            customSerializedAttributes.TryGetValue(key, out rVal);
            return rVal;
        }
        Guid IORMCustomSerializedElement.MapAttribute(string xmlNamespace, string attributeName)
        {
            return this.MapAttribute(xmlNamespace, attributeName);
        }
        private class CustomSortChildComparer : IComparer<MetaRoleInfo>
        {
            private Dictionary<MetaRoleInfo, int> myRoleOrderDictionary;
            /// <summary>
            ///</summary>
            public CustomSortChildComparer(Store store)
            {
                MetaDataDirectory metaDataDir = store.MetaDataDirectory;
                Dictionary<MetaRoleInfo, int> roleOrderDictionary = new Dictionary<MetaRoleInfo, int>();
                MetaRoleInfo metaRole;
                metaRole = metaDataDir.FindMetaRole(ParentShapeHasRelativeChildShapes.RelativeChildShapesMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 0;
                metaRole = metaDataDir.FindMetaRole(ParentShapeContainsNestedChildShapes.NestedChildShapesMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 1;
                metaRole = metaDataDir.FindMetaRole(SubjectHasPresentation.SubjectMetaRoleGuid);
                roleOrderDictionary[metaRole.OppositeMetaRole] = 2;
                this.myRoleOrderDictionary = roleOrderDictionary;
            }
            /// <summary>
            ///</summary>
            public int Compare(MetaRoleInfo x, MetaRoleInfo y)
            {
                int xPos;
                if (!(this.myRoleOrderDictionary.TryGetValue(x, out xPos)))
                {
                    xPos = int.MaxValue;
                }
                int yPos;
                if (!(this.myRoleOrderDictionary.TryGetValue(y, out yPos)))
                {
                    yPos = int.MaxValue;
                }
                if ((xPos == yPos))
                {
                    return 0;
                }
                else
                {
                    if ((xPos < yPos))
                    {
                        return -1;
                    }
                }
                return 1;
            }
        }
    }
    /// <summary>
    ///</summary>
    public partial class ObjectTypeShape : IORMCustomSerializedElement
    {
        /// <summary>
        ///</summary>
        protected new Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (base.SupportedCustomSerializedOperations | ORMCustomSerializedElementSupportedOperations.AttributeInfo);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected new Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((attributeInfo.Id == ObjectTypeShape.ShapeNameMetaAttributeGuid))
            {
                return new ORMCustomSerializedAttributeInfo(null, null, null, false, ORMCustomSerializedAttributeWriteStyle.NotWritten, null);
            }
            if ((attributeInfo.Id == ObjectTypeShape.ReferenceModeNameMetaAttributeGuid))
            {
                return new ORMCustomSerializedAttributeInfo(null, null, null, false, ORMCustomSerializedAttributeWriteStyle.NotWritten, null);
            }
            if (!((0 
            == (ORMCustomSerializedElementSupportedOperations.AttributeInfo & base.SupportedCustomSerializedOperations))))
            {
                return base.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
            }
            return ORMCustomSerializedAttributeInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
    }
    /// <summary>
    ///</summary>
    public partial class ObjectifiedFactTypeNameShape : IORMCustomSerializedElement
    {
        /// <summary>
        ///</summary>
        protected new Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (base.SupportedCustomSerializedOperations | ORMCustomSerializedElementSupportedOperations.AttributeInfo);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected new Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((attributeInfo.Id == ObjectifiedFactTypeNameShape.ObjectTypeNameMetaAttributeGuid))
            {
                return new ORMCustomSerializedAttributeInfo(null, null, null, false, ORMCustomSerializedAttributeWriteStyle.NotWritten, null);
            }
            if (!((0 
            == (ORMCustomSerializedElementSupportedOperations.AttributeInfo & base.SupportedCustomSerializedOperations))))
            {
                return base.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
            }
            return ORMCustomSerializedAttributeInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
    }
    /// <summary>
    ///</summary>
    public partial class ReadingShape : IORMCustomSerializedElement
    {
        /// <summary>
        ///</summary>
        protected new Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (base.SupportedCustomSerializedOperations | ORMCustomSerializedElementSupportedOperations.AttributeInfo);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected new Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((attributeInfo.Id == ReadingShape.ReadingTextMetaAttributeGuid))
            {
                return new ORMCustomSerializedAttributeInfo(null, null, null, false, ORMCustomSerializedAttributeWriteStyle.NotWritten, null);
            }
            if (!((0 
            == (ORMCustomSerializedElementSupportedOperations.AttributeInfo & base.SupportedCustomSerializedOperations))))
            {
                return base.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
            }
            return ORMCustomSerializedAttributeInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
    }
    /// <summary>
    ///</summary>
    public partial class ValueRangeShape : IORMCustomSerializedElement
    {
        /// <summary>
        ///</summary>
        protected new Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations SupportedCustomSerializedOperations
        {
            get
            {
                return (base.SupportedCustomSerializedOperations | ORMCustomSerializedElementSupportedOperations.AttributeInfo);
            }
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedElementSupportedOperations IORMCustomSerializedElement.SupportedCustomSerializedOperations
        {
            get
            {
                return this.SupportedCustomSerializedOperations;
            }
        }
        /// <summary>
        ///</summary>
        protected new Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            if ((attributeInfo.Id == ValueRangeShape.ValueRangeTextMetaAttributeGuid))
            {
                return new ORMCustomSerializedAttributeInfo(null, null, null, false, ORMCustomSerializedAttributeWriteStyle.NotWritten, null);
            }
            if (!((0 
            == (ORMCustomSerializedElementSupportedOperations.AttributeInfo & base.SupportedCustomSerializedOperations))))
            {
                return base.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
            }
            return ORMCustomSerializedAttributeInfo.Default;
        }
        Northface.Tools.ORM.Shell.ORMCustomSerializedAttributeInfo IORMCustomSerializedElement.GetCustomSerializedAttributeInfo(Microsoft.VisualStudio.Modeling.MetaAttributeInfo attributeInfo, Microsoft.VisualStudio.Modeling.MetaRoleInfo rolePlayedInfo)
        {
            return this.GetCustomSerializedAttributeInfo(attributeInfo, rolePlayedInfo);
        }
    }
}
